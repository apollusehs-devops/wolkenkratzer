'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.











Resource = Resource;exports.














CustomResource = CustomResource;var _creationpolicy = require('../attributes/creationpolicy');function Resource(name, properties) {if (!name) {throw new SyntaxError(`New Resource is invalid. A Name is required.`);}if (properties) {_validateProperties(properties, this.name, this.json);}return { kind: 'Resource', Name: name, Type: this.json.Resources[this.name].Name, Properties: properties };}function CustomResource(name, properties) {
  if (!name) {
    throw new SyntaxError(`New Resource is invalid. A Name is required.`);
  }
  return {
    kind: 'Resource',
    Name: name,
    Type: `Custom::${name}`,
    Properties: properties };

}

function _validateProperties(properties, rType, model) {
  //Check if keys other than the defined ones are present
  Object.keys(properties).map(p => {
    if (!model.Resources[rType].Properties[p]) {
      throw new SyntaxError(`${p} is not a valid attribute of ${rType}`);
    }
  });
  // Check if all of the required keys are present
  Object.keys(model.Resources[rType].Properties).map(p => {
    if (model.Resources[rType].Properties[p].Required === 'Yes') {
      if (!properties[p]) {
        throw new SyntaxError(
        `${p} is required but is not present in ${rType}`);

      }
    }
    if (model.Resources[rType].Properties[p].Array) {
      if (properties[p] && !Array.isArray(properties[p])) {
        if (
        !properties[p].kind &&
        properties[p].kind !== 'FnGetAtt' &&
        !properties[p]['Fn::GetAtt'])
        {
          throw new SyntaxError(`${p} must be an array in ${rType}`);
        }
      }
    } else {
      if (properties[p] && Array.isArray(properties[p])) {
        throw new SyntaxError(`${p} cannot be an array in ${rType}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbGVtZW50cy9yZXNvdXJjZS5qcyJdLCJuYW1lcyI6WyJSZXNvdXJjZSIsIkN1c3RvbVJlc291cmNlIiwibmFtZSIsInByb3BlcnRpZXMiLCJTeW50YXhFcnJvciIsIl92YWxpZGF0ZVByb3BlcnRpZXMiLCJqc29uIiwia2luZCIsIk5hbWUiLCJUeXBlIiwiUmVzb3VyY2VzIiwiUHJvcGVydGllcyIsInJUeXBlIiwibW9kZWwiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwicCIsIlJlcXVpcmVkIiwiQXJyYXkiLCJpc0FycmF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFZZ0JBLFEsR0FBQUEsUTs7Ozs7Ozs7Ozs7Ozs7O0FBZUFDLGMsR0FBQUEsYyxDQXpCaEIsOERBVU8sU0FBU0QsUUFBVCxDQUFrQkUsSUFBbEIsRUFBZ0NDLFVBQWhDLEVBQThELENBQ25FLElBQUksQ0FBQ0QsSUFBTCxFQUFXLENBQ1QsTUFBTSxJQUFJRSxXQUFKLENBQWlCLDhDQUFqQixDQUFOLENBQ0QsQ0FDRCxJQUFJRCxVQUFKLEVBQWdCLENBQ2RFLG9CQUFvQkYsVUFBcEIsRUFBZ0MsS0FBS0QsSUFBckMsRUFBMkMsS0FBS0ksSUFBaEQsRUFDRCxDQUNELE9BQU8sRUFDTEMsTUFBTSxVQURELEVBRUxDLE1BQU1OLElBRkQsRUFHTE8sTUFBTSxLQUFLSCxJQUFMLENBQVVJLFNBQVYsQ0FBb0IsS0FBS1IsSUFBekIsRUFBK0JNLElBSGhDLEVBSUxHLFlBQVlSLFVBSlAsRUFBUCxDQU1ELENBRU0sU0FBU0YsY0FBVCxDQUF3QkMsSUFBeEIsRUFBc0NDLFVBQXRDLEVBQW9FO0FBQ3pFLE1BQUksQ0FBQ0QsSUFBTCxFQUFXO0FBQ1QsVUFBTSxJQUFJRSxXQUFKLENBQWlCLDhDQUFqQixDQUFOO0FBQ0Q7QUFDRCxTQUFPO0FBQ0xHLFVBQU0sVUFERDtBQUVMQyxVQUFNTixJQUZEO0FBR0xPLFVBQU8sV0FBVVAsSUFBSyxFQUhqQjtBQUlMUyxnQkFBWVIsVUFKUCxFQUFQOztBQU1EOztBQUVELFNBQVNFLG1CQUFULENBQTZCRixVQUE3QixFQUFnRFMsS0FBaEQsRUFBK0RDLEtBQS9ELEVBQTZFO0FBQzNFO0FBQ0FDLFNBQU9DLElBQVAsQ0FBWVosVUFBWixFQUF3QmEsR0FBeEIsQ0FBNEJDLEtBQUs7QUFDL0IsUUFBSSxDQUFDSixNQUFNSCxTQUFOLENBQWdCRSxLQUFoQixFQUF1QkQsVUFBdkIsQ0FBa0NNLENBQWxDLENBQUwsRUFBMkM7QUFDekMsWUFBTSxJQUFJYixXQUFKLENBQWlCLEdBQUVhLENBQUUsZ0NBQStCTCxLQUFNLEVBQTFELENBQU47QUFDRDtBQUNGLEdBSkQ7QUFLQTtBQUNBRSxTQUFPQyxJQUFQLENBQVlGLE1BQU1ILFNBQU4sQ0FBZ0JFLEtBQWhCLEVBQXVCRCxVQUFuQyxFQUErQ0ssR0FBL0MsQ0FBbURDLEtBQUs7QUFDdEQsUUFBSUosTUFBTUgsU0FBTixDQUFnQkUsS0FBaEIsRUFBdUJELFVBQXZCLENBQWtDTSxDQUFsQyxFQUFxQ0MsUUFBckMsS0FBa0QsS0FBdEQsRUFBNkQ7QUFDM0QsVUFBSSxDQUFDZixXQUFXYyxDQUFYLENBQUwsRUFBb0I7QUFDbEIsY0FBTSxJQUFJYixXQUFKO0FBQ0gsV0FBRWEsQ0FBRSxzQ0FBcUNMLEtBQU0sRUFENUMsQ0FBTjs7QUFHRDtBQUNGO0FBQ0QsUUFBSUMsTUFBTUgsU0FBTixDQUFnQkUsS0FBaEIsRUFBdUJELFVBQXZCLENBQWtDTSxDQUFsQyxFQUFxQ0UsS0FBekMsRUFBZ0Q7QUFDOUMsVUFBSWhCLFdBQVdjLENBQVgsS0FBaUIsQ0FBQ0UsTUFBTUMsT0FBTixDQUFjakIsV0FBV2MsQ0FBWCxDQUFkLENBQXRCLEVBQW9EO0FBQ2xEO0FBQ0UsU0FBQ2QsV0FBV2MsQ0FBWCxFQUFjVixJQUFmO0FBQ0FKLG1CQUFXYyxDQUFYLEVBQWNWLElBQWQsS0FBdUIsVUFEdkI7QUFFQSxTQUFDSixXQUFXYyxDQUFYLEVBQWMsWUFBZCxDQUhIO0FBSUU7QUFDQSxnQkFBTSxJQUFJYixXQUFKLENBQWlCLEdBQUVhLENBQUUsd0JBQXVCTCxLQUFNLEVBQWxELENBQU47QUFDRDtBQUNGO0FBQ0YsS0FWRCxNQVVPO0FBQ0wsVUFBSVQsV0FBV2MsQ0FBWCxLQUFpQkUsTUFBTUMsT0FBTixDQUFjakIsV0FBV2MsQ0FBWCxDQUFkLENBQXJCLEVBQW1EO0FBQ2pELGNBQU0sSUFBSWIsV0FBSixDQUFpQixHQUFFYSxDQUFFLDBCQUF5QkwsS0FBTSxFQUFwRCxDQUFOO0FBQ0Q7QUFDRjtBQUNGLEdBdkJEO0FBd0JEIiwiZmlsZSI6InJlc291cmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHsgSUNyZWF0aW9uUG9saWN5IH0gZnJvbSAnLi4vYXR0cmlidXRlcy9jcmVhdGlvbnBvbGljeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlc291cmNlIHtcbiAgK2tpbmQ6ICdSZXNvdXJjZScsXG4gICtOYW1lOiBzdHJpbmcsXG4gICtUeXBlOiBzdHJpbmcsXG4gICtQcm9wZXJ0aWVzOiBtaXhlZCxcbiAgK0NyZWF0aW9uUG9saWN5PzogSUNyZWF0aW9uUG9saWN5XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNvdXJjZShuYW1lOiBzdHJpbmcsIHByb3BlcnRpZXM6IG1peGVkKTogSVJlc291cmNlIHtcbiAgaWYgKCFuYW1lKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBOZXcgUmVzb3VyY2UgaXMgaW52YWxpZC4gQSBOYW1lIGlzIHJlcXVpcmVkLmApO1xuICB9XG4gIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgX3ZhbGlkYXRlUHJvcGVydGllcyhwcm9wZXJ0aWVzLCB0aGlzLm5hbWUsIHRoaXMuanNvbik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBraW5kOiAnUmVzb3VyY2UnLFxuICAgIE5hbWU6IG5hbWUsXG4gICAgVHlwZTogdGhpcy5qc29uLlJlc291cmNlc1t0aGlzLm5hbWVdLk5hbWUsXG4gICAgUHJvcGVydGllczogcHJvcGVydGllc1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3VzdG9tUmVzb3VyY2UobmFtZTogc3RyaW5nLCBwcm9wZXJ0aWVzOiBtaXhlZCk6IElSZXNvdXJjZSB7XG4gIGlmICghbmFtZSkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgTmV3IFJlc291cmNlIGlzIGludmFsaWQuIEEgTmFtZSBpcyByZXF1aXJlZC5gKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGtpbmQ6ICdSZXNvdXJjZScsXG4gICAgTmFtZTogbmFtZSxcbiAgICBUeXBlOiBgQ3VzdG9tOjoke25hbWV9YCxcbiAgICBQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzXG4gIH07XG59XG5cbmZ1bmN0aW9uIF92YWxpZGF0ZVByb3BlcnRpZXMocHJvcGVydGllczogbWl4ZWQsIHJUeXBlOiBzdHJpbmcsIG1vZGVsOiBtaXhlZCkge1xuICAvL0NoZWNrIGlmIGtleXMgb3RoZXIgdGhhbiB0aGUgZGVmaW5lZCBvbmVzIGFyZSBwcmVzZW50XG4gIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLm1hcChwID0+IHtcbiAgICBpZiAoIW1vZGVsLlJlc291cmNlc1tyVHlwZV0uUHJvcGVydGllc1twXSkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGAke3B9IGlzIG5vdCBhIHZhbGlkIGF0dHJpYnV0ZSBvZiAke3JUeXBlfWApO1xuICAgIH1cbiAgfSk7XG4gIC8vIENoZWNrIGlmIGFsbCBvZiB0aGUgcmVxdWlyZWQga2V5cyBhcmUgcHJlc2VudFxuICBPYmplY3Qua2V5cyhtb2RlbC5SZXNvdXJjZXNbclR5cGVdLlByb3BlcnRpZXMpLm1hcChwID0+IHtcbiAgICBpZiAobW9kZWwuUmVzb3VyY2VzW3JUeXBlXS5Qcm9wZXJ0aWVzW3BdLlJlcXVpcmVkID09PSAnWWVzJykge1xuICAgICAgaWYgKCFwcm9wZXJ0aWVzW3BdKSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcbiAgICAgICAgICBgJHtwfSBpcyByZXF1aXJlZCBidXQgaXMgbm90IHByZXNlbnQgaW4gJHtyVHlwZX1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtb2RlbC5SZXNvdXJjZXNbclR5cGVdLlByb3BlcnRpZXNbcF0uQXJyYXkpIHtcbiAgICAgIGlmIChwcm9wZXJ0aWVzW3BdICYmICFBcnJheS5pc0FycmF5KHByb3BlcnRpZXNbcF0pKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhcHJvcGVydGllc1twXS5raW5kICYmXG4gICAgICAgICAgcHJvcGVydGllc1twXS5raW5kICE9PSAnRm5HZXRBdHQnICYmXG4gICAgICAgICAgIXByb3BlcnRpZXNbcF1bJ0ZuOjpHZXRBdHQnXVxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYCR7cH0gbXVzdCBiZSBhbiBhcnJheSBpbiAke3JUeXBlfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wZXJ0aWVzW3BdICYmIEFycmF5LmlzQXJyYXkocHJvcGVydGllc1twXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGAke3B9IGNhbm5vdCBiZSBhbiBhcnJheSBpbiAke3JUeXBlfWApO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iXX0=