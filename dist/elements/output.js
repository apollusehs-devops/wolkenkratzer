'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.


















Output = Output;var _intrinsic = require('../intrinsic');var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function Output(name, properties) {
  if (!name || !properties || !properties.Value) {
    throw new SyntaxError(
    `New Output with ${JSON.stringify({
      name,
      properties })
    } parameters is invalid. Name and Value are required.`);

  }
  const newProps = _lodash2.default.cloneDeep(properties);
  // If Value is a Ref object, create a Ref object
  if (typeof newProps.Value === 'object' && !newProps.Value.kind) {
    if (newProps.Value.Ref) {
      newProps.Value = (0, _intrinsic.Ref)(newProps.Value.Ref);
    } else if (newProps.Value['Fn::Join']) {
      newProps.Value = (0, _intrinsic.FnJoin)(
      newProps.Value['Fn::Join'][0],
      newProps.Value['Fn::Join'][1]);

    }
  }
  // If Export Name is Intrinsic, create an Intrinsic object
  if (
  newProps.Export &&
  newProps.Export.Name &&
  typeof newProps.Export.Name === 'object' &&
  newProps.Export.Name['Fn::Sub'] &&
  !newProps.Export.Name.kind)
  {
    newProps.Export.Name = (0, _intrinsic.FnSub)(newProps.Export.Name['Fn::Sub']);
  }
  return { kind: 'Output', Name: name, Properties: newProps };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbGVtZW50cy9vdXRwdXQuanMiXSwibmFtZXMiOlsiT3V0cHV0IiwibmFtZSIsInByb3BlcnRpZXMiLCJWYWx1ZSIsIlN5bnRheEVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5ld1Byb3BzIiwiY2xvbmVEZWVwIiwia2luZCIsIlJlZiIsIkV4cG9ydCIsIk5hbWUiLCJQcm9wZXJ0aWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJnQkEsTSxHQUFBQSxNLENBakJoQix5Q0FDQSxnQyw0SUFnQk8sU0FBU0EsTUFBVCxDQUFnQkMsSUFBaEIsRUFBOEJDLFVBQTlCLEVBQXNFO0FBQzNFLE1BQUksQ0FBQ0QsSUFBRCxJQUFTLENBQUNDLFVBQVYsSUFBd0IsQ0FBQ0EsV0FBV0MsS0FBeEMsRUFBK0M7QUFDN0MsVUFBTSxJQUFJQyxXQUFKO0FBQ0gsdUJBQWtCQyxLQUFLQyxTQUFMLENBQWU7QUFDaENMLFVBRGdDO0FBRWhDQyxnQkFGZ0MsRUFBZjtBQUdoQiwwREFKQyxDQUFOOztBQU1EO0FBQ0QsUUFBTUssV0FBVyxpQkFBRUMsU0FBRixDQUFZTixVQUFaLENBQWpCO0FBQ0E7QUFDQSxNQUFJLE9BQU9LLFNBQVNKLEtBQWhCLEtBQTBCLFFBQTFCLElBQXNDLENBQUNJLFNBQVNKLEtBQVQsQ0FBZU0sSUFBMUQsRUFBZ0U7QUFDOUQsUUFBSUYsU0FBU0osS0FBVCxDQUFlTyxHQUFuQixFQUF3QjtBQUN0QkgsZUFBU0osS0FBVCxHQUFpQixvQkFBSUksU0FBU0osS0FBVCxDQUFlTyxHQUFuQixDQUFqQjtBQUNELEtBRkQsTUFFTyxJQUFJSCxTQUFTSixLQUFULENBQWUsVUFBZixDQUFKLEVBQWdDO0FBQ3JDSSxlQUFTSixLQUFULEdBQWlCO0FBQ2ZJLGVBQVNKLEtBQVQsQ0FBZSxVQUFmLEVBQTJCLENBQTNCLENBRGU7QUFFZkksZUFBU0osS0FBVCxDQUFlLFVBQWYsRUFBMkIsQ0FBM0IsQ0FGZSxDQUFqQjs7QUFJRDtBQUNGO0FBQ0Q7QUFDQTtBQUNFSSxXQUFTSSxNQUFUO0FBQ0FKLFdBQVNJLE1BQVQsQ0FBZ0JDLElBRGhCO0FBRUEsU0FBT0wsU0FBU0ksTUFBVCxDQUFnQkMsSUFBdkIsS0FBZ0MsUUFGaEM7QUFHQUwsV0FBU0ksTUFBVCxDQUFnQkMsSUFBaEIsQ0FBcUIsU0FBckIsQ0FIQTtBQUlBLEdBQUNMLFNBQVNJLE1BQVQsQ0FBZ0JDLElBQWhCLENBQXFCSCxJQUx4QjtBQU1FO0FBQ0FGLGFBQVNJLE1BQVQsQ0FBZ0JDLElBQWhCLEdBQXVCLHNCQUFNTCxTQUFTSSxNQUFULENBQWdCQyxJQUFoQixDQUFxQixTQUFyQixDQUFOLENBQXZCO0FBQ0Q7QUFDRCxTQUFPLEVBQUVILE1BQU0sUUFBUixFQUFrQkcsTUFBTVgsSUFBeEIsRUFBOEJZLFlBQVlOLFFBQTFDLEVBQVA7QUFDRCIsImZpbGUiOiJvdXRwdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgeyBJUmVmLCBSZWYsIEZuU3ViLCBGbkpvaW4sIElGbkdldEF0dCB9IGZyb20gJy4uL2ludHJpbnNpYyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElPdXRwdXRQcm9wZXJ0aWVzIHtcbiAgK0Rlc2NyaXB0aW9uPzogc3RyaW5nLFxuICArVmFsdWU6IElSZWYgfCBzdHJpbmcsXG4gICtFeHBvcnQ/OiB7XG4gICAgTmFtZTogc3RyaW5nXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IHtcbiAgK2tpbmQ6ICdPdXRwdXQnLFxuICArTmFtZTogc3RyaW5nLFxuICArUHJvcGVydGllczogSU91dHB1dFByb3BlcnRpZXNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE91dHB1dChuYW1lOiBzdHJpbmcsIHByb3BlcnRpZXM6IElPdXRwdXRQcm9wZXJ0aWVzKTogSU91dHB1dCB7XG4gIGlmICghbmFtZSB8fCAhcHJvcGVydGllcyB8fCAhcHJvcGVydGllcy5WYWx1ZSkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcbiAgICAgIGBOZXcgT3V0cHV0IHdpdGggJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHByb3BlcnRpZXNcbiAgICAgIH0pfSBwYXJhbWV0ZXJzIGlzIGludmFsaWQuIE5hbWUgYW5kIFZhbHVlIGFyZSByZXF1aXJlZC5gXG4gICAgKTtcbiAgfVxuICBjb25zdCBuZXdQcm9wcyA9IF8uY2xvbmVEZWVwKHByb3BlcnRpZXMpO1xuICAvLyBJZiBWYWx1ZSBpcyBhIFJlZiBvYmplY3QsIGNyZWF0ZSBhIFJlZiBvYmplY3RcbiAgaWYgKHR5cGVvZiBuZXdQcm9wcy5WYWx1ZSA9PT0gJ29iamVjdCcgJiYgIW5ld1Byb3BzLlZhbHVlLmtpbmQpIHtcbiAgICBpZiAobmV3UHJvcHMuVmFsdWUuUmVmKSB7XG4gICAgICBuZXdQcm9wcy5WYWx1ZSA9IFJlZihuZXdQcm9wcy5WYWx1ZS5SZWYpO1xuICAgIH0gZWxzZSBpZiAobmV3UHJvcHMuVmFsdWVbJ0ZuOjpKb2luJ10pIHtcbiAgICAgIG5ld1Byb3BzLlZhbHVlID0gRm5Kb2luKFxuICAgICAgICBuZXdQcm9wcy5WYWx1ZVsnRm46OkpvaW4nXVswXSxcbiAgICAgICAgbmV3UHJvcHMuVmFsdWVbJ0ZuOjpKb2luJ11bMV1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIElmIEV4cG9ydCBOYW1lIGlzIEludHJpbnNpYywgY3JlYXRlIGFuIEludHJpbnNpYyBvYmplY3RcbiAgaWYgKFxuICAgIG5ld1Byb3BzLkV4cG9ydCAmJlxuICAgIG5ld1Byb3BzLkV4cG9ydC5OYW1lICYmXG4gICAgdHlwZW9mIG5ld1Byb3BzLkV4cG9ydC5OYW1lID09PSAnb2JqZWN0JyAmJlxuICAgIG5ld1Byb3BzLkV4cG9ydC5OYW1lWydGbjo6U3ViJ10gJiZcbiAgICAhbmV3UHJvcHMuRXhwb3J0Lk5hbWUua2luZFxuICApIHtcbiAgICBuZXdQcm9wcy5FeHBvcnQuTmFtZSA9IEZuU3ViKG5ld1Byb3BzLkV4cG9ydC5OYW1lWydGbjo6U3ViJ10pO1xuICB9XG4gIHJldHVybiB7IGtpbmQ6ICdPdXRwdXQnLCBOYW1lOiBuYW1lLCBQcm9wZXJ0aWVzOiBuZXdQcm9wcyB9O1xufVxuIl19