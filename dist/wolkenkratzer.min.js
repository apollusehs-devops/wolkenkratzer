(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["wolkenkratzer"] = factory();
	else
		root["wolkenkratzer"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 16);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.










Ref = Ref;exports.












FnGetAtt = FnGetAtt;exports.













FnJoin = FnJoin;exports.
















FnEquals = FnEquals;exports.






































FnSub = FnSub;exports.








FnBase64 = FnBase64;exports.








FnFindInMap = FnFindInMap;exports.















FnGetAZs = FnGetAZs;exports.











FnSelect = FnSelect;exports.



buildIntrinsic = buildIntrinsic;var _resource = __webpack_require__(1);var _parameter = __webpack_require__(4);var _template = __webpack_require__(8);function Ref(target) {if (typeof target === 'string') {return { kind: 'Ref', Ref: target };} else {return { kind: 'Ref', Ref: target.Name };}}function FnGetAtt(target, attr) {if (typeof target === 'string') {return { kind: 'FnGetAtt', FnGetAtt: [target, attr] };} else {return { kind: 'FnGetAtt', FnGetAtt: [target.Name, attr] };}}function FnJoin(delimiter, values) {return { kind: 'FnJoin', Delimiter: delimiter, Values: values };}function FnEquals(one, two) {return { kind: 'FnEquals', FnEquals: [one, two] };} // export IIntrinsic = IRef | IFnGetAtt | IFnAnd | IFnEquals | IFnIf | IFnNot | IFnOr;
function FnSub(input) {return { kind: 'FnSub', FnSub: input };}function FnBase64(input) {return { kind: 'FnBase64', FnBase64: input };}function FnFindInMap(mapName, topLevelKey, secondLevelKey) {return { kind: 'FnFindInMap', 'Fn::FindInMap': [this.mapName, this.topLevelKey, this.secondLevelKey] };}function FnGetAZs(region) {if (!region) {region = { Ref: 'AWS::Region' };}return { kind: 'FnGetAZs', FnGetAZs: region };}function FnSelect(index, list) {return { kind: 'FnSelect', FnSelect: [index, list] };}function buildIntrinsic(input) {if (input['Fn::Equals']) {
    return FnEquals(
    buildIntrinsic(input['Fn::Equals'][0]),
    buildIntrinsic(input['Fn::Equals'][1]));

  } else if (input.Ref) {
    return Ref(input.Ref);
  } else {
    return input;
  }
}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.











Resource = Resource;exports.














CustomResource = CustomResource;var _creationpolicy = __webpack_require__(5);function Resource(name, properties) {if (!name) {throw new SyntaxError(`New Resource is invalid. A Name is required.`);}if (properties) {_validateProperties(properties, this.name, this.json);}return { kind: 'Resource', Name: name, Type: this.json.Resources[this.name].Name, Properties: properties };}function CustomResource(name, properties) {
  if (!name) {
    throw new SyntaxError('New Resource is invalid. A Name is required.');
  }
  return {
    kind: 'Resource',
    Name: name,
    Type: `Custom::${name}`,
    Properties: properties };

}

function _validateProperties(properties, rType, model) {
  //Check if keys other than the defined ones are present
  Object.keys(properties).map(p => {
    if (!model.Resources[rType].Properties[p]) {
      throw new SyntaxError(`${p} is not a valid attribute of ${rType}`);
    }
  });
  // Check if all of the required keys are present
  Object.keys(model.Resources[rType].Properties).map(p => {
    if (model.Resources[rType].Properties[p].Required === 'Yes') {
      if (!properties[p]) {
        throw new SyntaxError(
        `${p} is required but is not present in ${rType}`);

      }
    }
    if (model.Resources[rType].Properties[p].Array) {
      if (properties[p] && !Array.isArray(properties[p])) {
        if (
        !properties[p].kind &&
        properties[p].kind !== 'FnGetAtt' &&
        !properties[p]['Fn::GetAtt'])
        {
          throw new SyntaxError(`${p} must be an array in ${rType}`);
        }
      }
    } else {
      if (properties[p] && Array.isArray(properties[p])) {
        throw new SyntaxError(`${p} cannot be an array in ${rType}`);
      }
    }
  });
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function(){

/** Used as a safe reference for `undefined` in pre-ES5 environments. */
var undefined;

/** Used as the semantic version number. */
var VERSION='4.17.4';

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE=200;

/** Error message constants. */
var CORE_ERROR_TEXT='Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
FUNC_ERROR_TEXT='Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED='__lodash_hash_undefined__';

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE=500;

/** Used as the internal argument placeholder. */
var PLACEHOLDER='__lodash_placeholder__';

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG=1,
CLONE_FLAT_FLAG=2,
CLONE_SYMBOLS_FLAG=4;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG=1,
COMPARE_UNORDERED_FLAG=2;

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG=1,
WRAP_BIND_KEY_FLAG=2,
WRAP_CURRY_BOUND_FLAG=4,
WRAP_CURRY_FLAG=8,
WRAP_CURRY_RIGHT_FLAG=16,
WRAP_PARTIAL_FLAG=32,
WRAP_PARTIAL_RIGHT_FLAG=64,
WRAP_ARY_FLAG=128,
WRAP_REARG_FLAG=256,
WRAP_FLIP_FLAG=512;

/** Used as default options for `_.truncate`. */
var DEFAULT_TRUNC_LENGTH=30,
DEFAULT_TRUNC_OMISSION='...';

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT=800,
HOT_SPAN=16;

/** Used to indicate the type of lazy iteratees. */
var LAZY_FILTER_FLAG=1,
LAZY_MAP_FLAG=2,
LAZY_WHILE_FLAG=3;

/** Used as references for various `Number` constants. */
var INFINITY=1/0,
MAX_SAFE_INTEGER=9007199254740991,
MAX_INTEGER=1.7976931348623157e+308,
NAN=0/0;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH=4294967295,
MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH-1,
HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH>>>1;

/** Used to associate wrap methods with their bit flags. */
var wrapFlags=[
['ary',WRAP_ARY_FLAG],
['bind',WRAP_BIND_FLAG],
['bindKey',WRAP_BIND_KEY_FLAG],
['curry',WRAP_CURRY_FLAG],
['curryRight',WRAP_CURRY_RIGHT_FLAG],
['flip',WRAP_FLIP_FLAG],
['partial',WRAP_PARTIAL_FLAG],
['partialRight',WRAP_PARTIAL_RIGHT_FLAG],
['rearg',WRAP_REARG_FLAG]];


/** `Object#toString` result references. */
var argsTag='[object Arguments]',
arrayTag='[object Array]',
asyncTag='[object AsyncFunction]',
boolTag='[object Boolean]',
dateTag='[object Date]',
domExcTag='[object DOMException]',
errorTag='[object Error]',
funcTag='[object Function]',
genTag='[object GeneratorFunction]',
mapTag='[object Map]',
numberTag='[object Number]',
nullTag='[object Null]',
objectTag='[object Object]',
promiseTag='[object Promise]',
proxyTag='[object Proxy]',
regexpTag='[object RegExp]',
setTag='[object Set]',
stringTag='[object String]',
symbolTag='[object Symbol]',
undefinedTag='[object Undefined]',
weakMapTag='[object WeakMap]',
weakSetTag='[object WeakSet]';

var arrayBufferTag='[object ArrayBuffer]',
dataViewTag='[object DataView]',
float32Tag='[object Float32Array]',
float64Tag='[object Float64Array]',
int8Tag='[object Int8Array]',
int16Tag='[object Int16Array]',
int32Tag='[object Int32Array]',
uint8Tag='[object Uint8Array]',
uint8ClampedTag='[object Uint8ClampedArray]',
uint16Tag='[object Uint16Array]',
uint32Tag='[object Uint32Array]';

/** Used to match empty string literals in compiled template source. */
var reEmptyStringLeading=/\b__p \+= '';/g,
reEmptyStringMiddle=/\b(__p \+=) '' \+/g,
reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;

/** Used to match HTML entities and HTML characters. */
var reEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,
reUnescapedHtml=/[&<>"']/g,
reHasEscapedHtml=RegExp(reEscapedHtml.source),
reHasUnescapedHtml=RegExp(reUnescapedHtml.source);

/** Used to match template delimiters. */
var reEscape=/<%-([\s\S]+?)%>/g,
reEvaluate=/<%([\s\S]+?)%>/g,
reInterpolate=/<%=([\s\S]+?)%>/g;

/** Used to match property names within property paths. */
var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
reIsPlainProp=/^\w*$/,
reLeadingDot=/^\./,
rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,
reHasRegExpChar=RegExp(reRegExpChar.source);

/** Used to match leading and trailing whitespace. */
var reTrim=/^\s+|\s+$/g,
reTrimStart=/^\s+/,
reTrimEnd=/\s+$/;

/** Used to match wrap detail comments. */
var reWrapComment=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
reWrapDetails=/\{\n\/\* \[wrapped with (.+)\] \*/,
reSplitDetails=/,? & /;

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/** Used to match backslashes in property paths. */
var reEscapeChar=/\\(\\)?/g;

/**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags=/\w*$/;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary=/^0b[01]+$/i;

/** Used to detect host constructors (Safari). */
var reIsHostCtor=/^\[object .+?Constructor\]$/;

/** Used to detect octal string values. */
var reIsOctal=/^0o[0-7]+$/i;

/** Used to detect unsigned integer values. */
var reIsUint=/^(?:0|[1-9]\d*)$/;

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to ensure capturing order of template delimiters. */
var reNoMatch=/($^)/;

/** Used to match unescaped characters in compiled string literals. */
var reUnescapedString=/['\n\r\u2028\u2029\\]/g;

/** Used to compose unicode character classes. */
var rsAstralRange='\\ud800-\\udfff',
rsComboMarksRange='\\u0300-\\u036f',
reComboHalfMarksRange='\\ufe20-\\ufe2f',
rsComboSymbolsRange='\\u20d0-\\u20ff',
rsComboRange=rsComboMarksRange+reComboHalfMarksRange+rsComboSymbolsRange,
rsDingbatRange='\\u2700-\\u27bf',
rsLowerRange='a-z\\xdf-\\xf6\\xf8-\\xff',
rsMathOpRange='\\xac\\xb1\\xd7\\xf7',
rsNonCharRange='\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
rsPunctuationRange='\\u2000-\\u206f',
rsSpaceRange=' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
rsUpperRange='A-Z\\xc0-\\xd6\\xd8-\\xde',
rsVarRange='\\ufe0e\\ufe0f',
rsBreakRange=rsMathOpRange+rsNonCharRange+rsPunctuationRange+rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos="['\u2019]",
rsAstral='['+rsAstralRange+']',
rsBreak='['+rsBreakRange+']',
rsCombo='['+rsComboRange+']',
rsDigits='\\d+',
rsDingbat='['+rsDingbatRange+']',
rsLower='['+rsLowerRange+']',
rsMisc='[^'+rsAstralRange+rsBreakRange+rsDigits+rsDingbatRange+rsLowerRange+rsUpperRange+']',
rsFitz='\\ud83c[\\udffb-\\udfff]',
rsModifier='(?:'+rsCombo+'|'+rsFitz+')',
rsNonAstral='[^'+rsAstralRange+']',
rsRegional='(?:\\ud83c[\\udde6-\\uddff]){2}',
rsSurrPair='[\\ud800-\\udbff][\\udc00-\\udfff]',
rsUpper='['+rsUpperRange+']',
rsZWJ='\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower='(?:'+rsLower+'|'+rsMisc+')',
rsMiscUpper='(?:'+rsUpper+'|'+rsMisc+')',
rsOptContrLower='(?:'+rsApos+'(?:d|ll|m|re|s|t|ve))?',
rsOptContrUpper='(?:'+rsApos+'(?:D|LL|M|RE|S|T|VE))?',
reOptMod=rsModifier+'?',
rsOptVar='['+rsVarRange+']?',
rsOptJoin='(?:'+rsZWJ+'(?:'+[rsNonAstral,rsRegional,rsSurrPair].join('|')+')'+rsOptVar+reOptMod+')*',
rsOrdLower='\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
rsOrdUpper='\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
rsSeq=rsOptVar+reOptMod+rsOptJoin,
rsEmoji='(?:'+[rsDingbat,rsRegional,rsSurrPair].join('|')+')'+rsSeq,
rsSymbol='(?:'+[rsNonAstral+rsCombo+'?',rsCombo,rsRegional,rsSurrPair,rsAstral].join('|')+')';

/** Used to match apostrophes. */
var reApos=RegExp(rsApos,'g');

/**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
var reComboMark=RegExp(rsCombo,'g');

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode=RegExp(rsFitz+'(?='+rsFitz+')|'+rsSymbol+rsSeq,'g');

/** Used to match complex or compound words. */
var reUnicodeWord=RegExp([
rsUpper+'?'+rsLower+'+'+rsOptContrLower+'(?='+[rsBreak,rsUpper,'$'].join('|')+')',
rsMiscUpper+'+'+rsOptContrUpper+'(?='+[rsBreak,rsUpper+rsMiscLower,'$'].join('|')+')',
rsUpper+'?'+rsMiscLower+'+'+rsOptContrLower,
rsUpper+'+'+rsOptContrUpper,
rsOrdUpper,
rsOrdLower,
rsDigits,
rsEmoji].
join('|'),'g');

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode=RegExp('['+rsZWJ+rsAstralRange+rsComboRange+rsVarRange+']');

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/** Used to assign default `context` object properties. */
var contextProps=[
'Array','Buffer','DataView','Date','Error','Float32Array','Float64Array',
'Function','Int8Array','Int16Array','Int32Array','Map','Math','Object',
'Promise','RegExp','Set','String','Symbol','TypeError','Uint8Array',
'Uint8ClampedArray','Uint16Array','Uint32Array','WeakMap',
'_','clearTimeout','isFinite','parseInt','setTimeout'];


/** Used to make template sourceURLs easier to identify. */
var templateCounter=-1;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags={};
typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=
typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=
typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=
typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=
typedArrayTags[uint32Tag]=true;
typedArrayTags[argsTag]=typedArrayTags[arrayTag]=
typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=
typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=
typedArrayTags[errorTag]=typedArrayTags[funcTag]=
typedArrayTags[mapTag]=typedArrayTags[numberTag]=
typedArrayTags[objectTag]=typedArrayTags[regexpTag]=
typedArrayTags[setTag]=typedArrayTags[stringTag]=
typedArrayTags[weakMapTag]=false;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags={};
cloneableTags[argsTag]=cloneableTags[arrayTag]=
cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=
cloneableTags[boolTag]=cloneableTags[dateTag]=
cloneableTags[float32Tag]=cloneableTags[float64Tag]=
cloneableTags[int8Tag]=cloneableTags[int16Tag]=
cloneableTags[int32Tag]=cloneableTags[mapTag]=
cloneableTags[numberTag]=cloneableTags[objectTag]=
cloneableTags[regexpTag]=cloneableTags[setTag]=
cloneableTags[stringTag]=cloneableTags[symbolTag]=
cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=
cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;
cloneableTags[errorTag]=cloneableTags[funcTag]=
cloneableTags[weakMapTag]=false;

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters={
// Latin-1 Supplement block.
'\xc0':'A','\xc1':'A','\xc2':'A','\xc3':'A','\xc4':'A','\xc5':'A',
'\xe0':'a','\xe1':'a','\xe2':'a','\xe3':'a','\xe4':'a','\xe5':'a',
'\xc7':'C','\xe7':'c',
'\xd0':'D','\xf0':'d',
'\xc8':'E','\xc9':'E','\xca':'E','\xcb':'E',
'\xe8':'e','\xe9':'e','\xea':'e','\xeb':'e',
'\xcc':'I','\xcd':'I','\xce':'I','\xcf':'I',
'\xec':'i','\xed':'i','\xee':'i','\xef':'i',
'\xd1':'N','\xf1':'n',
'\xd2':'O','\xd3':'O','\xd4':'O','\xd5':'O','\xd6':'O','\xd8':'O',
'\xf2':'o','\xf3':'o','\xf4':'o','\xf5':'o','\xf6':'o','\xf8':'o',
'\xd9':'U','\xda':'U','\xdb':'U','\xdc':'U',
'\xf9':'u','\xfa':'u','\xfb':'u','\xfc':'u',
'\xdd':'Y','\xfd':'y','\xff':'y',
'\xc6':'Ae','\xe6':'ae',
'\xde':'Th','\xfe':'th',
'\xdf':'ss',
// Latin Extended-A block.
'\u0100':'A','\u0102':'A','\u0104':'A',
'\u0101':'a','\u0103':'a','\u0105':'a',
'\u0106':'C','\u0108':'C','\u010a':'C','\u010c':'C',
'\u0107':'c','\u0109':'c','\u010b':'c','\u010d':'c',
'\u010e':'D','\u0110':'D','\u010f':'d','\u0111':'d',
'\u0112':'E','\u0114':'E','\u0116':'E','\u0118':'E','\u011a':'E',
'\u0113':'e','\u0115':'e','\u0117':'e','\u0119':'e','\u011b':'e',
'\u011c':'G','\u011e':'G','\u0120':'G','\u0122':'G',
'\u011d':'g','\u011f':'g','\u0121':'g','\u0123':'g',
'\u0124':'H','\u0126':'H','\u0125':'h','\u0127':'h',
'\u0128':'I','\u012a':'I','\u012c':'I','\u012e':'I','\u0130':'I',
'\u0129':'i','\u012b':'i','\u012d':'i','\u012f':'i','\u0131':'i',
'\u0134':'J','\u0135':'j',
'\u0136':'K','\u0137':'k','\u0138':'k',
'\u0139':'L','\u013b':'L','\u013d':'L','\u013f':'L','\u0141':'L',
'\u013a':'l','\u013c':'l','\u013e':'l','\u0140':'l','\u0142':'l',
'\u0143':'N','\u0145':'N','\u0147':'N','\u014a':'N',
'\u0144':'n','\u0146':'n','\u0148':'n','\u014b':'n',
'\u014c':'O','\u014e':'O','\u0150':'O',
'\u014d':'o','\u014f':'o','\u0151':'o',
'\u0154':'R','\u0156':'R','\u0158':'R',
'\u0155':'r','\u0157':'r','\u0159':'r',
'\u015a':'S','\u015c':'S','\u015e':'S','\u0160':'S',
'\u015b':'s','\u015d':'s','\u015f':'s','\u0161':'s',
'\u0162':'T','\u0164':'T','\u0166':'T',
'\u0163':'t','\u0165':'t','\u0167':'t',
'\u0168':'U','\u016a':'U','\u016c':'U','\u016e':'U','\u0170':'U','\u0172':'U',
'\u0169':'u','\u016b':'u','\u016d':'u','\u016f':'u','\u0171':'u','\u0173':'u',
'\u0174':'W','\u0175':'w',
'\u0176':'Y','\u0177':'y','\u0178':'Y',
'\u0179':'Z','\u017b':'Z','\u017d':'Z',
'\u017a':'z','\u017c':'z','\u017e':'z',
'\u0132':'IJ','\u0133':'ij',
'\u0152':'Oe','\u0153':'oe',
'\u0149':"'n",'\u017f':'s'};


/** Used to map characters to HTML entities. */
var htmlEscapes={
'&':'&amp;',
'<':'&lt;',
'>':'&gt;',
'"':'&quot;',
"'":'&#39;'};


/** Used to map HTML entities to characters. */
var htmlUnescapes={
'&amp;':'&',
'&lt;':'<',
'&gt;':'>',
'&quot;':'"',
'&#39;':"'"};


/** Used to escape characters for inclusion in compiled string literals. */
var stringEscapes={
'\\':'\\',
"'":"'",
'\n':'n',
'\r':'r',
'\u2028':'u2028',
'\u2029':'u2029'};


/** Built-in method references without a dependency on `root`. */
var freeParseFloat=parseFloat,
freeParseInt=parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;

/** Detect free variable `self`. */
var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;

/** Used as a reference to the global object. */
var root=freeGlobal||freeSelf||Function('return this')();

/** Detect free variable `exports`. */
var freeExports=typeof exports=='object'&&exports&&!exports.nodeType&&exports;

/** Detect free variable `module`. */
var freeModule=freeExports&&typeof module=='object'&&module&&!module.nodeType&&module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports=freeModule&&freeModule.exports===freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess=moduleExports&&freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil=function(){
try{
return freeProcess&&freeProcess.binding&&freeProcess.binding('util');
}catch(e){}
}();

/* Node.js helper references. */
var nodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,
nodeIsDate=nodeUtil&&nodeUtil.isDate,
nodeIsMap=nodeUtil&&nodeUtil.isMap,
nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,
nodeIsSet=nodeUtil&&nodeUtil.isSet,
nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;

/*--------------------------------------------------------------------------*/

/**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
function addMapEntry(map,pair){
// Don't return `map.set` because it's not chainable in IE 11.
map.set(pair[0],pair[1]);
return map;
}

/**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
function addSetEntry(set,value){
// Don't return `set.add` because it's not chainable in IE 11.
set.add(value);
return set;
}

/**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
function apply(func,thisArg,args){
switch(args.length){
case 0:return func.call(thisArg);
case 1:return func.call(thisArg,args[0]);
case 2:return func.call(thisArg,args[0],args[1]);
case 3:return func.call(thisArg,args[0],args[1],args[2]);}

return func.apply(thisArg,args);
}

/**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
function arrayAggregator(array,setter,iteratee,accumulator){
var index=-1,
length=array==null?0:array.length;

while(++index<length){
var value=array[index];
setter(accumulator,value,iteratee(value),array);
}
return accumulator;
}

/**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
function arrayEach(array,iteratee){
var index=-1,
length=array==null?0:array.length;

while(++index<length){
if(iteratee(array[index],index,array)===false){
break;
}
}
return array;
}

/**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
function arrayEachRight(array,iteratee){
var length=array==null?0:array.length;

while(length--){
if(iteratee(array[length],length,array)===false){
break;
}
}
return array;
}

/**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
function arrayEvery(array,predicate){
var index=-1,
length=array==null?0:array.length;

while(++index<length){
if(!predicate(array[index],index,array)){
return false;
}
}
return true;
}

/**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
function arrayFilter(array,predicate){
var index=-1,
length=array==null?0:array.length,
resIndex=0,
result=[];

while(++index<length){
var value=array[index];
if(predicate(value,index,array)){
result[resIndex++]=value;
}
}
return result;
}

/**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
function arrayIncludes(array,value){
var length=array==null?0:array.length;
return!!length&&baseIndexOf(array,value,0)>-1;
}

/**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
function arrayIncludesWith(array,value,comparator){
var index=-1,
length=array==null?0:array.length;

while(++index<length){
if(comparator(value,array[index])){
return true;
}
}
return false;
}

/**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
function arrayMap(array,iteratee){
var index=-1,
length=array==null?0:array.length,
result=Array(length);

while(++index<length){
result[index]=iteratee(array[index],index,array);
}
return result;
}

/**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
function arrayPush(array,values){
var index=-1,
length=values.length,
offset=array.length;

while(++index<length){
array[offset+index]=values[index];
}
return array;
}

/**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
function arrayReduce(array,iteratee,accumulator,initAccum){
var index=-1,
length=array==null?0:array.length;

if(initAccum&&length){
accumulator=array[++index];
}
while(++index<length){
accumulator=iteratee(accumulator,array[index],index,array);
}
return accumulator;
}

/**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
function arrayReduceRight(array,iteratee,accumulator,initAccum){
var length=array==null?0:array.length;
if(initAccum&&length){
accumulator=array[--length];
}
while(length--){
accumulator=iteratee(accumulator,array[length],length,array);
}
return accumulator;
}

/**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
function arraySome(array,predicate){
var index=-1,
length=array==null?0:array.length;

while(++index<length){
if(predicate(array[index],index,array)){
return true;
}
}
return false;
}

/**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
var asciiSize=baseProperty('length');

/**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
function asciiToArray(string){
return string.split('');
}

/**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
function asciiWords(string){
return string.match(reAsciiWord)||[];
}

/**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
function baseFindKey(collection,predicate,eachFunc){
var result;
eachFunc(collection,function(value,key,collection){
if(predicate(value,key,collection)){
result=key;
return false;
}
});
return result;
}

/**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
function baseFindIndex(array,predicate,fromIndex,fromRight){
var length=array.length,
index=fromIndex+(fromRight?1:-1);

while(fromRight?index--:++index<length){
if(predicate(array[index],index,array)){
return index;
}
}
return-1;
}

/**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
function baseIndexOf(array,value,fromIndex){
return value===value?
strictIndexOf(array,value,fromIndex):
baseFindIndex(array,baseIsNaN,fromIndex);
}

/**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
function baseIndexOfWith(array,value,fromIndex,comparator){
var index=fromIndex-1,
length=array.length;

while(++index<length){
if(comparator(array[index],value)){
return index;
}
}
return-1;
}

/**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
function baseIsNaN(value){
return value!==value;
}

/**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
function baseMean(array,iteratee){
var length=array==null?0:array.length;
return length?baseSum(array,iteratee)/length:NAN;
}

/**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
function baseProperty(key){
return function(object){
return object==null?undefined:object[key];
};
}

/**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
function basePropertyOf(object){
return function(key){
return object==null?undefined:object[key];
};
}

/**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){
eachFunc(collection,function(value,index,collection){
accumulator=initAccum?(
initAccum=false,value):
iteratee(accumulator,value,index,collection);
});
return accumulator;
}

/**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
function baseSortBy(array,comparer){
var length=array.length;

array.sort(comparer);
while(length--){
array[length]=array[length].value;
}
return array;
}

/**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
function baseSum(array,iteratee){
var result,
index=-1,
length=array.length;

while(++index<length){
var current=iteratee(array[index]);
if(current!==undefined){
result=result===undefined?current:result+current;
}
}
return result;
}

/**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
function baseTimes(n,iteratee){
var index=-1,
result=Array(n);

while(++index<n){
result[index]=iteratee(index);
}
return result;
}

/**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
function baseToPairs(object,props){
return arrayMap(props,function(key){
return[key,object[key]];
});
}

/**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
function baseUnary(func){
return function(value){
return func(value);
};
}

/**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
function baseValues(object,props){
return arrayMap(props,function(key){
return object[key];
});
}

/**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
function cacheHas(cache,key){
return cache.has(key);
}

/**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
function charsStartIndex(strSymbols,chrSymbols){
var index=-1,
length=strSymbols.length;

while(++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}
return index;
}

/**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
function charsEndIndex(strSymbols,chrSymbols){
var index=strSymbols.length;

while(index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}
return index;
}

/**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
function countHolders(array,placeholder){
var length=array.length,
result=0;

while(length--){
if(array[length]===placeholder){
++result;
}
}
return result;
}

/**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
var deburrLetter=basePropertyOf(deburredLetters);

/**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
var escapeHtmlChar=basePropertyOf(htmlEscapes);

/**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
function escapeStringChar(chr){
return'\\'+stringEscapes[chr];
}

/**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
function getValue(object,key){
return object==null?undefined:object[key];
}

/**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
function hasUnicode(string){
return reHasUnicode.test(string);
}

/**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
function hasUnicodeWord(string){
return reHasUnicodeWord.test(string);
}

/**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
function iteratorToArray(iterator){
var data,
result=[];

while(!(data=iterator.next()).done){
result.push(data.value);
}
return result;
}

/**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
function mapToArray(map){
var index=-1,
result=Array(map.size);

map.forEach(function(value,key){
result[++index]=[key,value];
});
return result;
}

/**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
function overArg(func,transform){
return function(arg){
return func(transform(arg));
};
}

/**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
function replaceHolders(array,placeholder){
var index=-1,
length=array.length,
resIndex=0,
result=[];

while(++index<length){
var value=array[index];
if(value===placeholder||value===PLACEHOLDER){
array[index]=PLACEHOLDER;
result[resIndex++]=index;
}
}
return result;
}

/**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
function setToArray(set){
var index=-1,
result=Array(set.size);

set.forEach(function(value){
result[++index]=value;
});
return result;
}

/**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
function setToPairs(set){
var index=-1,
result=Array(set.size);

set.forEach(function(value){
result[++index]=[value,value];
});
return result;
}

/**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
function strictIndexOf(array,value,fromIndex){
var index=fromIndex-1,
length=array.length;

while(++index<length){
if(array[index]===value){
return index;
}
}
return-1;
}

/**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
function strictLastIndexOf(array,value,fromIndex){
var index=fromIndex+1;
while(index--){
if(array[index]===value){
return index;
}
}
return index;
}

/**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
function stringSize(string){
return hasUnicode(string)?
unicodeSize(string):
asciiSize(string);
}

/**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
function stringToArray(string){
return hasUnicode(string)?
unicodeToArray(string):
asciiToArray(string);
}

/**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
var unescapeHtmlChar=basePropertyOf(htmlUnescapes);

/**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
function unicodeSize(string){
var result=reUnicode.lastIndex=0;
while(reUnicode.test(string)){
++result;
}
return result;
}

/**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
function unicodeToArray(string){
return string.match(reUnicode)||[];
}

/**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
function unicodeWords(string){
return string.match(reUnicodeWord)||[];
}

/*--------------------------------------------------------------------------*/

/**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
var runInContext=function runInContext(context){
context=context==null?root:_.defaults(root.Object(),context,_.pick(root,contextProps));

/** Built-in constructor references. */
var Array=context.Array,
Date=context.Date,
Error=context.Error,
Function=context.Function,
Math=context.Math,
Object=context.Object,
RegExp=context.RegExp,
String=context.String,
TypeError=context.TypeError;

/** Used for built-in method references. */
var arrayProto=Array.prototype,
funcProto=Function.prototype,
objectProto=Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData=context['__core-js_shared__'];

/** Used to resolve the decompiled source of functions. */
var funcToString=funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty=objectProto.hasOwnProperty;

/** Used to generate unique IDs. */
var idCounter=0;

/** Used to detect methods masquerading as native. */
var maskSrcKey=function(){
var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');
return uid?'Symbol(src)_1.'+uid:'';
}();

/**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
var nativeObjectToString=objectProto.toString;

/** Used to infer the `Object` constructor. */
var objectCtorString=funcToString.call(Object);

/** Used to restore the original `_` reference in `_.noConflict`. */
var oldDash=root._;

/** Used to detect if a method is native. */
var reIsNative=RegExp('^'+
funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').
replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');


/** Built-in value references. */
var Buffer=moduleExports?context.Buffer:undefined,
Symbol=context.Symbol,
Uint8Array=context.Uint8Array,
allocUnsafe=Buffer?Buffer.allocUnsafe:undefined,
getPrototype=overArg(Object.getPrototypeOf,Object),
objectCreate=Object.create,
propertyIsEnumerable=objectProto.propertyIsEnumerable,
splice=arrayProto.splice,
spreadableSymbol=Symbol?Symbol.isConcatSpreadable:undefined,
symIterator=Symbol?Symbol.iterator:undefined,
symToStringTag=Symbol?Symbol.toStringTag:undefined;

var defineProperty=function(){
try{
var func=getNative(Object,'defineProperty');
func({},'',{});
return func;
}catch(e){}
}();

/** Mocked built-ins. */
var ctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,
ctxNow=Date&&Date.now!==root.Date.now&&Date.now,
ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil=Math.ceil,
nativeFloor=Math.floor,
nativeGetSymbols=Object.getOwnPropertySymbols,
nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,
nativeIsFinite=context.isFinite,
nativeJoin=arrayProto.join,
nativeKeys=overArg(Object.keys,Object),
nativeMax=Math.max,
nativeMin=Math.min,
nativeNow=Date.now,
nativeParseInt=context.parseInt,
nativeRandom=Math.random,
nativeReverse=arrayProto.reverse;

/* Built-in method references that are verified to be native. */
var DataView=getNative(context,'DataView'),
Map=getNative(context,'Map'),
Promise=getNative(context,'Promise'),
Set=getNative(context,'Set'),
WeakMap=getNative(context,'WeakMap'),
nativeCreate=getNative(Object,'create');

/** Used to store function metadata. */
var metaMap=WeakMap&&new WeakMap();

/** Used to lookup unminified function names. */
var realNames={};

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString=toSource(DataView),
mapCtorString=toSource(Map),
promiseCtorString=toSource(Promise),
setCtorString=toSource(Set),
weakMapCtorString=toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto=Symbol?Symbol.prototype:undefined,
symbolValueOf=symbolProto?symbolProto.valueOf:undefined,
symbolToString=symbolProto?symbolProto.toString:undefined;

/*------------------------------------------------------------------------*/

/**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
function lodash(value){
if(isObjectLike(value)&&!isArray(value)&&!(value instanceof LazyWrapper)){
if(value instanceof LodashWrapper){
return value;
}
if(hasOwnProperty.call(value,'__wrapped__')){
return wrapperClone(value);
}
}
return new LodashWrapper(value);
}

/**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
var baseCreate=function(){
function object(){}
return function(proto){
if(!isObject(proto)){
return{};
}
if(objectCreate){
return objectCreate(proto);
}
object.prototype=proto;
var result=new object();
object.prototype=undefined;
return result;
};
}();

/**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
function baseLodash(){

}// No operation performed.

/**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
function LodashWrapper(value,chainAll){
this.__wrapped__=value;
this.__actions__=[];
this.__chain__=!!chainAll;
this.__index__=0;
this.__values__=undefined;
}

/**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
lodash.templateSettings={

/**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
'escape':reEscape,

/**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
'evaluate':reEvaluate,

/**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
'interpolate':reInterpolate,

/**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
'variable':'',

/**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
'imports':{

/**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
'_':lodash}};



// Ensure wrappers are instances of `baseLodash`.
lodash.prototype=baseLodash.prototype;
lodash.prototype.constructor=lodash;

LodashWrapper.prototype=baseCreate(baseLodash.prototype);
LodashWrapper.prototype.constructor=LodashWrapper;

/*------------------------------------------------------------------------*/

/**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
function LazyWrapper(value){
this.__wrapped__=value;
this.__actions__=[];
this.__dir__=1;
this.__filtered__=false;
this.__iteratees__=[];
this.__takeCount__=MAX_ARRAY_LENGTH;
this.__views__=[];
}

/**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
function lazyClone(){
var result=new LazyWrapper(this.__wrapped__);
result.__actions__=copyArray(this.__actions__);
result.__dir__=this.__dir__;
result.__filtered__=this.__filtered__;
result.__iteratees__=copyArray(this.__iteratees__);
result.__takeCount__=this.__takeCount__;
result.__views__=copyArray(this.__views__);
return result;
}

/**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
function lazyReverse(){
if(this.__filtered__){
var result=new LazyWrapper(this);
result.__dir__=-1;
result.__filtered__=true;
}else{
result=this.clone();
result.__dir__*=-1;
}
return result;
}

/**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
function lazyValue(){
var array=this.__wrapped__.value(),
dir=this.__dir__,
isArr=isArray(array),
isRight=dir<0,
arrLength=isArr?array.length:0,
view=getView(0,arrLength,this.__views__),
start=view.start,
end=view.end,
length=end-start,
index=isRight?end:start-1,
iteratees=this.__iteratees__,
iterLength=iteratees.length,
resIndex=0,
takeCount=nativeMin(length,this.__takeCount__);

if(!isArr||!isRight&&arrLength==length&&takeCount==length){
return baseWrapperValue(array,this.__actions__);
}
var result=[];

outer:
while(length--&&resIndex<takeCount){
index+=dir;

var iterIndex=-1,
value=array[index];

while(++iterIndex<iterLength){
var data=iteratees[iterIndex],
iteratee=data.iteratee,
type=data.type,
computed=iteratee(value);

if(type==LAZY_MAP_FLAG){
value=computed;
}else if(!computed){
if(type==LAZY_FILTER_FLAG){
continue outer;
}else{
break outer;
}
}
}
result[resIndex++]=value;
}
return result;
}

// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype=baseCreate(baseLodash.prototype);
LazyWrapper.prototype.constructor=LazyWrapper;

/*------------------------------------------------------------------------*/

/**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
function Hash(entries){
var index=-1,
length=entries==null?0:entries.length;

this.clear();
while(++index<length){
var entry=entries[index];
this.set(entry[0],entry[1]);
}
}

/**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
function hashClear(){
this.__data__=nativeCreate?nativeCreate(null):{};
this.size=0;
}

/**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
function hashDelete(key){
var result=this.has(key)&&delete this.__data__[key];
this.size-=result?1:0;
return result;
}

/**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
function hashGet(key){
var data=this.__data__;
if(nativeCreate){
var result=data[key];
return result===HASH_UNDEFINED?undefined:result;
}
return hasOwnProperty.call(data,key)?data[key]:undefined;
}

/**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
function hashHas(key){
var data=this.__data__;
return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);
}

/**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
function hashSet(key,value){
var data=this.__data__;
this.size+=this.has(key)?0:1;
data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;
return this;
}

// Add methods to `Hash`.
Hash.prototype.clear=hashClear;
Hash.prototype['delete']=hashDelete;
Hash.prototype.get=hashGet;
Hash.prototype.has=hashHas;
Hash.prototype.set=hashSet;

/*------------------------------------------------------------------------*/

/**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
function ListCache(entries){
var index=-1,
length=entries==null?0:entries.length;

this.clear();
while(++index<length){
var entry=entries[index];
this.set(entry[0],entry[1]);
}
}

/**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
function listCacheClear(){
this.__data__=[];
this.size=0;
}

/**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
function listCacheDelete(key){
var data=this.__data__,
index=assocIndexOf(data,key);

if(index<0){
return false;
}
var lastIndex=data.length-1;
if(index==lastIndex){
data.pop();
}else{
splice.call(data,index,1);
}
--this.size;
return true;
}

/**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
function listCacheGet(key){
var data=this.__data__,
index=assocIndexOf(data,key);

return index<0?undefined:data[index][1];
}

/**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
function listCacheHas(key){
return assocIndexOf(this.__data__,key)>-1;
}

/**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
function listCacheSet(key,value){
var data=this.__data__,
index=assocIndexOf(data,key);

if(index<0){
++this.size;
data.push([key,value]);
}else{
data[index][1]=value;
}
return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear=listCacheClear;
ListCache.prototype['delete']=listCacheDelete;
ListCache.prototype.get=listCacheGet;
ListCache.prototype.has=listCacheHas;
ListCache.prototype.set=listCacheSet;

/*------------------------------------------------------------------------*/

/**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
function MapCache(entries){
var index=-1,
length=entries==null?0:entries.length;

this.clear();
while(++index<length){
var entry=entries[index];
this.set(entry[0],entry[1]);
}
}

/**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
function mapCacheClear(){
this.size=0;
this.__data__={
'hash':new Hash(),
'map':new(Map||ListCache)(),
'string':new Hash()};

}

/**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
function mapCacheDelete(key){
var result=getMapData(this,key)['delete'](key);
this.size-=result?1:0;
return result;
}

/**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
function mapCacheGet(key){
return getMapData(this,key).get(key);
}

/**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
function mapCacheHas(key){
return getMapData(this,key).has(key);
}

/**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
function mapCacheSet(key,value){
var data=getMapData(this,key),
size=data.size;

data.set(key,value);
this.size+=data.size==size?0:1;
return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear=mapCacheClear;
MapCache.prototype['delete']=mapCacheDelete;
MapCache.prototype.get=mapCacheGet;
MapCache.prototype.has=mapCacheHas;
MapCache.prototype.set=mapCacheSet;

/*------------------------------------------------------------------------*/

/**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
function SetCache(values){
var index=-1,
length=values==null?0:values.length;

this.__data__=new MapCache();
while(++index<length){
this.add(values[index]);
}
}

/**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
function setCacheAdd(value){
this.__data__.set(value,HASH_UNDEFINED);
return this;
}

/**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
function setCacheHas(value){
return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;
SetCache.prototype.has=setCacheHas;

/*------------------------------------------------------------------------*/

/**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
function Stack(entries){
var data=this.__data__=new ListCache(entries);
this.size=data.size;
}

/**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
function stackClear(){
this.__data__=new ListCache();
this.size=0;
}

/**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
function stackDelete(key){
var data=this.__data__,
result=data['delete'](key);

this.size=data.size;
return result;
}

/**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
function stackGet(key){
return this.__data__.get(key);
}

/**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
function stackHas(key){
return this.__data__.has(key);
}

/**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
function stackSet(key,value){
var data=this.__data__;
if(data instanceof ListCache){
var pairs=data.__data__;
if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){
pairs.push([key,value]);
this.size=++data.size;
return this;
}
data=this.__data__=new MapCache(pairs);
}
data.set(key,value);
this.size=data.size;
return this;
}

// Add methods to `Stack`.
Stack.prototype.clear=stackClear;
Stack.prototype['delete']=stackDelete;
Stack.prototype.get=stackGet;
Stack.prototype.has=stackHas;
Stack.prototype.set=stackSet;

/*------------------------------------------------------------------------*/

/**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
function arrayLikeKeys(value,inherited){
var isArr=isArray(value),
isArg=!isArr&&isArguments(value),
isBuff=!isArr&&!isArg&&isBuffer(value),
isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),
skipIndexes=isArr||isArg||isBuff||isType,
result=skipIndexes?baseTimes(value.length,String):[],
length=result.length;

for(var key in value){
if((inherited||hasOwnProperty.call(value,key))&&
!(skipIndexes&&(
// Safari 9 has enumerable `arguments.length` in strict mode.
key=='length'||
// Node.js 0.10 has enumerable non-index properties on buffers.
isBuff&&(key=='offset'||key=='parent')||
// PhantomJS 2 has enumerable non-index properties on typed arrays.
isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||
// Skip index properties.
isIndex(key,length))))
{
result.push(key);
}
}
return result;
}

/**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
function arraySample(array){
var length=array.length;
return length?array[baseRandom(0,length-1)]:undefined;
}

/**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
function arraySampleSize(array,n){
return shuffleSelf(copyArray(array),baseClamp(n,0,array.length));
}

/**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
function arrayShuffle(array){
return shuffleSelf(copyArray(array));
}

/**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
function assignMergeValue(object,key,value){
if(value!==undefined&&!eq(object[key],value)||
value===undefined&&!(key in object)){
baseAssignValue(object,key,value);
}
}

/**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
function assignValue(object,key,value){
var objValue=object[key];
if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||
value===undefined&&!(key in object)){
baseAssignValue(object,key,value);
}
}

/**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
function assocIndexOf(array,key){
var length=array.length;
while(length--){
if(eq(array[length][0],key)){
return length;
}
}
return-1;
}

/**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
function baseAggregator(collection,setter,iteratee,accumulator){
baseEach(collection,function(value,key,collection){
setter(accumulator,value,iteratee(value),collection);
});
return accumulator;
}

/**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
function baseAssign(object,source){
return object&&copyObject(source,keys(source),object);
}

/**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
function baseAssignIn(object,source){
return object&&copyObject(source,keysIn(source),object);
}

/**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
function baseAssignValue(object,key,value){
if(key=='__proto__'&&defineProperty){
defineProperty(object,key,{
'configurable':true,
'enumerable':true,
'value':value,
'writable':true});

}else{
object[key]=value;
}
}

/**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
function baseAt(object,paths){
var index=-1,
length=paths.length,
result=Array(length),
skip=object==null;

while(++index<length){
result[index]=skip?undefined:get(object,paths[index]);
}
return result;
}

/**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
function baseClamp(number,lower,upper){
if(number===number){
if(upper!==undefined){
number=number<=upper?number:upper;
}
if(lower!==undefined){
number=number>=lower?number:lower;
}
}
return number;
}

/**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
function baseClone(value,bitmask,customizer,key,object,stack){
var result,
isDeep=bitmask&CLONE_DEEP_FLAG,
isFlat=bitmask&CLONE_FLAT_FLAG,
isFull=bitmask&CLONE_SYMBOLS_FLAG;

if(customizer){
result=object?customizer(value,key,object,stack):customizer(value);
}
if(result!==undefined){
return result;
}
if(!isObject(value)){
return value;
}
var isArr=isArray(value);
if(isArr){
result=initCloneArray(value);
if(!isDeep){
return copyArray(value,result);
}
}else{
var tag=getTag(value),
isFunc=tag==funcTag||tag==genTag;

if(isBuffer(value)){
return cloneBuffer(value,isDeep);
}
if(tag==objectTag||tag==argsTag||isFunc&&!object){
result=isFlat||isFunc?{}:initCloneObject(value);
if(!isDeep){
return isFlat?
copySymbolsIn(value,baseAssignIn(result,value)):
copySymbols(value,baseAssign(result,value));
}
}else{
if(!cloneableTags[tag]){
return object?value:{};
}
result=initCloneByTag(value,tag,baseClone,isDeep);
}
}
// Check for circular references and return its corresponding clone.
stack||(stack=new Stack());
var stacked=stack.get(value);
if(stacked){
return stacked;
}
stack.set(value,result);

var keysFunc=isFull?
isFlat?getAllKeysIn:getAllKeys:
isFlat?keysIn:keys;

var props=isArr?undefined:keysFunc(value);
arrayEach(props||value,function(subValue,key){
if(props){
key=subValue;
subValue=value[key];
}
// Recursively populate clone (susceptible to call stack limits).
assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack));
});
return result;
}

/**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
function baseConforms(source){
var props=keys(source);
return function(object){
return baseConformsTo(object,source,props);
};
}

/**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
function baseConformsTo(object,source,props){
var length=props.length;
if(object==null){
return!length;
}
object=Object(object);
while(length--){
var key=props[length],
predicate=source[key],
value=object[key];

if(value===undefined&&!(key in object)||!predicate(value)){
return false;
}
}
return true;
}

/**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
function baseDelay(func,wait,args){
if(typeof func!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
return setTimeout(function(){func.apply(undefined,args);},wait);
}

/**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
function baseDifference(array,values,iteratee,comparator){
var index=-1,
includes=arrayIncludes,
isCommon=true,
length=array.length,
result=[],
valuesLength=values.length;

if(!length){
return result;
}
if(iteratee){
values=arrayMap(values,baseUnary(iteratee));
}
if(comparator){
includes=arrayIncludesWith;
isCommon=false;
}else
if(values.length>=LARGE_ARRAY_SIZE){
includes=cacheHas;
isCommon=false;
values=new SetCache(values);
}
outer:
while(++index<length){
var value=array[index],
computed=iteratee==null?value:iteratee(value);

value=comparator||value!==0?value:0;
if(isCommon&&computed===computed){
var valuesIndex=valuesLength;
while(valuesIndex--){
if(values[valuesIndex]===computed){
continue outer;
}
}
result.push(value);
}else
if(!includes(values,computed,comparator)){
result.push(value);
}
}
return result;
}

/**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
var baseEach=createBaseEach(baseForOwn);

/**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
var baseEachRight=createBaseEach(baseForOwnRight,true);

/**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
function baseEvery(collection,predicate){
var result=true;
baseEach(collection,function(value,index,collection){
result=!!predicate(value,index,collection);
return result;
});
return result;
}

/**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
function baseExtremum(array,iteratee,comparator){
var index=-1,
length=array.length;

while(++index<length){
var value=array[index],
current=iteratee(value);

if(current!=null&&(computed===undefined?
current===current&&!isSymbol(current):
comparator(current,computed)))
{
var computed=current,
result=value;
}
}
return result;
}

/**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
function baseFill(array,value,start,end){
var length=array.length;

start=toInteger(start);
if(start<0){
start=-start>length?0:length+start;
}
end=end===undefined||end>length?length:toInteger(end);
if(end<0){
end+=length;
}
end=start>end?0:toLength(end);
while(start<end){
array[start++]=value;
}
return array;
}

/**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
function baseFilter(collection,predicate){
var result=[];
baseEach(collection,function(value,index,collection){
if(predicate(value,index,collection)){
result.push(value);
}
});
return result;
}

/**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
function baseFlatten(array,depth,predicate,isStrict,result){
var index=-1,
length=array.length;

predicate||(predicate=isFlattenable);
result||(result=[]);

while(++index<length){
var value=array[index];
if(depth>0&&predicate(value)){
if(depth>1){
// Recursively flatten arrays (susceptible to call stack limits).
baseFlatten(value,depth-1,predicate,isStrict,result);
}else{
arrayPush(result,value);
}
}else if(!isStrict){
result[result.length]=value;
}
}
return result;
}

/**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
var baseFor=createBaseFor();

/**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
var baseForRight=createBaseFor(true);

/**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
function baseForOwn(object,iteratee){
return object&&baseFor(object,iteratee,keys);
}

/**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
function baseForOwnRight(object,iteratee){
return object&&baseForRight(object,iteratee,keys);
}

/**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
function baseFunctions(object,props){
return arrayFilter(props,function(key){
return isFunction(object[key]);
});
}

/**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
function baseGet(object,path){
path=castPath(path,object);

var index=0,
length=path.length;

while(object!=null&&index<length){
object=object[toKey(path[index++])];
}
return index&&index==length?object:undefined;
}

/**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
function baseGetAllKeys(object,keysFunc,symbolsFunc){
var result=keysFunc(object);
return isArray(object)?result:arrayPush(result,symbolsFunc(object));
}

/**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
function baseGetTag(value){
if(value==null){
return value===undefined?undefinedTag:nullTag;
}
return symToStringTag&&symToStringTag in Object(value)?
getRawTag(value):
objectToString(value);
}

/**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
function baseGt(value,other){
return value>other;
}

/**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
function baseHas(object,key){
return object!=null&&hasOwnProperty.call(object,key);
}

/**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
function baseHasIn(object,key){
return object!=null&&key in Object(object);
}

/**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
function baseInRange(number,start,end){
return number>=nativeMin(start,end)&&number<nativeMax(start,end);
}

/**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
function baseIntersection(arrays,iteratee,comparator){
var includes=comparator?arrayIncludesWith:arrayIncludes,
length=arrays[0].length,
othLength=arrays.length,
othIndex=othLength,
caches=Array(othLength),
maxLength=Infinity,
result=[];

while(othIndex--){
var array=arrays[othIndex];
if(othIndex&&iteratee){
array=arrayMap(array,baseUnary(iteratee));
}
maxLength=nativeMin(array.length,maxLength);
caches[othIndex]=!comparator&&(iteratee||length>=120&&array.length>=120)?
new SetCache(othIndex&&array):
undefined;
}
array=arrays[0];

var index=-1,
seen=caches[0];

outer:
while(++index<length&&result.length<maxLength){
var value=array[index],
computed=iteratee?iteratee(value):value;

value=comparator||value!==0?value:0;
if(!(seen?
cacheHas(seen,computed):
includes(result,computed,comparator)))
{
othIndex=othLength;
while(--othIndex){
var cache=caches[othIndex];
if(!(cache?
cacheHas(cache,computed):
includes(arrays[othIndex],computed,comparator)))
{
continue outer;
}
}
if(seen){
seen.push(computed);
}
result.push(value);
}
}
return result;
}

/**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
function baseInverter(object,setter,iteratee,accumulator){
baseForOwn(object,function(value,key,object){
setter(accumulator,iteratee(value),key,object);
});
return accumulator;
}

/**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
function baseInvoke(object,path,args){
path=castPath(path,object);
object=parent(object,path);
var func=object==null?object:object[toKey(last(path))];
return func==null?undefined:apply(func,object,args);
}

/**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
function baseIsArguments(value){
return isObjectLike(value)&&baseGetTag(value)==argsTag;
}

/**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
function baseIsArrayBuffer(value){
return isObjectLike(value)&&baseGetTag(value)==arrayBufferTag;
}

/**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
function baseIsDate(value){
return isObjectLike(value)&&baseGetTag(value)==dateTag;
}

/**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
function baseIsEqual(value,other,bitmask,customizer,stack){
if(value===other){
return true;
}
if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){
return value!==value&&other!==other;
}
return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);
}

/**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){
var objIsArr=isArray(object),
othIsArr=isArray(other),
objTag=objIsArr?arrayTag:getTag(object),
othTag=othIsArr?arrayTag:getTag(other);

objTag=objTag==argsTag?objectTag:objTag;
othTag=othTag==argsTag?objectTag:othTag;

var objIsObj=objTag==objectTag,
othIsObj=othTag==objectTag,
isSameTag=objTag==othTag;

if(isSameTag&&isBuffer(object)){
if(!isBuffer(other)){
return false;
}
objIsArr=true;
objIsObj=false;
}
if(isSameTag&&!objIsObj){
stack||(stack=new Stack());
return objIsArr||isTypedArray(object)?
equalArrays(object,other,bitmask,customizer,equalFunc,stack):
equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);
}
if(!(bitmask&COMPARE_PARTIAL_FLAG)){
var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),
othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');

if(objIsWrapped||othIsWrapped){
var objUnwrapped=objIsWrapped?object.value():object,
othUnwrapped=othIsWrapped?other.value():other;

stack||(stack=new Stack());
return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);
}
}
if(!isSameTag){
return false;
}
stack||(stack=new Stack());
return equalObjects(object,other,bitmask,customizer,equalFunc,stack);
}

/**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
function baseIsMap(value){
return isObjectLike(value)&&getTag(value)==mapTag;
}

/**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
function baseIsMatch(object,source,matchData,customizer){
var index=matchData.length,
length=index,
noCustomizer=!customizer;

if(object==null){
return!length;
}
object=Object(object);
while(index--){
var data=matchData[index];
if(noCustomizer&&data[2]?
data[1]!==object[data[0]]:
!(data[0]in object))
{
return false;
}
}
while(++index<length){
data=matchData[index];
var key=data[0],
objValue=object[key],
srcValue=data[1];

if(noCustomizer&&data[2]){
if(objValue===undefined&&!(key in object)){
return false;
}
}else{
var stack=new Stack();
if(customizer){
var result=customizer(objValue,srcValue,key,object,source,stack);
}
if(!(result===undefined?
baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack):
result))
{
return false;
}
}
}
return true;
}

/**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
function baseIsNative(value){
if(!isObject(value)||isMasked(value)){
return false;
}
var pattern=isFunction(value)?reIsNative:reIsHostCtor;
return pattern.test(toSource(value));
}

/**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
function baseIsRegExp(value){
return isObjectLike(value)&&baseGetTag(value)==regexpTag;
}

/**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
function baseIsSet(value){
return isObjectLike(value)&&getTag(value)==setTag;
}

/**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
function baseIsTypedArray(value){
return isObjectLike(value)&&
isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];
}

/**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
function baseIteratee(value){
// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
if(typeof value=='function'){
return value;
}
if(value==null){
return identity;
}
if(typeof value=='object'){
return isArray(value)?
baseMatchesProperty(value[0],value[1]):
baseMatches(value);
}
return property(value);
}

/**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
function baseKeys(object){
if(!isPrototype(object)){
return nativeKeys(object);
}
var result=[];
for(var key in Object(object)){
if(hasOwnProperty.call(object,key)&&key!='constructor'){
result.push(key);
}
}
return result;
}

/**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
function baseKeysIn(object){
if(!isObject(object)){
return nativeKeysIn(object);
}
var isProto=isPrototype(object),
result=[];

for(var key in object){
if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){
result.push(key);
}
}
return result;
}

/**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
function baseLt(value,other){
return value<other;
}

/**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
function baseMap(collection,iteratee){
var index=-1,
result=isArrayLike(collection)?Array(collection.length):[];

baseEach(collection,function(value,key,collection){
result[++index]=iteratee(value,key,collection);
});
return result;
}

/**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
function baseMatches(source){
var matchData=getMatchData(source);
if(matchData.length==1&&matchData[0][2]){
return matchesStrictComparable(matchData[0][0],matchData[0][1]);
}
return function(object){
return object===source||baseIsMatch(object,source,matchData);
};
}

/**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
function baseMatchesProperty(path,srcValue){
if(isKey(path)&&isStrictComparable(srcValue)){
return matchesStrictComparable(toKey(path),srcValue);
}
return function(object){
var objValue=get(object,path);
return objValue===undefined&&objValue===srcValue?
hasIn(object,path):
baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);
};
}

/**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
function baseMerge(object,source,srcIndex,customizer,stack){
if(object===source){
return;
}
baseFor(source,function(srcValue,key){
if(isObject(srcValue)){
stack||(stack=new Stack());
baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);
}else
{
var newValue=customizer?
customizer(object[key],srcValue,key+'',object,source,stack):
undefined;

if(newValue===undefined){
newValue=srcValue;
}
assignMergeValue(object,key,newValue);
}
},keysIn);
}

/**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){
var objValue=object[key],
srcValue=source[key],
stacked=stack.get(srcValue);

if(stacked){
assignMergeValue(object,key,stacked);
return;
}
var newValue=customizer?
customizer(objValue,srcValue,key+'',object,source,stack):
undefined;

var isCommon=newValue===undefined;

if(isCommon){
var isArr=isArray(srcValue),
isBuff=!isArr&&isBuffer(srcValue),
isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);

newValue=srcValue;
if(isArr||isBuff||isTyped){
if(isArray(objValue)){
newValue=objValue;
}else
if(isArrayLikeObject(objValue)){
newValue=copyArray(objValue);
}else
if(isBuff){
isCommon=false;
newValue=cloneBuffer(srcValue,true);
}else
if(isTyped){
isCommon=false;
newValue=cloneTypedArray(srcValue,true);
}else
{
newValue=[];
}
}else
if(isPlainObject(srcValue)||isArguments(srcValue)){
newValue=objValue;
if(isArguments(objValue)){
newValue=toPlainObject(objValue);
}else
if(!isObject(objValue)||srcIndex&&isFunction(objValue)){
newValue=initCloneObject(srcValue);
}
}else
{
isCommon=false;
}
}
if(isCommon){
// Recursively merge objects and arrays (susceptible to call stack limits).
stack.set(srcValue,newValue);
mergeFunc(newValue,srcValue,srcIndex,customizer,stack);
stack['delete'](srcValue);
}
assignMergeValue(object,key,newValue);
}

/**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
function baseNth(array,n){
var length=array.length;
if(!length){
return;
}
n+=n<0?length:0;
return isIndex(n,length)?array[n]:undefined;
}

/**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
function baseOrderBy(collection,iteratees,orders){
var index=-1;
iteratees=arrayMap(iteratees.length?iteratees:[identity],baseUnary(getIteratee()));

var result=baseMap(collection,function(value,key,collection){
var criteria=arrayMap(iteratees,function(iteratee){
return iteratee(value);
});
return{'criteria':criteria,'index':++index,'value':value};
});

return baseSortBy(result,function(object,other){
return compareMultiple(object,other,orders);
});
}

/**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
function basePick(object,paths){
return basePickBy(object,paths,function(value,path){
return hasIn(object,path);
});
}

/**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
function basePickBy(object,paths,predicate){
var index=-1,
length=paths.length,
result={};

while(++index<length){
var path=paths[index],
value=baseGet(object,path);

if(predicate(value,path)){
baseSet(result,castPath(path,object),value);
}
}
return result;
}

/**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
function basePropertyDeep(path){
return function(object){
return baseGet(object,path);
};
}

/**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
function basePullAll(array,values,iteratee,comparator){
var indexOf=comparator?baseIndexOfWith:baseIndexOf,
index=-1,
length=values.length,
seen=array;

if(array===values){
values=copyArray(values);
}
if(iteratee){
seen=arrayMap(array,baseUnary(iteratee));
}
while(++index<length){
var fromIndex=0,
value=values[index],
computed=iteratee?iteratee(value):value;

while((fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1){
if(seen!==array){
splice.call(seen,fromIndex,1);
}
splice.call(array,fromIndex,1);
}
}
return array;
}

/**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
function basePullAt(array,indexes){
var length=array?indexes.length:0,
lastIndex=length-1;

while(length--){
var index=indexes[length];
if(length==lastIndex||index!==previous){
var previous=index;
if(isIndex(index)){
splice.call(array,index,1);
}else{
baseUnset(array,index);
}
}
}
return array;
}

/**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
function baseRandom(lower,upper){
return lower+nativeFloor(nativeRandom()*(upper-lower+1));
}

/**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
function baseRange(start,end,step,fromRight){
var index=-1,
length=nativeMax(nativeCeil((end-start)/(step||1)),0),
result=Array(length);

while(length--){
result[fromRight?length:++index]=start;
start+=step;
}
return result;
}

/**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
function baseRepeat(string,n){
var result='';
if(!string||n<1||n>MAX_SAFE_INTEGER){
return result;
}
// Leverage the exponentiation by squaring algorithm for a faster repeat.
// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
do{
if(n%2){
result+=string;
}
n=nativeFloor(n/2);
if(n){
string+=string;
}
}while(n);

return result;
}

/**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
function baseRest(func,start){
return setToString(overRest(func,start,identity),func+'');
}

/**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
function baseSample(collection){
return arraySample(values(collection));
}

/**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
function baseSampleSize(collection,n){
var array=values(collection);
return shuffleSelf(array,baseClamp(n,0,array.length));
}

/**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
function baseSet(object,path,value,customizer){
if(!isObject(object)){
return object;
}
path=castPath(path,object);

var index=-1,
length=path.length,
lastIndex=length-1,
nested=object;

while(nested!=null&&++index<length){
var key=toKey(path[index]),
newValue=value;

if(index!=lastIndex){
var objValue=nested[key];
newValue=customizer?customizer(objValue,key,nested):undefined;
if(newValue===undefined){
newValue=isObject(objValue)?
objValue:
isIndex(path[index+1])?[]:{};
}
}
assignValue(nested,key,newValue);
nested=nested[key];
}
return object;
}

/**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
var baseSetData=!metaMap?identity:function(func,data){
metaMap.set(func,data);
return func;
};

/**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
var baseSetToString=!defineProperty?identity:function(func,string){
return defineProperty(func,'toString',{
'configurable':true,
'enumerable':false,
'value':constant(string),
'writable':true});

};

/**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
function baseShuffle(collection){
return shuffleSelf(values(collection));
}

/**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
function baseSlice(array,start,end){
var index=-1,
length=array.length;

if(start<0){
start=-start>length?0:length+start;
}
end=end>length?length:end;
if(end<0){
end+=length;
}
length=start>end?0:end-start>>>0;
start>>>=0;

var result=Array(length);
while(++index<length){
result[index]=array[index+start];
}
return result;
}

/**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
function baseSome(collection,predicate){
var result;

baseEach(collection,function(value,index,collection){
result=predicate(value,index,collection);
return!result;
});
return!!result;
}

/**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
function baseSortedIndex(array,value,retHighest){
var low=0,
high=array==null?low:array.length;

if(typeof value=='number'&&value===value&&high<=HALF_MAX_ARRAY_LENGTH){
while(low<high){
var mid=low+high>>>1,
computed=array[mid];

if(computed!==null&&!isSymbol(computed)&&(
retHighest?computed<=value:computed<value)){
low=mid+1;
}else{
high=mid;
}
}
return high;
}
return baseSortedIndexBy(array,value,identity,retHighest);
}

/**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
function baseSortedIndexBy(array,value,iteratee,retHighest){
value=iteratee(value);

var low=0,
high=array==null?0:array.length,
valIsNaN=value!==value,
valIsNull=value===null,
valIsSymbol=isSymbol(value),
valIsUndefined=value===undefined;

while(low<high){
var mid=nativeFloor((low+high)/2),
computed=iteratee(array[mid]),
othIsDefined=computed!==undefined,
othIsNull=computed===null,
othIsReflexive=computed===computed,
othIsSymbol=isSymbol(computed);

if(valIsNaN){
var setLow=retHighest||othIsReflexive;
}else if(valIsUndefined){
setLow=othIsReflexive&&(retHighest||othIsDefined);
}else if(valIsNull){
setLow=othIsReflexive&&othIsDefined&&(retHighest||!othIsNull);
}else if(valIsSymbol){
setLow=othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol);
}else if(othIsNull||othIsSymbol){
setLow=false;
}else{
setLow=retHighest?computed<=value:computed<value;
}
if(setLow){
low=mid+1;
}else{
high=mid;
}
}
return nativeMin(high,MAX_ARRAY_INDEX);
}

/**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
function baseSortedUniq(array,iteratee){
var index=-1,
length=array.length,
resIndex=0,
result=[];

while(++index<length){
var value=array[index],
computed=iteratee?iteratee(value):value;

if(!index||!eq(computed,seen)){
var seen=computed;
result[resIndex++]=value===0?0:value;
}
}
return result;
}

/**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
function baseToNumber(value){
if(typeof value=='number'){
return value;
}
if(isSymbol(value)){
return NAN;
}
return+value;
}

/**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
function baseToString(value){
// Exit early for strings to avoid a performance hit in some environments.
if(typeof value=='string'){
return value;
}
if(isArray(value)){
// Recursively convert values (susceptible to call stack limits).
return arrayMap(value,baseToString)+'';
}
if(isSymbol(value)){
return symbolToString?symbolToString.call(value):'';
}
var result=value+'';
return result=='0'&&1/value==-INFINITY?'-0':result;
}

/**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
function baseUniq(array,iteratee,comparator){
var index=-1,
includes=arrayIncludes,
length=array.length,
isCommon=true,
result=[],
seen=result;

if(comparator){
isCommon=false;
includes=arrayIncludesWith;
}else
if(length>=LARGE_ARRAY_SIZE){
var set=iteratee?null:createSet(array);
if(set){
return setToArray(set);
}
isCommon=false;
includes=cacheHas;
seen=new SetCache();
}else
{
seen=iteratee?[]:result;
}
outer:
while(++index<length){
var value=array[index],
computed=iteratee?iteratee(value):value;

value=comparator||value!==0?value:0;
if(isCommon&&computed===computed){
var seenIndex=seen.length;
while(seenIndex--){
if(seen[seenIndex]===computed){
continue outer;
}
}
if(iteratee){
seen.push(computed);
}
result.push(value);
}else
if(!includes(seen,computed,comparator)){
if(seen!==result){
seen.push(computed);
}
result.push(value);
}
}
return result;
}

/**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
function baseUnset(object,path){
path=castPath(path,object);
object=parent(object,path);
return object==null||delete object[toKey(last(path))];
}

/**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
function baseUpdate(object,path,updater,customizer){
return baseSet(object,path,updater(baseGet(object,path)),customizer);
}

/**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
function baseWhile(array,predicate,isDrop,fromRight){
var length=array.length,
index=fromRight?length:-1;

while((fromRight?index--:++index<length)&&
predicate(array[index],index,array)){}

return isDrop?
baseSlice(array,fromRight?0:index,fromRight?index+1:length):
baseSlice(array,fromRight?index+1:0,fromRight?length:index);
}

/**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
function baseWrapperValue(value,actions){
var result=value;
if(result instanceof LazyWrapper){
result=result.value();
}
return arrayReduce(actions,function(result,action){
return action.func.apply(action.thisArg,arrayPush([result],action.args));
},result);
}

/**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
function baseXor(arrays,iteratee,comparator){
var length=arrays.length;
if(length<2){
return length?baseUniq(arrays[0]):[];
}
var index=-1,
result=Array(length);

while(++index<length){
var array=arrays[index],
othIndex=-1;

while(++othIndex<length){
if(othIndex!=index){
result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);
}
}
}
return baseUniq(baseFlatten(result,1),iteratee,comparator);
}

/**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
function baseZipObject(props,values,assignFunc){
var index=-1,
length=props.length,
valsLength=values.length,
result={};

while(++index<length){
var value=index<valsLength?values[index]:undefined;
assignFunc(result,props[index],value);
}
return result;
}

/**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
function castArrayLikeObject(value){
return isArrayLikeObject(value)?value:[];
}

/**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
function castFunction(value){
return typeof value=='function'?value:identity;
}

/**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
function castPath(value,object){
if(isArray(value)){
return value;
}
return isKey(value,object)?[value]:stringToPath(toString(value));
}

/**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
var castRest=baseRest;

/**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
function castSlice(array,start,end){
var length=array.length;
end=end===undefined?length:end;
return!start&&end>=length?array:baseSlice(array,start,end);
}

/**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
var clearTimeout=ctxClearTimeout||function(id){
return root.clearTimeout(id);
};

/**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
function cloneBuffer(buffer,isDeep){
if(isDeep){
return buffer.slice();
}
var length=buffer.length,
result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);

buffer.copy(result);
return result;
}

/**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
function cloneArrayBuffer(arrayBuffer){
var result=new arrayBuffer.constructor(arrayBuffer.byteLength);
new Uint8Array(result).set(new Uint8Array(arrayBuffer));
return result;
}

/**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
function cloneDataView(dataView,isDeep){
var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;
return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);
}

/**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
function cloneMap(map,isDeep,cloneFunc){
var array=isDeep?cloneFunc(mapToArray(map),CLONE_DEEP_FLAG):mapToArray(map);
return arrayReduce(array,addMapEntry,new map.constructor());
}

/**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
function cloneRegExp(regexp){
var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));
result.lastIndex=regexp.lastIndex;
return result;
}

/**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
function cloneSet(set,isDeep,cloneFunc){
var array=isDeep?cloneFunc(setToArray(set),CLONE_DEEP_FLAG):setToArray(set);
return arrayReduce(array,addSetEntry,new set.constructor());
}

/**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
function cloneSymbol(symbol){
return symbolValueOf?Object(symbolValueOf.call(symbol)):{};
}

/**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
function cloneTypedArray(typedArray,isDeep){
var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;
return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);
}

/**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
function compareAscending(value,other){
if(value!==other){
var valIsDefined=value!==undefined,
valIsNull=value===null,
valIsReflexive=value===value,
valIsSymbol=isSymbol(value);

var othIsDefined=other!==undefined,
othIsNull=other===null,
othIsReflexive=other===other,
othIsSymbol=isSymbol(other);

if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||
valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||
valIsNull&&othIsDefined&&othIsReflexive||
!valIsDefined&&othIsReflexive||
!valIsReflexive){
return 1;
}
if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||
othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||
othIsNull&&valIsDefined&&valIsReflexive||
!othIsDefined&&valIsReflexive||
!othIsReflexive){
return-1;
}
}
return 0;
}

/**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
function compareMultiple(object,other,orders){
var index=-1,
objCriteria=object.criteria,
othCriteria=other.criteria,
length=objCriteria.length,
ordersLength=orders.length;

while(++index<length){
var result=compareAscending(objCriteria[index],othCriteria[index]);
if(result){
if(index>=ordersLength){
return result;
}
var order=orders[index];
return result*(order=='desc'?-1:1);
}
}
// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
// that causes it, under certain circumstances, to provide the same value for
// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
// for more details.
//
// This also ensures a stable sort in V8 and other engines.
// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
return object.index-other.index;
}

/**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
function composeArgs(args,partials,holders,isCurried){
var argsIndex=-1,
argsLength=args.length,
holdersLength=holders.length,
leftIndex=-1,
leftLength=partials.length,
rangeLength=nativeMax(argsLength-holdersLength,0),
result=Array(leftLength+rangeLength),
isUncurried=!isCurried;

while(++leftIndex<leftLength){
result[leftIndex]=partials[leftIndex];
}
while(++argsIndex<holdersLength){
if(isUncurried||argsIndex<argsLength){
result[holders[argsIndex]]=args[argsIndex];
}
}
while(rangeLength--){
result[leftIndex++]=args[argsIndex++];
}
return result;
}

/**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
function composeArgsRight(args,partials,holders,isCurried){
var argsIndex=-1,
argsLength=args.length,
holdersIndex=-1,
holdersLength=holders.length,
rightIndex=-1,
rightLength=partials.length,
rangeLength=nativeMax(argsLength-holdersLength,0),
result=Array(rangeLength+rightLength),
isUncurried=!isCurried;

while(++argsIndex<rangeLength){
result[argsIndex]=args[argsIndex];
}
var offset=argsIndex;
while(++rightIndex<rightLength){
result[offset+rightIndex]=partials[rightIndex];
}
while(++holdersIndex<holdersLength){
if(isUncurried||argsIndex<argsLength){
result[offset+holders[holdersIndex]]=args[argsIndex++];
}
}
return result;
}

/**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
function copyArray(source,array){
var index=-1,
length=source.length;

array||(array=Array(length));
while(++index<length){
array[index]=source[index];
}
return array;
}

/**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
function copyObject(source,props,object,customizer){
var isNew=!object;
object||(object={});

var index=-1,
length=props.length;

while(++index<length){
var key=props[index];

var newValue=customizer?
customizer(object[key],source[key],key,object,source):
undefined;

if(newValue===undefined){
newValue=source[key];
}
if(isNew){
baseAssignValue(object,key,newValue);
}else{
assignValue(object,key,newValue);
}
}
return object;
}

/**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
function copySymbols(source,object){
return copyObject(source,getSymbols(source),object);
}

/**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
function copySymbolsIn(source,object){
return copyObject(source,getSymbolsIn(source),object);
}

/**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
function createAggregator(setter,initializer){
return function(collection,iteratee){
var func=isArray(collection)?arrayAggregator:baseAggregator,
accumulator=initializer?initializer():{};

return func(collection,setter,getIteratee(iteratee,2),accumulator);
};
}

/**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
function createAssigner(assigner){
return baseRest(function(object,sources){
var index=-1,
length=sources.length,
customizer=length>1?sources[length-1]:undefined,
guard=length>2?sources[2]:undefined;

customizer=assigner.length>3&&typeof customizer=='function'?(
length--,customizer):
undefined;

if(guard&&isIterateeCall(sources[0],sources[1],guard)){
customizer=length<3?undefined:customizer;
length=1;
}
object=Object(object);
while(++index<length){
var source=sources[index];
if(source){
assigner(object,source,index,customizer);
}
}
return object;
});
}

/**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
function createBaseEach(eachFunc,fromRight){
return function(collection,iteratee){
if(collection==null){
return collection;
}
if(!isArrayLike(collection)){
return eachFunc(collection,iteratee);
}
var length=collection.length,
index=fromRight?length:-1,
iterable=Object(collection);

while(fromRight?index--:++index<length){
if(iteratee(iterable[index],index,iterable)===false){
break;
}
}
return collection;
};
}

/**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
function createBaseFor(fromRight){
return function(object,iteratee,keysFunc){
var index=-1,
iterable=Object(object),
props=keysFunc(object),
length=props.length;

while(length--){
var key=props[fromRight?length:++index];
if(iteratee(iterable[key],key,iterable)===false){
break;
}
}
return object;
};
}

/**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
function createBind(func,bitmask,thisArg){
var isBind=bitmask&WRAP_BIND_FLAG,
Ctor=createCtor(func);

function wrapper(){
var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;
return fn.apply(isBind?thisArg:this,arguments);
}
return wrapper;
}

/**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
function createCaseFirst(methodName){
return function(string){
string=toString(string);

var strSymbols=hasUnicode(string)?
stringToArray(string):
undefined;

var chr=strSymbols?
strSymbols[0]:
string.charAt(0);

var trailing=strSymbols?
castSlice(strSymbols,1).join(''):
string.slice(1);

return chr[methodName]()+trailing;
};
}

/**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
function createCompounder(callback){
return function(string){
return arrayReduce(words(deburr(string).replace(reApos,'')),callback,'');
};
}

/**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
function createCtor(Ctor){
return function(){
// Use a `switch` statement to work with class constructors. See
// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
// for more details.
var args=arguments;
switch(args.length){
case 0:return new Ctor();
case 1:return new Ctor(args[0]);
case 2:return new Ctor(args[0],args[1]);
case 3:return new Ctor(args[0],args[1],args[2]);
case 4:return new Ctor(args[0],args[1],args[2],args[3]);
case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);
case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);
case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}

var thisBinding=baseCreate(Ctor.prototype),
result=Ctor.apply(thisBinding,args);

// Mimic the constructor's `return` behavior.
// See https://es5.github.io/#x13.2.2 for more details.
return isObject(result)?result:thisBinding;
};
}

/**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
function createCurry(func,bitmask,arity){
var Ctor=createCtor(func);

function wrapper(){
var length=arguments.length,
args=Array(length),
index=length,
placeholder=getHolder(wrapper);

while(index--){
args[index]=arguments[index];
}
var holders=length<3&&args[0]!==placeholder&&args[length-1]!==placeholder?
[]:
replaceHolders(args,placeholder);

length-=holders.length;
if(length<arity){
return createRecurry(
func,bitmask,createHybrid,wrapper.placeholder,undefined,
args,holders,undefined,undefined,arity-length);
}
var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;
return apply(fn,this,args);
}
return wrapper;
}

/**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
function createFind(findIndexFunc){
return function(collection,predicate,fromIndex){
var iterable=Object(collection);
if(!isArrayLike(collection)){
var iteratee=getIteratee(predicate,3);
collection=keys(collection);
predicate=function(key){return iteratee(iterable[key],key,iterable);};
}
var index=findIndexFunc(collection,predicate,fromIndex);
return index>-1?iterable[iteratee?collection[index]:index]:undefined;
};
}

/**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
function createFlow(fromRight){
return flatRest(function(funcs){
var length=funcs.length,
index=length,
prereq=LodashWrapper.prototype.thru;

if(fromRight){
funcs.reverse();
}
while(index--){
var func=funcs[index];
if(typeof func!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
if(prereq&&!wrapper&&getFuncName(func)=='wrapper'){
var wrapper=new LodashWrapper([],true);
}
}
index=wrapper?index:length;
while(++index<length){
func=funcs[index];

var funcName=getFuncName(func),
data=funcName=='wrapper'?getData(func):undefined;

if(data&&isLaziable(data[0])&&
data[1]==(WRAP_ARY_FLAG|WRAP_CURRY_FLAG|WRAP_PARTIAL_FLAG|WRAP_REARG_FLAG)&&
!data[4].length&&data[9]==1)
{
wrapper=wrapper[getFuncName(data[0])].apply(wrapper,data[3]);
}else{
wrapper=func.length==1&&isLaziable(func)?
wrapper[funcName]():
wrapper.thru(func);
}
}
return function(){
var args=arguments,
value=args[0];

if(wrapper&&args.length==1&&isArray(value)){
return wrapper.plant(value).value();
}
var index=0,
result=length?funcs[index].apply(this,args):value;

while(++index<length){
result=funcs[index].call(this,result);
}
return result;
};
});
}

/**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){
var isAry=bitmask&WRAP_ARY_FLAG,
isBind=bitmask&WRAP_BIND_FLAG,
isBindKey=bitmask&WRAP_BIND_KEY_FLAG,
isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),
isFlip=bitmask&WRAP_FLIP_FLAG,
Ctor=isBindKey?undefined:createCtor(func);

function wrapper(){
var length=arguments.length,
args=Array(length),
index=length;

while(index--){
args[index]=arguments[index];
}
if(isCurried){
var placeholder=getHolder(wrapper),
holdersCount=countHolders(args,placeholder);
}
if(partials){
args=composeArgs(args,partials,holders,isCurried);
}
if(partialsRight){
args=composeArgsRight(args,partialsRight,holdersRight,isCurried);
}
length-=holdersCount;
if(isCurried&&length<arity){
var newHolders=replaceHolders(args,placeholder);
return createRecurry(
func,bitmask,createHybrid,wrapper.placeholder,thisArg,
args,newHolders,argPos,ary,arity-length);

}
var thisBinding=isBind?thisArg:this,
fn=isBindKey?thisBinding[func]:func;

length=args.length;
if(argPos){
args=reorder(args,argPos);
}else if(isFlip&&length>1){
args.reverse();
}
if(isAry&&ary<length){
args.length=ary;
}
if(this&&this!==root&&this instanceof wrapper){
fn=Ctor||createCtor(fn);
}
return fn.apply(thisBinding,args);
}
return wrapper;
}

/**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
function createInverter(setter,toIteratee){
return function(object,iteratee){
return baseInverter(object,setter,toIteratee(iteratee),{});
};
}

/**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
function createMathOperation(operator,defaultValue){
return function(value,other){
var result;
if(value===undefined&&other===undefined){
return defaultValue;
}
if(value!==undefined){
result=value;
}
if(other!==undefined){
if(result===undefined){
return other;
}
if(typeof value=='string'||typeof other=='string'){
value=baseToString(value);
other=baseToString(other);
}else{
value=baseToNumber(value);
other=baseToNumber(other);
}
result=operator(value,other);
}
return result;
};
}

/**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
function createOver(arrayFunc){
return flatRest(function(iteratees){
iteratees=arrayMap(iteratees,baseUnary(getIteratee()));
return baseRest(function(args){
var thisArg=this;
return arrayFunc(iteratees,function(iteratee){
return apply(iteratee,thisArg,args);
});
});
});
}

/**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
function createPadding(length,chars){
chars=chars===undefined?' ':baseToString(chars);

var charsLength=chars.length;
if(charsLength<2){
return charsLength?baseRepeat(chars,length):chars;
}
var result=baseRepeat(chars,nativeCeil(length/stringSize(chars)));
return hasUnicode(chars)?
castSlice(stringToArray(result),0,length).join(''):
result.slice(0,length);
}

/**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
function createPartial(func,bitmask,thisArg,partials){
var isBind=bitmask&WRAP_BIND_FLAG,
Ctor=createCtor(func);

function wrapper(){
var argsIndex=-1,
argsLength=arguments.length,
leftIndex=-1,
leftLength=partials.length,
args=Array(leftLength+argsLength),
fn=this&&this!==root&&this instanceof wrapper?Ctor:func;

while(++leftIndex<leftLength){
args[leftIndex]=partials[leftIndex];
}
while(argsLength--){
args[leftIndex++]=arguments[++argsIndex];
}
return apply(fn,isBind?thisArg:this,args);
}
return wrapper;
}

/**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
function createRange(fromRight){
return function(start,end,step){
if(step&&typeof step!='number'&&isIterateeCall(start,end,step)){
end=step=undefined;
}
// Ensure the sign of `-0` is preserved.
start=toFinite(start);
if(end===undefined){
end=start;
start=0;
}else{
end=toFinite(end);
}
step=step===undefined?start<end?1:-1:toFinite(step);
return baseRange(start,end,step,fromRight);
};
}

/**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
function createRelationalOperation(operator){
return function(value,other){
if(!(typeof value=='string'&&typeof other=='string')){
value=toNumber(value);
other=toNumber(other);
}
return operator(value,other);
};
}

/**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
function createRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){
var isCurry=bitmask&WRAP_CURRY_FLAG,
newHolders=isCurry?holders:undefined,
newHoldersRight=isCurry?undefined:holders,
newPartials=isCurry?partials:undefined,
newPartialsRight=isCurry?undefined:partials;

bitmask|=isCurry?WRAP_PARTIAL_FLAG:WRAP_PARTIAL_RIGHT_FLAG;
bitmask&=~(isCurry?WRAP_PARTIAL_RIGHT_FLAG:WRAP_PARTIAL_FLAG);

if(!(bitmask&WRAP_CURRY_BOUND_FLAG)){
bitmask&=~(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG);
}
var newData=[
func,bitmask,thisArg,newPartials,newHolders,newPartialsRight,
newHoldersRight,argPos,ary,arity];


var result=wrapFunc.apply(undefined,newData);
if(isLaziable(func)){
setData(result,newData);
}
result.placeholder=placeholder;
return setWrapToString(result,func,bitmask);
}

/**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
function createRound(methodName){
var func=Math[methodName];
return function(number,precision){
number=toNumber(number);
precision=precision==null?0:nativeMin(toInteger(precision),292);
if(precision){
// Shift with exponential notation to avoid floating-point issues.
// See [MDN](https://mdn.io/round#Examples) for more details.
var pair=(toString(number)+'e').split('e'),
value=func(pair[0]+'e'+(+pair[1]+precision));

pair=(toString(value)+'e').split('e');
return+(pair[0]+'e'+(+pair[1]-precision));
}
return func(number);
};
}

/**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
var createSet=!(Set&&1/setToArray(new Set([,-0]))[1]==INFINITY)?noop:function(values){
return new Set(values);
};

/**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
function createToPairs(keysFunc){
return function(object){
var tag=getTag(object);
if(tag==mapTag){
return mapToArray(object);
}
if(tag==setTag){
return setToPairs(object);
}
return baseToPairs(object,keysFunc(object));
};
}

/**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
function createWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){
var isBindKey=bitmask&WRAP_BIND_KEY_FLAG;
if(!isBindKey&&typeof func!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
var length=partials?partials.length:0;
if(!length){
bitmask&=~(WRAP_PARTIAL_FLAG|WRAP_PARTIAL_RIGHT_FLAG);
partials=holders=undefined;
}
ary=ary===undefined?ary:nativeMax(toInteger(ary),0);
arity=arity===undefined?arity:toInteger(arity);
length-=holders?holders.length:0;

if(bitmask&WRAP_PARTIAL_RIGHT_FLAG){
var partialsRight=partials,
holdersRight=holders;

partials=holders=undefined;
}
var data=isBindKey?undefined:getData(func);

var newData=[
func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,
argPos,ary,arity];


if(data){
mergeData(newData,data);
}
func=newData[0];
bitmask=newData[1];
thisArg=newData[2];
partials=newData[3];
holders=newData[4];
arity=newData[9]=newData[9]===undefined?
isBindKey?0:func.length:
nativeMax(newData[9]-length,0);

if(!arity&&bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG)){
bitmask&=~(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG);
}
if(!bitmask||bitmask==WRAP_BIND_FLAG){
var result=createBind(func,bitmask,thisArg);
}else if(bitmask==WRAP_CURRY_FLAG||bitmask==WRAP_CURRY_RIGHT_FLAG){
result=createCurry(func,bitmask,arity);
}else if((bitmask==WRAP_PARTIAL_FLAG||bitmask==(WRAP_BIND_FLAG|WRAP_PARTIAL_FLAG))&&!holders.length){
result=createPartial(func,bitmask,thisArg,partials);
}else{
result=createHybrid.apply(undefined,newData);
}
var setter=data?baseSetData:setData;
return setWrapToString(setter(result,newData),func,bitmask);
}

/**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
function customDefaultsAssignIn(objValue,srcValue,key,object){
if(objValue===undefined||
eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key)){
return srcValue;
}
return objValue;
}

/**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
function customDefaultsMerge(objValue,srcValue,key,object,source,stack){
if(isObject(objValue)&&isObject(srcValue)){
// Recursively merge objects and arrays (susceptible to call stack limits).
stack.set(srcValue,objValue);
baseMerge(objValue,srcValue,undefined,customDefaultsMerge,stack);
stack['delete'](srcValue);
}
return objValue;
}

/**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
function customOmitClone(value){
return isPlainObject(value)?undefined:value;
}

/**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
function equalArrays(array,other,bitmask,customizer,equalFunc,stack){
var isPartial=bitmask&COMPARE_PARTIAL_FLAG,
arrLength=array.length,
othLength=other.length;

if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){
return false;
}
// Assume cyclic values are equal.
var stacked=stack.get(array);
if(stacked&&stack.get(other)){
return stacked==other;
}
var index=-1,
result=true,
seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined;

stack.set(array,other);
stack.set(other,array);

// Ignore non-index properties.
while(++index<arrLength){
var arrValue=array[index],
othValue=other[index];

if(customizer){
var compared=isPartial?
customizer(othValue,arrValue,index,other,array,stack):
customizer(arrValue,othValue,index,array,other,stack);
}
if(compared!==undefined){
if(compared){
continue;
}
result=false;
break;
}
// Recursively compare arrays (susceptible to call stack limits).
if(seen){
if(!arraySome(other,function(othValue,othIndex){
if(!cacheHas(seen,othIndex)&&(
arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){
return seen.push(othIndex);
}
})){
result=false;
break;
}
}else if(!(
arrValue===othValue||
equalFunc(arrValue,othValue,bitmask,customizer,stack)))
{
result=false;
break;
}
}
stack['delete'](array);
stack['delete'](other);
return result;
}

/**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){
switch(tag){
case dataViewTag:
if(object.byteLength!=other.byteLength||
object.byteOffset!=other.byteOffset){
return false;
}
object=object.buffer;
other=other.buffer;

case arrayBufferTag:
if(object.byteLength!=other.byteLength||
!equalFunc(new Uint8Array(object),new Uint8Array(other))){
return false;
}
return true;

case boolTag:
case dateTag:
case numberTag:
// Coerce booleans to `1` or `0` and dates to milliseconds.
// Invalid dates are coerced to `NaN`.
return eq(+object,+other);

case errorTag:
return object.name==other.name&&object.message==other.message;

case regexpTag:
case stringTag:
// Coerce regexes to strings and treat strings, primitives and objects,
// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
// for more details.
return object==other+'';

case mapTag:
var convert=mapToArray;

case setTag:
var isPartial=bitmask&COMPARE_PARTIAL_FLAG;
convert||(convert=setToArray);

if(object.size!=other.size&&!isPartial){
return false;
}
// Assume cyclic values are equal.
var stacked=stack.get(object);
if(stacked){
return stacked==other;
}
bitmask|=COMPARE_UNORDERED_FLAG;

// Recursively compare objects (susceptible to call stack limits).
stack.set(object,other);
var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);
stack['delete'](object);
return result;

case symbolTag:
if(symbolValueOf){
return symbolValueOf.call(object)==symbolValueOf.call(other);
}}

return false;
}

/**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
function equalObjects(object,other,bitmask,customizer,equalFunc,stack){
var isPartial=bitmask&COMPARE_PARTIAL_FLAG,
objProps=getAllKeys(object),
objLength=objProps.length,
othProps=getAllKeys(other),
othLength=othProps.length;

if(objLength!=othLength&&!isPartial){
return false;
}
var index=objLength;
while(index--){
var key=objProps[index];
if(!(isPartial?key in other:hasOwnProperty.call(other,key))){
return false;
}
}
// Assume cyclic values are equal.
var stacked=stack.get(object);
if(stacked&&stack.get(other)){
return stacked==other;
}
var result=true;
stack.set(object,other);
stack.set(other,object);

var skipCtor=isPartial;
while(++index<objLength){
key=objProps[index];
var objValue=object[key],
othValue=other[key];

if(customizer){
var compared=isPartial?
customizer(othValue,objValue,key,other,object,stack):
customizer(objValue,othValue,key,object,other,stack);
}
// Recursively compare objects (susceptible to call stack limits).
if(!(compared===undefined?
objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):
compared))
{
result=false;
break;
}
skipCtor||(skipCtor=key=='constructor');
}
if(result&&!skipCtor){
var objCtor=object.constructor,
othCtor=other.constructor;

// Non `Object` object instances with different constructors are not equal.
if(objCtor!=othCtor&&
'constructor'in object&&'constructor'in other&&
!(typeof objCtor=='function'&&objCtor instanceof objCtor&&
typeof othCtor=='function'&&othCtor instanceof othCtor)){
result=false;
}
}
stack['delete'](object);
stack['delete'](other);
return result;
}

/**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
function flatRest(func){
return setToString(overRest(func,undefined,flatten),func+'');
}

/**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
function getAllKeys(object){
return baseGetAllKeys(object,keys,getSymbols);
}

/**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
function getAllKeysIn(object){
return baseGetAllKeys(object,keysIn,getSymbolsIn);
}

/**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
var getData=!metaMap?noop:function(func){
return metaMap.get(func);
};

/**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
function getFuncName(func){
var result=func.name+'',
array=realNames[result],
length=hasOwnProperty.call(realNames,result)?array.length:0;

while(length--){
var data=array[length],
otherFunc=data.func;
if(otherFunc==null||otherFunc==func){
return data.name;
}
}
return result;
}

/**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
function getHolder(func){
var object=hasOwnProperty.call(lodash,'placeholder')?lodash:func;
return object.placeholder;
}

/**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
function getIteratee(){
var result=lodash.iteratee||iteratee;
result=result===iteratee?baseIteratee:result;
return arguments.length?result(arguments[0],arguments[1]):result;
}

/**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
function getMapData(map,key){
var data=map.__data__;
return isKeyable(key)?
data[typeof key=='string'?'string':'hash']:
data.map;
}

/**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
function getMatchData(object){
var result=keys(object),
length=result.length;

while(length--){
var key=result[length],
value=object[key];

result[length]=[key,value,isStrictComparable(value)];
}
return result;
}

/**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
function getNative(object,key){
var value=getValue(object,key);
return baseIsNative(value)?value:undefined;
}

/**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
function getRawTag(value){
var isOwn=hasOwnProperty.call(value,symToStringTag),
tag=value[symToStringTag];

try{
value[symToStringTag]=undefined;
var unmasked=true;
}catch(e){}

var result=nativeObjectToString.call(value);
if(unmasked){
if(isOwn){
value[symToStringTag]=tag;
}else{
delete value[symToStringTag];
}
}
return result;
}

/**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
var getSymbols=!nativeGetSymbols?stubArray:function(object){
if(object==null){
return[];
}
object=Object(object);
return arrayFilter(nativeGetSymbols(object),function(symbol){
return propertyIsEnumerable.call(object,symbol);
});
};

/**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
var getSymbolsIn=!nativeGetSymbols?stubArray:function(object){
var result=[];
while(object){
arrayPush(result,getSymbols(object));
object=getPrototype(object);
}
return result;
};

/**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
var getTag=baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||
Map&&getTag(new Map())!=mapTag||
Promise&&getTag(Promise.resolve())!=promiseTag||
Set&&getTag(new Set())!=setTag||
WeakMap&&getTag(new WeakMap())!=weakMapTag){
getTag=function(value){
var result=baseGetTag(value),
Ctor=result==objectTag?value.constructor:undefined,
ctorString=Ctor?toSource(Ctor):'';

if(ctorString){
switch(ctorString){
case dataViewCtorString:return dataViewTag;
case mapCtorString:return mapTag;
case promiseCtorString:return promiseTag;
case setCtorString:return setTag;
case weakMapCtorString:return weakMapTag;}

}
return result;
};
}

/**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
function getView(start,end,transforms){
var index=-1,
length=transforms.length;

while(++index<length){
var data=transforms[index],
size=data.size;

switch(data.type){
case'drop':start+=size;break;
case'dropRight':end-=size;break;
case'take':end=nativeMin(end,start+size);break;
case'takeRight':start=nativeMax(start,end-size);break;}

}
return{'start':start,'end':end};
}

/**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
function getWrapDetails(source){
var match=source.match(reWrapDetails);
return match?match[1].split(reSplitDetails):[];
}

/**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
function hasPath(object,path,hasFunc){
path=castPath(path,object);

var index=-1,
length=path.length,
result=false;

while(++index<length){
var key=toKey(path[index]);
if(!(result=object!=null&&hasFunc(object,key))){
break;
}
object=object[key];
}
if(result||++index!=length){
return result;
}
length=object==null?0:object.length;
return!!length&&isLength(length)&&isIndex(key,length)&&(
isArray(object)||isArguments(object));
}

/**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
function initCloneArray(array){
var length=array.length,
result=array.constructor(length);

// Add properties assigned by `RegExp#exec`.
if(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){
result.index=array.index;
result.input=array.input;
}
return result;
}

/**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
function initCloneObject(object){
return typeof object.constructor=='function'&&!isPrototype(object)?
baseCreate(getPrototype(object)):
{};
}

/**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
function initCloneByTag(object,tag,cloneFunc,isDeep){
var Ctor=object.constructor;
switch(tag){
case arrayBufferTag:
return cloneArrayBuffer(object);

case boolTag:
case dateTag:
return new Ctor(+object);

case dataViewTag:
return cloneDataView(object,isDeep);

case float32Tag:case float64Tag:
case int8Tag:case int16Tag:case int32Tag:
case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
return cloneTypedArray(object,isDeep);

case mapTag:
return cloneMap(object,isDeep,cloneFunc);

case numberTag:
case stringTag:
return new Ctor(object);

case regexpTag:
return cloneRegExp(object);

case setTag:
return cloneSet(object,isDeep,cloneFunc);

case symbolTag:
return cloneSymbol(object);}

}

/**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
function insertWrapDetails(source,details){
var length=details.length;
if(!length){
return source;
}
var lastIndex=length-1;
details[lastIndex]=(length>1?'& ':'')+details[lastIndex];
details=details.join(length>2?', ':' ');
return source.replace(reWrapComment,'{\n/* [wrapped with '+details+'] */\n');
}

/**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
function isFlattenable(value){
return isArray(value)||isArguments(value)||
!!(spreadableSymbol&&value&&value[spreadableSymbol]);
}

/**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
function isIndex(value,length){
length=length==null?MAX_SAFE_INTEGER:length;
return!!length&&(
typeof value=='number'||reIsUint.test(value))&&
value>-1&&value%1==0&&value<length;
}

/**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
function isIterateeCall(value,index,object){
if(!isObject(object)){
return false;
}
var type=typeof index;
if(type=='number'?
isArrayLike(object)&&isIndex(index,object.length):
type=='string'&&index in object)
{
return eq(object[index],value);
}
return false;
}

/**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
function isKey(value,object){
if(isArray(value)){
return false;
}
var type=typeof value;
if(type=='number'||type=='symbol'||type=='boolean'||
value==null||isSymbol(value)){
return true;
}
return reIsPlainProp.test(value)||!reIsDeepProp.test(value)||
object!=null&&value in Object(object);
}

/**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
function isKeyable(value){
var type=typeof value;
return type=='string'||type=='number'||type=='symbol'||type=='boolean'?
value!=='__proto__':
value===null;
}

/**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
function isLaziable(func){
var funcName=getFuncName(func),
other=lodash[funcName];

if(typeof other!='function'||!(funcName in LazyWrapper.prototype)){
return false;
}
if(func===other){
return true;
}
var data=getData(other);
return!!data&&func===data[0];
}

/**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
function isMasked(func){
return!!maskSrcKey&&maskSrcKey in func;
}

/**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
var isMaskable=coreJsData?isFunction:stubFalse;

/**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
function isPrototype(value){
var Ctor=value&&value.constructor,
proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;

return value===proto;
}

/**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
function isStrictComparable(value){
return value===value&&!isObject(value);
}

/**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
function matchesStrictComparable(key,srcValue){
return function(object){
if(object==null){
return false;
}
return object[key]===srcValue&&(
srcValue!==undefined||key in Object(object));
};
}

/**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
function memoizeCapped(func){
var result=memoize(func,function(key){
if(cache.size===MAX_MEMOIZE_SIZE){
cache.clear();
}
return key;
});

var cache=result.cache;
return result;
}

/**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
function mergeData(data,source){
var bitmask=data[1],
srcBitmask=source[1],
newBitmask=bitmask|srcBitmask,
isCommon=newBitmask<(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG|WRAP_ARY_FLAG);

var isCombo=
srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_CURRY_FLAG||
srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_REARG_FLAG&&data[7].length<=source[8]||
srcBitmask==(WRAP_ARY_FLAG|WRAP_REARG_FLAG)&&source[7].length<=source[8]&&bitmask==WRAP_CURRY_FLAG;

// Exit early if metadata can't be merged.
if(!(isCommon||isCombo)){
return data;
}
// Use source `thisArg` if available.
if(srcBitmask&WRAP_BIND_FLAG){
data[2]=source[2];
// Set when currying a bound function.
newBitmask|=bitmask&WRAP_BIND_FLAG?0:WRAP_CURRY_BOUND_FLAG;
}
// Compose partial arguments.
var value=source[3];
if(value){
var partials=data[3];
data[3]=partials?composeArgs(partials,value,source[4]):value;
data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4];
}
// Compose partial right arguments.
value=source[5];
if(value){
partials=data[5];
data[5]=partials?composeArgsRight(partials,value,source[6]):value;
data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6];
}
// Use source `argPos` if available.
value=source[7];
if(value){
data[7]=value;
}
// Use source `ary` if it's smaller.
if(srcBitmask&WRAP_ARY_FLAG){
data[8]=data[8]==null?source[8]:nativeMin(data[8],source[8]);
}
// Use source `arity` if one is not provided.
if(data[9]==null){
data[9]=source[9];
}
// Use source `func` and merge bitmasks.
data[0]=source[0];
data[1]=newBitmask;

return data;
}

/**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
function nativeKeysIn(object){
var result=[];
if(object!=null){
for(var key in Object(object)){
result.push(key);
}
}
return result;
}

/**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
function objectToString(value){
return nativeObjectToString.call(value);
}

/**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
function overRest(func,start,transform){
start=nativeMax(start===undefined?func.length-1:start,0);
return function(){
var args=arguments,
index=-1,
length=nativeMax(args.length-start,0),
array=Array(length);

while(++index<length){
array[index]=args[start+index];
}
index=-1;
var otherArgs=Array(start+1);
while(++index<start){
otherArgs[index]=args[index];
}
otherArgs[start]=transform(array);
return apply(func,this,otherArgs);
};
}

/**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
function parent(object,path){
return path.length<2?object:baseGet(object,baseSlice(path,0,-1));
}

/**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
function reorder(array,indexes){
var arrLength=array.length,
length=nativeMin(indexes.length,arrLength),
oldArray=copyArray(array);

while(length--){
var index=indexes[length];
array[length]=isIndex(index,arrLength)?oldArray[index]:undefined;
}
return array;
}

/**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
var setData=shortOut(baseSetData);

/**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
var setTimeout=ctxSetTimeout||function(func,wait){
return root.setTimeout(func,wait);
};

/**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
var setToString=shortOut(baseSetToString);

/**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
function setWrapToString(wrapper,reference,bitmask){
var source=reference+'';
return setToString(wrapper,insertWrapDetails(source,updateWrapDetails(getWrapDetails(source),bitmask)));
}

/**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
function shortOut(func){
var count=0,
lastCalled=0;

return function(){
var stamp=nativeNow(),
remaining=HOT_SPAN-(stamp-lastCalled);

lastCalled=stamp;
if(remaining>0){
if(++count>=HOT_COUNT){
return arguments[0];
}
}else{
count=0;
}
return func.apply(undefined,arguments);
};
}

/**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
function shuffleSelf(array,size){
var index=-1,
length=array.length,
lastIndex=length-1;

size=size===undefined?length:size;
while(++index<size){
var rand=baseRandom(index,lastIndex),
value=array[rand];

array[rand]=array[index];
array[index]=value;
}
array.length=size;
return array;
}

/**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
var stringToPath=memoizeCapped(function(string){
var result=[];
if(reLeadingDot.test(string)){
result.push('');
}
string.replace(rePropName,function(match,number,quote,string){
result.push(quote?string.replace(reEscapeChar,'$1'):number||match);
});
return result;
});

/**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
function toKey(value){
if(typeof value=='string'||isSymbol(value)){
return value;
}
var result=value+'';
return result=='0'&&1/value==-INFINITY?'-0':result;
}

/**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
function toSource(func){
if(func!=null){
try{
return funcToString.call(func);
}catch(e){}
try{
return func+'';
}catch(e){}
}
return'';
}

/**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
function updateWrapDetails(details,bitmask){
arrayEach(wrapFlags,function(pair){
var value='_.'+pair[0];
if(bitmask&pair[1]&&!arrayIncludes(details,value)){
details.push(value);
}
});
return details.sort();
}

/**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
function wrapperClone(wrapper){
if(wrapper instanceof LazyWrapper){
return wrapper.clone();
}
var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);
result.__actions__=copyArray(wrapper.__actions__);
result.__index__=wrapper.__index__;
result.__values__=wrapper.__values__;
return result;
}

/*------------------------------------------------------------------------*/

/**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
function chunk(array,size,guard){
if(guard?isIterateeCall(array,size,guard):size===undefined){
size=1;
}else{
size=nativeMax(toInteger(size),0);
}
var length=array==null?0:array.length;
if(!length||size<1){
return[];
}
var index=0,
resIndex=0,
result=Array(nativeCeil(length/size));

while(index<length){
result[resIndex++]=baseSlice(array,index,index+=size);
}
return result;
}

/**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
function compact(array){
var index=-1,
length=array==null?0:array.length,
resIndex=0,
result=[];

while(++index<length){
var value=array[index];
if(value){
result[resIndex++]=value;
}
}
return result;
}

/**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
function concat(){
var length=arguments.length;
if(!length){
return[];
}
var args=Array(length-1),
array=arguments[0],
index=length;

while(index--){
args[index-1]=arguments[index];
}
return arrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1));
}

/**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
var difference=baseRest(function(array,values){
return isArrayLikeObject(array)?
baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true)):
[];
});

/**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
var differenceBy=baseRest(function(array,values){
var iteratee=last(values);
if(isArrayLikeObject(iteratee)){
iteratee=undefined;
}
return isArrayLikeObject(array)?
baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),getIteratee(iteratee,2)):
[];
});

/**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
var differenceWith=baseRest(function(array,values){
var comparator=last(values);
if(isArrayLikeObject(comparator)){
comparator=undefined;
}
return isArrayLikeObject(array)?
baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),undefined,comparator):
[];
});

/**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
function drop(array,n,guard){
var length=array==null?0:array.length;
if(!length){
return[];
}
n=guard||n===undefined?1:toInteger(n);
return baseSlice(array,n<0?0:n,length);
}

/**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
function dropRight(array,n,guard){
var length=array==null?0:array.length;
if(!length){
return[];
}
n=guard||n===undefined?1:toInteger(n);
n=length-n;
return baseSlice(array,0,n<0?0:n);
}

/**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
function dropRightWhile(array,predicate){
return array&&array.length?
baseWhile(array,getIteratee(predicate,3),true,true):
[];
}

/**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
function dropWhile(array,predicate){
return array&&array.length?
baseWhile(array,getIteratee(predicate,3),true):
[];
}

/**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
function fill(array,value,start,end){
var length=array==null?0:array.length;
if(!length){
return[];
}
if(start&&typeof start!='number'&&isIterateeCall(array,value,start)){
start=0;
end=length;
}
return baseFill(array,value,start,end);
}

/**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
function findIndex(array,predicate,fromIndex){
var length=array==null?0:array.length;
if(!length){
return-1;
}
var index=fromIndex==null?0:toInteger(fromIndex);
if(index<0){
index=nativeMax(length+index,0);
}
return baseFindIndex(array,getIteratee(predicate,3),index);
}

/**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
function findLastIndex(array,predicate,fromIndex){
var length=array==null?0:array.length;
if(!length){
return-1;
}
var index=length-1;
if(fromIndex!==undefined){
index=toInteger(fromIndex);
index=fromIndex<0?
nativeMax(length+index,0):
nativeMin(index,length-1);
}
return baseFindIndex(array,getIteratee(predicate,3),index,true);
}

/**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
function flatten(array){
var length=array==null?0:array.length;
return length?baseFlatten(array,1):[];
}

/**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
function flattenDeep(array){
var length=array==null?0:array.length;
return length?baseFlatten(array,INFINITY):[];
}

/**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
function flattenDepth(array,depth){
var length=array==null?0:array.length;
if(!length){
return[];
}
depth=depth===undefined?1:toInteger(depth);
return baseFlatten(array,depth);
}

/**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
function fromPairs(pairs){
var index=-1,
length=pairs==null?0:pairs.length,
result={};

while(++index<length){
var pair=pairs[index];
result[pair[0]]=pair[1];
}
return result;
}

/**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
function head(array){
return array&&array.length?array[0]:undefined;
}

/**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
function indexOf(array,value,fromIndex){
var length=array==null?0:array.length;
if(!length){
return-1;
}
var index=fromIndex==null?0:toInteger(fromIndex);
if(index<0){
index=nativeMax(length+index,0);
}
return baseIndexOf(array,value,index);
}

/**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
function initial(array){
var length=array==null?0:array.length;
return length?baseSlice(array,0,-1):[];
}

/**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
var intersection=baseRest(function(arrays){
var mapped=arrayMap(arrays,castArrayLikeObject);
return mapped.length&&mapped[0]===arrays[0]?
baseIntersection(mapped):
[];
});

/**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
var intersectionBy=baseRest(function(arrays){
var iteratee=last(arrays),
mapped=arrayMap(arrays,castArrayLikeObject);

if(iteratee===last(mapped)){
iteratee=undefined;
}else{
mapped.pop();
}
return mapped.length&&mapped[0]===arrays[0]?
baseIntersection(mapped,getIteratee(iteratee,2)):
[];
});

/**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
var intersectionWith=baseRest(function(arrays){
var comparator=last(arrays),
mapped=arrayMap(arrays,castArrayLikeObject);

comparator=typeof comparator=='function'?comparator:undefined;
if(comparator){
mapped.pop();
}
return mapped.length&&mapped[0]===arrays[0]?
baseIntersection(mapped,undefined,comparator):
[];
});

/**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
function join(array,separator){
return array==null?'':nativeJoin.call(array,separator);
}

/**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
function last(array){
var length=array==null?0:array.length;
return length?array[length-1]:undefined;
}

/**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
function lastIndexOf(array,value,fromIndex){
var length=array==null?0:array.length;
if(!length){
return-1;
}
var index=length;
if(fromIndex!==undefined){
index=toInteger(fromIndex);
index=index<0?nativeMax(length+index,0):nativeMin(index,length-1);
}
return value===value?
strictLastIndexOf(array,value,index):
baseFindIndex(array,baseIsNaN,index,true);
}

/**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
function nth(array,n){
return array&&array.length?baseNth(array,toInteger(n)):undefined;
}

/**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
var pull=baseRest(pullAll);

/**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
function pullAll(array,values){
return array&&array.length&&values&&values.length?
basePullAll(array,values):
array;
}

/**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
function pullAllBy(array,values,iteratee){
return array&&array.length&&values&&values.length?
basePullAll(array,values,getIteratee(iteratee,2)):
array;
}

/**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
function pullAllWith(array,values,comparator){
return array&&array.length&&values&&values.length?
basePullAll(array,values,undefined,comparator):
array;
}

/**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
var pullAt=flatRest(function(array,indexes){
var length=array==null?0:array.length,
result=baseAt(array,indexes);

basePullAt(array,arrayMap(indexes,function(index){
return isIndex(index,length)?+index:index;
}).sort(compareAscending));

return result;
});

/**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
function remove(array,predicate){
var result=[];
if(!(array&&array.length)){
return result;
}
var index=-1,
indexes=[],
length=array.length;

predicate=getIteratee(predicate,3);
while(++index<length){
var value=array[index];
if(predicate(value,index,array)){
result.push(value);
indexes.push(index);
}
}
basePullAt(array,indexes);
return result;
}

/**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
function reverse(array){
return array==null?array:nativeReverse.call(array);
}

/**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
function slice(array,start,end){
var length=array==null?0:array.length;
if(!length){
return[];
}
if(end&&typeof end!='number'&&isIterateeCall(array,start,end)){
start=0;
end=length;
}else
{
start=start==null?0:toInteger(start);
end=end===undefined?length:toInteger(end);
}
return baseSlice(array,start,end);
}

/**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
function sortedIndex(array,value){
return baseSortedIndex(array,value);
}

/**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
function sortedIndexBy(array,value,iteratee){
return baseSortedIndexBy(array,value,getIteratee(iteratee,2));
}

/**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
function sortedIndexOf(array,value){
var length=array==null?0:array.length;
if(length){
var index=baseSortedIndex(array,value);
if(index<length&&eq(array[index],value)){
return index;
}
}
return-1;
}

/**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
function sortedLastIndex(array,value){
return baseSortedIndex(array,value,true);
}

/**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
function sortedLastIndexBy(array,value,iteratee){
return baseSortedIndexBy(array,value,getIteratee(iteratee,2),true);
}

/**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
function sortedLastIndexOf(array,value){
var length=array==null?0:array.length;
if(length){
var index=baseSortedIndex(array,value,true)-1;
if(eq(array[index],value)){
return index;
}
}
return-1;
}

/**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
function sortedUniq(array){
return array&&array.length?
baseSortedUniq(array):
[];
}

/**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
function sortedUniqBy(array,iteratee){
return array&&array.length?
baseSortedUniq(array,getIteratee(iteratee,2)):
[];
}

/**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
function tail(array){
var length=array==null?0:array.length;
return length?baseSlice(array,1,length):[];
}

/**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
function take(array,n,guard){
if(!(array&&array.length)){
return[];
}
n=guard||n===undefined?1:toInteger(n);
return baseSlice(array,0,n<0?0:n);
}

/**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
function takeRight(array,n,guard){
var length=array==null?0:array.length;
if(!length){
return[];
}
n=guard||n===undefined?1:toInteger(n);
n=length-n;
return baseSlice(array,n<0?0:n,length);
}

/**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
function takeRightWhile(array,predicate){
return array&&array.length?
baseWhile(array,getIteratee(predicate,3),false,true):
[];
}

/**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
function takeWhile(array,predicate){
return array&&array.length?
baseWhile(array,getIteratee(predicate,3)):
[];
}

/**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
var union=baseRest(function(arrays){
return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true));
});

/**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
var unionBy=baseRest(function(arrays){
var iteratee=last(arrays);
if(isArrayLikeObject(iteratee)){
iteratee=undefined;
}
return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),getIteratee(iteratee,2));
});

/**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
var unionWith=baseRest(function(arrays){
var comparator=last(arrays);
comparator=typeof comparator=='function'?comparator:undefined;
return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),undefined,comparator);
});

/**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
function uniq(array){
return array&&array.length?baseUniq(array):[];
}

/**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
function uniqBy(array,iteratee){
return array&&array.length?baseUniq(array,getIteratee(iteratee,2)):[];
}

/**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
function uniqWith(array,comparator){
comparator=typeof comparator=='function'?comparator:undefined;
return array&&array.length?baseUniq(array,undefined,comparator):[];
}

/**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
function unzip(array){
if(!(array&&array.length)){
return[];
}
var length=0;
array=arrayFilter(array,function(group){
if(isArrayLikeObject(group)){
length=nativeMax(group.length,length);
return true;
}
});
return baseTimes(length,function(index){
return arrayMap(array,baseProperty(index));
});
}

/**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
function unzipWith(array,iteratee){
if(!(array&&array.length)){
return[];
}
var result=unzip(array);
if(iteratee==null){
return result;
}
return arrayMap(result,function(group){
return apply(iteratee,undefined,group);
});
}

/**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
var without=baseRest(function(array,values){
return isArrayLikeObject(array)?
baseDifference(array,values):
[];
});

/**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
var xor=baseRest(function(arrays){
return baseXor(arrayFilter(arrays,isArrayLikeObject));
});

/**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
var xorBy=baseRest(function(arrays){
var iteratee=last(arrays);
if(isArrayLikeObject(iteratee)){
iteratee=undefined;
}
return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2));
});

/**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
var xorWith=baseRest(function(arrays){
var comparator=last(arrays);
comparator=typeof comparator=='function'?comparator:undefined;
return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined,comparator);
});

/**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
var zip=baseRest(unzip);

/**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
function zipObject(props,values){
return baseZipObject(props||[],values||[],assignValue);
}

/**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
function zipObjectDeep(props,values){
return baseZipObject(props||[],values||[],baseSet);
}

/**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
var zipWith=baseRest(function(arrays){
var length=arrays.length,
iteratee=length>1?arrays[length-1]:undefined;

iteratee=typeof iteratee=='function'?(arrays.pop(),iteratee):undefined;
return unzipWith(arrays,iteratee);
});

/*------------------------------------------------------------------------*/

/**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
function chain(value){
var result=lodash(value);
result.__chain__=true;
return result;
}

/**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
function tap(value,interceptor){
interceptor(value);
return value;
}

/**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
function thru(value,interceptor){
return interceptor(value);
}

/**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
var wrapperAt=flatRest(function(paths){
var length=paths.length,
start=length?paths[0]:0,
value=this.__wrapped__,
interceptor=function(object){return baseAt(object,paths);};

if(length>1||this.__actions__.length||
!(value instanceof LazyWrapper)||!isIndex(start)){
return this.thru(interceptor);
}
value=value.slice(start,+start+(length?1:0));
value.__actions__.push({
'func':thru,
'args':[interceptor],
'thisArg':undefined});

return new LodashWrapper(value,this.__chain__).thru(function(array){
if(length&&!array.length){
array.push(undefined);
}
return array;
});
});

/**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
function wrapperChain(){
return chain(this);
}

/**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
function wrapperCommit(){
return new LodashWrapper(this.value(),this.__chain__);
}

/**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
function wrapperNext(){
if(this.__values__===undefined){
this.__values__=toArray(this.value());
}
var done=this.__index__>=this.__values__.length,
value=done?undefined:this.__values__[this.__index__++];

return{'done':done,'value':value};
}

/**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
function wrapperToIterator(){
return this;
}

/**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
function wrapperPlant(value){
var result,
parent=this;

while(parent instanceof baseLodash){
var clone=wrapperClone(parent);
clone.__index__=0;
clone.__values__=undefined;
if(result){
previous.__wrapped__=clone;
}else{
result=clone;
}
var previous=clone;
parent=parent.__wrapped__;
}
previous.__wrapped__=value;
return result;
}

/**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
function wrapperReverse(){
var value=this.__wrapped__;
if(value instanceof LazyWrapper){
var wrapped=value;
if(this.__actions__.length){
wrapped=new LazyWrapper(this);
}
wrapped=wrapped.reverse();
wrapped.__actions__.push({
'func':thru,
'args':[reverse],
'thisArg':undefined});

return new LodashWrapper(wrapped,this.__chain__);
}
return this.thru(reverse);
}

/**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
function wrapperValue(){
return baseWrapperValue(this.__wrapped__,this.__actions__);
}

/*------------------------------------------------------------------------*/

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
var countBy=createAggregator(function(result,value,key){
if(hasOwnProperty.call(result,key)){
++result[key];
}else{
baseAssignValue(result,key,1);
}
});

/**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
function every(collection,predicate,guard){
var func=isArray(collection)?arrayEvery:baseEvery;
if(guard&&isIterateeCall(collection,predicate,guard)){
predicate=undefined;
}
return func(collection,getIteratee(predicate,3));
}

/**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
function filter(collection,predicate){
var func=isArray(collection)?arrayFilter:baseFilter;
return func(collection,getIteratee(predicate,3));
}

/**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
var find=createFind(findIndex);

/**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
var findLast=createFind(findLastIndex);

/**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
function flatMap(collection,iteratee){
return baseFlatten(map(collection,iteratee),1);
}

/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
function flatMapDeep(collection,iteratee){
return baseFlatten(map(collection,iteratee),INFINITY);
}

/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
function flatMapDepth(collection,iteratee,depth){
depth=depth===undefined?1:toInteger(depth);
return baseFlatten(map(collection,iteratee),depth);
}

/**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
function forEach(collection,iteratee){
var func=isArray(collection)?arrayEach:baseEach;
return func(collection,getIteratee(iteratee,3));
}

/**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
function forEachRight(collection,iteratee){
var func=isArray(collection)?arrayEachRight:baseEachRight;
return func(collection,getIteratee(iteratee,3));
}

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
var groupBy=createAggregator(function(result,value,key){
if(hasOwnProperty.call(result,key)){
result[key].push(value);
}else{
baseAssignValue(result,key,[value]);
}
});

/**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
function includes(collection,value,fromIndex,guard){
collection=isArrayLike(collection)?collection:values(collection);
fromIndex=fromIndex&&!guard?toInteger(fromIndex):0;

var length=collection.length;
if(fromIndex<0){
fromIndex=nativeMax(length+fromIndex,0);
}
return isString(collection)?
fromIndex<=length&&collection.indexOf(value,fromIndex)>-1:
!!length&&baseIndexOf(collection,value,fromIndex)>-1;
}

/**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
var invokeMap=baseRest(function(collection,path,args){
var index=-1,
isFunc=typeof path=='function',
result=isArrayLike(collection)?Array(collection.length):[];

baseEach(collection,function(value){
result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args);
});
return result;
});

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
var keyBy=createAggregator(function(result,value,key){
baseAssignValue(result,key,value);
});

/**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
function map(collection,iteratee){
var func=isArray(collection)?arrayMap:baseMap;
return func(collection,getIteratee(iteratee,3));
}

/**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
function orderBy(collection,iteratees,orders,guard){
if(collection==null){
return[];
}
if(!isArray(iteratees)){
iteratees=iteratees==null?[]:[iteratees];
}
orders=guard?undefined:orders;
if(!isArray(orders)){
orders=orders==null?[]:[orders];
}
return baseOrderBy(collection,iteratees,orders);
}

/**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
var partition=createAggregator(function(result,value,key){
result[key?0:1].push(value);
},function(){return[[],[]];});

/**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
function reduce(collection,iteratee,accumulator){
var func=isArray(collection)?arrayReduce:baseReduce,
initAccum=arguments.length<3;

return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);
}

/**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
function reduceRight(collection,iteratee,accumulator){
var func=isArray(collection)?arrayReduceRight:baseReduce,
initAccum=arguments.length<3;

return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);
}

/**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
function reject(collection,predicate){
var func=isArray(collection)?arrayFilter:baseFilter;
return func(collection,negate(getIteratee(predicate,3)));
}

/**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
function sample(collection){
var func=isArray(collection)?arraySample:baseSample;
return func(collection);
}

/**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
function sampleSize(collection,n,guard){
if(guard?isIterateeCall(collection,n,guard):n===undefined){
n=1;
}else{
n=toInteger(n);
}
var func=isArray(collection)?arraySampleSize:baseSampleSize;
return func(collection,n);
}

/**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
function shuffle(collection){
var func=isArray(collection)?arrayShuffle:baseShuffle;
return func(collection);
}

/**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
function size(collection){
if(collection==null){
return 0;
}
if(isArrayLike(collection)){
return isString(collection)?stringSize(collection):collection.length;
}
var tag=getTag(collection);
if(tag==mapTag||tag==setTag){
return collection.size;
}
return baseKeys(collection).length;
}

/**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
function some(collection,predicate,guard){
var func=isArray(collection)?arraySome:baseSome;
if(guard&&isIterateeCall(collection,predicate,guard)){
predicate=undefined;
}
return func(collection,getIteratee(predicate,3));
}

/**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
var sortBy=baseRest(function(collection,iteratees){
if(collection==null){
return[];
}
var length=iteratees.length;
if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){
iteratees=[];
}else if(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){
iteratees=[iteratees[0]];
}
return baseOrderBy(collection,baseFlatten(iteratees,1),[]);
});

/*------------------------------------------------------------------------*/

/**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
var now=ctxNow||function(){
return root.Date.now();
};

/*------------------------------------------------------------------------*/

/**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
function after(n,func){
if(typeof func!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
n=toInteger(n);
return function(){
if(--n<1){
return func.apply(this,arguments);
}
};
}

/**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
function ary(func,n,guard){
n=guard?undefined:n;
n=func&&n==null?func.length:n;
return createWrap(func,WRAP_ARY_FLAG,undefined,undefined,undefined,undefined,n);
}

/**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
function before(n,func){
var result;
if(typeof func!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
n=toInteger(n);
return function(){
if(--n>0){
result=func.apply(this,arguments);
}
if(n<=1){
func=undefined;
}
return result;
};
}

/**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
var bind=baseRest(function(func,thisArg,partials){
var bitmask=WRAP_BIND_FLAG;
if(partials.length){
var holders=replaceHolders(partials,getHolder(bind));
bitmask|=WRAP_PARTIAL_FLAG;
}
return createWrap(func,bitmask,thisArg,partials,holders);
});

/**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
var bindKey=baseRest(function(object,key,partials){
var bitmask=WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG;
if(partials.length){
var holders=replaceHolders(partials,getHolder(bindKey));
bitmask|=WRAP_PARTIAL_FLAG;
}
return createWrap(key,bitmask,object,partials,holders);
});

/**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
function curry(func,arity,guard){
arity=guard?undefined:arity;
var result=createWrap(func,WRAP_CURRY_FLAG,undefined,undefined,undefined,undefined,undefined,arity);
result.placeholder=curry.placeholder;
return result;
}

/**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
function curryRight(func,arity,guard){
arity=guard?undefined:arity;
var result=createWrap(func,WRAP_CURRY_RIGHT_FLAG,undefined,undefined,undefined,undefined,undefined,arity);
result.placeholder=curryRight.placeholder;
return result;
}

/**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
function debounce(func,wait,options){
var lastArgs,
lastThis,
maxWait,
result,
timerId,
lastCallTime,
lastInvokeTime=0,
leading=false,
maxing=false,
trailing=true;

if(typeof func!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
wait=toNumber(wait)||0;
if(isObject(options)){
leading=!!options.leading;
maxing='maxWait'in options;
maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;
trailing='trailing'in options?!!options.trailing:trailing;
}

function invokeFunc(time){
var args=lastArgs,
thisArg=lastThis;

lastArgs=lastThis=undefined;
lastInvokeTime=time;
result=func.apply(thisArg,args);
return result;
}

function leadingEdge(time){
// Reset any `maxWait` timer.
lastInvokeTime=time;
// Start the timer for the trailing edge.
timerId=setTimeout(timerExpired,wait);
// Invoke the leading edge.
return leading?invokeFunc(time):result;
}

function remainingWait(time){
var timeSinceLastCall=time-lastCallTime,
timeSinceLastInvoke=time-lastInvokeTime,
result=wait-timeSinceLastCall;

return maxing?nativeMin(result,maxWait-timeSinceLastInvoke):result;
}

function shouldInvoke(time){
var timeSinceLastCall=time-lastCallTime,
timeSinceLastInvoke=time-lastInvokeTime;

// Either this is the first call, activity has stopped and we're at the
// trailing edge, the system time has gone backwards and we're treating
// it as the trailing edge, or we've hit the `maxWait` limit.
return lastCallTime===undefined||timeSinceLastCall>=wait||
timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;
}

function timerExpired(){
var time=now();
if(shouldInvoke(time)){
return trailingEdge(time);
}
// Restart the timer.
timerId=setTimeout(timerExpired,remainingWait(time));
}

function trailingEdge(time){
timerId=undefined;

// Only invoke if we have `lastArgs` which means `func` has been
// debounced at least once.
if(trailing&&lastArgs){
return invokeFunc(time);
}
lastArgs=lastThis=undefined;
return result;
}

function cancel(){
if(timerId!==undefined){
clearTimeout(timerId);
}
lastInvokeTime=0;
lastArgs=lastCallTime=lastThis=timerId=undefined;
}

function flush(){
return timerId===undefined?result:trailingEdge(now());
}

function debounced(){
var time=now(),
isInvoking=shouldInvoke(time);

lastArgs=arguments;
lastThis=this;
lastCallTime=time;

if(isInvoking){
if(timerId===undefined){
return leadingEdge(lastCallTime);
}
if(maxing){
// Handle invocations in a tight loop.
timerId=setTimeout(timerExpired,wait);
return invokeFunc(lastCallTime);
}
}
if(timerId===undefined){
timerId=setTimeout(timerExpired,wait);
}
return result;
}
debounced.cancel=cancel;
debounced.flush=flush;
return debounced;
}

/**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
var defer=baseRest(function(func,args){
return baseDelay(func,1,args);
});

/**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
var delay=baseRest(function(func,wait,args){
return baseDelay(func,toNumber(wait)||0,args);
});

/**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
function flip(func){
return createWrap(func,WRAP_FLIP_FLAG);
}

/**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
function memoize(func,resolver){
if(typeof func!='function'||resolver!=null&&typeof resolver!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
var memoized=function(){
var args=arguments,
key=resolver?resolver.apply(this,args):args[0],
cache=memoized.cache;

if(cache.has(key)){
return cache.get(key);
}
var result=func.apply(this,args);
memoized.cache=cache.set(key,result)||cache;
return result;
};
memoized.cache=new(memoize.Cache||MapCache)();
return memoized;
}

// Expose `MapCache`.
memoize.Cache=MapCache;

/**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
function negate(predicate){
if(typeof predicate!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
return function(){
var args=arguments;
switch(args.length){
case 0:return!predicate.call(this);
case 1:return!predicate.call(this,args[0]);
case 2:return!predicate.call(this,args[0],args[1]);
case 3:return!predicate.call(this,args[0],args[1],args[2]);}

return!predicate.apply(this,args);
};
}

/**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
function once(func){
return before(2,func);
}

/**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
var overArgs=castRest(function(func,transforms){
transforms=transforms.length==1&&isArray(transforms[0])?
arrayMap(transforms[0],baseUnary(getIteratee())):
arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()));

var funcsLength=transforms.length;
return baseRest(function(args){
var index=-1,
length=nativeMin(args.length,funcsLength);

while(++index<length){
args[index]=transforms[index].call(this,args[index]);
}
return apply(func,this,args);
});
});

/**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
var partial=baseRest(function(func,partials){
var holders=replaceHolders(partials,getHolder(partial));
return createWrap(func,WRAP_PARTIAL_FLAG,undefined,partials,holders);
});

/**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
var partialRight=baseRest(function(func,partials){
var holders=replaceHolders(partials,getHolder(partialRight));
return createWrap(func,WRAP_PARTIAL_RIGHT_FLAG,undefined,partials,holders);
});

/**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
var rearg=flatRest(function(func,indexes){
return createWrap(func,WRAP_REARG_FLAG,undefined,undefined,undefined,indexes);
});

/**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
function rest(func,start){
if(typeof func!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
start=start===undefined?start:toInteger(start);
return baseRest(func,start);
}

/**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
function spread(func,start){
if(typeof func!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
start=start==null?0:nativeMax(toInteger(start),0);
return baseRest(function(args){
var array=args[start],
otherArgs=castSlice(args,0,start);

if(array){
arrayPush(otherArgs,array);
}
return apply(func,this,otherArgs);
});
}

/**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
function throttle(func,wait,options){
var leading=true,
trailing=true;

if(typeof func!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
if(isObject(options)){
leading='leading'in options?!!options.leading:leading;
trailing='trailing'in options?!!options.trailing:trailing;
}
return debounce(func,wait,{
'leading':leading,
'maxWait':wait,
'trailing':trailing});

}

/**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
function unary(func){
return ary(func,1);
}

/**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
function wrap(value,wrapper){
return partial(castFunction(wrapper),value);
}

/*------------------------------------------------------------------------*/

/**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
function castArray(){
if(!arguments.length){
return[];
}
var value=arguments[0];
return isArray(value)?value:[value];
}

/**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
function clone(value){
return baseClone(value,CLONE_SYMBOLS_FLAG);
}

/**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
function cloneWith(value,customizer){
customizer=typeof customizer=='function'?customizer:undefined;
return baseClone(value,CLONE_SYMBOLS_FLAG,customizer);
}

/**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
function cloneDeep(value){
return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG);
}

/**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
function cloneDeepWith(value,customizer){
customizer=typeof customizer=='function'?customizer:undefined;
return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG,customizer);
}

/**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
function conformsTo(object,source){
return source==null||baseConformsTo(object,source,keys(source));
}

/**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
function eq(value,other){
return value===other||value!==value&&other!==other;
}

/**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
var gt=createRelationalOperation(baseGt);

/**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
var gte=createRelationalOperation(function(value,other){
return value>=other;
});

/**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){
return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&
!propertyIsEnumerable.call(value,'callee');
};

/**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
var isArray=Array.isArray;

/**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
var isArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):baseIsArrayBuffer;

/**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
function isArrayLike(value){
return value!=null&&isLength(value.length)&&!isFunction(value);
}

/**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
function isArrayLikeObject(value){
return isObjectLike(value)&&isArrayLike(value);
}

/**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
function isBoolean(value){
return value===true||value===false||
isObjectLike(value)&&baseGetTag(value)==boolTag;
}

/**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
var isBuffer=nativeIsBuffer||stubFalse;

/**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
var isDate=nodeIsDate?baseUnary(nodeIsDate):baseIsDate;

/**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
function isElement(value){
return isObjectLike(value)&&value.nodeType===1&&!isPlainObject(value);
}

/**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
function isEmpty(value){
if(value==null){
return true;
}
if(isArrayLike(value)&&(
isArray(value)||typeof value=='string'||typeof value.splice=='function'||
isBuffer(value)||isTypedArray(value)||isArguments(value))){
return!value.length;
}
var tag=getTag(value);
if(tag==mapTag||tag==setTag){
return!value.size;
}
if(isPrototype(value)){
return!baseKeys(value).length;
}
for(var key in value){
if(hasOwnProperty.call(value,key)){
return false;
}
}
return true;
}

/**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
function isEqual(value,other){
return baseIsEqual(value,other);
}

/**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
function isEqualWith(value,other,customizer){
customizer=typeof customizer=='function'?customizer:undefined;
var result=customizer?customizer(value,other):undefined;
return result===undefined?baseIsEqual(value,other,undefined,customizer):!!result;
}

/**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
function isError(value){
if(!isObjectLike(value)){
return false;
}
var tag=baseGetTag(value);
return tag==errorTag||tag==domExcTag||
typeof value.message=='string'&&typeof value.name=='string'&&!isPlainObject(value);
}

/**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
function isFinite(value){
return typeof value=='number'&&nativeIsFinite(value);
}

/**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
function isFunction(value){
if(!isObject(value)){
return false;
}
// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 9 which returns 'object' for typed arrays and other constructors.
var tag=baseGetTag(value);
return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;
}

/**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
function isInteger(value){
return typeof value=='number'&&value==toInteger(value);
}

/**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
function isLength(value){
return typeof value=='number'&&
value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;
}

/**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
function isObject(value){
var type=typeof value;
return value!=null&&(type=='object'||type=='function');
}

/**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
function isObjectLike(value){
return value!=null&&typeof value=='object';
}

/**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
var isMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;

/**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
function isMatch(object,source){
return object===source||baseIsMatch(object,source,getMatchData(source));
}

/**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
function isMatchWith(object,source,customizer){
customizer=typeof customizer=='function'?customizer:undefined;
return baseIsMatch(object,source,getMatchData(source),customizer);
}

/**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
function isNaN(value){
// An `NaN` primitive is the only value that is not equal to itself.
// Perform the `toStringTag` check first to avoid errors with some
// ActiveX objects in IE.
return isNumber(value)&&value!=+value;
}

/**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
function isNative(value){
if(isMaskable(value)){
throw new Error(CORE_ERROR_TEXT);
}
return baseIsNative(value);
}

/**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
function isNull(value){
return value===null;
}

/**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
function isNil(value){
return value==null;
}

/**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
function isNumber(value){
return typeof value=='number'||
isObjectLike(value)&&baseGetTag(value)==numberTag;
}

/**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
function isPlainObject(value){
if(!isObjectLike(value)||baseGetTag(value)!=objectTag){
return false;
}
var proto=getPrototype(value);
if(proto===null){
return true;
}
var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;
return typeof Ctor=='function'&&Ctor instanceof Ctor&&
funcToString.call(Ctor)==objectCtorString;
}

/**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
var isRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):baseIsRegExp;

/**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
function isSafeInteger(value){
return isInteger(value)&&value>=-MAX_SAFE_INTEGER&&value<=MAX_SAFE_INTEGER;
}

/**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
var isSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;

/**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
function isString(value){
return typeof value=='string'||
!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag;
}

/**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
function isSymbol(value){
return typeof value=='symbol'||
isObjectLike(value)&&baseGetTag(value)==symbolTag;
}

/**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;

/**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
function isUndefined(value){
return value===undefined;
}

/**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
function isWeakMap(value){
return isObjectLike(value)&&getTag(value)==weakMapTag;
}

/**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
function isWeakSet(value){
return isObjectLike(value)&&baseGetTag(value)==weakSetTag;
}

/**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
var lt=createRelationalOperation(baseLt);

/**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
var lte=createRelationalOperation(function(value,other){
return value<=other;
});

/**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
function toArray(value){
if(!value){
return[];
}
if(isArrayLike(value)){
return isString(value)?stringToArray(value):copyArray(value);
}
if(symIterator&&value[symIterator]){
return iteratorToArray(value[symIterator]());
}
var tag=getTag(value),
func=tag==mapTag?mapToArray:tag==setTag?setToArray:values;

return func(value);
}

/**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
function toFinite(value){
if(!value){
return value===0?value:0;
}
value=toNumber(value);
if(value===INFINITY||value===-INFINITY){
var sign=value<0?-1:1;
return sign*MAX_INTEGER;
}
return value===value?value:0;
}

/**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
function toInteger(value){
var result=toFinite(value),
remainder=result%1;

return result===result?remainder?result-remainder:result:0;
}

/**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
function toLength(value){
return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;
}

/**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
function toNumber(value){
if(typeof value=='number'){
return value;
}
if(isSymbol(value)){
return NAN;
}
if(isObject(value)){
var other=typeof value.valueOf=='function'?value.valueOf():value;
value=isObject(other)?other+'':other;
}
if(typeof value!='string'){
return value===0?value:+value;
}
value=value.replace(reTrim,'');
var isBinary=reIsBinary.test(value);
return isBinary||reIsOctal.test(value)?
freeParseInt(value.slice(2),isBinary?2:8):
reIsBadHex.test(value)?NAN:+value;
}

/**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
function toPlainObject(value){
return copyObject(value,keysIn(value));
}

/**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
function toSafeInteger(value){
return value?
baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER):
value===0?value:0;
}

/**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
function toString(value){
return value==null?'':baseToString(value);
}

/*------------------------------------------------------------------------*/

/**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
var assign=createAssigner(function(object,source){
if(isPrototype(source)||isArrayLike(source)){
copyObject(source,keys(source),object);
return;
}
for(var key in source){
if(hasOwnProperty.call(source,key)){
assignValue(object,key,source[key]);
}
}
});

/**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
var assignIn=createAssigner(function(object,source){
copyObject(source,keysIn(source),object);
});

/**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
var assignInWith=createAssigner(function(object,source,srcIndex,customizer){
copyObject(source,keysIn(source),object,customizer);
});

/**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
var assignWith=createAssigner(function(object,source,srcIndex,customizer){
copyObject(source,keys(source),object,customizer);
});

/**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
var at=flatRest(baseAt);

/**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
function create(prototype,properties){
var result=baseCreate(prototype);
return properties==null?result:baseAssign(result,properties);
}

/**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
var defaults=baseRest(function(args){
args.push(undefined,customDefaultsAssignIn);
return apply(assignInWith,undefined,args);
});

/**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
var defaultsDeep=baseRest(function(args){
args.push(undefined,customDefaultsMerge);
return apply(mergeWith,undefined,args);
});

/**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
function findKey(object,predicate){
return baseFindKey(object,getIteratee(predicate,3),baseForOwn);
}

/**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
function findLastKey(object,predicate){
return baseFindKey(object,getIteratee(predicate,3),baseForOwnRight);
}

/**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
function forIn(object,iteratee){
return object==null?
object:
baseFor(object,getIteratee(iteratee,3),keysIn);
}

/**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
function forInRight(object,iteratee){
return object==null?
object:
baseForRight(object,getIteratee(iteratee,3),keysIn);
}

/**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
function forOwn(object,iteratee){
return object&&baseForOwn(object,getIteratee(iteratee,3));
}

/**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
function forOwnRight(object,iteratee){
return object&&baseForOwnRight(object,getIteratee(iteratee,3));
}

/**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
function functions(object){
return object==null?[]:baseFunctions(object,keys(object));
}

/**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
function functionsIn(object){
return object==null?[]:baseFunctions(object,keysIn(object));
}

/**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
function get(object,path,defaultValue){
var result=object==null?undefined:baseGet(object,path);
return result===undefined?defaultValue:result;
}

/**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
function has(object,path){
return object!=null&&hasPath(object,path,baseHas);
}

/**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
function hasIn(object,path){
return object!=null&&hasPath(object,path,baseHasIn);
}

/**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
var invert=createInverter(function(result,value,key){
result[value]=key;
},constant(identity));

/**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
var invertBy=createInverter(function(result,value,key){
if(hasOwnProperty.call(result,value)){
result[value].push(key);
}else{
result[value]=[key];
}
},getIteratee);

/**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
var invoke=baseRest(baseInvoke);

/**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
function keys(object){
return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);
}

/**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
function keysIn(object){
return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);
}

/**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
function mapKeys(object,iteratee){
var result={};
iteratee=getIteratee(iteratee,3);

baseForOwn(object,function(value,key,object){
baseAssignValue(result,iteratee(value,key,object),value);
});
return result;
}

/**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
function mapValues(object,iteratee){
var result={};
iteratee=getIteratee(iteratee,3);

baseForOwn(object,function(value,key,object){
baseAssignValue(result,key,iteratee(value,key,object));
});
return result;
}

/**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
var merge=createAssigner(function(object,source,srcIndex){
baseMerge(object,source,srcIndex);
});

/**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
var mergeWith=createAssigner(function(object,source,srcIndex,customizer){
baseMerge(object,source,srcIndex,customizer);
});

/**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
var omit=flatRest(function(object,paths){
var result={};
if(object==null){
return result;
}
var isDeep=false;
paths=arrayMap(paths,function(path){
path=castPath(path,object);
isDeep||(isDeep=path.length>1);
return path;
});
copyObject(object,getAllKeysIn(object),result);
if(isDeep){
result=baseClone(result,CLONE_DEEP_FLAG|CLONE_FLAT_FLAG|CLONE_SYMBOLS_FLAG,customOmitClone);
}
var length=paths.length;
while(length--){
baseUnset(result,paths[length]);
}
return result;
});

/**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
function omitBy(object,predicate){
return pickBy(object,negate(getIteratee(predicate)));
}

/**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
var pick=flatRest(function(object,paths){
return object==null?{}:basePick(object,paths);
});

/**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
function pickBy(object,predicate){
if(object==null){
return{};
}
var props=arrayMap(getAllKeysIn(object),function(prop){
return[prop];
});
predicate=getIteratee(predicate);
return basePickBy(object,props,function(value,path){
return predicate(value,path[0]);
});
}

/**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
function result(object,path,defaultValue){
path=castPath(path,object);

var index=-1,
length=path.length;

// Ensure the loop is entered when path is empty.
if(!length){
length=1;
object=undefined;
}
while(++index<length){
var value=object==null?undefined:object[toKey(path[index])];
if(value===undefined){
index=length;
value=defaultValue;
}
object=isFunction(value)?value.call(object):value;
}
return object;
}

/**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
function set(object,path,value){
return object==null?object:baseSet(object,path,value);
}

/**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
function setWith(object,path,value,customizer){
customizer=typeof customizer=='function'?customizer:undefined;
return object==null?object:baseSet(object,path,value,customizer);
}

/**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
var toPairs=createToPairs(keys);

/**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
var toPairsIn=createToPairs(keysIn);

/**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
function transform(object,iteratee,accumulator){
var isArr=isArray(object),
isArrLike=isArr||isBuffer(object)||isTypedArray(object);

iteratee=getIteratee(iteratee,4);
if(accumulator==null){
var Ctor=object&&object.constructor;
if(isArrLike){
accumulator=isArr?new Ctor():[];
}else
if(isObject(object)){
accumulator=isFunction(Ctor)?baseCreate(getPrototype(object)):{};
}else
{
accumulator={};
}
}
(isArrLike?arrayEach:baseForOwn)(object,function(value,index,object){
return iteratee(accumulator,value,index,object);
});
return accumulator;
}

/**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
function unset(object,path){
return object==null?true:baseUnset(object,path);
}

/**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
function update(object,path,updater){
return object==null?object:baseUpdate(object,path,castFunction(updater));
}

/**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
function updateWith(object,path,updater,customizer){
customizer=typeof customizer=='function'?customizer:undefined;
return object==null?object:baseUpdate(object,path,castFunction(updater),customizer);
}

/**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
function values(object){
return object==null?[]:baseValues(object,keys(object));
}

/**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
function valuesIn(object){
return object==null?[]:baseValues(object,keysIn(object));
}

/*------------------------------------------------------------------------*/

/**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
function clamp(number,lower,upper){
if(upper===undefined){
upper=lower;
lower=undefined;
}
if(upper!==undefined){
upper=toNumber(upper);
upper=upper===upper?upper:0;
}
if(lower!==undefined){
lower=toNumber(lower);
lower=lower===lower?lower:0;
}
return baseClamp(toNumber(number),lower,upper);
}

/**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
function inRange(number,start,end){
start=toFinite(start);
if(end===undefined){
end=start;
start=0;
}else{
end=toFinite(end);
}
number=toNumber(number);
return baseInRange(number,start,end);
}

/**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
function random(lower,upper,floating){
if(floating&&typeof floating!='boolean'&&isIterateeCall(lower,upper,floating)){
upper=floating=undefined;
}
if(floating===undefined){
if(typeof upper=='boolean'){
floating=upper;
upper=undefined;
}else
if(typeof lower=='boolean'){
floating=lower;
lower=undefined;
}
}
if(lower===undefined&&upper===undefined){
lower=0;
upper=1;
}else
{
lower=toFinite(lower);
if(upper===undefined){
upper=lower;
lower=0;
}else{
upper=toFinite(upper);
}
}
if(lower>upper){
var temp=lower;
lower=upper;
upper=temp;
}
if(floating||lower%1||upper%1){
var rand=nativeRandom();
return nativeMin(lower+rand*(upper-lower+freeParseFloat('1e-'+((rand+'').length-1))),upper);
}
return baseRandom(lower,upper);
}

/*------------------------------------------------------------------------*/

/**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
var camelCase=createCompounder(function(result,word,index){
word=word.toLowerCase();
return result+(index?capitalize(word):word);
});

/**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
function capitalize(string){
return upperFirst(toString(string).toLowerCase());
}

/**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
function deburr(string){
string=toString(string);
return string&&string.replace(reLatin,deburrLetter).replace(reComboMark,'');
}

/**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
function endsWith(string,target,position){
string=toString(string);
target=baseToString(target);

var length=string.length;
position=position===undefined?
length:
baseClamp(toInteger(position),0,length);

var end=position;
position-=target.length;
return position>=0&&string.slice(position,end)==target;
}

/**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
function escape(string){
string=toString(string);
return string&&reHasUnescapedHtml.test(string)?
string.replace(reUnescapedHtml,escapeHtmlChar):
string;
}

/**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
function escapeRegExp(string){
string=toString(string);
return string&&reHasRegExpChar.test(string)?
string.replace(reRegExpChar,'\\$&'):
string;
}

/**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
var kebabCase=createCompounder(function(result,word,index){
return result+(index?'-':'')+word.toLowerCase();
});

/**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
var lowerCase=createCompounder(function(result,word,index){
return result+(index?' ':'')+word.toLowerCase();
});

/**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
var lowerFirst=createCaseFirst('toLowerCase');

/**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
function pad(string,length,chars){
string=toString(string);
length=toInteger(length);

var strLength=length?stringSize(string):0;
if(!length||strLength>=length){
return string;
}
var mid=(length-strLength)/2;
return(
createPadding(nativeFloor(mid),chars)+
string+
createPadding(nativeCeil(mid),chars));

}

/**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
function padEnd(string,length,chars){
string=toString(string);
length=toInteger(length);

var strLength=length?stringSize(string):0;
return length&&strLength<length?
string+createPadding(length-strLength,chars):
string;
}

/**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
function padStart(string,length,chars){
string=toString(string);
length=toInteger(length);

var strLength=length?stringSize(string):0;
return length&&strLength<length?
createPadding(length-strLength,chars)+string:
string;
}

/**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
function parseInt(string,radix,guard){
if(guard||radix==null){
radix=0;
}else if(radix){
radix=+radix;
}
return nativeParseInt(toString(string).replace(reTrimStart,''),radix||0);
}

/**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
function repeat(string,n,guard){
if(guard?isIterateeCall(string,n,guard):n===undefined){
n=1;
}else{
n=toInteger(n);
}
return baseRepeat(toString(string),n);
}

/**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
function replace(){
var args=arguments,
string=toString(args[0]);

return args.length<3?string:string.replace(args[1],args[2]);
}

/**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
var snakeCase=createCompounder(function(result,word,index){
return result+(index?'_':'')+word.toLowerCase();
});

/**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
function split(string,separator,limit){
if(limit&&typeof limit!='number'&&isIterateeCall(string,separator,limit)){
separator=limit=undefined;
}
limit=limit===undefined?MAX_ARRAY_LENGTH:limit>>>0;
if(!limit){
return[];
}
string=toString(string);
if(string&&(
typeof separator=='string'||
separator!=null&&!isRegExp(separator)))
{
separator=baseToString(separator);
if(!separator&&hasUnicode(string)){
return castSlice(stringToArray(string),0,limit);
}
}
return string.split(separator,limit);
}

/**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
var startCase=createCompounder(function(result,word,index){
return result+(index?' ':'')+upperFirst(word);
});

/**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
function startsWith(string,target,position){
string=toString(string);
position=position==null?
0:
baseClamp(toInteger(position),0,string.length);

target=baseToString(target);
return string.slice(position,position+target.length)==target;
}

/**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
function template(string,options,guard){
// Based on John Resig's `tmpl` implementation
// (http://ejohn.org/blog/javascript-micro-templating/)
// and Laura Doktorova's doT.js (https://github.com/olado/doT).
var settings=lodash.templateSettings;

if(guard&&isIterateeCall(string,options,guard)){
options=undefined;
}
string=toString(string);
options=assignInWith({},options,settings,customDefaultsAssignIn);

var imports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),
importsKeys=keys(imports),
importsValues=baseValues(imports,importsKeys);

var isEscaping,
isEvaluating,
index=0,
interpolate=options.interpolate||reNoMatch,
source="__p += '";

// Compile the regexp to match each delimiter.
var reDelimiters=RegExp(
(options.escape||reNoMatch).source+'|'+
interpolate.source+'|'+
(interpolate===reInterpolate?reEsTemplate:reNoMatch).source+'|'+
(options.evaluate||reNoMatch).source+'|$',
'g');

// Use a sourceURL for easier debugging.
var sourceURL='//# sourceURL='+(
'sourceURL'in options?
options.sourceURL:
'lodash.templateSources['+ ++templateCounter+']')+
'\n';

string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){
interpolateValue||(interpolateValue=esTemplateValue);

// Escape characters that can't be included in string literals.
source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar);

// Replace delimiters with snippets.
if(escapeValue){
isEscaping=true;
source+="' +\n__e("+escapeValue+") +\n'";
}
if(evaluateValue){
isEvaluating=true;
source+="';\n"+evaluateValue+";\n__p += '";
}
if(interpolateValue){
source+="' +\n((__t = ("+interpolateValue+")) == null ? '' : __t) +\n'";
}
index=offset+match.length;

// The JS engine embedded in Adobe products needs `match` returned in
// order to produce the correct `offset` value.
return match;
});

source+="';\n";

// If `variable` is not specified wrap a with-statement around the generated
// code to add the data object to the top of the scope chain.
var variable=options.variable;
if(!variable){
source='with (obj) {\n'+source+'\n}\n';
}
// Cleanup code by stripping empty strings.
source=(isEvaluating?source.replace(reEmptyStringLeading,''):source).
replace(reEmptyStringMiddle,'$1').
replace(reEmptyStringTrailing,'$1;');

// Frame code as the function body.
source='function('+(variable||'obj')+') {\n'+(
variable?
'':
'obj || (obj = {});\n')+

"var __t, __p = ''"+(
isEscaping?
', __e = _.escape':
'')+(

isEvaluating?
', __j = Array.prototype.join;\n'+
"function print() { __p += __j.call(arguments, '') }\n":
';\n')+

source+
'return __p\n}';

var result=attempt(function(){
return Function(importsKeys,sourceURL+'return '+source).
apply(undefined,importsValues);
});

// Provide the compiled function's source by its `toString` method or
// the `source` property as a convenience for inlining compiled templates.
result.source=source;
if(isError(result)){
throw result;
}
return result;
}

/**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
function toLower(value){
return toString(value).toLowerCase();
}

/**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
function toUpper(value){
return toString(value).toUpperCase();
}

/**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
function trim(string,chars,guard){
string=toString(string);
if(string&&(guard||chars===undefined)){
return string.replace(reTrim,'');
}
if(!string||!(chars=baseToString(chars))){
return string;
}
var strSymbols=stringToArray(string),
chrSymbols=stringToArray(chars),
start=charsStartIndex(strSymbols,chrSymbols),
end=charsEndIndex(strSymbols,chrSymbols)+1;

return castSlice(strSymbols,start,end).join('');
}

/**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
function trimEnd(string,chars,guard){
string=toString(string);
if(string&&(guard||chars===undefined)){
return string.replace(reTrimEnd,'');
}
if(!string||!(chars=baseToString(chars))){
return string;
}
var strSymbols=stringToArray(string),
end=charsEndIndex(strSymbols,stringToArray(chars))+1;

return castSlice(strSymbols,0,end).join('');
}

/**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
function trimStart(string,chars,guard){
string=toString(string);
if(string&&(guard||chars===undefined)){
return string.replace(reTrimStart,'');
}
if(!string||!(chars=baseToString(chars))){
return string;
}
var strSymbols=stringToArray(string),
start=charsStartIndex(strSymbols,stringToArray(chars));

return castSlice(strSymbols,start).join('');
}

/**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
function truncate(string,options){
var length=DEFAULT_TRUNC_LENGTH,
omission=DEFAULT_TRUNC_OMISSION;

if(isObject(options)){
var separator='separator'in options?options.separator:separator;
length='length'in options?toInteger(options.length):length;
omission='omission'in options?baseToString(options.omission):omission;
}
string=toString(string);

var strLength=string.length;
if(hasUnicode(string)){
var strSymbols=stringToArray(string);
strLength=strSymbols.length;
}
if(length>=strLength){
return string;
}
var end=length-stringSize(omission);
if(end<1){
return omission;
}
var result=strSymbols?
castSlice(strSymbols,0,end).join(''):
string.slice(0,end);

if(separator===undefined){
return result+omission;
}
if(strSymbols){
end+=result.length-end;
}
if(isRegExp(separator)){
if(string.slice(end).search(separator)){
var match,
substring=result;

if(!separator.global){
separator=RegExp(separator.source,toString(reFlags.exec(separator))+'g');
}
separator.lastIndex=0;
while(match=separator.exec(substring)){
var newEnd=match.index;
}
result=result.slice(0,newEnd===undefined?end:newEnd);
}
}else if(string.indexOf(baseToString(separator),end)!=end){
var index=result.lastIndexOf(separator);
if(index>-1){
result=result.slice(0,index);
}
}
return result+omission;
}

/**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
function unescape(string){
string=toString(string);
return string&&reHasEscapedHtml.test(string)?
string.replace(reEscapedHtml,unescapeHtmlChar):
string;
}

/**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
var upperCase=createCompounder(function(result,word,index){
return result+(index?' ':'')+word.toUpperCase();
});

/**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
var upperFirst=createCaseFirst('toUpperCase');

/**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
function words(string,pattern,guard){
string=toString(string);
pattern=guard?undefined:pattern;

if(pattern===undefined){
return hasUnicodeWord(string)?unicodeWords(string):asciiWords(string);
}
return string.match(pattern)||[];
}

/*------------------------------------------------------------------------*/

/**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
var attempt=baseRest(function(func,args){
try{
return apply(func,undefined,args);
}catch(e){
return isError(e)?e:new Error(e);
}
});

/**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
var bindAll=flatRest(function(object,methodNames){
arrayEach(methodNames,function(key){
key=toKey(key);
baseAssignValue(object,key,bind(object[key],object));
});
return object;
});

/**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
function cond(pairs){
var length=pairs==null?0:pairs.length,
toIteratee=getIteratee();

pairs=!length?[]:arrayMap(pairs,function(pair){
if(typeof pair[1]!='function'){
throw new TypeError(FUNC_ERROR_TEXT);
}
return[toIteratee(pair[0]),pair[1]];
});

return baseRest(function(args){
var index=-1;
while(++index<length){
var pair=pairs[index];
if(apply(pair[0],this,args)){
return apply(pair[1],this,args);
}
}
});
}

/**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
function conforms(source){
return baseConforms(baseClone(source,CLONE_DEEP_FLAG));
}

/**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
function constant(value){
return function(){
return value;
};
}

/**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
function defaultTo(value,defaultValue){
return value==null||value!==value?defaultValue:value;
}

/**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
var flow=createFlow();

/**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
var flowRight=createFlow(true);

/**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
function identity(value){
return value;
}

/**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
function iteratee(func){
return baseIteratee(typeof func=='function'?func:baseClone(func,CLONE_DEEP_FLAG));
}

/**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
function matches(source){
return baseMatches(baseClone(source,CLONE_DEEP_FLAG));
}

/**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
function matchesProperty(path,srcValue){
return baseMatchesProperty(path,baseClone(srcValue,CLONE_DEEP_FLAG));
}

/**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
var method=baseRest(function(path,args){
return function(object){
return baseInvoke(object,path,args);
};
});

/**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
var methodOf=baseRest(function(object,args){
return function(path){
return baseInvoke(object,path,args);
};
});

/**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
function mixin(object,source,options){
var props=keys(source),
methodNames=baseFunctions(source,props);

if(options==null&&
!(isObject(source)&&(methodNames.length||!props.length))){
options=source;
source=object;
object=this;
methodNames=baseFunctions(source,keys(source));
}
var chain=!(isObject(options)&&'chain'in options)||!!options.chain,
isFunc=isFunction(object);

arrayEach(methodNames,function(methodName){
var func=source[methodName];
object[methodName]=func;
if(isFunc){
object.prototype[methodName]=function(){
var chainAll=this.__chain__;
if(chain||chainAll){
var result=object(this.__wrapped__),
actions=result.__actions__=copyArray(this.__actions__);

actions.push({'func':func,'args':arguments,'thisArg':object});
result.__chain__=chainAll;
return result;
}
return func.apply(object,arrayPush([this.value()],arguments));
};
}
});

return object;
}

/**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
function noConflict(){
if(root._===this){
root._=oldDash;
}
return this;
}

/**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
function noop(){

}// No operation performed.

/**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
function nthArg(n){
n=toInteger(n);
return baseRest(function(args){
return baseNth(args,n);
});
}

/**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
var over=createOver(arrayMap);

/**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
var overEvery=createOver(arrayEvery);

/**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
var overSome=createOver(arraySome);

/**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
function property(path){
return isKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);
}

/**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
function propertyOf(object){
return function(path){
return object==null?undefined:baseGet(object,path);
};
}

/**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
var range=createRange();

/**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
var rangeRight=createRange(true);

/**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
function stubArray(){
return[];
}

/**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
function stubFalse(){
return false;
}

/**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
function stubObject(){
return{};
}

/**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
function stubString(){
return'';
}

/**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
function stubTrue(){
return true;
}

/**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
function times(n,iteratee){
n=toInteger(n);
if(n<1||n>MAX_SAFE_INTEGER){
return[];
}
var index=MAX_ARRAY_LENGTH,
length=nativeMin(n,MAX_ARRAY_LENGTH);

iteratee=getIteratee(iteratee);
n-=MAX_ARRAY_LENGTH;

var result=baseTimes(length,iteratee);
while(++index<n){
iteratee(index);
}
return result;
}

/**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
function toPath(value){
if(isArray(value)){
return arrayMap(value,toKey);
}
return isSymbol(value)?[value]:copyArray(stringToPath(toString(value)));
}

/**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
function uniqueId(prefix){
var id=++idCounter;
return toString(prefix)+id;
}

/*------------------------------------------------------------------------*/

/**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
var add=createMathOperation(function(augend,addend){
return augend+addend;
},0);

/**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
var ceil=createRound('ceil');

/**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
var divide=createMathOperation(function(dividend,divisor){
return dividend/divisor;
},1);

/**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
var floor=createRound('floor');

/**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
function max(array){
return array&&array.length?
baseExtremum(array,identity,baseGt):
undefined;
}

/**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
function maxBy(array,iteratee){
return array&&array.length?
baseExtremum(array,getIteratee(iteratee,2),baseGt):
undefined;
}

/**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
function mean(array){
return baseMean(array,identity);
}

/**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
function meanBy(array,iteratee){
return baseMean(array,getIteratee(iteratee,2));
}

/**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
function min(array){
return array&&array.length?
baseExtremum(array,identity,baseLt):
undefined;
}

/**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
function minBy(array,iteratee){
return array&&array.length?
baseExtremum(array,getIteratee(iteratee,2),baseLt):
undefined;
}

/**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
var multiply=createMathOperation(function(multiplier,multiplicand){
return multiplier*multiplicand;
},1);

/**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
var round=createRound('round');

/**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
var subtract=createMathOperation(function(minuend,subtrahend){
return minuend-subtrahend;
},0);

/**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
function sum(array){
return array&&array.length?
baseSum(array,identity):
0;
}

/**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
function sumBy(array,iteratee){
return array&&array.length?
baseSum(array,getIteratee(iteratee,2)):
0;
}

/*------------------------------------------------------------------------*/

// Add methods that return wrapped values in chain sequences.
lodash.after=after;
lodash.ary=ary;
lodash.assign=assign;
lodash.assignIn=assignIn;
lodash.assignInWith=assignInWith;
lodash.assignWith=assignWith;
lodash.at=at;
lodash.before=before;
lodash.bind=bind;
lodash.bindAll=bindAll;
lodash.bindKey=bindKey;
lodash.castArray=castArray;
lodash.chain=chain;
lodash.chunk=chunk;
lodash.compact=compact;
lodash.concat=concat;
lodash.cond=cond;
lodash.conforms=conforms;
lodash.constant=constant;
lodash.countBy=countBy;
lodash.create=create;
lodash.curry=curry;
lodash.curryRight=curryRight;
lodash.debounce=debounce;
lodash.defaults=defaults;
lodash.defaultsDeep=defaultsDeep;
lodash.defer=defer;
lodash.delay=delay;
lodash.difference=difference;
lodash.differenceBy=differenceBy;
lodash.differenceWith=differenceWith;
lodash.drop=drop;
lodash.dropRight=dropRight;
lodash.dropRightWhile=dropRightWhile;
lodash.dropWhile=dropWhile;
lodash.fill=fill;
lodash.filter=filter;
lodash.flatMap=flatMap;
lodash.flatMapDeep=flatMapDeep;
lodash.flatMapDepth=flatMapDepth;
lodash.flatten=flatten;
lodash.flattenDeep=flattenDeep;
lodash.flattenDepth=flattenDepth;
lodash.flip=flip;
lodash.flow=flow;
lodash.flowRight=flowRight;
lodash.fromPairs=fromPairs;
lodash.functions=functions;
lodash.functionsIn=functionsIn;
lodash.groupBy=groupBy;
lodash.initial=initial;
lodash.intersection=intersection;
lodash.intersectionBy=intersectionBy;
lodash.intersectionWith=intersectionWith;
lodash.invert=invert;
lodash.invertBy=invertBy;
lodash.invokeMap=invokeMap;
lodash.iteratee=iteratee;
lodash.keyBy=keyBy;
lodash.keys=keys;
lodash.keysIn=keysIn;
lodash.map=map;
lodash.mapKeys=mapKeys;
lodash.mapValues=mapValues;
lodash.matches=matches;
lodash.matchesProperty=matchesProperty;
lodash.memoize=memoize;
lodash.merge=merge;
lodash.mergeWith=mergeWith;
lodash.method=method;
lodash.methodOf=methodOf;
lodash.mixin=mixin;
lodash.negate=negate;
lodash.nthArg=nthArg;
lodash.omit=omit;
lodash.omitBy=omitBy;
lodash.once=once;
lodash.orderBy=orderBy;
lodash.over=over;
lodash.overArgs=overArgs;
lodash.overEvery=overEvery;
lodash.overSome=overSome;
lodash.partial=partial;
lodash.partialRight=partialRight;
lodash.partition=partition;
lodash.pick=pick;
lodash.pickBy=pickBy;
lodash.property=property;
lodash.propertyOf=propertyOf;
lodash.pull=pull;
lodash.pullAll=pullAll;
lodash.pullAllBy=pullAllBy;
lodash.pullAllWith=pullAllWith;
lodash.pullAt=pullAt;
lodash.range=range;
lodash.rangeRight=rangeRight;
lodash.rearg=rearg;
lodash.reject=reject;
lodash.remove=remove;
lodash.rest=rest;
lodash.reverse=reverse;
lodash.sampleSize=sampleSize;
lodash.set=set;
lodash.setWith=setWith;
lodash.shuffle=shuffle;
lodash.slice=slice;
lodash.sortBy=sortBy;
lodash.sortedUniq=sortedUniq;
lodash.sortedUniqBy=sortedUniqBy;
lodash.split=split;
lodash.spread=spread;
lodash.tail=tail;
lodash.take=take;
lodash.takeRight=takeRight;
lodash.takeRightWhile=takeRightWhile;
lodash.takeWhile=takeWhile;
lodash.tap=tap;
lodash.throttle=throttle;
lodash.thru=thru;
lodash.toArray=toArray;
lodash.toPairs=toPairs;
lodash.toPairsIn=toPairsIn;
lodash.toPath=toPath;
lodash.toPlainObject=toPlainObject;
lodash.transform=transform;
lodash.unary=unary;
lodash.union=union;
lodash.unionBy=unionBy;
lodash.unionWith=unionWith;
lodash.uniq=uniq;
lodash.uniqBy=uniqBy;
lodash.uniqWith=uniqWith;
lodash.unset=unset;
lodash.unzip=unzip;
lodash.unzipWith=unzipWith;
lodash.update=update;
lodash.updateWith=updateWith;
lodash.values=values;
lodash.valuesIn=valuesIn;
lodash.without=without;
lodash.words=words;
lodash.wrap=wrap;
lodash.xor=xor;
lodash.xorBy=xorBy;
lodash.xorWith=xorWith;
lodash.zip=zip;
lodash.zipObject=zipObject;
lodash.zipObjectDeep=zipObjectDeep;
lodash.zipWith=zipWith;

// Add aliases.
lodash.entries=toPairs;
lodash.entriesIn=toPairsIn;
lodash.extend=assignIn;
lodash.extendWith=assignInWith;

// Add methods to `lodash.prototype`.
mixin(lodash,lodash);

/*------------------------------------------------------------------------*/

// Add methods that return unwrapped values in chain sequences.
lodash.add=add;
lodash.attempt=attempt;
lodash.camelCase=camelCase;
lodash.capitalize=capitalize;
lodash.ceil=ceil;
lodash.clamp=clamp;
lodash.clone=clone;
lodash.cloneDeep=cloneDeep;
lodash.cloneDeepWith=cloneDeepWith;
lodash.cloneWith=cloneWith;
lodash.conformsTo=conformsTo;
lodash.deburr=deburr;
lodash.defaultTo=defaultTo;
lodash.divide=divide;
lodash.endsWith=endsWith;
lodash.eq=eq;
lodash.escape=escape;
lodash.escapeRegExp=escapeRegExp;
lodash.every=every;
lodash.find=find;
lodash.findIndex=findIndex;
lodash.findKey=findKey;
lodash.findLast=findLast;
lodash.findLastIndex=findLastIndex;
lodash.findLastKey=findLastKey;
lodash.floor=floor;
lodash.forEach=forEach;
lodash.forEachRight=forEachRight;
lodash.forIn=forIn;
lodash.forInRight=forInRight;
lodash.forOwn=forOwn;
lodash.forOwnRight=forOwnRight;
lodash.get=get;
lodash.gt=gt;
lodash.gte=gte;
lodash.has=has;
lodash.hasIn=hasIn;
lodash.head=head;
lodash.identity=identity;
lodash.includes=includes;
lodash.indexOf=indexOf;
lodash.inRange=inRange;
lodash.invoke=invoke;
lodash.isArguments=isArguments;
lodash.isArray=isArray;
lodash.isArrayBuffer=isArrayBuffer;
lodash.isArrayLike=isArrayLike;
lodash.isArrayLikeObject=isArrayLikeObject;
lodash.isBoolean=isBoolean;
lodash.isBuffer=isBuffer;
lodash.isDate=isDate;
lodash.isElement=isElement;
lodash.isEmpty=isEmpty;
lodash.isEqual=isEqual;
lodash.isEqualWith=isEqualWith;
lodash.isError=isError;
lodash.isFinite=isFinite;
lodash.isFunction=isFunction;
lodash.isInteger=isInteger;
lodash.isLength=isLength;
lodash.isMap=isMap;
lodash.isMatch=isMatch;
lodash.isMatchWith=isMatchWith;
lodash.isNaN=isNaN;
lodash.isNative=isNative;
lodash.isNil=isNil;
lodash.isNull=isNull;
lodash.isNumber=isNumber;
lodash.isObject=isObject;
lodash.isObjectLike=isObjectLike;
lodash.isPlainObject=isPlainObject;
lodash.isRegExp=isRegExp;
lodash.isSafeInteger=isSafeInteger;
lodash.isSet=isSet;
lodash.isString=isString;
lodash.isSymbol=isSymbol;
lodash.isTypedArray=isTypedArray;
lodash.isUndefined=isUndefined;
lodash.isWeakMap=isWeakMap;
lodash.isWeakSet=isWeakSet;
lodash.join=join;
lodash.kebabCase=kebabCase;
lodash.last=last;
lodash.lastIndexOf=lastIndexOf;
lodash.lowerCase=lowerCase;
lodash.lowerFirst=lowerFirst;
lodash.lt=lt;
lodash.lte=lte;
lodash.max=max;
lodash.maxBy=maxBy;
lodash.mean=mean;
lodash.meanBy=meanBy;
lodash.min=min;
lodash.minBy=minBy;
lodash.stubArray=stubArray;
lodash.stubFalse=stubFalse;
lodash.stubObject=stubObject;
lodash.stubString=stubString;
lodash.stubTrue=stubTrue;
lodash.multiply=multiply;
lodash.nth=nth;
lodash.noConflict=noConflict;
lodash.noop=noop;
lodash.now=now;
lodash.pad=pad;
lodash.padEnd=padEnd;
lodash.padStart=padStart;
lodash.parseInt=parseInt;
lodash.random=random;
lodash.reduce=reduce;
lodash.reduceRight=reduceRight;
lodash.repeat=repeat;
lodash.replace=replace;
lodash.result=result;
lodash.round=round;
lodash.runInContext=runInContext;
lodash.sample=sample;
lodash.size=size;
lodash.snakeCase=snakeCase;
lodash.some=some;
lodash.sortedIndex=sortedIndex;
lodash.sortedIndexBy=sortedIndexBy;
lodash.sortedIndexOf=sortedIndexOf;
lodash.sortedLastIndex=sortedLastIndex;
lodash.sortedLastIndexBy=sortedLastIndexBy;
lodash.sortedLastIndexOf=sortedLastIndexOf;
lodash.startCase=startCase;
lodash.startsWith=startsWith;
lodash.subtract=subtract;
lodash.sum=sum;
lodash.sumBy=sumBy;
lodash.template=template;
lodash.times=times;
lodash.toFinite=toFinite;
lodash.toInteger=toInteger;
lodash.toLength=toLength;
lodash.toLower=toLower;
lodash.toNumber=toNumber;
lodash.toSafeInteger=toSafeInteger;
lodash.toString=toString;
lodash.toUpper=toUpper;
lodash.trim=trim;
lodash.trimEnd=trimEnd;
lodash.trimStart=trimStart;
lodash.truncate=truncate;
lodash.unescape=unescape;
lodash.uniqueId=uniqueId;
lodash.upperCase=upperCase;
lodash.upperFirst=upperFirst;

// Add aliases.
lodash.each=forEach;
lodash.eachRight=forEachRight;
lodash.first=head;

mixin(lodash,function(){
var source={};
baseForOwn(lodash,function(func,methodName){
if(!hasOwnProperty.call(lodash.prototype,methodName)){
source[methodName]=func;
}
});
return source;
}(),{'chain':false});

/*------------------------------------------------------------------------*/

/**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
lodash.VERSION=VERSION;

// Assign default placeholders.
arrayEach(['bind','bindKey','curry','curryRight','partial','partialRight'],function(methodName){
lodash[methodName].placeholder=lodash;
});

// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
arrayEach(['drop','take'],function(methodName,index){
LazyWrapper.prototype[methodName]=function(n){
n=n===undefined?1:nativeMax(toInteger(n),0);

var result=this.__filtered__&&!index?
new LazyWrapper(this):
this.clone();

if(result.__filtered__){
result.__takeCount__=nativeMin(n,result.__takeCount__);
}else{
result.__views__.push({
'size':nativeMin(n,MAX_ARRAY_LENGTH),
'type':methodName+(result.__dir__<0?'Right':'')});

}
return result;
};

LazyWrapper.prototype[methodName+'Right']=function(n){
return this.reverse()[methodName](n).reverse();
};
});

// Add `LazyWrapper` methods that accept an `iteratee` value.
arrayEach(['filter','map','takeWhile'],function(methodName,index){
var type=index+1,
isFilter=type==LAZY_FILTER_FLAG||type==LAZY_WHILE_FLAG;

LazyWrapper.prototype[methodName]=function(iteratee){
var result=this.clone();
result.__iteratees__.push({
'iteratee':getIteratee(iteratee,3),
'type':type});

result.__filtered__=result.__filtered__||isFilter;
return result;
};
});

// Add `LazyWrapper` methods for `_.head` and `_.last`.
arrayEach(['head','last'],function(methodName,index){
var takeName='take'+(index?'Right':'');

LazyWrapper.prototype[methodName]=function(){
return this[takeName](1).value()[0];
};
});

// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
arrayEach(['initial','tail'],function(methodName,index){
var dropName='drop'+(index?'':'Right');

LazyWrapper.prototype[methodName]=function(){
return this.__filtered__?new LazyWrapper(this):this[dropName](1);
};
});

LazyWrapper.prototype.compact=function(){
return this.filter(identity);
};

LazyWrapper.prototype.find=function(predicate){
return this.filter(predicate).head();
};

LazyWrapper.prototype.findLast=function(predicate){
return this.reverse().find(predicate);
};

LazyWrapper.prototype.invokeMap=baseRest(function(path,args){
if(typeof path=='function'){
return new LazyWrapper(this);
}
return this.map(function(value){
return baseInvoke(value,path,args);
});
});

LazyWrapper.prototype.reject=function(predicate){
return this.filter(negate(getIteratee(predicate)));
};

LazyWrapper.prototype.slice=function(start,end){
start=toInteger(start);

var result=this;
if(result.__filtered__&&(start>0||end<0)){
return new LazyWrapper(result);
}
if(start<0){
result=result.takeRight(-start);
}else if(start){
result=result.drop(start);
}
if(end!==undefined){
end=toInteger(end);
result=end<0?result.dropRight(-end):result.take(end-start);
}
return result;
};

LazyWrapper.prototype.takeRightWhile=function(predicate){
return this.reverse().takeWhile(predicate).reverse();
};

LazyWrapper.prototype.toArray=function(){
return this.take(MAX_ARRAY_LENGTH);
};

// Add `LazyWrapper` methods to `lodash.prototype`.
baseForOwn(LazyWrapper.prototype,function(func,methodName){
var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),
isTaker=/^(?:head|last)$/.test(methodName),
lodashFunc=lodash[isTaker?'take'+(methodName=='last'?'Right':''):methodName],
retUnwrapped=isTaker||/^find/.test(methodName);

if(!lodashFunc){
return;
}
lodash.prototype[methodName]=function(){
var value=this.__wrapped__,
args=isTaker?[1]:arguments,
isLazy=value instanceof LazyWrapper,
iteratee=args[0],
useLazy=isLazy||isArray(value);

var interceptor=function(value){
var result=lodashFunc.apply(lodash,arrayPush([value],args));
return isTaker&&chainAll?result[0]:result;
};

if(useLazy&&checkIteratee&&typeof iteratee=='function'&&iteratee.length!=1){
// Avoid lazy use if the iteratee has a "length" value other than `1`.
isLazy=useLazy=false;
}
var chainAll=this.__chain__,
isHybrid=!!this.__actions__.length,
isUnwrapped=retUnwrapped&&!chainAll,
onlyLazy=isLazy&&!isHybrid;

if(!retUnwrapped&&useLazy){
value=onlyLazy?value:new LazyWrapper(this);
var result=func.apply(value,args);
result.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined});
return new LodashWrapper(result,chainAll);
}
if(isUnwrapped&&onlyLazy){
return func.apply(this,args);
}
result=this.thru(interceptor);
return isUnwrapped?isTaker?result.value()[0]:result.value():result;
};
});

// Add `Array` methods to `lodash.prototype`.
arrayEach(['pop','push','shift','sort','splice','unshift'],function(methodName){
var func=arrayProto[methodName],
chainName=/^(?:push|sort|unshift)$/.test(methodName)?'tap':'thru',
retUnwrapped=/^(?:pop|shift)$/.test(methodName);

lodash.prototype[methodName]=function(){
var args=arguments;
if(retUnwrapped&&!this.__chain__){
var value=this.value();
return func.apply(isArray(value)?value:[],args);
}
return this[chainName](function(value){
return func.apply(isArray(value)?value:[],args);
});
};
});

// Map minified method names to their real names.
baseForOwn(LazyWrapper.prototype,function(func,methodName){
var lodashFunc=lodash[methodName];
if(lodashFunc){
var key=lodashFunc.name+'',
names=realNames[key]||(realNames[key]=[]);

names.push({'name':methodName,'func':lodashFunc});
}
});

realNames[createHybrid(undefined,WRAP_BIND_KEY_FLAG).name]=[{
'name':'wrapper',
'func':undefined}];


// Add methods to `LazyWrapper`.
LazyWrapper.prototype.clone=lazyClone;
LazyWrapper.prototype.reverse=lazyReverse;
LazyWrapper.prototype.value=lazyValue;

// Add chain sequence methods to the `lodash` wrapper.
lodash.prototype.at=wrapperAt;
lodash.prototype.chain=wrapperChain;
lodash.prototype.commit=wrapperCommit;
lodash.prototype.next=wrapperNext;
lodash.prototype.plant=wrapperPlant;
lodash.prototype.reverse=wrapperReverse;
lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=wrapperValue;

// Add lazy aliases.
lodash.prototype.first=lodash.prototype.head;

if(symIterator){
lodash.prototype[symIterator]=wrapperToIterator;
}
return lodash;
};

/*--------------------------------------------------------------------------*/

// Export lodash.
var _=runInContext();

// Some AMD build optimizers, like r.js, check for condition patterns like:
if(true){
// Expose Lodash on the global object to prevent errors when Lodash is
// loaded by a script tag in the presence of an AMD loader.
// See http://requirejs.org/docs/errors.html#mismatch for more details.
// Use `_.noConflict` to remove Lodash from the global object.
root._=_;

// Define as an anonymous module so, through path mapping, it can be
// referenced as the "underscore" module.
!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){
return _;
}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}
// Check for `exports` after `define` in case a build optimizer adds it.
else if(freeModule){
// Export for Node.js.
(freeModule.exports=_)._=_;
// Export for CommonJS support.
freeExports._=_;
}else
{
// Export to the global object.
root._=_;
}
}).call(undefined);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(17)(module)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object")
	g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.





















Parameter = Parameter;function Parameter(
name,
properties)
{
  if (!name || !properties || !properties.Type) {
    throw new SyntaxError(
    `New Parameter with ${JSON.stringify({
      name,
      properties })
    } parameters is invalid. Name and Type are required.`);

  }

  return { kind: 'Parameter', Name: name, Properties: properties };
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.















CreationPolicy = CreationPolicy;function CreationPolicy(
resource,
content)
{
  if (
  !resource ||
  !content ||
  !content.AutoScalingCreationPolicy && !content.ResourceSignal)
  {
    throw new SyntaxError(
    `New CreationPolicy must have content, ${JSON.stringify(content)} is invalid.`);

  }
  return { kind: 'CreationPolicy', Resource: resource, Content: content };
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.





Service = Service;var _resource = __webpack_require__(1);var _path = __webpack_require__(14);var path = _interopRequireWildcard(_path);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function Service(name) {
  const json = !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
  const service = { json };
  Object.keys(json.Resources).map(r => {
    service[r] = _resource.Resource.bind({ json, name: r });
  });
  return service;
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {return [];};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {return '/';};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {return 0;};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};exports.


































































Template = Template;exports.







































































































































































































































































































































_json = _json;var _lodash = __webpack_require__(2);var _lodash2 = _interopRequireDefault(_lodash);var _parameter = __webpack_require__(4);var _description = __webpack_require__(9);var _mapping = __webpack_require__(10);var _condition = __webpack_require__(11);var _resource = __webpack_require__(1);var _output = __webpack_require__(12);var _creationpolicy = __webpack_require__(5);var _metadata = __webpack_require__(13);var _intrinsic = __webpack_require__(0);var _service = __webpack_require__(6);var _pseudo = __webpack_require__(15);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;} // import { IMetadata } from './elements/metadata';
/**
 * Returns a new Template object.
 * @member Template
 * @returns ITemplate
 */ /** @module Template */ /**
                             * Template Interface
                             * @member Template
                             */ /**
                                 * IAddOptions Interface
                                 * @member Template
                                 */function Template() {return { AWSTemplateFormatVersion: '2010-09-09', Conditions: {}, Mappings: {}, Outputs: {}, Parameters: {}, Resources: {}, /**
                                                                                                                                                                                    * Add a new Parameter, Description, Output, Resource, Condition, or Mapping to the template. Returns a new Template with the element added. Does not mutate the original Template object.
                                                                                                                                                                                    * @example
                                                                                                                                                                                    * const t = Template().add(S3.Bucket('Bucket'), { Output: true });
                                                                                                                                                                                    */add: function (e, options) {const _t = _lodash2.default.cloneDeep(this);switch (e.kind) {case 'CreationPolicy':return _addCreationPolicy(_t, e);case 'ResourceMetadata':return _addResourceMetadata(_t, e);case 'Condition':return _addCondition(_t, e);case 'Mapping':return _addMapping(_t, e);case 'Parameter':return _addParameter(_t, e);case 'Output':return _addOutput(_t, e);case 'Resource':let newT = _t;let f = _lodash2.default.cloneDeep(e);if (options) {const nameSplit = f.Type.split('::').splice(1);const shortName = nameSplit.join('');if (options.Parameters) {options.Parameters.map(p => {const paramName = `${f.Name}${shortName}Param`;if (!f.Properties) {f.Properties = {};}f.Properties[p] = (0, _intrinsic.Ref)(paramName);newT = _addParameter(newT, (0, _parameter.Parameter)(paramName, { Type: 'String' }));});}newT = _addResource(_t, f);if (options.Output) {newT = _addOutput(newT, (0, _output.Output)(`${f.Name}${shortName}Output`, { Value: (0, _intrinsic.Ref)(f.Name), Export: { Name: (0, _intrinsic.FnSub)(`\$\{${_pseudo.Pseudo.AWS_STACK_NAME}\}-${nameSplit[0]}-${nameSplit[1]}-${f.Name}`) } }));}} else {newT = _addResource(_t, f);}return newT;case 'Description':return _addDescription(_t, e);default:throw new SyntaxError(`${JSON.stringify(e)} is not a valid type, could not be added.`);}}, /**
eturns a finished CloudFormation template object. This can then be converted into JSON or YAML.
example
const t = Template();
stringify(t.build(), null, 2)
build: function () {let result = { AWSTemplateFormatVersion: '2010-09-09', Resources: {} };if (Object.keys(this.Conditions).length > 0) {result.Conditions = {};Object.keys(this.Conditions).map(c => {result.Conditions[c] = _json(this.Conditions[c]);});}if (Object.keys(this.Parameters).length > 0) {result.Parameters = {};Object.keys(this.Parameters).map(p => {result.Parameters[p] = _json(this.Parameters[p]);});}if (Object.keys(this.Mappings).length > 0) {result.Mappings = {};Object.keys(this.Mappings).map(m => {result.Mappings[m] = _json(this.Mappings[m]);});}if (Object.keys(this.Outputs).length > 0) {result.Outputs = {};Object.keys(this.Outputs).map(o => {result.Outputs[o] = _json(this.Outputs[o]);});}if (Object.keys(this.Resources).length > 0) {result.Resources = {};Object.keys(this.Resources).map(r => {result.Resources[r] = _json(this.Resources[r]);});}if (this.Description) {result.Description = this.Description;}return result;}, kind: 'Template', /**
emove a Parameter, Description, Output, Resource, Condition, or Mapping from the template. Returns a new Template with the element removed. Does not mutate the original Template object.
example
let t = Template();
let p = Parameter('NewParam', { Type: 'String' });
t.add(p).remove(p);
remove: function (e) {let result = _lodash2.default.cloneDeep(this);let element;if (typeof e === 'string') {let parameter = result.Parameters[e];if (parameter) {element = parameter;} else {let output = result.Outputs[e];if (output) {element = output;} else {let mapping = result.Mappings[e];if (mapping) {element = mapping;} else {throw new SyntaxError(`Could not find ${JSON.stringify(e)}`);}}}} else {element = e;}switch (element.kind) {/*case 'Condition':
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         return _removeCondition(this, e);*/case 'Parameter':return _removeParameter(this, element);case 'Output':return _removeOutput(this, element); /*case 'Resource':
return _removeResource(this, e);*/case 'Mapping':return _removeMapping(this, element);default:throw new SyntaxError(`${JSON.stringify(e)} is not a valid type, could not be added.`);}}, /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * Removes the Description from the Template.
removeDescription: function () {const _ref = this,{ Description } = _ref,remaining = _objectWithoutProperties(_ref, ['Description']);return remaining;}, /**
erges another Template object into another. The original Template objects are not mutated. Returns a new Template object that is the product of the two original Template objects.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         */merge: function (t) {const _t = _lodash2.default.cloneDeep(this);const combined = {};['Conditions', 'Mapping', 'Outputs', 'Parameters', 'Resources', 'Description'].map(block => {if (t[block]) {combined[block] = _extends({}, _t[block], t[block]);}});return _extends({}, _t, combined);}, /**
mport an existing CloudFormation JSON template and convert it into a Wolkenkratzer Template object.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * @example
const templateJson = require('template.json');
const t = Template().import(templateJson);
import: function (inputTemplate) {let _t = _lodash2.default.cloneDeep(this);return _calcFromExistingTemplate(_t, inputTemplate);} };}function _validateRef(t, ref) {if (ref.Ref) {if (!(t.Parameters[ref.Ref] || t.Resources[ref.Ref])) {throw new SyntaxError(`Could not find ${JSON.stringify(ref)}`);}}return;}function _validateFnGetAtt(t, att) {if (att.FnGetAtt && !t.Resources[att.FnGetAtt[0]]) {throw new SyntaxError(`Could not find ${JSON.stringify(att)}`);}return;}function _strip(t) {let { kind, Name } = t,rest = _objectWithoutProperties(t, ['kind', 'Name']);return rest;}function _stripKind(target) {let { kind } = target,rest = _objectWithoutProperties(target, ['kind']);return rest;}function _cleanObject(object) {if (Array.isArray(object)) {for (let v = 0; v < object.length; v++) {object[v] = _cleanObject(object[v]);}} else {if (object.kind) {object = _json(object);} else {for (let o in object) {if (object[o] !== null && typeof object[o] === 'object') {object[o] = _cleanObject(object[o]);}}}}return object;}function _buildResource(t) {let { Type, Properties, CreationPolicy, Metadata } = t;let newProps = {};if (Properties) {Object.keys(Properties).map(p => {if (Properties[p].kind) {newProps[p] = _json(Properties[p]);} else {newProps[p] = _cleanObject(Properties[p]);}});}let result = { Type, Properties: newProps };if (CreationPolicy) {result.CreationPolicy = _json(CreationPolicy);}if (Metadata) {result.Metadata = _json(Metadata);}return result;}function _buildCondition(t) {let { Condition } = t;let result = _json(Condition);Object.keys(result).map(k => {result[k][0] = _json(result[k][0]);});return result;}function _buildCreationPolicy(t) {let { Content } = t;return Content;}function _buildResourceMetadata(t) {let { Content } = t;return Content;}function _buildFnJoin(t) {if (Array.isArray(t.Values)) {return { 'Fn::Join': [t.Delimiter, t.Values] };} else {return { 'Fn::Join': [t.Delimiter, _json(t.Values)] };}}function _buildMapping(t) {let result = t.Content;return result;}function _buildOutput(t) {let outputResult = Object.assign({}, t.Properties);if (typeof outputResult.Value !== 'string') {let stripped = _json(outputResult.Value);outputResult = _extends({}, outputResult, { Value: stripped });}if (outputResult.Export && outputResult.Export.Name && typeof outputResult.Export.Name !== 'string') {let stripped = _json(outputResult.Export.Name);outputResult = _extends({}, outputResult, { Export: { Name: stripped } });}return outputResult;}function _json(t) {switch (t.kind) {case 'Ref':return { Ref: t.Ref };case 'FnGetAtt':return { 'Fn::GetAtt': t.FnGetAtt };case 'FnJoin':return _buildFnJoin(t);case 'FnEquals':return { 'Fn::Equals': t.FnEquals };case 'FnSub':return { 'Fn::Sub': t.FnSub };case 'CreationPolicy':return _buildCreationPolicy(t);case 'ResourceMetadata':return _buildResourceMetadata(t);case 'Condition':return _buildCondition(t);case 'Mapping':return _buildMapping(t);case 'Parameter':return _strip(t).Properties;case 'Output':return _buildOutput(t);case 'Resource':return _buildResource(t);default:throw new SyntaxError(`Can't call _json on ${JSON.stringify(t)}`);}}function _addDescription(t, e) {let result = _extends({}, t);let desc = { Description: e.Content };result = _extends({}, t, desc);return result;
}

function _addCreationPolicy(t, e) {
  let result = _extends({}, t);
  if (!result.Resources[e.Resource]) {
    throw new SyntaxError(
    'Cannot add CreationPolicy to a Resource that does not exist in the template.');

  }
  let resource = _extends({}, result.Resources[e.Resource]);
  resource.CreationPolicy = e;
  result.Resources[e.Resource] = resource;
  return result;
}

function _addResourceMetadata(t, e) {
  let result = _extends({}, t);
  if (!result.Resources[e.Resource]) {
    throw new SyntaxError(
    'Cannot add Metadata to a Resource that does not exist in the template.');

  }
  let resource = _extends({}, result.Resources[e.Resource]);
  resource.Metadata = e;
  result.Resources[e.Resource] = resource;
  return result;
}

function _addCondition(t, e) {
  // TODO: Validate intrinsics
  let result = _extends({}, t);
  result.Conditions[e.Name] = e;
  return result;
}

function _addOutput(t, e) {
  let e0 = _lodash2.default.cloneDeep(e);
  if (typeof e0.Properties.Value !== 'string') {
    if (e0.Properties.Value.Ref) {
      _validateRef(t, e0.Properties.Value);
    } else if (
    typeof e0.Properties.Value !== 'string' &&
    e0.Properties.Value['Fn::GetAtt'])
    {
      e0.Properties.Value = (0, _intrinsic.FnGetAtt)(
      e0.Properties.Value['Fn::GetAtt'][0],
      e0.Properties.Value['Fn::GetAtt'][1]);

      _validateFnGetAtt(t, e0.Properties.Value);
    }
  }
  let result = _extends({}, t);
  result.Outputs[e0.Name] = e0;
  return result;
}

function _addParameter(t, e) {
  let result = _extends({}, t);
  result.Parameters[e.Name] = e;
  return result;
}

function _addMapping(t, e) {
  let result = _extends({}, t);
  if (result.Mappings[e.Name]) {
    result.Mappings[e.Name] = _extends({},
    e, {
      Content: _extends({}, result.Mappings[e.Name].Content, e.Content) });

  } else {
    result.Mappings[e.Name] = e;
  }
  return result;
}

function _addResource(t, e) {
  let result = _extends({}, t);
  result.Resources[e.Name] = e;
  return result;
}

function _removeMapping(t, e) {
  let result = _extends({}, t);
  let mapping;
  if (typeof e === 'string') {
    if (result.Mappings[e]) {
      mapping = result.Mappings[e];
    } else {
      throw new SyntaxError(`Could not find ${JSON.stringify(e)}`);
    }
  } else {
    mapping = e;
  }
  if (result.Mappings[mapping.Name]) {
    delete result.Mappings[mapping.Name];
  } else {
    throw new SyntaxError(`Could not find ${JSON.stringify(mapping)}`);
  }
  return result;
}

function _removeOutput(t, e) {
  let result = _extends({}, t);
  let out;
  if (typeof e === 'string') {
    if (result.Outputs[e]) {
      out = result.Outputs[e];
    } else {
      throw new SyntaxError(`Could not find ${JSON.stringify(e)}`);
    }
  } else {
    out = e;
  }
  if (result.Outputs[out.Name]) {
    delete result.Outputs[out.Name];
  } else {
    throw new SyntaxError(`Could not find ${JSON.stringify(out)}`);
  }
  return result;
}

function _removeParameter(t, e) {
  let result = _extends({}, t);
  let param;
  if (typeof e === 'string') {
    if (result.Parameters[e]) {
      param = result.Parameters[e];
    } else {
      throw new SyntaxError(`Could not find ${JSON.stringify(e)}`);
    }
  } else {
    param = e;
  }
  if (result.Parameters[param.Name]) {
    delete result.Parameters[param.Name];
  } else {
    throw new SyntaxError(`Could not find ${JSON.stringify(param)}`);
  }
  return result;
}

function _calcFromExistingTemplate(t, inputTemplate) {
  if (inputTemplate.Description) {
    t = t.add((0, _description.Description)(inputTemplate.Description));
  }
  if (inputTemplate.Parameters) {
    Object.keys(inputTemplate.Parameters).map(p => {
      t = t.add((0, _parameter.Parameter)(p, inputTemplate.Parameters[p]));
    });
  }
  if (inputTemplate.Resources) {
    Object.keys(inputTemplate.Resources).map(r => {
      console.log('r');
      console.log(inputTemplate.Resources[r]);
      let split = inputTemplate.Resources[r].Type.split('::');
      let cat = split[1];
      let resType = split[2];
      if (split[0] === 'AWS') {
        let service = (0, _service.Service)(cat);
        t = t.add(service[resType](r, inputTemplate.Resources[r].Properties));
      } else if (split[0] === 'Custom') {
        t = t.add((0, _resource.CustomResource)(r, inputTemplate.Resources[r].Properties));
      }
    });
  }
  if (inputTemplate.Outputs) {
    Object.keys(inputTemplate.Outputs).map(o => {
      console.log('o');
      t = t.add((0, _output.Output)(o, inputTemplate.Outputs[o]));
    });
  }
  if (inputTemplate.Mappings) {
    Object.keys(inputTemplate.Mappings).map(m => {
      Object.keys(inputTemplate.Mappings[m]).map(m0 => {
        t = t.add((0, _mapping.Mapping)(m, m0, inputTemplate.Mappings[m][m0]));
      });
    });
  }
  if (inputTemplate.Conditions) {
    Object.keys(inputTemplate.Conditions).map(c => {
      t = t.add((0, _condition.Condition)(c, inputTemplate.Conditions[c]));
    });
  }
  return t;
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.






Description = Description;function Description(content) {
  if (!content) {
    throw new SyntaxError(`New Description must have content.`);
  }
  return { kind: 'Description', Content: content };
}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.







Mapping = Mapping;function Mapping(
name,
subName,
body)
{
  if (!name || !subName || !body) {
    throw new SyntaxError(
    `New Mapping with ${JSON.stringify({
      name,
      subName,
      body })
    } parameters is invalid. name, subName, and body are required.`);

  }
  return { kind: 'Mapping', Name: name, Content: { [subName]: body } };
}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.
















Condition = Condition;var _intrinsic = __webpack_require__(0);var _lodash = __webpack_require__(2);var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function Condition(
name,
conditionFn)
{
  let newCondFn = _lodash2.default.cloneDeep(conditionFn);
  if (typeof newCondFn === 'object' && !newCondFn.kind) {
    newCondFn = (0, _intrinsic.buildIntrinsic)(newCondFn);
  }
  return { kind: 'Condition', Name: name, Condition: newCondFn };
}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.


















Output = Output;var _intrinsic = __webpack_require__(0);var _lodash = __webpack_require__(2);var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function Output(name, properties) {
  if (!name || !properties || !properties.Value) {
    throw new SyntaxError(
    `New Output with ${JSON.stringify({
      name,
      properties })
    } parameters is invalid. Name and Value are required.`);

  }
  const newProps = _lodash2.default.cloneDeep(properties);
  // If Value is a Ref object, create a Ref object
  if (typeof newProps.Value === 'object' && !newProps.Value.kind) {
    if (newProps.Value.Ref) {
      newProps.Value = (0, _intrinsic.Ref)(newProps.Value.Ref);
    } else if (newProps.Value['Fn::Join']) {
      newProps.Value = (0, _intrinsic.FnJoin)(
      newProps.Value['Fn::Join'][0],
      newProps.Value['Fn::Join'][1]);

    }
  }
  // If Export Name is Intrinsic, create an Intrinsic object
  if (
  newProps.Export &&
  newProps.Export.Name &&
  typeof newProps.Export.Name === 'object' &&
  newProps.Export.Name['Fn::Sub'] &&
  !newProps.Export.Name.kind)
  {
    newProps.Export.Name = (0, _intrinsic.FnSub)(newProps.Export.Name['Fn::Sub']);
  }
  return { kind: 'Output', Name: name, Properties: newProps };
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.







ResourceMetadata = ResourceMetadata;function ResourceMetadata(
resource,
content)
{
  if (!resource || !content) {
    throw new SyntaxError(
    `New Metadata must have content, ${JSON.stringify(content)} is invalid.`);

  }
  return { kind: 'ResourceMetadata', Resource: resource, Content: content };
}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) { // Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function (filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function () {
  var resolvedPath = '',
  resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function (path) {
  var isAbsolute = exports.isAbsolute(path),
  trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function (p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function (path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function () {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function (p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function (from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  var result = splitPath(path),
  root = result[0],
  dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function (path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function (path) {
  return splitPath(path)[3];
};

function filter(xs, f) {
  if (xs.filter) return xs.filter(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs)) res.push(xs[i]);
  }
  return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b' ?
function (str, start, len) {return str.substr(start, len);} :
function (str, start, len) {
  if (start < 0) start = str.length + start;
  return str.substr(start, len);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });const Pseudo = exports.Pseudo = {
  AWS_ACCOUNT_ID: 'AWS::AccountId',
  AWS_NOTIFICATION_ARNS: 'AWS::NotificationARNs',
  AWS_NO_VALUE: 'AWS::NoValue',
  AWS_REGION: 'AWS::Region',
  AWS_STACK_ID: 'AWS::StackId',
  AWS_STACK_NAME: 'AWS::StackName' };

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.Pseudo = exports.getInstanceTypeNameList = exports.getInstanceTypeList = exports.S3BucketTransform = exports.ResourceMetadata = exports.CreationPolicy = exports.FnJoin = exports.FnEquals = exports.FnGetAtt = exports.Ref = exports.Condition = exports.CustomResource = exports.Resource = exports.Mapping = exports.Output = exports.Description = exports.Parameter = exports.Template = undefined;var _template = __webpack_require__(8);Object.defineProperty(exports, 'Template', { enumerable: true, get: function () {return _template.

    Template;} });var _parameter = __webpack_require__(4);Object.defineProperty(exports, 'Parameter', { enumerable: true, get: function () {return _parameter.
    Parameter;} });var _description = __webpack_require__(9);Object.defineProperty(exports, 'Description', { enumerable: true, get: function () {return _description.
    Description;} });var _output = __webpack_require__(12);Object.defineProperty(exports, 'Output', { enumerable: true, get: function () {return _output.
    Output;} });var _mapping = __webpack_require__(10);Object.defineProperty(exports, 'Mapping', { enumerable: true, get: function () {return _mapping.
    Mapping;} });var _resource = __webpack_require__(1);Object.defineProperty(exports, 'Resource', { enumerable: true, get: function () {return _resource.
    Resource;} });Object.defineProperty(exports, 'CustomResource', { enumerable: true, get: function () {return _resource.CustomResource;} });var _condition = __webpack_require__(11);Object.defineProperty(exports, 'Condition', { enumerable: true, get: function () {return _condition.
    Condition;} });var _intrinsic = __webpack_require__(0);Object.defineProperty(exports, 'Ref', { enumerable: true, get: function () {return _intrinsic.
    Ref;} });Object.defineProperty(exports, 'FnGetAtt', { enumerable: true, get: function () {return _intrinsic.FnGetAtt;} });Object.defineProperty(exports, 'FnEquals', { enumerable: true, get: function () {return _intrinsic.FnEquals;} });Object.defineProperty(exports, 'FnJoin', { enumerable: true, get: function () {return _intrinsic.FnJoin;} });var _creationpolicy = __webpack_require__(5);Object.defineProperty(exports, 'CreationPolicy', { enumerable: true, get: function () {return _creationpolicy.

    CreationPolicy;} });var _metadata = __webpack_require__(13);Object.defineProperty(exports, 'ResourceMetadata', { enumerable: true, get: function () {return _metadata.
    ResourceMetadata;} });var _s = __webpack_require__(19);Object.defineProperty(exports, 'S3BucketTransform', { enumerable: true, get: function () {return _s.
    S3BucketTransform;} });var _ec2meta = __webpack_require__(20);Object.defineProperty(exports, 'getInstanceTypeList', { enumerable: true, get: function () {return _ec2meta.

    getInstanceTypeList;} });Object.defineProperty(exports, 'getInstanceTypeNameList', { enumerable: true, get: function () {return _ec2meta.
    getInstanceTypeNameList;} });var _pseudo = __webpack_require__(15);Object.defineProperty(exports, 'Pseudo', { enumerable: true, get: function () {return _pseudo.

    Pseudo;} });var _service = __webpack_require__(6);


var _path = __webpack_require__(14);var path = _interopRequireWildcard(_path);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}

//const files = fs.readdirSync(path.resolve(__dirname, './stubs/json'));
const files = [
'ApiGateway.json',
'CloudWatch.json',
'DataPipeline.json',
'EMR.json',
'GameLift.json',
'Logs.json',
'SNS.json',
'ApplicationAutoScaling.json',
'CodeBuild.json',
'DirectoryService.json',
'ElastiCache.json',
'IAM.json',
'OpsWorks.json',
'SQS.json',
'AutoScaling.json',
'CodeCommit.json',
'DynamoDB.json',
'ElasticBeanstalk.json',
'IoT.json',
'RDS.json',
'SSM.json',
'CertificateManager.json',
'CodeDeploy.json',
'EC2.json',
'ElasticLoadBalancing.json',
'KMS.json',
'Redshift.json',
'StepFunctions.json',
'CloudFormation.json',
'CodePipeline.json',
'ECR.json',
'ElasticLoadBalancingV2.json',
'Kinesis.json',
'Route53.json',
'WAF.json',
'CloudFront.json',
'Cognito.json',
'ECS.json',
'Elasticsearch.json',
'KinesisFirehose.json',
'S3.json',
'WAFRegional.json',
'CloudTrail.json',
'Config.json',
'EFS.json',
'Events.json',
'Lambda.json',
'SDB.json',
'WorkSpaces.json']; //import * as fs from 'fs';

files.map(file => {
  if (file !== 'json') {
    const service = file.replace('.json', '');
    exports[service] = (0, _service.Service)(service);
  }
});

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function () {
				return module.l;
			} });

		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function () {
				return module.i;
			} });

		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 18 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 18;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });exports.




S3BucketTransform = S3BucketTransform;var _service = __webpack_require__(6);const s3Service = (0, _service.Service)('S3');function S3BucketTransform(
bucketName,
logicalName,
awsObj)
{
  const s3Client = new awsObj.S3();
  return new Promise((resolve, reject) => {
    //let bucket = new s3Resource.Bucket(newName);
    const bucket = {};
    return (
      s3Client.
      getBucketVersioning({ Bucket: bucketName }).
      promise().
      then(versionData => {
        if (Object.keys(versionData)) {
          bucket.VersioningConfiguration = versionData;
        }
        // return s3Client.getBucketAcl({ Bucket: bucketName }).promise()
        return s3Client.getBucketCors({ Bucket: bucketName }).promise();
      })
      /* .then(function (aclData) {
         console.log('2')
         console.log(JSON.stringify(aclData))
         bucket.AccessControl = aclData
         })*/.
      then(corsData => {
        console.log('cors');
        bucket.CorsConfiguration = corsData;
        return s3Client.
        getBucketLifecycleConfiguration({ Bucket: bucketName }).
        promise();
      }).
      catch(e => {
        // Silently catch the NoSuchCORSConfiguration
        return s3Client.
        getBucketLifecycleConfiguration({ Bucket: bucketName }).
        promise();
      }).
      then(lifeData => {
        console.log('life');
        bucket.LifecycleConfiguration = lifeData;
        return s3Client.getBucketLogging({ Bucket: bucketName }).promise();
      }).
      catch(e => {
        // Silently catch the NoSuchLifecycleConfiguration
        return s3Client.getBucketLogging({ Bucket: bucketName }).promise();
      }).
      then(loggingData => {
        bucket.LoggingConfiguration = {
          DestinationBucketName: loggingData.LoggingEnabled.TargetBucket,
          LogFilePrefix: loggingData.LoggingEnabled.TargetPrefix };

        return s3Client.
        getBucketNotification({ Bucket: bucketName }).
        promise();
      }).
      then(notificationData => {
        if (Object.keys(notificationData).length > 0) {
          bucket.NotificationConfiguration = notificationData;
        }
        return s3Client.
        getBucketReplication({ Bucket: bucketName }).
        promise();
      }).
      then(replData => {
        bucket.ReplicationConfiguration = replData;
        return s3Client.getBucketTagging({ Bucket: bucketName }).promise();
      }).
      then(tagsData => {
        tagsData.TagSet.forEach(tag => {
          bucket.Tags.add(tag);
        });
        return s3Client.getBucketWebsite({ Bucket: bucketName }).promise();
      }).
      catch(e => {
        // Silently catch the NoSuchTagSet
        return s3Client.getBucketWebsite({ Bucket: bucketName }).promise();
      }).
      then(websiteData => {
        bucket.WebsiteConfiguration = new websiteData();
      }).
      catch(e => {
        // Silently catch the NoSuchWebsiteConfiguration
        return;
      }).
      then(() => {
        resolve(s3Service.Bucket(logicalName, bucket));
      }).
      catch(e => {
        // Silently catch the NoSuchWebsiteConfiguration
        reject(e);
      }));

  });
}

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });exports.









getInstanceTypeList = getInstanceTypeList;exports.








getInstanceTypeNameList = getInstanceTypeNameList;exports.












getInstanceTypeMap = getInstanceTypeMap;exports.












getRegions = getRegions;exports.



























getAMIMap = getAMIMap;const instanceTypes = __webpack_require__(21);const Promise = __webpack_require__(22); /**
                                                                                                                           * Returns an array of all instance types and details.
                                                                                                                           * @memberof module:Macro
                                                                                                                           * @returns {Array}
                                                                                                                           */function getInstanceTypeList() {return instanceTypes;} /**
                                                                                                                                                                                     * Returns an array of just the instance type names available in AWS.
                                                                                                                                                                                     * @memberof module:Macro
                                                                                                                                                                                     * @returns {Array}
                                                                                                                                                                                     */function getInstanceTypeNameList() {let results = [];instanceTypes.forEach(instanceType => {results.push(instanceType.instance_type);});return results;} /**
                                                                                                                                                                                                                                                                                                                                                 * Returns a map of all instance types and details.
                                                                                                                                                                                                                                                                                                                                                 * @memberof module:Macro
                                                                                                                                                                                                                                                                                                                                                 * @returns {{}}
                                                                                                                                                                                                                                                                                                                                                 */function getInstanceTypeMap() {let results = {};instanceTypes.forEach(instanceType => {results[instanceType.instance_type] = instanceType;});return results;} /**
eturns an array of the names of all regions in AWS.
memberof module:Macro
returns {string[]}
function getRegions() {return ['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'ca-central-1', 'eu-west-1', 'eu-west-2', 'eu-central-1', 'ap-south-1', 'ap-southeast-1', 'ap-southeast-2', 'ap-northeast-1', 'ap-northeast-2', 'sa-east-1', 'cn-north-1', 'us-gov-west-1'];} /**
eturns an AMI Map that can be added to a Mapping.
memberof module:Macro
param filters
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @param regions
returns {Promise.<TResult>}
function getAMIMap(filters, regions, aws) {return Promise.map(regions, region => {let ec2Client = new aws.EC2({ region: region });return Promise.map(filters, filterSet => {return ec2Client.describeImages({ Filters: filterSet.Filters }).promise().then(ami => {let set = {};if (ami.Images[0]) {if (ami.Images[0].ImageId) {set[filterSet.Name] = ami.Images[0].ImageId;} else {set[filterSet.Name] = 'NOT_SUPPORTED';}} else {set[filterSet.Name] = 'NOT_SUPPORTED';}return set;});}).then(results => {
      results = results.reduce((prev, current) => {
        let key = Object.keys(current)[0];
        prev[key] = current[key];
        return prev;
      }, {});
      return { region: region, images: results };
    });
  }).then(function (results) {
    let final = {};
    results.forEach(result => {
      final[result.region] = result.images;
    });
    return final;
  });
}

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = [
	{
		"ECU": 1,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"i386",
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "previous",
		"instance_type": "m1.small",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"PV"
		],
		"memory": 1.7,
		"network_performance": "Low",
		"placement_group_support": false,
		"pretty_name": "M1 General Purpose Small",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.061",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.032",
						"yrTerm1Standard.noUpfront": "0.037",
						"yrTerm1Standard.partialUpfront": "0.032",
						"yrTerm3Standard.allUpfront": "0.021",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswin": {
					"ondemand": "0.088",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.055",
						"yrTerm1Standard.noUpfront": "0.066",
						"yrTerm1Standard.partialUpfront": "0.056",
						"yrTerm3Standard.allUpfront": "0.043",
						"yrTerm3Standard.partialUpfront": "0.046"
					}
				},
				"mswinSQL": {
					"ondemand": "0.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.439",
						"yrTerm1Standard.noUpfront": "0.525",
						"yrTerm1Standard.partialUpfront": "0.448",
						"yrTerm3Standard.allUpfront": "0.406",
						"yrTerm3Standard.partialUpfront": "0.432"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.139",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.090",
						"yrTerm1Standard.noUpfront": "0.108",
						"yrTerm1Standard.partialUpfront": "0.092",
						"yrTerm3Standard.allUpfront": "0.073",
						"yrTerm3Standard.partialUpfront": "0.078"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.058",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.033",
						"yrTerm1Standard.noUpfront": "0.039",
						"yrTerm1Standard.partialUpfront": "0.033",
						"yrTerm3Standard.allUpfront": "0.021",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswin": {
					"ondemand": "0.093",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.055",
						"yrTerm1Standard.noUpfront": "0.065",
						"yrTerm1Standard.partialUpfront": "0.056",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswinSQL": {
					"ondemand": "0.629",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.405",
						"yrTerm1Standard.noUpfront": "0.484",
						"yrTerm1Standard.partialUpfront": "0.414",
						"yrTerm3Standard.allUpfront": "0.373",
						"yrTerm3Standard.partialUpfront": "0.397"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.139",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.088",
						"yrTerm1Standard.noUpfront": "0.105",
						"yrTerm1Standard.partialUpfront": "0.089",
						"yrTerm3Standard.allUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.073"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.058",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.033",
						"yrTerm1Standard.noUpfront": "0.039",
						"yrTerm1Standard.partialUpfront": "0.033",
						"yrTerm3Standard.allUpfront": "0.021",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswin": {
					"ondemand": "0.093",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.055",
						"yrTerm1Standard.noUpfront": "0.065",
						"yrTerm1Standard.partialUpfront": "0.056",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswinSQL": {
					"ondemand": "0.629",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.405",
						"yrTerm1Standard.noUpfront": "0.484",
						"yrTerm1Standard.partialUpfront": "0.414",
						"yrTerm3Standard.allUpfront": "0.373",
						"yrTerm3Standard.partialUpfront": "0.397"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.139",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.088",
						"yrTerm1Standard.noUpfront": "0.105",
						"yrTerm1Standard.partialUpfront": "0.089",
						"yrTerm3Standard.allUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.073"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.047",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.029",
						"yrTerm1Standard.noUpfront": "0.034",
						"yrTerm1Standard.partialUpfront": "0.030",
						"yrTerm3Standard.allUpfront": "0.019",
						"yrTerm3Standard.partialUpfront": "0.020"
					}
				},
				"mswin": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.056",
						"yrTerm1Standard.noUpfront": "0.066",
						"yrTerm1Standard.partialUpfront": "0.057",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswinSQL": {
					"ondemand": "0.629",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.396",
						"yrTerm1Standard.noUpfront": "0.473",
						"yrTerm1Standard.partialUpfront": "0.404",
						"yrTerm3Standard.allUpfront": "0.367",
						"yrTerm3Standard.partialUpfront": "0.390"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.139",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.094",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.062",
						"yrTerm3Standard.partialUpfront": "0.066"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.058",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.029",
						"yrTerm1Standard.noUpfront": "0.034",
						"yrTerm1Standard.partialUpfront": "0.029",
						"yrTerm3Standard.allUpfront": "0.020",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswin": {
					"ondemand": "0.089",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.082",
						"yrTerm1Standard.partialUpfront": "0.079",
						"yrTerm3Standard.allUpfront": "0.046",
						"yrTerm3Standard.partialUpfront": "0.049"
					}
				},
				"mswinSQL": {
					"ondemand": "0.664",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.430",
						"yrTerm1Standard.noUpfront": "0.513",
						"yrTerm1Standard.partialUpfront": "0.439",
						"yrTerm3Standard.allUpfront": "0.384",
						"yrTerm3Standard.partialUpfront": "0.409"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.168",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.112",
						"yrTerm1Standard.noUpfront": "0.134",
						"yrTerm1Standard.partialUpfront": "0.115",
						"yrTerm3Standard.allUpfront": "0.080",
						"yrTerm3Standard.partialUpfront": "0.085"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.044",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.024",
						"yrTerm1Standard.noUpfront": "0.028",
						"yrTerm1Standard.partialUpfront": "0.024",
						"yrTerm3Standard.allUpfront": "0.015",
						"yrTerm3Standard.partialUpfront": "0.016"
					}
				},
				"mswin": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.048",
						"yrTerm1Standard.noUpfront": "0.057",
						"yrTerm1Standard.partialUpfront": "0.049",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.039"
					}
				},
				"mswinSQL": {
					"ondemand": "0.629",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.396",
						"yrTerm1Standard.noUpfront": "0.473",
						"yrTerm1Standard.partialUpfront": "0.404",
						"yrTerm3Standard.allUpfront": "0.367",
						"yrTerm3Standard.partialUpfront": "0.390"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.139",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.094",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.062",
						"yrTerm3Standard.partialUpfront": "0.066"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.053",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.026",
						"yrTerm1Standard.noUpfront": "0.033",
						"yrTerm1Standard.partialUpfront": "0.028",
						"yrTerm3Standard.allUpfront": "0.018",
						"yrTerm3Standard.partialUpfront": "0.019"
					}
				},
				"mswin": {
					"ondemand": "0.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.049",
						"yrTerm1Standard.noUpfront": "0.064",
						"yrTerm1Standard.partialUpfront": "0.055",
						"yrTerm3Standard.allUpfront": "0.039",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswinSQL": {
					"ondemand": "0.653",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.374",
						"yrTerm1Standard.noUpfront": "0.481",
						"yrTerm1Standard.partialUpfront": "0.411",
						"yrTerm3Standard.allUpfront": "0.361",
						"yrTerm3Standard.partialUpfront": "0.397"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.159",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.070",
						"yrTerm1Standard.noUpfront": "0.091",
						"yrTerm1Standard.partialUpfront": "0.077",
						"yrTerm3Standard.allUpfront": "0.059",
						"yrTerm3Standard.partialUpfront": "0.065"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.047",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.029",
						"yrTerm1Standard.noUpfront": "0.034",
						"yrTerm1Standard.partialUpfront": "0.030",
						"yrTerm3Standard.allUpfront": "0.019",
						"yrTerm3Standard.partialUpfront": "0.020"
					}
				},
				"mswin": {
					"ondemand": "0.078",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.056",
						"yrTerm1Standard.noUpfront": "0.066",
						"yrTerm1Standard.partialUpfront": "0.057",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswinSQL": {
					"ondemand": "0.639",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.405",
						"yrTerm1Standard.noUpfront": "0.484",
						"yrTerm1Standard.partialUpfront": "0.414",
						"yrTerm3Standard.allUpfront": "0.373",
						"yrTerm3Standard.partialUpfront": "0.397"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.147",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.088",
						"yrTerm1Standard.noUpfront": "0.105",
						"yrTerm1Standard.partialUpfront": "0.089",
						"yrTerm3Standard.allUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.073"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.044",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.024",
						"yrTerm1Standard.noUpfront": "0.028",
						"yrTerm1Standard.partialUpfront": "0.024",
						"yrTerm3Standard.allUpfront": "0.015",
						"yrTerm3Standard.partialUpfront": "0.016"
					}
				},
				"mswin": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.048",
						"yrTerm1Standard.noUpfront": "0.057",
						"yrTerm1Standard.partialUpfront": "0.049",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.039"
					}
				},
				"mswinSQL": {
					"ondemand": "0.629",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.396",
						"yrTerm1Standard.noUpfront": "0.473",
						"yrTerm1Standard.partialUpfront": "0.404",
						"yrTerm3Standard.allUpfront": "0.367",
						"yrTerm3Standard.partialUpfront": "0.390"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.139",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.094",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.062",
						"yrTerm3Standard.partialUpfront": "0.066"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": true,
			"nvme_ssd": false,
			"size": 160,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 1,
		"vpc": {
			"ips_per_eni": 4,
			"max_enis": 2
		},
		"vpc_only": false
	},
	{
		"ECU": 2,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"i386",
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "previous",
		"instance_type": "m1.medium",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"PV"
		],
		"memory": 3.75,
		"network_performance": "Moderate",
		"placement_group_support": false,
		"pretty_name": "M1 General Purpose Medium",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.122",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.065",
						"yrTerm1Standard.noUpfront": "0.074",
						"yrTerm1Standard.partialUpfront": "0.066",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswin": {
					"ondemand": "0.177",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.112",
						"yrTerm1Standard.noUpfront": "0.133",
						"yrTerm1Standard.partialUpfront": "0.114",
						"yrTerm3Standard.allUpfront": "0.085",
						"yrTerm3Standard.partialUpfront": "0.090"
					}
				},
				"mswinSQL": {
					"ondemand": "0.782",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.523",
						"yrTerm1Standard.noUpfront": "0.625",
						"yrTerm1Standard.partialUpfront": "0.534",
						"yrTerm3Standard.allUpfront": "0.456",
						"yrTerm3Standard.partialUpfront": "0.485"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.237",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.166",
						"yrTerm1Standard.noUpfront": "0.198",
						"yrTerm1Standard.partialUpfront": "0.169",
						"yrTerm3Standard.allUpfront": "0.116",
						"yrTerm3Standard.partialUpfront": "0.124"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.117",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.065",
						"yrTerm1Standard.noUpfront": "0.078",
						"yrTerm1Standard.partialUpfront": "0.066",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswin": {
					"ondemand": "0.187",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.109",
						"yrTerm1Standard.noUpfront": "0.130",
						"yrTerm1Standard.partialUpfront": "0.111",
						"yrTerm3Standard.allUpfront": "0.083",
						"yrTerm3Standard.partialUpfront": "0.088"
					}
				},
				"mswinSQL": {
					"ondemand": "0.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.471",
						"yrTerm1Standard.noUpfront": "0.563",
						"yrTerm1Standard.partialUpfront": "0.481",
						"yrTerm3Standard.allUpfront": "0.422",
						"yrTerm3Standard.partialUpfront": "0.449"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.237",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.145",
						"yrTerm1Standard.noUpfront": "0.173",
						"yrTerm1Standard.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.111",
						"yrTerm3Standard.partialUpfront": "0.118"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.117",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.065",
						"yrTerm1Standard.noUpfront": "0.078",
						"yrTerm1Standard.partialUpfront": "0.066",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswin": {
					"ondemand": "0.187",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.109",
						"yrTerm1Standard.noUpfront": "0.130",
						"yrTerm1Standard.partialUpfront": "0.111",
						"yrTerm3Standard.allUpfront": "0.083",
						"yrTerm3Standard.partialUpfront": "0.088"
					}
				},
				"mswinSQL": {
					"ondemand": "0.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.471",
						"yrTerm1Standard.noUpfront": "0.563",
						"yrTerm1Standard.partialUpfront": "0.481",
						"yrTerm3Standard.allUpfront": "0.422",
						"yrTerm3Standard.partialUpfront": "0.449"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.237",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.145",
						"yrTerm1Standard.noUpfront": "0.173",
						"yrTerm1Standard.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.111",
						"yrTerm3Standard.partialUpfront": "0.118"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.095",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.059",
						"yrTerm1Standard.noUpfront": "0.068",
						"yrTerm1Standard.partialUpfront": "0.060",
						"yrTerm3Standard.allUpfront": "0.038",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				},
				"mswin": {
					"ondemand": "0.149",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.110",
						"yrTerm1Standard.noUpfront": "0.131",
						"yrTerm1Standard.partialUpfront": "0.112",
						"yrTerm3Standard.allUpfront": "0.083",
						"yrTerm3Standard.partialUpfront": "0.088"
					}
				},
				"mswinSQL": {
					"ondemand": "0.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.455",
						"yrTerm1Standard.noUpfront": "0.543",
						"yrTerm1Standard.partialUpfront": "0.464",
						"yrTerm3Standard.allUpfront": "0.409",
						"yrTerm3Standard.partialUpfront": "0.435"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.237",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.130",
						"yrTerm1Standard.noUpfront": "0.155",
						"yrTerm1Standard.partialUpfront": "0.132",
						"yrTerm3Standard.allUpfront": "0.099",
						"yrTerm3Standard.partialUpfront": "0.105"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.117",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.057",
						"yrTerm1Standard.noUpfront": "0.068",
						"yrTerm1Standard.partialUpfront": "0.058",
						"yrTerm3Standard.allUpfront": "0.040",
						"yrTerm3Standard.partialUpfront": "0.042"
					}
				},
				"mswin": {
					"ondemand": "0.179",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.155",
						"yrTerm1Standard.noUpfront": "0.165",
						"yrTerm1Standard.partialUpfront": "0.158",
						"yrTerm3Standard.allUpfront": "0.093",
						"yrTerm3Standard.partialUpfront": "0.099"
					}
				},
				"mswinSQL": {
					"ondemand": "0.814",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.516",
						"yrTerm1Standard.noUpfront": "0.615",
						"yrTerm1Standard.partialUpfront": "0.526",
						"yrTerm3Standard.allUpfront": "0.445",
						"yrTerm3Standard.partialUpfront": "0.473"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.297",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.179",
						"yrTerm1Standard.noUpfront": "0.214",
						"yrTerm1Standard.partialUpfront": "0.183",
						"yrTerm3Standard.allUpfront": "0.126",
						"yrTerm3Standard.partialUpfront": "0.134"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.087",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.047",
						"yrTerm1Standard.noUpfront": "0.056",
						"yrTerm1Standard.partialUpfront": "0.048",
						"yrTerm3Standard.allUpfront": "0.029",
						"yrTerm3Standard.partialUpfront": "0.031"
					}
				},
				"mswin": {
					"ondemand": "0.149",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.096",
						"yrTerm1Standard.noUpfront": "0.115",
						"yrTerm1Standard.partialUpfront": "0.098",
						"yrTerm3Standard.allUpfront": "0.072",
						"yrTerm3Standard.partialUpfront": "0.077"
					}
				},
				"mswinSQL": {
					"ondemand": "0.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.455",
						"yrTerm1Standard.noUpfront": "0.543",
						"yrTerm1Standard.partialUpfront": "0.464",
						"yrTerm3Standard.allUpfront": "0.409",
						"yrTerm3Standard.partialUpfront": "0.435"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.237",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.130",
						"yrTerm1Standard.noUpfront": "0.155",
						"yrTerm1Standard.partialUpfront": "0.132",
						"yrTerm3Standard.allUpfront": "0.099",
						"yrTerm3Standard.partialUpfront": "0.105"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.106",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.052",
						"yrTerm1Standard.noUpfront": "0.066",
						"yrTerm1Standard.partialUpfront": "0.055",
						"yrTerm3Standard.allUpfront": "0.035",
						"yrTerm3Standard.partialUpfront": "0.039"
					}
				},
				"mswin": {
					"ondemand": "0.168",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.107",
						"yrTerm1Standard.noUpfront": "0.139",
						"yrTerm1Standard.partialUpfront": "0.119",
						"yrTerm3Standard.allUpfront": "0.081",
						"yrTerm3Standard.partialUpfront": "0.092"
					}
				},
				"mswinSQL": {
					"ondemand": "0.792",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.479",
						"yrTerm1Standard.noUpfront": "0.615",
						"yrTerm1Standard.partialUpfront": "0.526",
						"yrTerm3Standard.allUpfront": "0.431",
						"yrTerm3Standard.partialUpfront": "0.473"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.279",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.164",
						"yrTerm1Standard.noUpfront": "0.211",
						"yrTerm1Standard.partialUpfront": "0.181",
						"yrTerm3Standard.allUpfront": "0.123",
						"yrTerm3Standard.partialUpfront": "0.135"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.095",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.059",
						"yrTerm1Standard.noUpfront": "0.068",
						"yrTerm1Standard.partialUpfront": "0.060",
						"yrTerm3Standard.allUpfront": "0.038",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				},
				"mswin": {
					"ondemand": "0.157",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.110",
						"yrTerm1Standard.noUpfront": "0.131",
						"yrTerm1Standard.partialUpfront": "0.112",
						"yrTerm3Standard.allUpfront": "0.083",
						"yrTerm3Standard.partialUpfront": "0.088"
					}
				},
				"mswinSQL": {
					"ondemand": "0.764",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.471",
						"yrTerm1Standard.noUpfront": "0.563",
						"yrTerm1Standard.partialUpfront": "0.481",
						"yrTerm3Standard.allUpfront": "0.422",
						"yrTerm3Standard.partialUpfront": "0.449"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.255",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.145",
						"yrTerm1Standard.noUpfront": "0.173",
						"yrTerm1Standard.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.111",
						"yrTerm3Standard.partialUpfront": "0.118"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.087",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.047",
						"yrTerm1Standard.noUpfront": "0.056",
						"yrTerm1Standard.partialUpfront": "0.048",
						"yrTerm3Standard.allUpfront": "0.029",
						"yrTerm3Standard.partialUpfront": "0.031"
					}
				},
				"mswin": {
					"ondemand": "0.149",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.096",
						"yrTerm1Standard.noUpfront": "0.115",
						"yrTerm1Standard.partialUpfront": "0.098",
						"yrTerm3Standard.allUpfront": "0.072",
						"yrTerm3Standard.partialUpfront": "0.077"
					}
				},
				"mswinSQL": {
					"ondemand": "0.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.455",
						"yrTerm1Standard.noUpfront": "0.543",
						"yrTerm1Standard.partialUpfront": "0.464",
						"yrTerm3Standard.allUpfront": "0.409",
						"yrTerm3Standard.partialUpfront": "0.435"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.237",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.130",
						"yrTerm1Standard.noUpfront": "0.155",
						"yrTerm1Standard.partialUpfront": "0.132",
						"yrTerm3Standard.allUpfront": "0.099",
						"yrTerm3Standard.partialUpfront": "0.105"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 410,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 1,
		"vpc": {
			"ips_per_eni": 6,
			"max_enis": 2
		},
		"vpc_only": false
	},
	{
		"ECU": 4,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 4000,
		"ebs_max_bandwidth": 500,
		"ebs_optimized": true,
		"ebs_throughput": 62.5,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "previous",
		"instance_type": "m1.large",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"PV"
		],
		"memory": 7.5,
		"network_performance": "Moderate",
		"placement_group_support": false,
		"pretty_name": "M1 General Purpose Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.243",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.129",
						"yrTerm1Standard.noUpfront": "0.148",
						"yrTerm1Standard.partialUpfront": "0.131",
						"yrTerm3Standard.allUpfront": "0.082",
						"yrTerm3Standard.partialUpfront": "0.087"
					}
				},
				"mswin": {
					"ondemand": "0.353",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.222",
						"yrTerm1Standard.noUpfront": "0.265",
						"yrTerm1Standard.partialUpfront": "0.226",
						"yrTerm3Standard.allUpfront": "0.170",
						"yrTerm3Standard.partialUpfront": "0.181"
					}
				},
				"mswinSQL": {
					"ondemand": "1.001",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.628",
						"yrTerm1Standard.noUpfront": "0.750",
						"yrTerm1Standard.partialUpfront": "0.641",
						"yrTerm3Standard.allUpfront": "0.546",
						"yrTerm3Standard.partialUpfront": "0.581"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.435",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.278",
						"yrTerm1Standard.noUpfront": "0.332",
						"yrTerm1Standard.partialUpfront": "0.284",
						"yrTerm3Standard.allUpfront": "0.212",
						"yrTerm3Standard.partialUpfront": "0.225"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.233",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.128",
						"yrTerm1Standard.noUpfront": "0.156",
						"yrTerm1Standard.partialUpfront": "0.131",
						"yrTerm3Standard.allUpfront": "0.082",
						"yrTerm3Standard.partialUpfront": "0.087"
					}
				},
				"mswin": {
					"ondemand": "0.373",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.219",
						"yrTerm1Standard.noUpfront": "0.261",
						"yrTerm1Standard.partialUpfront": "0.223",
						"yrTerm3Standard.allUpfront": "0.164",
						"yrTerm3Standard.partialUpfront": "0.174"
					}
				},
				"mswinSQL": {
					"ondemand": "0.955",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.592",
						"yrTerm1Standard.noUpfront": "0.706",
						"yrTerm1Standard.partialUpfront": "0.604",
						"yrTerm3Standard.allUpfront": "0.508",
						"yrTerm3Standard.partialUpfront": "0.540"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.435",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.270",
						"yrTerm1Standard.noUpfront": "0.322",
						"yrTerm1Standard.partialUpfront": "0.276",
						"yrTerm3Standard.allUpfront": "0.203",
						"yrTerm3Standard.partialUpfront": "0.215"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.233",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.128",
						"yrTerm1Standard.noUpfront": "0.156",
						"yrTerm1Standard.partialUpfront": "0.131",
						"yrTerm3Standard.allUpfront": "0.082",
						"yrTerm3Standard.partialUpfront": "0.087"
					}
				},
				"mswin": {
					"ondemand": "0.373",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.219",
						"yrTerm1Standard.noUpfront": "0.261",
						"yrTerm1Standard.partialUpfront": "0.223",
						"yrTerm3Standard.allUpfront": "0.164",
						"yrTerm3Standard.partialUpfront": "0.174"
					}
				},
				"mswinSQL": {
					"ondemand": "0.955",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.592",
						"yrTerm1Standard.noUpfront": "0.706",
						"yrTerm1Standard.partialUpfront": "0.604",
						"yrTerm3Standard.allUpfront": "0.508",
						"yrTerm3Standard.partialUpfront": "0.540"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.435",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.270",
						"yrTerm1Standard.noUpfront": "0.322",
						"yrTerm1Standard.partialUpfront": "0.276",
						"yrTerm3Standard.allUpfront": "0.203",
						"yrTerm3Standard.partialUpfront": "0.215"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.19",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.118",
						"yrTerm1Standard.noUpfront": "0.136",
						"yrTerm1Standard.partialUpfront": "0.120",
						"yrTerm3Standard.allUpfront": "0.075",
						"yrTerm3Standard.partialUpfront": "0.080"
					}
				},
				"mswin": {
					"ondemand": "0.299",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.222",
						"yrTerm1Standard.noUpfront": "0.265",
						"yrTerm1Standard.partialUpfront": "0.226",
						"yrTerm3Standard.allUpfront": "0.166",
						"yrTerm3Standard.partialUpfront": "0.177"
					}
				},
				"mswinSQL": {
					"ondemand": "0.955",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.557",
						"yrTerm1Standard.noUpfront": "0.665",
						"yrTerm1Standard.partialUpfront": "0.568",
						"yrTerm3Standard.allUpfront": "0.483",
						"yrTerm3Standard.partialUpfront": "0.514"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.435",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.238",
						"yrTerm1Standard.noUpfront": "0.284",
						"yrTerm1Standard.partialUpfront": "0.243",
						"yrTerm3Standard.allUpfront": "0.178",
						"yrTerm3Standard.partialUpfront": "0.190"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.233",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.113",
						"yrTerm1Standard.noUpfront": "0.136",
						"yrTerm1Standard.partialUpfront": "0.116",
						"yrTerm3Standard.allUpfront": "0.081",
						"yrTerm3Standard.partialUpfront": "0.086"
					}
				},
				"mswin": {
					"ondemand": "0.357",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.312",
						"yrTerm1Standard.noUpfront": "0.331",
						"yrTerm1Standard.partialUpfront": "0.318",
						"yrTerm3Standard.allUpfront": "0.184",
						"yrTerm3Standard.partialUpfront": "0.196"
					}
				},
				"mswinSQL": {
					"ondemand": "1.092",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.692",
						"yrTerm1Standard.noUpfront": "0.826",
						"yrTerm1Standard.partialUpfront": "0.706",
						"yrTerm3Standard.allUpfront": "0.561",
						"yrTerm3Standard.partialUpfront": "0.597"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.553",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.339",
						"yrTerm1Standard.noUpfront": "0.404",
						"yrTerm1Standard.partialUpfront": "0.345",
						"yrTerm3Standard.allUpfront": "0.232",
						"yrTerm3Standard.partialUpfront": "0.247"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.175",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.095",
						"yrTerm1Standard.noUpfront": "0.112",
						"yrTerm1Standard.partialUpfront": "0.097",
						"yrTerm3Standard.allUpfront": "0.059",
						"yrTerm3Standard.partialUpfront": "0.063"
					}
				},
				"mswin": {
					"ondemand": "0.299",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.194",
						"yrTerm1Standard.noUpfront": "0.232",
						"yrTerm1Standard.partialUpfront": "0.198",
						"yrTerm3Standard.allUpfront": "0.147",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswinSQL": {
					"ondemand": "0.955",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.557",
						"yrTerm1Standard.noUpfront": "0.665",
						"yrTerm1Standard.partialUpfront": "0.568",
						"yrTerm3Standard.allUpfront": "0.483",
						"yrTerm3Standard.partialUpfront": "0.514"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.435",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.238",
						"yrTerm1Standard.noUpfront": "0.284",
						"yrTerm1Standard.partialUpfront": "0.243",
						"yrTerm3Standard.allUpfront": "0.178",
						"yrTerm3Standard.partialUpfront": "0.190"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.211",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.104",
						"yrTerm1Standard.noUpfront": "0.132",
						"yrTerm1Standard.partialUpfront": "0.111",
						"yrTerm3Standard.allUpfront": "0.070",
						"yrTerm3Standard.partialUpfront": "0.077"
					}
				},
				"mswin": {
					"ondemand": "0.335",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.197",
						"yrTerm1Standard.noUpfront": "0.256",
						"yrTerm1Standard.partialUpfront": "0.219",
						"yrTerm3Standard.allUpfront": "0.153",
						"yrTerm3Standard.partialUpfront": "0.173"
					}
				},
				"mswinSQL": {
					"ondemand": "1.049",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.541",
						"yrTerm1Standard.noUpfront": "0.695",
						"yrTerm1Standard.partialUpfront": "0.594",
						"yrTerm3Standard.allUpfront": "0.489",
						"yrTerm3Standard.partialUpfront": "0.537"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.517",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.219",
						"yrTerm1Standard.noUpfront": "0.281",
						"yrTerm1Standard.partialUpfront": "0.241",
						"yrTerm3Standard.allUpfront": "0.178",
						"yrTerm3Standard.partialUpfront": "0.195"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.19",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.118",
						"yrTerm1Standard.noUpfront": "0.136",
						"yrTerm1Standard.partialUpfront": "0.120",
						"yrTerm3Standard.allUpfront": "0.075",
						"yrTerm3Standard.partialUpfront": "0.080"
					}
				},
				"mswin": {
					"ondemand": "0.314",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.222",
						"yrTerm1Standard.noUpfront": "0.265",
						"yrTerm1Standard.partialUpfront": "0.226",
						"yrTerm3Standard.allUpfront": "0.166",
						"yrTerm3Standard.partialUpfront": "0.177"
					}
				},
				"mswinSQL": {
					"ondemand": "0.994",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.592",
						"yrTerm1Standard.noUpfront": "0.706",
						"yrTerm1Standard.partialUpfront": "0.604",
						"yrTerm3Standard.allUpfront": "0.508",
						"yrTerm3Standard.partialUpfront": "0.540"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.47",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.270",
						"yrTerm1Standard.noUpfront": "0.322",
						"yrTerm1Standard.partialUpfront": "0.276",
						"yrTerm3Standard.allUpfront": "0.203",
						"yrTerm3Standard.partialUpfront": "0.215"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.175",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.095",
						"yrTerm1Standard.noUpfront": "0.112",
						"yrTerm1Standard.partialUpfront": "0.097",
						"yrTerm3Standard.allUpfront": "0.059",
						"yrTerm3Standard.partialUpfront": "0.063"
					}
				},
				"mswin": {
					"ondemand": "0.299",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.194",
						"yrTerm1Standard.noUpfront": "0.232",
						"yrTerm1Standard.partialUpfront": "0.198",
						"yrTerm3Standard.allUpfront": "0.147",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswinSQL": {
					"ondemand": "0.955",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.557",
						"yrTerm1Standard.noUpfront": "0.665",
						"yrTerm1Standard.partialUpfront": "0.568",
						"yrTerm3Standard.allUpfront": "0.483",
						"yrTerm3Standard.partialUpfront": "0.514"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.435",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.238",
						"yrTerm1Standard.noUpfront": "0.284",
						"yrTerm1Standard.partialUpfront": "0.243",
						"yrTerm3Standard.allUpfront": "0.178",
						"yrTerm3Standard.partialUpfront": "0.190"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 420,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 10,
			"max_enis": 3
		},
		"vpc_only": false
	},
	{
		"ECU": 8,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "previous",
		"instance_type": "m1.xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"PV"
		],
		"memory": 15,
		"network_performance": "High",
		"placement_group_support": false,
		"pretty_name": "M1 General Purpose Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.486",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.256",
						"yrTerm1Standard.noUpfront": "0.296",
						"yrTerm1Standard.partialUpfront": "0.261",
						"yrTerm3Standard.allUpfront": "0.164",
						"yrTerm3Standard.partialUpfront": "0.175"
					}
				},
				"mswin": {
					"ondemand": "0.706",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.444",
						"yrTerm1Standard.noUpfront": "0.530",
						"yrTerm1Standard.partialUpfront": "0.453",
						"yrTerm3Standard.allUpfront": "0.341",
						"yrTerm3Standard.partialUpfront": "0.363"
					}
				},
				"mswinSQL": {
					"ondemand": "1.435",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.866",
						"yrTerm1Standard.noUpfront": "1.033",
						"yrTerm1Standard.partialUpfront": "0.883",
						"yrTerm3Standard.allUpfront": "0.720",
						"yrTerm3Standard.partialUpfront": "0.766"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.83",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.534",
						"yrTerm1Standard.noUpfront": "0.638",
						"yrTerm1Standard.partialUpfront": "0.545",
						"yrTerm3Standard.allUpfront": "0.402",
						"yrTerm3Standard.partialUpfront": "0.428"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.467",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.312",
						"yrTerm1Standard.partialUpfront": "0.262",
						"yrTerm3Standard.allUpfront": "0.164",
						"yrTerm3Standard.partialUpfront": "0.175"
					}
				},
				"mswin": {
					"ondemand": "0.747",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.437",
						"yrTerm1Standard.noUpfront": "0.522",
						"yrTerm1Standard.partialUpfront": "0.446",
						"yrTerm3Standard.allUpfront": "0.328",
						"yrTerm3Standard.partialUpfront": "0.349"
					}
				},
				"mswinSQL": {
					"ondemand": "1.362",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.823",
						"yrTerm1Standard.noUpfront": "0.983",
						"yrTerm1Standard.partialUpfront": "0.840",
						"yrTerm3Standard.allUpfront": "0.677",
						"yrTerm3Standard.partialUpfront": "0.720"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.83",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.521",
						"yrTerm1Standard.noUpfront": "0.622",
						"yrTerm1Standard.partialUpfront": "0.532",
						"yrTerm3Standard.allUpfront": "0.387",
						"yrTerm3Standard.partialUpfront": "0.412"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.467",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.312",
						"yrTerm1Standard.partialUpfront": "0.262",
						"yrTerm3Standard.allUpfront": "0.164",
						"yrTerm3Standard.partialUpfront": "0.175"
					}
				},
				"mswin": {
					"ondemand": "0.747",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.437",
						"yrTerm1Standard.noUpfront": "0.522",
						"yrTerm1Standard.partialUpfront": "0.446",
						"yrTerm3Standard.allUpfront": "0.328",
						"yrTerm3Standard.partialUpfront": "0.349"
					}
				},
				"mswinSQL": {
					"ondemand": "1.362",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.823",
						"yrTerm1Standard.noUpfront": "0.983",
						"yrTerm1Standard.partialUpfront": "0.840",
						"yrTerm3Standard.allUpfront": "0.677",
						"yrTerm3Standard.partialUpfront": "0.720"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.83",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.521",
						"yrTerm1Standard.noUpfront": "0.622",
						"yrTerm1Standard.partialUpfront": "0.532",
						"yrTerm3Standard.allUpfront": "0.387",
						"yrTerm3Standard.partialUpfront": "0.412"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.379",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.235",
						"yrTerm1Standard.noUpfront": "0.272",
						"yrTerm1Standard.partialUpfront": "0.240",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.partialUpfront": "0.159"
					}
				},
				"mswin": {
					"ondemand": "0.598",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.443",
						"yrTerm1Standard.noUpfront": "0.529",
						"yrTerm1Standard.partialUpfront": "0.452",
						"yrTerm3Standard.allUpfront": "0.332",
						"yrTerm3Standard.partialUpfront": "0.354"
					}
				},
				"mswinSQL": {
					"ondemand": "1.362",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.759",
						"yrTerm1Standard.noUpfront": "0.906",
						"yrTerm1Standard.partialUpfront": "0.774",
						"yrTerm3Standard.allUpfront": "0.626",
						"yrTerm3Standard.partialUpfront": "0.666"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.83",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.455",
						"yrTerm1Standard.noUpfront": "0.543",
						"yrTerm1Standard.partialUpfront": "0.465",
						"yrTerm3Standard.allUpfront": "0.337",
						"yrTerm3Standard.partialUpfront": "0.358"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.467",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.227",
						"yrTerm1Standard.noUpfront": "0.272",
						"yrTerm1Standard.partialUpfront": "0.232",
						"yrTerm3Standard.allUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.171"
					}
				},
				"mswin": {
					"ondemand": "0.715",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.622",
						"yrTerm1Standard.noUpfront": "0.661",
						"yrTerm1Standard.partialUpfront": "0.635",
						"yrTerm3Standard.allUpfront": "0.370",
						"yrTerm3Standard.partialUpfront": "0.393"
					}
				},
				"mswinSQL": {
					"ondemand": "1.628",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.046",
						"yrTerm1Standard.noUpfront": "1.248",
						"yrTerm1Standard.partialUpfront": "1.067",
						"yrTerm3Standard.allUpfront": "0.798",
						"yrTerm3Standard.partialUpfront": "0.848"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.067",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.653",
						"yrTerm1Standard.noUpfront": "0.780",
						"yrTerm1Standard.partialUpfront": "0.667",
						"yrTerm3Standard.allUpfront": "0.445",
						"yrTerm3Standard.partialUpfront": "0.473"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.191",
						"yrTerm1Standard.noUpfront": "0.224",
						"yrTerm1Standard.partialUpfront": "0.195",
						"yrTerm3Standard.allUpfront": "0.117",
						"yrTerm3Standard.partialUpfront": "0.124"
					}
				},
				"mswin": {
					"ondemand": "0.598",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.389",
						"yrTerm1Standard.noUpfront": "0.465",
						"yrTerm1Standard.partialUpfront": "0.397",
						"yrTerm3Standard.allUpfront": "0.291",
						"yrTerm3Standard.partialUpfront": "0.310"
					}
				},
				"mswinSQL": {
					"ondemand": "1.362",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.759",
						"yrTerm1Standard.noUpfront": "0.906",
						"yrTerm1Standard.partialUpfront": "0.774",
						"yrTerm3Standard.allUpfront": "0.626",
						"yrTerm3Standard.partialUpfront": "0.666"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.83",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.455",
						"yrTerm1Standard.noUpfront": "0.543",
						"yrTerm1Standard.partialUpfront": "0.465",
						"yrTerm3Standard.allUpfront": "0.337",
						"yrTerm3Standard.partialUpfront": "0.358"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.423",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.208",
						"yrTerm1Standard.noUpfront": "0.264",
						"yrTerm1Standard.partialUpfront": "0.222",
						"yrTerm3Standard.allUpfront": "0.141",
						"yrTerm3Standard.partialUpfront": "0.154"
					}
				},
				"mswin": {
					"ondemand": "0.671",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.498",
						"yrTerm1Standard.noUpfront": "0.653",
						"yrTerm1Standard.partialUpfront": "0.558",
						"yrTerm3Standard.allUpfront": "0.307",
						"yrTerm3Standard.partialUpfront": "0.348"
					}
				},
				"mswinSQL": {
					"ondemand": "1.545",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.852",
						"yrTerm1Standard.noUpfront": "1.095",
						"yrTerm1Standard.partialUpfront": "0.936",
						"yrTerm3Standard.allUpfront": "0.649",
						"yrTerm3Standard.partialUpfront": "0.713"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.995",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.528",
						"yrTerm1Standard.noUpfront": "0.679",
						"yrTerm1Standard.partialUpfront": "0.580",
						"yrTerm3Standard.allUpfront": "0.336",
						"yrTerm3Standard.partialUpfront": "0.369"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.379",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.235",
						"yrTerm1Standard.noUpfront": "0.272",
						"yrTerm1Standard.partialUpfront": "0.240",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.partialUpfront": "0.159"
					}
				},
				"mswin": {
					"ondemand": "0.627",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.443",
						"yrTerm1Standard.noUpfront": "0.529",
						"yrTerm1Standard.partialUpfront": "0.452",
						"yrTerm3Standard.allUpfront": "0.332",
						"yrTerm3Standard.partialUpfront": "0.354"
					}
				},
				"mswinSQL": {
					"ondemand": "1.438",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.823",
						"yrTerm1Standard.noUpfront": "0.983",
						"yrTerm1Standard.partialUpfront": "0.840",
						"yrTerm3Standard.allUpfront": "0.677",
						"yrTerm3Standard.partialUpfront": "0.720"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.899",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.521",
						"yrTerm1Standard.noUpfront": "0.622",
						"yrTerm1Standard.partialUpfront": "0.532",
						"yrTerm3Standard.allUpfront": "0.387",
						"yrTerm3Standard.partialUpfront": "0.412"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.191",
						"yrTerm1Standard.noUpfront": "0.224",
						"yrTerm1Standard.partialUpfront": "0.195",
						"yrTerm3Standard.allUpfront": "0.117",
						"yrTerm3Standard.partialUpfront": "0.124"
					}
				},
				"mswin": {
					"ondemand": "0.598",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.389",
						"yrTerm1Standard.noUpfront": "0.465",
						"yrTerm1Standard.partialUpfront": "0.397",
						"yrTerm3Standard.allUpfront": "0.291",
						"yrTerm3Standard.partialUpfront": "0.310"
					}
				},
				"mswinSQL": {
					"ondemand": "1.362",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.759",
						"yrTerm1Standard.noUpfront": "0.906",
						"yrTerm1Standard.partialUpfront": "0.774",
						"yrTerm3Standard.allUpfront": "0.626",
						"yrTerm3Standard.partialUpfront": "0.666"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.83",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.455",
						"yrTerm1Standard.noUpfront": "0.543",
						"yrTerm1Standard.partialUpfront": "0.465",
						"yrTerm3Standard.allUpfront": "0.337",
						"yrTerm3Standard.partialUpfront": "0.358"
					}
				}
			}
		},
		"storage": {
			"devices": 4,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 420,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 5,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"i386",
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "Compute optimized",
		"generation": "previous",
		"instance_type": "c1.medium",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"PV"
		],
		"memory": 1.7,
		"network_performance": "Moderate",
		"placement_group_support": false,
		"pretty_name": "C1 High-CPU Medium",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.158",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.106",
						"yrTerm1Standard.noUpfront": "0.120",
						"yrTerm1Standard.partialUpfront": "0.109",
						"yrTerm3Standard.allUpfront": "0.071",
						"yrTerm3Standard.partialUpfront": "0.076"
					}
				},
				"mswin": {
					"ondemand": "0.258",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.174",
						"yrTerm1Standard.noUpfront": "0.208",
						"yrTerm1Standard.partialUpfront": "0.178",
						"yrTerm3Standard.allUpfront": "0.139",
						"yrTerm3Standard.partialUpfront": "0.148"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.31",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.210",
						"yrTerm1Standard.noUpfront": "0.250",
						"yrTerm1Standard.partialUpfront": "0.214",
						"yrTerm3Standard.allUpfront": "0.169",
						"yrTerm3Standard.partialUpfront": "0.180"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.164",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.103",
						"yrTerm1Standard.noUpfront": "0.122",
						"yrTerm1Standard.partialUpfront": "0.106",
						"yrTerm3Standard.allUpfront": "0.070",
						"yrTerm3Standard.partialUpfront": "0.075"
					}
				},
				"mswin": {
					"ondemand": "0.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.170",
						"yrTerm1Standard.noUpfront": "0.203",
						"yrTerm1Standard.partialUpfront": "0.174",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.31",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.203",
						"yrTerm1Standard.noUpfront": "0.242",
						"yrTerm1Standard.partialUpfront": "0.207",
						"yrTerm3Standard.allUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.172"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.164",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.103",
						"yrTerm1Standard.noUpfront": "0.122",
						"yrTerm1Standard.partialUpfront": "0.106",
						"yrTerm3Standard.allUpfront": "0.070",
						"yrTerm3Standard.partialUpfront": "0.075"
					}
				},
				"mswin": {
					"ondemand": "0.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.170",
						"yrTerm1Standard.noUpfront": "0.203",
						"yrTerm1Standard.partialUpfront": "0.174",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.31",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.203",
						"yrTerm1Standard.noUpfront": "0.242",
						"yrTerm1Standard.partialUpfront": "0.207",
						"yrTerm3Standard.allUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.172"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.148",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.095",
						"yrTerm1Standard.noUpfront": "0.111",
						"yrTerm1Standard.partialUpfront": "0.097",
						"yrTerm3Standard.allUpfront": "0.064",
						"yrTerm3Standard.partialUpfront": "0.068"
					}
				},
				"mswin": {
					"ondemand": "0.21",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.170",
						"yrTerm1Standard.noUpfront": "0.203",
						"yrTerm1Standard.partialUpfront": "0.174",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.31",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.180",
						"yrTerm1Standard.noUpfront": "0.215",
						"yrTerm1Standard.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.142",
						"yrTerm3Standard.partialUpfront": "0.152"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.179",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.110",
						"yrTerm1Standard.noUpfront": "0.130",
						"yrTerm1Standard.partialUpfront": "0.112",
						"yrTerm3Standard.allUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.081"
					}
				},
				"mswin": {
					"ondemand": "0.259",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.183",
						"yrTerm1Standard.noUpfront": "0.218",
						"yrTerm1Standard.partialUpfront": "0.186",
						"yrTerm3Standard.allUpfront": "0.125",
						"yrTerm3Standard.partialUpfront": "0.133"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.369",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.223",
						"yrTerm1Standard.noUpfront": "0.266",
						"yrTerm1Standard.partialUpfront": "0.227",
						"yrTerm3Standard.allUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.178"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.13",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.077",
						"yrTerm1Standard.noUpfront": "0.091",
						"yrTerm1Standard.partialUpfront": "0.078",
						"yrTerm3Standard.allUpfront": "0.049",
						"yrTerm3Standard.partialUpfront": "0.052"
					}
				},
				"mswin": {
					"ondemand": "0.21",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.150",
						"yrTerm1Standard.noUpfront": "0.179",
						"yrTerm1Standard.partialUpfront": "0.153",
						"yrTerm3Standard.allUpfront": "0.116",
						"yrTerm3Standard.partialUpfront": "0.123"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.31",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.180",
						"yrTerm1Standard.noUpfront": "0.215",
						"yrTerm1Standard.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.142",
						"yrTerm3Standard.partialUpfront": "0.152"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.157",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.087",
						"yrTerm1Standard.noUpfront": "0.108",
						"yrTerm1Standard.partialUpfront": "0.093",
						"yrTerm3Standard.allUpfront": "0.059",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.237",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.154",
						"yrTerm1Standard.noUpfront": "0.201",
						"yrTerm1Standard.partialUpfront": "0.172",
						"yrTerm3Standard.allUpfront": "0.126",
						"yrTerm3Standard.partialUpfront": "0.143"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.366",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.176",
						"yrTerm1Standard.noUpfront": "0.227",
						"yrTerm1Standard.partialUpfront": "0.194",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.partialUpfront": "0.165"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.148",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.095",
						"yrTerm1Standard.noUpfront": "0.111",
						"yrTerm1Standard.partialUpfront": "0.097",
						"yrTerm3Standard.allUpfront": "0.064",
						"yrTerm3Standard.partialUpfront": "0.068"
					}
				},
				"mswin": {
					"ondemand": "0.228",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.170",
						"yrTerm1Standard.noUpfront": "0.203",
						"yrTerm1Standard.partialUpfront": "0.174",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.329",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.203",
						"yrTerm1Standard.noUpfront": "0.242",
						"yrTerm1Standard.partialUpfront": "0.207",
						"yrTerm3Standard.allUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.172"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.13",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.077",
						"yrTerm1Standard.noUpfront": "0.091",
						"yrTerm1Standard.partialUpfront": "0.078",
						"yrTerm3Standard.allUpfront": "0.049",
						"yrTerm3Standard.partialUpfront": "0.052"
					}
				},
				"mswin": {
					"ondemand": "0.21",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.150",
						"yrTerm1Standard.noUpfront": "0.179",
						"yrTerm1Standard.partialUpfront": "0.153",
						"yrTerm3Standard.allUpfront": "0.116",
						"yrTerm3Standard.partialUpfront": "0.123"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.31",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.180",
						"yrTerm1Standard.noUpfront": "0.215",
						"yrTerm1Standard.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.142",
						"yrTerm3Standard.partialUpfront": "0.152"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": true,
			"nvme_ssd": false,
			"size": 350,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 6,
			"max_enis": 2
		},
		"vpc_only": false
	},
	{
		"ECU": 20,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": false,
		"family": "Compute optimized",
		"generation": "previous",
		"instance_type": "c1.xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"PV"
		],
		"memory": 7,
		"network_performance": "High",
		"placement_group_support": false,
		"pretty_name": "C1 High-CPU Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.632",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.427",
						"yrTerm1Standard.noUpfront": "0.480",
						"yrTerm1Standard.partialUpfront": "0.435",
						"yrTerm3Standard.allUpfront": "0.287",
						"yrTerm3Standard.partialUpfront": "0.306"
					}
				},
				"mswin": {
					"ondemand": "1.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.697",
						"yrTerm1Standard.noUpfront": "0.832",
						"yrTerm1Standard.partialUpfront": "0.711",
						"yrTerm3Standard.allUpfront": "0.555",
						"yrTerm3Standard.partialUpfront": "0.591"
					}
				},
				"mswinSQL": {
					"ondemand": "2.21",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.458",
						"yrTerm1Standard.noUpfront": "1.740",
						"yrTerm1Standard.partialUpfront": "1.488",
						"yrTerm3Standard.allUpfront": "1.274",
						"yrTerm3Standard.partialUpfront": "1.355"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.776",
						"yrTerm1Standard.noUpfront": "0.926",
						"yrTerm1Standard.partialUpfront": "0.791",
						"yrTerm3Standard.allUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.659"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.655",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.414",
						"yrTerm1Standard.noUpfront": "0.488",
						"yrTerm1Standard.partialUpfront": "0.422",
						"yrTerm3Standard.allUpfront": "0.278",
						"yrTerm3Standard.partialUpfront": "0.296"
					}
				},
				"mswin": {
					"ondemand": "1.065",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.681",
						"yrTerm1Standard.noUpfront": "0.812",
						"yrTerm1Standard.partialUpfront": "0.694",
						"yrTerm3Standard.allUpfront": "0.533",
						"yrTerm3Standard.partialUpfront": "0.567"
					}
				},
				"mswinSQL": {
					"ondemand": "2.124",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.374",
						"yrTerm1Standard.noUpfront": "1.641",
						"yrTerm1Standard.partialUpfront": "1.403",
						"yrTerm3Standard.allUpfront": "1.189",
						"yrTerm3Standard.partialUpfront": "1.265"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.751",
						"yrTerm1Standard.noUpfront": "0.897",
						"yrTerm1Standard.partialUpfront": "0.767",
						"yrTerm3Standard.allUpfront": "0.591",
						"yrTerm3Standard.partialUpfront": "0.628"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.655",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.414",
						"yrTerm1Standard.noUpfront": "0.488",
						"yrTerm1Standard.partialUpfront": "0.422",
						"yrTerm3Standard.allUpfront": "0.278",
						"yrTerm3Standard.partialUpfront": "0.296"
					}
				},
				"mswin": {
					"ondemand": "1.065",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.681",
						"yrTerm1Standard.noUpfront": "0.812",
						"yrTerm1Standard.partialUpfront": "0.694",
						"yrTerm3Standard.allUpfront": "0.533",
						"yrTerm3Standard.partialUpfront": "0.567"
					}
				},
				"mswinSQL": {
					"ondemand": "2.124",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.374",
						"yrTerm1Standard.noUpfront": "1.641",
						"yrTerm1Standard.partialUpfront": "1.403",
						"yrTerm3Standard.allUpfront": "1.189",
						"yrTerm3Standard.partialUpfront": "1.265"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.751",
						"yrTerm1Standard.noUpfront": "0.897",
						"yrTerm1Standard.partialUpfront": "0.767",
						"yrTerm3Standard.allUpfront": "0.591",
						"yrTerm3Standard.partialUpfront": "0.628"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.592",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.382",
						"yrTerm1Standard.noUpfront": "0.444",
						"yrTerm1Standard.partialUpfront": "0.390",
						"yrTerm3Standard.allUpfront": "0.256",
						"yrTerm3Standard.partialUpfront": "0.272"
					}
				},
				"mswin": {
					"ondemand": "0.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.682",
						"yrTerm1Standard.noUpfront": "0.815",
						"yrTerm1Standard.partialUpfront": "0.696",
						"yrTerm3Standard.allUpfront": "0.534",
						"yrTerm3Standard.partialUpfront": "0.568"
					}
				},
				"mswinSQL": {
					"ondemand": "2.124",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.288",
						"yrTerm1Standard.noUpfront": "1.537",
						"yrTerm1Standard.partialUpfront": "1.314",
						"yrTerm3Standard.allUpfront": "1.114",
						"yrTerm3Standard.partialUpfront": "1.185"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.664",
						"yrTerm1Standard.noUpfront": "0.793",
						"yrTerm1Standard.partialUpfront": "0.678",
						"yrTerm3Standard.allUpfront": "0.517",
						"yrTerm3Standard.partialUpfront": "0.550"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.718",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.437",
						"yrTerm1Standard.noUpfront": "0.520",
						"yrTerm1Standard.partialUpfront": "0.446",
						"yrTerm3Standard.allUpfront": "0.305",
						"yrTerm3Standard.partialUpfront": "0.325"
					}
				},
				"mswin": {
					"ondemand": "1.038",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.730",
						"yrTerm1Standard.noUpfront": "0.871",
						"yrTerm1Standard.partialUpfront": "0.744",
						"yrTerm3Standard.allUpfront": "0.460",
						"yrTerm3Standard.partialUpfront": "0.490"
					}
				},
				"mswinSQL": {
					"ondemand": "2.378",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.483",
						"yrTerm1Standard.noUpfront": "1.770",
						"yrTerm1Standard.partialUpfront": "1.513",
						"yrTerm3Standard.allUpfront": "1.239",
						"yrTerm3Standard.partialUpfront": "1.318"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.398",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.789",
						"yrTerm1Standard.noUpfront": "0.942",
						"yrTerm1Standard.partialUpfront": "0.805",
						"yrTerm3Standard.allUpfront": "0.586",
						"yrTerm3Standard.partialUpfront": "0.624"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.52",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.309",
						"yrTerm1Standard.noUpfront": "0.364",
						"yrTerm1Standard.partialUpfront": "0.315",
						"yrTerm3Standard.allUpfront": "0.196",
						"yrTerm3Standard.partialUpfront": "0.208"
					}
				},
				"mswin": {
					"ondemand": "0.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.602",
						"yrTerm1Standard.noUpfront": "0.719",
						"yrTerm1Standard.partialUpfront": "0.614",
						"yrTerm3Standard.allUpfront": "0.465",
						"yrTerm3Standard.partialUpfront": "0.495"
					}
				},
				"mswinSQL": {
					"ondemand": "2.124",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.288",
						"yrTerm1Standard.noUpfront": "1.537",
						"yrTerm1Standard.partialUpfront": "1.314",
						"yrTerm3Standard.allUpfront": "1.114",
						"yrTerm3Standard.partialUpfront": "1.185"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.664",
						"yrTerm1Standard.noUpfront": "0.793",
						"yrTerm1Standard.partialUpfront": "0.678",
						"yrTerm3Standard.allUpfront": "0.517",
						"yrTerm3Standard.partialUpfront": "0.550"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.628",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.349",
						"yrTerm1Standard.noUpfront": "0.432",
						"yrTerm1Standard.partialUpfront": "0.374",
						"yrTerm3Standard.allUpfront": "0.233",
						"yrTerm3Standard.partialUpfront": "0.256"
					}
				},
				"mswin": {
					"ondemand": "0.948",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.620",
						"yrTerm1Standard.noUpfront": "0.809",
						"yrTerm1Standard.partialUpfront": "0.691",
						"yrTerm3Standard.allUpfront": "0.504",
						"yrTerm3Standard.partialUpfront": "0.574"
					}
				},
				"mswinSQL": {
					"ondemand": "2.331",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.271",
						"yrTerm1Standard.noUpfront": "1.635",
						"yrTerm1Standard.partialUpfront": "1.397",
						"yrTerm3Standard.allUpfront": "1.154",
						"yrTerm3Standard.partialUpfront": "1.268"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.384",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.669",
						"yrTerm1Standard.noUpfront": "0.860",
						"yrTerm1Standard.partialUpfront": "0.735",
						"yrTerm3Standard.allUpfront": "0.561",
						"yrTerm3Standard.partialUpfront": "0.617"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.592",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.382",
						"yrTerm1Standard.noUpfront": "0.444",
						"yrTerm1Standard.partialUpfront": "0.390",
						"yrTerm3Standard.allUpfront": "0.256",
						"yrTerm3Standard.partialUpfront": "0.272"
					}
				},
				"mswin": {
					"ondemand": "0.912",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.682",
						"yrTerm1Standard.noUpfront": "0.815",
						"yrTerm1Standard.partialUpfront": "0.696",
						"yrTerm3Standard.allUpfront": "0.534",
						"yrTerm3Standard.partialUpfront": "0.568"
					}
				},
				"mswinSQL": {
					"ondemand": "2.206",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.374",
						"yrTerm1Standard.noUpfront": "1.641",
						"yrTerm1Standard.partialUpfront": "1.403",
						"yrTerm3Standard.allUpfront": "1.189",
						"yrTerm3Standard.partialUpfront": "1.265"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.236",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.751",
						"yrTerm1Standard.noUpfront": "0.897",
						"yrTerm1Standard.partialUpfront": "0.767",
						"yrTerm3Standard.allUpfront": "0.591",
						"yrTerm3Standard.partialUpfront": "0.628"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.52",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.309",
						"yrTerm1Standard.noUpfront": "0.364",
						"yrTerm1Standard.partialUpfront": "0.315",
						"yrTerm3Standard.allUpfront": "0.196",
						"yrTerm3Standard.partialUpfront": "0.208"
					}
				},
				"mswin": {
					"ondemand": "0.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.602",
						"yrTerm1Standard.noUpfront": "0.719",
						"yrTerm1Standard.partialUpfront": "0.614",
						"yrTerm3Standard.allUpfront": "0.465",
						"yrTerm3Standard.partialUpfront": "0.495"
					}
				},
				"mswinSQL": {
					"ondemand": "2.124",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.288",
						"yrTerm1Standard.noUpfront": "1.537",
						"yrTerm1Standard.partialUpfront": "1.314",
						"yrTerm3Standard.allUpfront": "1.114",
						"yrTerm3Standard.partialUpfront": "1.185"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.664",
						"yrTerm1Standard.noUpfront": "0.793",
						"yrTerm1Standard.partialUpfront": "0.678",
						"yrTerm3Standard.allUpfront": "0.517",
						"yrTerm3Standard.partialUpfront": "0.550"
					}
				}
			}
		},
		"storage": {
			"devices": 4,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 420,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 88,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "Compute optimized",
		"generation": "previous",
		"instance_type": "cc2.8xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 60.5,
		"network_performance": "10 Gigabit",
		"placement_group_support": false,
		"pretty_name": "Cluster Compute Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "2.349",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.267",
						"yrTerm1Standard.noUpfront": "1.512",
						"yrTerm1Standard.partialUpfront": "1.293",
						"yrTerm3Standard.allUpfront": "0.901",
						"yrTerm3Standard.partialUpfront": "0.958"
					}
				},
				"mswin": {
					"ondemand": "2.919",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.799",
						"yrTerm1Standard.noUpfront": "2.148",
						"yrTerm1Standard.partialUpfront": "1.836",
						"yrTerm3Standard.allUpfront": "1.411",
						"yrTerm3Standard.partialUpfront": "1.501"
					}
				},
				"mswinSQL": {
					"ondemand": "4.733",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.143",
						"yrTerm1Standard.noUpfront": "3.753",
						"yrTerm1Standard.partialUpfront": "3.208",
						"yrTerm3Standard.allUpfront": "2.700",
						"yrTerm3Standard.partialUpfront": "2.872"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.124",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.991",
						"yrTerm1Standard.noUpfront": "2.376",
						"yrTerm1Standard.partialUpfront": "2.031",
						"yrTerm3Standard.allUpfront": "1.595",
						"yrTerm3Standard.partialUpfront": "1.697"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "2.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.157",
						"yrTerm1Standard.noUpfront": "1.381",
						"yrTerm1Standard.partialUpfront": "1.181",
						"yrTerm3Standard.allUpfront": "0.848",
						"yrTerm3Standard.partialUpfront": "0.902"
					}
				},
				"mswin": {
					"ondemand": "2.57",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.397",
						"yrTerm1Standard.noUpfront": "1.668",
						"yrTerm1Standard.partialUpfront": "1.426",
						"yrTerm3Standard.allUpfront": "1.012",
						"yrTerm3Standard.partialUpfront": "1.077"
					}
				},
				"mswinSQL": {
					"ondemand": "4.85",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.094",
						"yrTerm1Standard.noUpfront": "3.694",
						"yrTerm1Standard.partialUpfront": "3.158",
						"yrTerm3Standard.allUpfront": "2.640",
						"yrTerm3Standard.partialUpfront": "2.809"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.775",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.625",
						"yrTerm1Standard.noUpfront": "2.711",
						"yrTerm1Standard.partialUpfront": "2.678",
						"yrTerm3Standard.allUpfront": "1.949",
						"yrTerm3Standard.partialUpfront": "2.073"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.913",
						"yrTerm1Standard.noUpfront": "1.090",
						"yrTerm1Standard.partialUpfront": "0.932",
						"yrTerm3Standard.allUpfront": "0.614",
						"yrTerm3Standard.partialUpfront": "0.653"
					}
				},
				"mswin": {
					"ondemand": "2.57",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.119",
						"yrTerm1Standard.noUpfront": "1.336",
						"yrTerm1Standard.partialUpfront": "1.142",
						"yrTerm3Standard.allUpfront": "0.811",
						"yrTerm3Standard.partialUpfront": "0.863"
					}
				},
				"mswinSQL": {
					"ondemand": "4.41",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.476",
						"yrTerm1Standard.noUpfront": "2.956",
						"yrTerm1Standard.partialUpfront": "2.527",
						"yrTerm3Standard.allUpfront": "2.112",
						"yrTerm3Standard.partialUpfront": "2.247"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.775",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.204",
						"yrTerm1Standard.noUpfront": "1.437",
						"yrTerm1Standard.partialUpfront": "1.228",
						"yrTerm3Standard.allUpfront": "0.893",
						"yrTerm3Standard.partialUpfront": "0.950"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "2.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.089",
						"yrTerm1Standard.noUpfront": "1.381",
						"yrTerm1Standard.partialUpfront": "1.181",
						"yrTerm3Standard.allUpfront": "0.803",
						"yrTerm3Standard.partialUpfront": "0.902"
					}
				},
				"mswin": {
					"ondemand": "2.57",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.298",
						"yrTerm1Standard.noUpfront": "1.668",
						"yrTerm1Standard.partialUpfront": "1.426",
						"yrTerm3Standard.allUpfront": "0.959",
						"yrTerm3Standard.partialUpfront": "1.077"
					}
				},
				"mswinSQL": {
					"ondemand": "4.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.873",
						"yrTerm1Standard.noUpfront": "3.694",
						"yrTerm1Standard.partialUpfront": "3.158",
						"yrTerm3Standard.allUpfront": "2.556",
						"yrTerm3Standard.partialUpfront": "2.809"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.775",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.397",
						"yrTerm1Standard.noUpfront": "2.665",
						"yrTerm1Standard.partialUpfront": "1.535",
						"yrTerm3Standard.allUpfront": "1.080",
						"yrTerm3Standard.partialUpfront": "2.373"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.913",
						"yrTerm1Standard.noUpfront": "1.090",
						"yrTerm1Standard.partialUpfront": "0.932",
						"yrTerm3Standard.allUpfront": "0.614",
						"yrTerm3Standard.partialUpfront": "0.653"
					}
				},
				"mswin": {
					"ondemand": "2.57",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.119",
						"yrTerm1Standard.noUpfront": "1.336",
						"yrTerm1Standard.partialUpfront": "1.142",
						"yrTerm3Standard.allUpfront": "0.811",
						"yrTerm3Standard.partialUpfront": "0.863"
					}
				},
				"mswinSQL": {
					"ondemand": "4.41",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.476",
						"yrTerm1Standard.noUpfront": "2.956",
						"yrTerm1Standard.partialUpfront": "2.527",
						"yrTerm3Standard.allUpfront": "2.112",
						"yrTerm3Standard.partialUpfront": "2.247"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.775",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.204",
						"yrTerm1Standard.noUpfront": "1.437",
						"yrTerm1Standard.partialUpfront": "1.228",
						"yrTerm3Standard.allUpfront": "0.893",
						"yrTerm3Standard.partialUpfront": "0.950"
					}
				}
			}
		},
		"storage": {
			"devices": 4,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 840,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 32,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 33.5,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "GPU instances",
		"generation": "previous",
		"instance_type": "cg1.4xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 22.5,
		"network_performance": "10 Gigabit",
		"placement_group_support": false,
		"pretty_name": "Cluster GPU Quadruple Extra Large",
		"pricing": {
			"eu-west-1": {
				"linux": {
					"ondemand": "2.36"
				},
				"mswin": {
					"ondemand": "2.6"
				},
				"mswinSQL": {
					"ondemand": "3.85"
				},
				"mswinSQLWeb": {
					"ondemand": "2.703"
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "2.1"
				},
				"mswin": {
					"ondemand": "2.6"
				},
				"mswinSQL": {
					"ondemand": "3.85"
				},
				"mswinSQLWeb": {
					"ondemand": "2.703"
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 840,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 6.5,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "Memory optimized",
		"generation": "previous",
		"instance_type": "m2.xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"PV"
		],
		"memory": 17.1,
		"network_performance": "Moderate",
		"placement_group_support": false,
		"pretty_name": "M2 High Memory Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.287",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.127",
						"yrTerm1Standard.noUpfront": "0.151",
						"yrTerm1Standard.partialUpfront": "0.129",
						"yrTerm3Standard.allUpfront": "0.082",
						"yrTerm3Standard.partialUpfront": "0.087"
					}
				},
				"mswin": {
					"ondemand": "0.352",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.261",
						"yrTerm1Standard.noUpfront": "0.312",
						"yrTerm1Standard.partialUpfront": "0.267",
						"yrTerm3Standard.allUpfront": "0.194",
						"yrTerm3Standard.partialUpfront": "0.206"
					}
				},
				"mswinSQL": {
					"ondemand": "1.106",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.718",
						"yrTerm1Standard.noUpfront": "0.857",
						"yrTerm1Standard.partialUpfront": "0.733",
						"yrTerm3Standard.allUpfront": "0.604",
						"yrTerm3Standard.partialUpfront": "0.643"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.445",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.344",
						"yrTerm1Standard.noUpfront": "0.410",
						"yrTerm1Standard.partialUpfront": "0.351",
						"yrTerm3Standard.allUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.267"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.296",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.125",
						"yrTerm1Standard.noUpfront": "0.148",
						"yrTerm1Standard.partialUpfront": "0.127",
						"yrTerm3Standard.allUpfront": "0.080",
						"yrTerm3Standard.partialUpfront": "0.085"
					}
				},
				"mswin": {
					"ondemand": "0.371",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.306",
						"yrTerm1Standard.partialUpfront": "0.262",
						"yrTerm3Standard.allUpfront": "0.189",
						"yrTerm3Standard.partialUpfront": "0.201"
					}
				},
				"mswinSQL": {
					"ondemand": "1.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.677",
						"yrTerm1Standard.noUpfront": "0.809",
						"yrTerm1Standard.partialUpfront": "0.691",
						"yrTerm3Standard.allUpfront": "0.567",
						"yrTerm3Standard.partialUpfront": "0.603"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.445",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.335",
						"yrTerm1Standard.noUpfront": "0.400",
						"yrTerm1Standard.partialUpfront": "0.342",
						"yrTerm3Standard.allUpfront": "0.243",
						"yrTerm3Standard.partialUpfront": "0.259"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.296",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.125",
						"yrTerm1Standard.noUpfront": "0.148",
						"yrTerm1Standard.partialUpfront": "0.127",
						"yrTerm3Standard.allUpfront": "0.080",
						"yrTerm3Standard.partialUpfront": "0.085"
					}
				},
				"mswin": {
					"ondemand": "0.371",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.306",
						"yrTerm1Standard.partialUpfront": "0.262",
						"yrTerm3Standard.allUpfront": "0.189",
						"yrTerm3Standard.partialUpfront": "0.201"
					}
				},
				"mswinSQL": {
					"ondemand": "1.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.677",
						"yrTerm1Standard.noUpfront": "0.809",
						"yrTerm1Standard.partialUpfront": "0.691",
						"yrTerm3Standard.allUpfront": "0.567",
						"yrTerm3Standard.partialUpfront": "0.603"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.445",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.335",
						"yrTerm1Standard.noUpfront": "0.400",
						"yrTerm1Standard.partialUpfront": "0.342",
						"yrTerm3Standard.allUpfront": "0.243",
						"yrTerm3Standard.partialUpfront": "0.259"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.275",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.113",
						"yrTerm1Standard.noUpfront": "0.134",
						"yrTerm1Standard.partialUpfront": "0.115",
						"yrTerm3Standard.allUpfront": "0.073",
						"yrTerm3Standard.partialUpfront": "0.077"
					}
				},
				"mswin": {
					"ondemand": "0.345",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.262",
						"yrTerm1Standard.noUpfront": "0.313",
						"yrTerm1Standard.partialUpfront": "0.268",
						"yrTerm3Standard.allUpfront": "0.193",
						"yrTerm3Standard.partialUpfront": "0.205"
					}
				},
				"mswinSQL": {
					"ondemand": "1.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.610",
						"yrTerm1Standard.noUpfront": "0.728",
						"yrTerm1Standard.partialUpfront": "0.622",
						"yrTerm3Standard.allUpfront": "0.512",
						"yrTerm3Standard.partialUpfront": "0.545"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.445",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.271",
						"yrTerm1Standard.noUpfront": "0.323",
						"yrTerm1Standard.partialUpfront": "0.276",
						"yrTerm3Standard.allUpfront": "0.193",
						"yrTerm3Standard.partialUpfront": "0.205"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.323",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.108",
						"yrTerm1Standard.noUpfront": "0.129",
						"yrTerm1Standard.partialUpfront": "0.111",
						"yrTerm3Standard.allUpfront": "0.077",
						"yrTerm3Standard.partialUpfront": "0.082"
					}
				},
				"mswin": {
					"ondemand": "0.423",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.388",
						"yrTerm1Standard.noUpfront": "0.405",
						"yrTerm1Standard.partialUpfront": "0.396",
						"yrTerm3Standard.allUpfront": "0.233",
						"yrTerm3Standard.partialUpfront": "0.248"
					}
				},
				"mswinSQL": {
					"ondemand": "1.314",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.799",
						"yrTerm1Standard.noUpfront": "0.954",
						"yrTerm1Standard.partialUpfront": "0.816",
						"yrTerm3Standard.allUpfront": "0.623",
						"yrTerm3Standard.partialUpfront": "0.663"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.623",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.425",
						"yrTerm1Standard.noUpfront": "0.507",
						"yrTerm1Standard.partialUpfront": "0.434",
						"yrTerm3Standard.allUpfront": "0.281",
						"yrTerm3Standard.partialUpfront": "0.299"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.245",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.093",
						"yrTerm1Standard.noUpfront": "0.111",
						"yrTerm1Standard.partialUpfront": "0.095",
						"yrTerm3Standard.allUpfront": "0.056",
						"yrTerm3Standard.partialUpfront": "0.059"
					}
				},
				"mswin": {
					"ondemand": "0.345",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.208",
						"yrTerm1Standard.noUpfront": "0.249",
						"yrTerm1Standard.partialUpfront": "0.213",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.partialUpfront": "0.159"
					}
				},
				"mswinSQL": {
					"ondemand": "1.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.610",
						"yrTerm1Standard.noUpfront": "0.728",
						"yrTerm1Standard.partialUpfront": "0.622",
						"yrTerm3Standard.allUpfront": "0.512",
						"yrTerm3Standard.partialUpfront": "0.545"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.445",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.271",
						"yrTerm1Standard.noUpfront": "0.323",
						"yrTerm1Standard.partialUpfront": "0.276",
						"yrTerm3Standard.allUpfront": "0.193",
						"yrTerm3Standard.partialUpfront": "0.205"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.293",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.108",
						"yrTerm1Standard.noUpfront": "0.136",
						"yrTerm1Standard.partialUpfront": "0.117",
						"yrTerm3Standard.allUpfront": "0.068",
						"yrTerm3Standard.partialUpfront": "0.075"
					}
				},
				"mswin": {
					"ondemand": "0.393",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.210",
						"yrTerm1Standard.noUpfront": "0.270",
						"yrTerm1Standard.partialUpfront": "0.231",
						"yrTerm3Standard.allUpfront": "0.158",
						"yrTerm3Standard.partialUpfront": "0.178"
					}
				},
				"mswinSQL": {
					"ondemand": "1.204",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.595",
						"yrTerm1Standard.noUpfront": "0.766",
						"yrTerm1Standard.partialUpfront": "0.654",
						"yrTerm3Standard.allUpfront": "0.522",
						"yrTerm3Standard.partialUpfront": "0.573"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.533",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.230",
						"yrTerm1Standard.noUpfront": "0.295",
						"yrTerm1Standard.partialUpfront": "0.252",
						"yrTerm3Standard.allUpfront": "0.182",
						"yrTerm3Standard.partialUpfront": "0.200"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.275",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.113",
						"yrTerm1Standard.noUpfront": "0.134",
						"yrTerm1Standard.partialUpfront": "0.115",
						"yrTerm3Standard.allUpfront": "0.072",
						"yrTerm3Standard.partialUpfront": "0.076"
					}
				},
				"mswin": {
					"ondemand": "0.375",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.262",
						"yrTerm1Standard.noUpfront": "0.313",
						"yrTerm1Standard.partialUpfront": "0.268",
						"yrTerm3Standard.allUpfront": "0.193",
						"yrTerm3Standard.partialUpfront": "0.205"
					}
				},
				"mswinSQL": {
					"ondemand": "1.14",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.677",
						"yrTerm1Standard.noUpfront": "0.809",
						"yrTerm1Standard.partialUpfront": "0.691",
						"yrTerm3Standard.allUpfront": "0.567",
						"yrTerm3Standard.partialUpfront": "0.603"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.481",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.335",
						"yrTerm1Standard.noUpfront": "0.400",
						"yrTerm1Standard.partialUpfront": "0.342",
						"yrTerm3Standard.allUpfront": "0.243",
						"yrTerm3Standard.partialUpfront": "0.259"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.245",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.093",
						"yrTerm1Standard.noUpfront": "0.111",
						"yrTerm1Standard.partialUpfront": "0.095",
						"yrTerm3Standard.allUpfront": "0.056",
						"yrTerm3Standard.partialUpfront": "0.059"
					}
				},
				"mswin": {
					"ondemand": "0.345",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.208",
						"yrTerm1Standard.noUpfront": "0.249",
						"yrTerm1Standard.partialUpfront": "0.213",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.partialUpfront": "0.159"
					}
				},
				"mswinSQL": {
					"ondemand": "1.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.610",
						"yrTerm1Standard.noUpfront": "0.728",
						"yrTerm1Standard.partialUpfront": "0.622",
						"yrTerm3Standard.allUpfront": "0.512",
						"yrTerm3Standard.partialUpfront": "0.545"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.445",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.271",
						"yrTerm1Standard.noUpfront": "0.323",
						"yrTerm1Standard.partialUpfront": "0.276",
						"yrTerm3Standard.allUpfront": "0.193",
						"yrTerm3Standard.partialUpfront": "0.205"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 420,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 13,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 4000,
		"ebs_max_bandwidth": 500,
		"ebs_optimized": true,
		"ebs_throughput": 62.5,
		"enhanced_networking": false,
		"family": "Memory optimized",
		"generation": "previous",
		"instance_type": "m2.2xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"PV"
		],
		"memory": 34.2,
		"network_performance": "Moderate",
		"placement_group_support": false,
		"pretty_name": "M2 High Memory Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.575",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.255",
						"yrTerm1Standard.noUpfront": "0.302",
						"yrTerm1Standard.partialUpfront": "0.260",
						"yrTerm3Standard.allUpfront": "0.163",
						"yrTerm3Standard.partialUpfront": "0.174"
					}
				},
				"mswin": {
					"ondemand": "0.705",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.523",
						"yrTerm1Standard.noUpfront": "0.624",
						"yrTerm1Standard.partialUpfront": "0.533",
						"yrTerm3Standard.allUpfront": "0.388",
						"yrTerm3Standard.partialUpfront": "0.412"
					}
				},
				"mswinSQL": {
					"ondemand": "1.558",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.958",
						"yrTerm1Standard.noUpfront": "1.144",
						"yrTerm1Standard.partialUpfront": "0.977",
						"yrTerm3Standard.allUpfront": "0.768",
						"yrTerm3Standard.partialUpfront": "0.817"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.85",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.665",
						"yrTerm1Standard.noUpfront": "0.794",
						"yrTerm1Standard.partialUpfront": "0.679",
						"yrTerm3Standard.allUpfront": "0.482",
						"yrTerm3Standard.partialUpfront": "0.513"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.592",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.250",
						"yrTerm1Standard.noUpfront": "0.296",
						"yrTerm1Standard.partialUpfront": "0.255",
						"yrTerm3Standard.allUpfront": "0.160",
						"yrTerm3Standard.partialUpfront": "0.170"
					}
				},
				"mswin": {
					"ondemand": "0.742",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.514",
						"yrTerm1Standard.noUpfront": "0.613",
						"yrTerm1Standard.partialUpfront": "0.524",
						"yrTerm3Standard.allUpfront": "0.379",
						"yrTerm3Standard.partialUpfront": "0.403"
					}
				},
				"mswinSQL": {
					"ondemand": "1.654",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.914",
						"yrTerm1Standard.noUpfront": "1.092",
						"yrTerm1Standard.partialUpfront": "0.933",
						"yrTerm3Standard.allUpfront": "0.727",
						"yrTerm3Standard.partialUpfront": "0.774"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.85",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.649",
						"yrTerm1Standard.noUpfront": "0.775",
						"yrTerm1Standard.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.468",
						"yrTerm3Standard.partialUpfront": "0.498"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.592",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.250",
						"yrTerm1Standard.noUpfront": "0.296",
						"yrTerm1Standard.partialUpfront": "0.255",
						"yrTerm3Standard.allUpfront": "0.160",
						"yrTerm3Standard.partialUpfront": "0.170"
					}
				},
				"mswin": {
					"ondemand": "0.742",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.514",
						"yrTerm1Standard.noUpfront": "0.613",
						"yrTerm1Standard.partialUpfront": "0.524",
						"yrTerm3Standard.allUpfront": "0.379",
						"yrTerm3Standard.partialUpfront": "0.403"
					}
				},
				"mswinSQL": {
					"ondemand": "1.654",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.914",
						"yrTerm1Standard.noUpfront": "1.092",
						"yrTerm1Standard.partialUpfront": "0.933",
						"yrTerm3Standard.allUpfront": "0.727",
						"yrTerm3Standard.partialUpfront": "0.774"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.85",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.649",
						"yrTerm1Standard.noUpfront": "0.775",
						"yrTerm1Standard.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.468",
						"yrTerm3Standard.partialUpfront": "0.498"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.55",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.226",
						"yrTerm1Standard.noUpfront": "0.268",
						"yrTerm1Standard.partialUpfront": "0.230",
						"yrTerm3Standard.allUpfront": "0.145",
						"yrTerm3Standard.partialUpfront": "0.155"
					}
				},
				"mswin": {
					"ondemand": "0.69",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.524",
						"yrTerm1Standard.noUpfront": "0.625",
						"yrTerm1Standard.partialUpfront": "0.534",
						"yrTerm3Standard.allUpfront": "0.387",
						"yrTerm3Standard.partialUpfront": "0.412"
					}
				},
				"mswinSQL": {
					"ondemand": "1.489",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.791",
						"yrTerm1Standard.noUpfront": "0.944",
						"yrTerm1Standard.partialUpfront": "0.807",
						"yrTerm3Standard.allUpfront": "0.629",
						"yrTerm3Standard.partialUpfront": "0.669"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.85",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.521",
						"yrTerm1Standard.noUpfront": "0.622",
						"yrTerm1Standard.partialUpfront": "0.531",
						"yrTerm3Standard.allUpfront": "0.367",
						"yrTerm3Standard.partialUpfront": "0.390"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.645",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.218",
						"yrTerm1Standard.noUpfront": "0.258",
						"yrTerm1Standard.partialUpfront": "0.222",
						"yrTerm3Standard.allUpfront": "0.155",
						"yrTerm3Standard.partialUpfront": "0.165"
					}
				},
				"mswin": {
					"ondemand": "0.845",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.775",
						"yrTerm1Standard.noUpfront": "0.809",
						"yrTerm1Standard.partialUpfront": "0.791",
						"yrTerm3Standard.allUpfront": "0.465",
						"yrTerm3Standard.partialUpfront": "0.495"
					}
				},
				"mswinSQL": {
					"ondemand": "1.903",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.133",
						"yrTerm1Standard.noUpfront": "1.353",
						"yrTerm1Standard.partialUpfront": "1.156",
						"yrTerm3Standard.allUpfront": "0.829",
						"yrTerm3Standard.partialUpfront": "0.882"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.205",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.831",
						"yrTerm1Standard.noUpfront": "0.992",
						"yrTerm1Standard.partialUpfront": "0.848",
						"yrTerm3Standard.allUpfront": "0.544",
						"yrTerm3Standard.partialUpfront": "0.579"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.49",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.222",
						"yrTerm1Standard.partialUpfront": "0.190",
						"yrTerm3Standard.allUpfront": "0.112",
						"yrTerm3Standard.partialUpfront": "0.119"
					}
				},
				"mswin": {
					"ondemand": "0.69",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.416",
						"yrTerm1Standard.noUpfront": "0.496",
						"yrTerm1Standard.partialUpfront": "0.424",
						"yrTerm3Standard.allUpfront": "0.301",
						"yrTerm3Standard.partialUpfront": "0.320"
					}
				},
				"mswinSQL": {
					"ondemand": "1.489",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.791",
						"yrTerm1Standard.noUpfront": "0.944",
						"yrTerm1Standard.partialUpfront": "0.807",
						"yrTerm3Standard.allUpfront": "0.629",
						"yrTerm3Standard.partialUpfront": "0.669"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.85",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.521",
						"yrTerm1Standard.noUpfront": "0.622",
						"yrTerm1Standard.partialUpfront": "0.531",
						"yrTerm3Standard.allUpfront": "0.367",
						"yrTerm3Standard.partialUpfront": "0.390"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.586",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.218",
						"yrTerm1Standard.noUpfront": "0.272",
						"yrTerm1Standard.partialUpfront": "0.235",
						"yrTerm3Standard.allUpfront": "0.136",
						"yrTerm3Standard.partialUpfront": "0.149"
					}
				},
				"mswin": {
					"ondemand": "0.786",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.419",
						"yrTerm1Standard.noUpfront": "0.540",
						"yrTerm1Standard.partialUpfront": "0.462",
						"yrTerm3Standard.allUpfront": "0.316",
						"yrTerm3Standard.partialUpfront": "0.355"
					}
				},
				"mswinSQL": {
					"ondemand": "1.705",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.789",
						"yrTerm1Standard.noUpfront": "1.015",
						"yrTerm1Standard.partialUpfront": "0.867",
						"yrTerm3Standard.allUpfront": "0.655",
						"yrTerm3Standard.partialUpfront": "0.720"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.026",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.440",
						"yrTerm1Standard.noUpfront": "0.566",
						"yrTerm1Standard.partialUpfront": "0.483",
						"yrTerm3Standard.allUpfront": "0.343",
						"yrTerm3Standard.partialUpfront": "0.377"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.55",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.226",
						"yrTerm1Standard.noUpfront": "0.268",
						"yrTerm1Standard.partialUpfront": "0.230",
						"yrTerm3Standard.allUpfront": "0.144",
						"yrTerm3Standard.partialUpfront": "0.153"
					}
				},
				"mswin": {
					"ondemand": "0.75",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.524",
						"yrTerm1Standard.noUpfront": "0.625",
						"yrTerm1Standard.partialUpfront": "0.534",
						"yrTerm3Standard.allUpfront": "0.387",
						"yrTerm3Standard.partialUpfront": "0.412"
					}
				},
				"mswinSQL": {
					"ondemand": "1.589",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.914",
						"yrTerm1Standard.noUpfront": "1.092",
						"yrTerm1Standard.partialUpfront": "0.933",
						"yrTerm3Standard.allUpfront": "0.727",
						"yrTerm3Standard.partialUpfront": "0.774"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.922",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.649",
						"yrTerm1Standard.noUpfront": "0.775",
						"yrTerm1Standard.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.468",
						"yrTerm3Standard.partialUpfront": "0.498"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.49",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.222",
						"yrTerm1Standard.partialUpfront": "0.190",
						"yrTerm3Standard.allUpfront": "0.112",
						"yrTerm3Standard.partialUpfront": "0.119"
					}
				},
				"mswin": {
					"ondemand": "0.69",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.416",
						"yrTerm1Standard.noUpfront": "0.496",
						"yrTerm1Standard.partialUpfront": "0.424",
						"yrTerm3Standard.allUpfront": "0.301",
						"yrTerm3Standard.partialUpfront": "0.320"
					}
				},
				"mswinSQL": {
					"ondemand": "1.489",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.791",
						"yrTerm1Standard.noUpfront": "0.944",
						"yrTerm1Standard.partialUpfront": "0.807",
						"yrTerm3Standard.allUpfront": "0.629",
						"yrTerm3Standard.partialUpfront": "0.669"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.85",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.521",
						"yrTerm1Standard.noUpfront": "0.622",
						"yrTerm1Standard.partialUpfront": "0.531",
						"yrTerm3Standard.allUpfront": "0.367",
						"yrTerm3Standard.partialUpfront": "0.390"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 850,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 26,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": false,
		"family": "Memory optimized",
		"generation": "previous",
		"instance_type": "m2.4xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"PV"
		],
		"memory": 68.4,
		"network_performance": "High",
		"placement_group_support": false,
		"pretty_name": "M2 High Memory Quadruple Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.15",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.507",
						"yrTerm1Standard.noUpfront": "0.604",
						"yrTerm1Standard.partialUpfront": "0.518",
						"yrTerm3Standard.allUpfront": "0.325",
						"yrTerm3Standard.partialUpfront": "0.346"
					}
				},
				"mswin": {
					"ondemand": "1.41",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.045",
						"yrTerm1Standard.noUpfront": "1.248",
						"yrTerm1Standard.partialUpfront": "1.067",
						"yrTerm3Standard.allUpfront": "0.774",
						"yrTerm3Standard.partialUpfront": "0.823"
					}
				},
				"mswinSQL": {
					"ondemand": "3.116",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.914",
						"yrTerm1Standard.noUpfront": "2.285",
						"yrTerm1Standard.partialUpfront": "1.953",
						"yrTerm3Standard.allUpfront": "1.534",
						"yrTerm3Standard.partialUpfront": "1.632"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.7",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.330",
						"yrTerm1Standard.noUpfront": "1.588",
						"yrTerm1Standard.partialUpfront": "1.357",
						"yrTerm3Standard.allUpfront": "0.963",
						"yrTerm3Standard.partialUpfront": "1.024"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.183",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.501",
						"yrTerm1Standard.noUpfront": "0.592",
						"yrTerm1Standard.partialUpfront": "0.511",
						"yrTerm3Standard.allUpfront": "0.320",
						"yrTerm3Standard.partialUpfront": "0.340"
					}
				},
				"mswin": {
					"ondemand": "1.483",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.027",
						"yrTerm1Standard.noUpfront": "1.226",
						"yrTerm1Standard.partialUpfront": "1.048",
						"yrTerm3Standard.allUpfront": "0.758",
						"yrTerm3Standard.partialUpfront": "0.806"
					}
				},
				"mswinSQL": {
					"ondemand": "2.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.829",
						"yrTerm1Standard.noUpfront": "2.183",
						"yrTerm1Standard.partialUpfront": "1.866",
						"yrTerm3Standard.allUpfront": "1.455",
						"yrTerm3Standard.partialUpfront": "1.548"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.7",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.297",
						"yrTerm1Standard.noUpfront": "1.549",
						"yrTerm1Standard.partialUpfront": "1.324",
						"yrTerm3Standard.allUpfront": "0.937",
						"yrTerm3Standard.partialUpfront": "0.997"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.183",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.501",
						"yrTerm1Standard.noUpfront": "0.592",
						"yrTerm1Standard.partialUpfront": "0.511",
						"yrTerm3Standard.allUpfront": "0.320",
						"yrTerm3Standard.partialUpfront": "0.340"
					}
				},
				"mswin": {
					"ondemand": "1.483",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.027",
						"yrTerm1Standard.noUpfront": "1.226",
						"yrTerm1Standard.partialUpfront": "1.048",
						"yrTerm3Standard.allUpfront": "0.758",
						"yrTerm3Standard.partialUpfront": "0.806"
					}
				},
				"mswinSQL": {
					"ondemand": "2.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.829",
						"yrTerm1Standard.noUpfront": "2.183",
						"yrTerm1Standard.partialUpfront": "1.866",
						"yrTerm3Standard.allUpfront": "1.455",
						"yrTerm3Standard.partialUpfront": "1.548"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.7",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.297",
						"yrTerm1Standard.noUpfront": "1.549",
						"yrTerm1Standard.partialUpfront": "1.324",
						"yrTerm3Standard.allUpfront": "0.937",
						"yrTerm3Standard.partialUpfront": "0.997"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.452",
						"yrTerm1Standard.noUpfront": "0.536",
						"yrTerm1Standard.partialUpfront": "0.461",
						"yrTerm3Standard.allUpfront": "0.290",
						"yrTerm3Standard.partialUpfront": "0.308"
					}
				},
				"mswin": {
					"ondemand": "1.38",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.049",
						"yrTerm1Standard.noUpfront": "1.252",
						"yrTerm1Standard.partialUpfront": "1.070",
						"yrTerm3Standard.allUpfront": "0.773",
						"yrTerm3Standard.partialUpfront": "0.822"
					}
				},
				"mswinSQL": {
					"ondemand": "2.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.581",
						"yrTerm1Standard.noUpfront": "1.887",
						"yrTerm1Standard.partialUpfront": "1.613",
						"yrTerm3Standard.allUpfront": "1.259",
						"yrTerm3Standard.partialUpfront": "1.340"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.7",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.043",
						"yrTerm1Standard.noUpfront": "1.245",
						"yrTerm1Standard.partialUpfront": "1.064",
						"yrTerm3Standard.allUpfront": "0.734",
						"yrTerm3Standard.partialUpfront": "0.781"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.291",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.435",
						"yrTerm1Standard.noUpfront": "0.516",
						"yrTerm1Standard.partialUpfront": "0.444",
						"yrTerm3Standard.allUpfront": "0.309",
						"yrTerm3Standard.partialUpfront": "0.329"
					}
				},
				"mswin": {
					"ondemand": "1.691",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.550",
						"yrTerm1Standard.noUpfront": "1.618",
						"yrTerm1Standard.partialUpfront": "1.581",
						"yrTerm3Standard.allUpfront": "0.929",
						"yrTerm3Standard.partialUpfront": "0.989"
					}
				},
				"mswinSQL": {
					"ondemand": "3.804",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.265",
						"yrTerm1Standard.noUpfront": "2.705",
						"yrTerm1Standard.partialUpfront": "2.312",
						"yrTerm3Standard.allUpfront": "1.658",
						"yrTerm3Standard.partialUpfront": "1.764"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.411",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.662",
						"yrTerm1Standard.noUpfront": "1.984",
						"yrTerm1Standard.partialUpfront": "1.696",
						"yrTerm3Standard.allUpfront": "1.090",
						"yrTerm3Standard.partialUpfront": "1.159"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.98",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.372",
						"yrTerm1Standard.noUpfront": "0.444",
						"yrTerm1Standard.partialUpfront": "0.379",
						"yrTerm3Standard.allUpfront": "0.222",
						"yrTerm3Standard.partialUpfront": "0.236"
					}
				},
				"mswin": {
					"ondemand": "1.38",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.830",
						"yrTerm1Standard.noUpfront": "0.991",
						"yrTerm1Standard.partialUpfront": "0.847",
						"yrTerm3Standard.allUpfront": "0.600",
						"yrTerm3Standard.partialUpfront": "0.638"
					}
				},
				"mswinSQL": {
					"ondemand": "2.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.581",
						"yrTerm1Standard.noUpfront": "1.887",
						"yrTerm1Standard.partialUpfront": "1.613",
						"yrTerm3Standard.allUpfront": "1.259",
						"yrTerm3Standard.partialUpfront": "1.340"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.7",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.043",
						"yrTerm1Standard.noUpfront": "1.245",
						"yrTerm1Standard.partialUpfront": "1.064",
						"yrTerm3Standard.allUpfront": "0.734",
						"yrTerm3Standard.partialUpfront": "0.781"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.171",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.435",
						"yrTerm1Standard.noUpfront": "0.544",
						"yrTerm1Standard.partialUpfront": "0.469",
						"yrTerm3Standard.allUpfront": "0.271",
						"yrTerm3Standard.partialUpfront": "0.297"
					}
				},
				"mswin": {
					"ondemand": "1.571",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.838",
						"yrTerm1Standard.noUpfront": "1.080",
						"yrTerm1Standard.partialUpfront": "0.924",
						"yrTerm3Standard.allUpfront": "0.631",
						"yrTerm3Standard.partialUpfront": "0.710"
					}
				},
				"mswinSQL": {
					"ondemand": "3.408",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.578",
						"yrTerm1Standard.noUpfront": "2.029",
						"yrTerm1Standard.partialUpfront": "1.735",
						"yrTerm3Standard.allUpfront": "1.310",
						"yrTerm3Standard.partialUpfront": "1.440"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.051",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.880",
						"yrTerm1Standard.noUpfront": "1.131",
						"yrTerm1Standard.partialUpfront": "0.967",
						"yrTerm3Standard.allUpfront": "0.686",
						"yrTerm3Standard.partialUpfront": "0.753"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.452",
						"yrTerm1Standard.noUpfront": "0.536",
						"yrTerm1Standard.partialUpfront": "0.461",
						"yrTerm3Standard.allUpfront": "0.288",
						"yrTerm3Standard.partialUpfront": "0.306"
					}
				},
				"mswin": {
					"ondemand": "1.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.049",
						"yrTerm1Standard.noUpfront": "1.252",
						"yrTerm1Standard.partialUpfront": "1.070",
						"yrTerm3Standard.allUpfront": "0.775",
						"yrTerm3Standard.partialUpfront": "0.824"
					}
				},
				"mswinSQL": {
					"ondemand": "3.178",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.829",
						"yrTerm1Standard.noUpfront": "2.183",
						"yrTerm1Standard.partialUpfront": "1.866",
						"yrTerm3Standard.allUpfront": "1.455",
						"yrTerm3Standard.partialUpfront": "1.548"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.844",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.297",
						"yrTerm1Standard.noUpfront": "1.549",
						"yrTerm1Standard.partialUpfront": "1.324",
						"yrTerm3Standard.allUpfront": "0.937",
						"yrTerm3Standard.partialUpfront": "0.997"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.98",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.372",
						"yrTerm1Standard.noUpfront": "0.444",
						"yrTerm1Standard.partialUpfront": "0.379",
						"yrTerm3Standard.allUpfront": "0.222",
						"yrTerm3Standard.partialUpfront": "0.236"
					}
				},
				"mswin": {
					"ondemand": "1.38",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.830",
						"yrTerm1Standard.noUpfront": "0.991",
						"yrTerm1Standard.partialUpfront": "0.847",
						"yrTerm3Standard.allUpfront": "0.600",
						"yrTerm3Standard.partialUpfront": "0.638"
					}
				},
				"mswinSQL": {
					"ondemand": "2.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.581",
						"yrTerm1Standard.noUpfront": "1.887",
						"yrTerm1Standard.partialUpfront": "1.613",
						"yrTerm3Standard.allUpfront": "1.259",
						"yrTerm3Standard.partialUpfront": "1.340"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.7",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.043",
						"yrTerm1Standard.noUpfront": "1.245",
						"yrTerm1Standard.partialUpfront": "1.064",
						"yrTerm3Standard.allUpfront": "0.734",
						"yrTerm3Standard.partialUpfront": "0.781"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 840,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 88,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "Memory optimized",
		"generation": "previous",
		"instance_type": "cr1.8xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [],
		"memory": 244,
		"network_performance": "10 Gigabit",
		"placement_group_support": false,
		"pretty_name": "High Memory Cluster Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "4.105",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.748",
						"yrTerm1Standard.noUpfront": "2.086",
						"yrTerm1Standard.partialUpfront": "1.784",
						"yrTerm3Standard.allUpfront": "1.242",
						"yrTerm3Standard.partialUpfront": "1.322"
					}
				},
				"mswin": {
					"ondemand": "4.42",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.057",
						"yrTerm1Standard.noUpfront": "2.455",
						"yrTerm1Standard.partialUpfront": "2.099",
						"yrTerm3Standard.allUpfront": "1.538",
						"yrTerm3Standard.partialUpfront": "1.637"
					}
				},
				"mswinSQL": {
					"ondemand": "7.676",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.249",
						"yrTerm1Standard.noUpfront": "6.266",
						"yrTerm1Standard.partialUpfront": "5.356",
						"yrTerm3Standard.allUpfront": "4.599",
						"yrTerm3Standard.partialUpfront": "4.892"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.623",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.256",
						"yrTerm1Standard.noUpfront": "2.693",
						"yrTerm1Standard.partialUpfront": "2.302",
						"yrTerm3Standard.allUpfront": "1.728",
						"yrTerm3Standard.partialUpfront": "1.839"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "3.75",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.535",
						"yrTerm1Standard.noUpfront": "1.832",
						"yrTerm1Standard.partialUpfront": "1.566",
						"yrTerm3Standard.allUpfront": "1.090",
						"yrTerm3Standard.partialUpfront": "1.160"
					}
				},
				"mswin": {
					"ondemand": "3.831",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.175",
						"yrTerm1Standard.noUpfront": "2.596",
						"yrTerm1Standard.partialUpfront": "2.219",
						"yrTerm3Standard.allUpfront": "1.451",
						"yrTerm3Standard.partialUpfront": "1.544"
					}
				},
				"mswinSQL": {
					"ondemand": "7.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.363",
						"yrTerm1Standard.noUpfront": "6.746",
						"yrTerm1Standard.partialUpfront": "6.493",
						"yrTerm3Standard.allUpfront": "5.469",
						"yrTerm3Standard.partialUpfront": "5.818"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.044",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.436",
						"yrTerm1Standard.noUpfront": "2.909",
						"yrTerm1Standard.partialUpfront": "2.486",
						"yrTerm3Standard.allUpfront": "1.702",
						"yrTerm3Standard.partialUpfront": "1.811"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "3.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.415",
						"yrTerm1Standard.noUpfront": "1.689",
						"yrTerm1Standard.partialUpfront": "1.444",
						"yrTerm3Standard.allUpfront": "0.850",
						"yrTerm3Standard.partialUpfront": "0.904"
					}
				},
				"mswin": {
					"ondemand": "3.831",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.740",
						"yrTerm1Standard.noUpfront": "2.077",
						"yrTerm1Standard.partialUpfront": "1.775",
						"yrTerm3Standard.allUpfront": "1.161",
						"yrTerm3Standard.partialUpfront": "1.235"
					}
				},
				"mswinSQL": {
					"ondemand": "7.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.090",
						"yrTerm1Standard.noUpfront": "6.077",
						"yrTerm1Standard.partialUpfront": "5.194",
						"yrTerm3Standard.allUpfront": "4.375",
						"yrTerm3Standard.partialUpfront": "4.654"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.044",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.949",
						"yrTerm1Standard.noUpfront": "2.327",
						"yrTerm1Standard.partialUpfront": "1.989",
						"yrTerm3Standard.allUpfront": "1.362",
						"yrTerm3Standard.partialUpfront": "1.449"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "3.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.415",
						"yrTerm1Standard.noUpfront": "1.689",
						"yrTerm1Standard.partialUpfront": "1.444",
						"yrTerm3Standard.allUpfront": "0.850",
						"yrTerm3Standard.partialUpfront": "0.904"
					}
				},
				"mswin": {
					"ondemand": "3.831",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.740",
						"yrTerm1Standard.noUpfront": "2.077",
						"yrTerm1Standard.partialUpfront": "1.775",
						"yrTerm3Standard.allUpfront": "1.161",
						"yrTerm3Standard.partialUpfront": "1.235"
					}
				},
				"mswinSQL": {
					"ondemand": "7.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.090",
						"yrTerm1Standard.noUpfront": "6.077",
						"yrTerm1Standard.partialUpfront": "5.194",
						"yrTerm3Standard.allUpfront": "4.375",
						"yrTerm3Standard.partialUpfront": "4.654"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.044",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.949",
						"yrTerm1Standard.noUpfront": "2.327",
						"yrTerm1Standard.partialUpfront": "1.989",
						"yrTerm3Standard.allUpfront": "1.362",
						"yrTerm3Standard.partialUpfront": "1.449"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 120,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 32,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 14,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 4000,
		"ebs_max_bandwidth": 500,
		"ebs_optimized": true,
		"ebs_throughput": 62.5,
		"enhanced_networking": false,
		"family": "Storage optimized",
		"generation": "previous",
		"instance_type": "i2.xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 30.5,
		"network_performance": "Moderate",
		"placement_group_support": true,
		"pretty_name": "I2 Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "1.001",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.522",
						"yrTerm1Standard.noUpfront": "0.623",
						"yrTerm1Standard.partialUpfront": "0.533",
						"yrTerm3Convertible.allUpfront": "0.470",
						"yrTerm3Convertible.noUpfront": "0.561",
						"yrTerm3Convertible.partialUpfront": "0.480",
						"yrTerm3Standard.allUpfront": "0.310",
						"yrTerm3Standard.partialUpfront": "0.330"
					}
				},
				"mswin": {
					"ondemand": "1.113",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.695",
						"yrTerm1Standard.noUpfront": "0.829",
						"yrTerm1Standard.partialUpfront": "0.709",
						"yrTerm3Convertible.allUpfront": "0.642",
						"yrTerm3Convertible.noUpfront": "0.767",
						"yrTerm3Convertible.partialUpfront": "0.656",
						"yrTerm3Standard.allUpfront": "0.476",
						"yrTerm3Standard.partialUpfront": "0.506"
					}
				},
				"mswinSQL": {
					"ondemand": "2.026",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.944",
						"yrTerm1Standard.noUpfront": "1.126",
						"yrTerm1Standard.partialUpfront": "0.963",
						"yrTerm3Convertible.allUpfront": "0.891",
						"yrTerm3Convertible.noUpfront": "1.064",
						"yrTerm3Convertible.partialUpfront": "0.910",
						"yrTerm3Standard.allUpfront": "0.714",
						"yrTerm3Standard.partialUpfront": "0.760"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.23",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.710",
						"yrTerm1Standard.noUpfront": "0.848",
						"yrTerm1Standard.partialUpfront": "0.725",
						"yrTerm3Convertible.allUpfront": "0.658",
						"yrTerm3Convertible.noUpfront": "0.786",
						"yrTerm3Convertible.partialUpfront": "0.672",
						"yrTerm3Standard.allUpfront": "0.490",
						"yrTerm3Standard.partialUpfront": "0.521"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "1.001",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.522",
						"yrTerm1Standard.noUpfront": "0.623",
						"yrTerm1Standard.partialUpfront": "0.533",
						"yrTerm3Convertible.allUpfront": "0.470",
						"yrTerm3Convertible.noUpfront": "0.561",
						"yrTerm3Convertible.partialUpfront": "0.480",
						"yrTerm3Standard.allUpfront": "0.310",
						"yrTerm3Standard.partialUpfront": "0.330"
					}
				},
				"mswin": {
					"ondemand": "1.185",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.706",
						"yrTerm1Standard.noUpfront": "0.807",
						"yrTerm1Standard.partialUpfront": "0.717",
						"yrTerm3Convertible.allUpfront": "0.654",
						"yrTerm3Convertible.noUpfront": "0.745",
						"yrTerm3Convertible.partialUpfront": "0.664",
						"yrTerm3Standard.allUpfront": "0.494",
						"yrTerm3Standard.partialUpfront": "0.514"
					}
				},
				"mswinSQL": {
					"ondemand": "1.893",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.414",
						"yrTerm1Standard.noUpfront": "1.515",
						"yrTerm1Standard.partialUpfront": "1.425",
						"yrTerm3Convertible.allUpfront": "1.362",
						"yrTerm3Convertible.noUpfront": "1.453",
						"yrTerm3Convertible.partialUpfront": "1.372",
						"yrTerm3Standard.allUpfront": "1.202",
						"yrTerm3Standard.partialUpfront": "1.222"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.258",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.779",
						"yrTerm1Standard.noUpfront": "0.880",
						"yrTerm1Standard.partialUpfront": "0.790",
						"yrTerm3Convertible.allUpfront": "0.727",
						"yrTerm3Convertible.noUpfront": "0.818",
						"yrTerm3Convertible.partialUpfront": "0.737",
						"yrTerm3Standard.allUpfront": "0.567",
						"yrTerm3Standard.partialUpfront": "0.587"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.967",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.486",
						"yrTerm1Standard.noUpfront": "0.580",
						"yrTerm1Standard.partialUpfront": "0.496",
						"yrTerm3Convertible.allUpfront": "0.437",
						"yrTerm3Convertible.noUpfront": "0.522",
						"yrTerm3Convertible.partialUpfront": "0.446",
						"yrTerm3Standard.allUpfront": "0.289",
						"yrTerm3Standard.partialUpfront": "0.308"
					}
				},
				"mswin": {
					"ondemand": "1.151",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.670",
						"yrTerm1Standard.noUpfront": "0.764",
						"yrTerm1Standard.partialUpfront": "0.680",
						"yrTerm3Convertible.allUpfront": "0.621",
						"yrTerm3Convertible.noUpfront": "0.706",
						"yrTerm3Convertible.partialUpfront": "0.630",
						"yrTerm3Standard.allUpfront": "0.473",
						"yrTerm3Standard.partialUpfront": "0.492"
					}
				},
				"mswinSQL": {
					"ondemand": "1.859",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.378",
						"yrTerm1Standard.noUpfront": "1.472",
						"yrTerm1Standard.partialUpfront": "1.388",
						"yrTerm3Convertible.allUpfront": "1.329",
						"yrTerm3Convertible.noUpfront": "1.414",
						"yrTerm3Convertible.partialUpfront": "1.338",
						"yrTerm3Standard.allUpfront": "1.181",
						"yrTerm3Standard.partialUpfront": "1.200"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.224",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.743",
						"yrTerm1Standard.noUpfront": "0.837",
						"yrTerm1Standard.partialUpfront": "0.753",
						"yrTerm3Convertible.allUpfront": "0.694",
						"yrTerm3Convertible.noUpfront": "0.779",
						"yrTerm3Convertible.partialUpfront": "0.703",
						"yrTerm3Standard.allUpfront": "0.546",
						"yrTerm3Standard.partialUpfront": "0.565"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "1.018",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.512",
						"yrTerm1Standard.noUpfront": "0.610",
						"yrTerm1Standard.partialUpfront": "0.522",
						"yrTerm3Convertible.allUpfront": "0.460",
						"yrTerm3Convertible.noUpfront": "0.549",
						"yrTerm3Convertible.partialUpfront": "0.470",
						"yrTerm3Standard.allUpfront": "0.305",
						"yrTerm3Standard.partialUpfront": "0.324"
					}
				},
				"mswin": {
					"ondemand": "1.169",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.681",
						"yrTerm1Standard.noUpfront": "0.813",
						"yrTerm1Standard.partialUpfront": "0.695",
						"yrTerm3Convertible.allUpfront": "0.630",
						"yrTerm3Convertible.noUpfront": "0.752",
						"yrTerm3Convertible.partialUpfront": "0.643",
						"yrTerm3Standard.allUpfront": "0.467",
						"yrTerm3Standard.partialUpfront": "0.497"
					}
				},
				"mswinSQL": {
					"ondemand": "2.127",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.926",
						"yrTerm1Standard.noUpfront": "1.106",
						"yrTerm1Standard.partialUpfront": "0.945",
						"yrTerm3Convertible.allUpfront": "0.875",
						"yrTerm3Convertible.noUpfront": "1.045",
						"yrTerm3Convertible.partialUpfront": "0.893",
						"yrTerm3Standard.allUpfront": "0.702",
						"yrTerm3Standard.partialUpfront": "0.746"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.292",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.697",
						"yrTerm1Standard.noUpfront": "0.832",
						"yrTerm1Standard.partialUpfront": "0.712",
						"yrTerm3Convertible.allUpfront": "0.646",
						"yrTerm3Convertible.noUpfront": "0.771",
						"yrTerm3Convertible.partialUpfront": "0.659",
						"yrTerm3Standard.allUpfront": "0.481",
						"yrTerm3Standard.partialUpfront": "0.512"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "1.018",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.512",
						"yrTerm1Standard.noUpfront": "0.610",
						"yrTerm1Standard.partialUpfront": "0.522",
						"yrTerm3Convertible.allUpfront": "0.460",
						"yrTerm3Convertible.noUpfront": "0.549",
						"yrTerm3Convertible.partialUpfront": "0.470",
						"yrTerm3Standard.allUpfront": "0.305",
						"yrTerm3Standard.partialUpfront": "0.324"
					}
				},
				"mswin": {
					"ondemand": "1.169",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.681",
						"yrTerm1Standard.noUpfront": "0.813",
						"yrTerm1Standard.partialUpfront": "0.695",
						"yrTerm3Convertible.allUpfront": "0.630",
						"yrTerm3Convertible.noUpfront": "0.752",
						"yrTerm3Convertible.partialUpfront": "0.643",
						"yrTerm3Standard.allUpfront": "0.467",
						"yrTerm3Standard.partialUpfront": "0.497"
					}
				},
				"mswinSQL": {
					"ondemand": "2.127",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.926",
						"yrTerm1Standard.noUpfront": "1.106",
						"yrTerm1Standard.partialUpfront": "0.945",
						"yrTerm3Convertible.allUpfront": "0.875",
						"yrTerm3Convertible.noUpfront": "1.045",
						"yrTerm3Convertible.partialUpfront": "0.893",
						"yrTerm3Standard.allUpfront": "0.702",
						"yrTerm3Standard.partialUpfront": "0.746"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.292",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.697",
						"yrTerm1Standard.noUpfront": "0.832",
						"yrTerm1Standard.partialUpfront": "0.712",
						"yrTerm3Convertible.allUpfront": "0.646",
						"yrTerm3Convertible.noUpfront": "0.771",
						"yrTerm3Convertible.partialUpfront": "0.659",
						"yrTerm3Standard.allUpfront": "0.481",
						"yrTerm3Standard.partialUpfront": "0.512"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "1.013",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.466",
						"yrTerm1Standard.noUpfront": "0.556",
						"yrTerm1Standard.partialUpfront": "0.476",
						"yrTerm3Convertible.allUpfront": "0.420",
						"yrTerm3Convertible.noUpfront": "0.500",
						"yrTerm3Convertible.partialUpfront": "0.428",
						"yrTerm3Standard.allUpfront": "0.295",
						"yrTerm3Standard.partialUpfront": "0.314"
					}
				},
				"mswin": {
					"ondemand": "1.133",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.594",
						"yrTerm1Standard.noUpfront": "0.709",
						"yrTerm1Standard.partialUpfront": "0.606",
						"yrTerm3Convertible.allUpfront": "0.547",
						"yrTerm3Convertible.noUpfront": "0.653",
						"yrTerm3Convertible.partialUpfront": "0.558",
						"yrTerm3Standard.allUpfront": "0.408",
						"yrTerm3Standard.partialUpfront": "0.434"
					}
				},
				"mswinSQL": {
					"ondemand": "2.476",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.306",
						"yrTerm1Standard.noUpfront": "1.559",
						"yrTerm1Standard.partialUpfront": "1.333",
						"yrTerm3Convertible.allUpfront": "1.259",
						"yrTerm3Convertible.noUpfront": "1.503",
						"yrTerm3Convertible.partialUpfront": "1.285",
						"yrTerm3Standard.allUpfront": "1.051",
						"yrTerm3Standard.partialUpfront": "1.118"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.58",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.595",
						"yrTerm1Standard.noUpfront": "0.711",
						"yrTerm1Standard.partialUpfront": "0.607",
						"yrTerm3Convertible.allUpfront": "0.549",
						"yrTerm3Convertible.noUpfront": "0.655",
						"yrTerm3Convertible.partialUpfront": "0.560",
						"yrTerm3Standard.allUpfront": "0.417",
						"yrTerm3Standard.partialUpfront": "0.444"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.938",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.432",
						"yrTerm1Standard.noUpfront": "0.515",
						"yrTerm1Standard.partialUpfront": "0.441",
						"yrTerm3Convertible.allUpfront": "0.389",
						"yrTerm3Convertible.noUpfront": "0.464",
						"yrTerm3Convertible.partialUpfront": "0.397",
						"yrTerm3Standard.allUpfront": "0.273",
						"yrTerm3Standard.partialUpfront": "0.290"
					}
				},
				"mswin": {
					"ondemand": "0.973",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.592",
						"yrTerm1Standard.noUpfront": "0.706",
						"yrTerm1Standard.partialUpfront": "0.604",
						"yrTerm3Convertible.allUpfront": "0.549",
						"yrTerm3Convertible.noUpfront": "0.655",
						"yrTerm3Convertible.partialUpfront": "0.560",
						"yrTerm3Standard.allUpfront": "0.405",
						"yrTerm3Standard.partialUpfront": "0.431"
					}
				},
				"mswinSQL": {
					"ondemand": "1.23",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.804",
						"yrTerm1Standard.noUpfront": "0.960",
						"yrTerm1Standard.partialUpfront": "0.820",
						"yrTerm3Convertible.allUpfront": "0.761",
						"yrTerm3Convertible.noUpfront": "0.909",
						"yrTerm3Convertible.partialUpfront": "0.776",
						"yrTerm3Standard.allUpfront": "0.608",
						"yrTerm3Standard.partialUpfront": "0.647"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.993",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.484",
						"yrTerm1Standard.noUpfront": "0.578",
						"yrTerm1Standard.partialUpfront": "0.494",
						"yrTerm3Convertible.allUpfront": "0.441",
						"yrTerm3Convertible.noUpfront": "0.527",
						"yrTerm3Convertible.partialUpfront": "0.450",
						"yrTerm3Standard.allUpfront": "0.334",
						"yrTerm3Standard.partialUpfront": "0.355"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.853",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.356",
						"yrTerm1Standard.noUpfront": "0.424",
						"yrTerm1Standard.partialUpfront": "0.363",
						"yrTerm3Convertible.allUpfront": "0.320",
						"yrTerm3Convertible.noUpfront": "0.382",
						"yrTerm3Convertible.partialUpfront": "0.327",
						"yrTerm3Standard.allUpfront": "0.212",
						"yrTerm3Standard.partialUpfront": "0.225"
					}
				},
				"mswin": {
					"ondemand": "0.973",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.473",
						"yrTerm1Standard.noUpfront": "0.565",
						"yrTerm1Standard.partialUpfront": "0.483",
						"yrTerm3Convertible.allUpfront": "0.438",
						"yrTerm3Convertible.noUpfront": "0.523",
						"yrTerm3Convertible.partialUpfront": "0.447",
						"yrTerm3Standard.allUpfront": "0.325",
						"yrTerm3Standard.partialUpfront": "0.345"
					}
				},
				"mswinSQL": {
					"ondemand": "1.23",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.643",
						"yrTerm1Standard.noUpfront": "0.768",
						"yrTerm1Standard.partialUpfront": "0.656",
						"yrTerm3Convertible.allUpfront": "0.608",
						"yrTerm3Convertible.noUpfront": "0.726",
						"yrTerm3Convertible.partialUpfront": "0.620",
						"yrTerm3Standard.allUpfront": "0.487",
						"yrTerm3Standard.partialUpfront": "0.518"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.993",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.484",
						"yrTerm1Standard.noUpfront": "0.578",
						"yrTerm1Standard.partialUpfront": "0.494",
						"yrTerm3Convertible.allUpfront": "0.448",
						"yrTerm3Convertible.noUpfront": "0.536",
						"yrTerm3Convertible.partialUpfront": "0.458",
						"yrTerm3Standard.allUpfront": "0.334",
						"yrTerm3Standard.partialUpfront": "0.355"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.853",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.356",
						"yrTerm1Standard.noUpfront": "0.424",
						"yrTerm1Standard.partialUpfront": "0.363",
						"yrTerm3Convertible.allUpfront": "0.320",
						"yrTerm3Convertible.noUpfront": "0.382",
						"yrTerm3Convertible.partialUpfront": "0.327",
						"yrTerm3Standard.allUpfront": "0.212",
						"yrTerm3Standard.partialUpfront": "0.225"
					}
				},
				"mswin": {
					"ondemand": "0.973",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.473",
						"yrTerm1Standard.noUpfront": "0.565",
						"yrTerm1Standard.partialUpfront": "0.483",
						"yrTerm3Convertible.allUpfront": "0.438",
						"yrTerm3Convertible.noUpfront": "0.523",
						"yrTerm3Convertible.partialUpfront": "0.447",
						"yrTerm3Standard.allUpfront": "0.325",
						"yrTerm3Standard.partialUpfront": "0.345"
					}
				},
				"mswinSQL": {
					"ondemand": "1.23",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.643",
						"yrTerm1Standard.noUpfront": "0.768",
						"yrTerm1Standard.partialUpfront": "0.656",
						"yrTerm3Convertible.allUpfront": "0.608",
						"yrTerm3Convertible.noUpfront": "0.726",
						"yrTerm3Convertible.partialUpfront": "0.620",
						"yrTerm3Standard.allUpfront": "0.487",
						"yrTerm3Standard.partialUpfront": "0.518"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.993",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.484",
						"yrTerm1Standard.noUpfront": "0.578",
						"yrTerm1Standard.partialUpfront": "0.494",
						"yrTerm3Convertible.allUpfront": "0.448",
						"yrTerm3Convertible.noUpfront": "0.536",
						"yrTerm3Convertible.partialUpfront": "0.458",
						"yrTerm3Standard.allUpfront": "0.334",
						"yrTerm3Standard.partialUpfront": "0.355"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "1.023",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.427",
						"yrTerm1Standard.noUpfront": "0.509",
						"yrTerm1Standard.partialUpfront": "0.435",
						"yrTerm3Convertible.allUpfront": "0.384",
						"yrTerm3Convertible.noUpfront": "0.458",
						"yrTerm3Convertible.partialUpfront": "0.392",
						"yrTerm3Standard.allUpfront": "0.254",
						"yrTerm3Standard.partialUpfront": "0.270"
					}
				},
				"mswin": {
					"ondemand": "1.144",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.544",
						"yrTerm1Standard.noUpfront": "0.650",
						"yrTerm1Standard.partialUpfront": "0.556",
						"yrTerm3Convertible.allUpfront": "0.502",
						"yrTerm3Convertible.noUpfront": "0.599",
						"yrTerm3Convertible.partialUpfront": "0.512",
						"yrTerm3Standard.allUpfront": "0.367",
						"yrTerm3Standard.partialUpfront": "0.391"
					}
				},
				"mswinSQL": {
					"ondemand": "1.401",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.715",
						"yrTerm1Standard.noUpfront": "0.854",
						"yrTerm1Standard.partialUpfront": "0.730",
						"yrTerm3Convertible.allUpfront": "0.672",
						"yrTerm3Convertible.noUpfront": "0.803",
						"yrTerm3Convertible.partialUpfront": "0.686",
						"yrTerm3Standard.allUpfront": "0.530",
						"yrTerm3Standard.partialUpfront": "0.563"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.164",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.556",
						"yrTerm1Standard.noUpfront": "0.664",
						"yrTerm1Standard.partialUpfront": "0.567",
						"yrTerm3Convertible.allUpfront": "0.513",
						"yrTerm3Convertible.noUpfront": "0.613",
						"yrTerm3Convertible.partialUpfront": "0.524",
						"yrTerm3Standard.allUpfront": "0.377",
						"yrTerm3Standard.partialUpfront": "0.401"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.938",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.432",
						"yrTerm1Standard.noUpfront": "0.515",
						"yrTerm1Standard.partialUpfront": "0.441",
						"yrTerm3Convertible.allUpfront": "0.389",
						"yrTerm3Convertible.noUpfront": "0.464",
						"yrTerm3Convertible.partialUpfront": "0.397",
						"yrTerm3Standard.allUpfront": "0.273",
						"yrTerm3Standard.partialUpfront": "0.290"
					}
				},
				"mswin": {
					"ondemand": "1.058",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.592",
						"yrTerm1Standard.noUpfront": "0.706",
						"yrTerm1Standard.partialUpfront": "0.604",
						"yrTerm3Convertible.allUpfront": "0.549",
						"yrTerm3Convertible.noUpfront": "0.655",
						"yrTerm3Convertible.partialUpfront": "0.560",
						"yrTerm3Standard.allUpfront": "0.405",
						"yrTerm3Standard.partialUpfront": "0.431"
					}
				},
				"mswinSQL": {
					"ondemand": "1.315",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.804",
						"yrTerm1Standard.noUpfront": "0.960",
						"yrTerm1Standard.partialUpfront": "0.820",
						"yrTerm3Convertible.allUpfront": "0.761",
						"yrTerm3Convertible.noUpfront": "0.909",
						"yrTerm3Convertible.partialUpfront": "0.776",
						"yrTerm3Standard.allUpfront": "0.608",
						"yrTerm3Standard.partialUpfront": "0.647"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.078",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.484",
						"yrTerm1Standard.noUpfront": "0.578",
						"yrTerm1Standard.partialUpfront": "0.494",
						"yrTerm3Convertible.allUpfront": "0.441",
						"yrTerm3Convertible.noUpfront": "0.527",
						"yrTerm3Convertible.partialUpfront": "0.450",
						"yrTerm3Standard.allUpfront": "0.334",
						"yrTerm3Standard.partialUpfront": "0.355"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.853",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.356",
						"yrTerm1Standard.noUpfront": "0.424",
						"yrTerm1Standard.partialUpfront": "0.363",
						"yrTerm3Convertible.allUpfront": "0.320",
						"yrTerm3Convertible.noUpfront": "0.382",
						"yrTerm3Convertible.partialUpfront": "0.327",
						"yrTerm3Standard.allUpfront": "0.212",
						"yrTerm3Standard.partialUpfront": "0.225"
					}
				},
				"mswin": {
					"ondemand": "0.973",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.473",
						"yrTerm1Standard.noUpfront": "0.565",
						"yrTerm1Standard.partialUpfront": "0.483",
						"yrTerm3Convertible.allUpfront": "0.438",
						"yrTerm3Convertible.noUpfront": "0.523",
						"yrTerm3Convertible.partialUpfront": "0.447",
						"yrTerm3Standard.allUpfront": "0.325",
						"yrTerm3Standard.partialUpfront": "0.345"
					}
				},
				"mswinSQL": {
					"ondemand": "1.23",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.643",
						"yrTerm1Standard.noUpfront": "0.768",
						"yrTerm1Standard.partialUpfront": "0.656",
						"yrTerm3Convertible.allUpfront": "0.608",
						"yrTerm3Convertible.noUpfront": "0.726",
						"yrTerm3Convertible.partialUpfront": "0.620",
						"yrTerm3Standard.allUpfront": "0.487",
						"yrTerm3Standard.partialUpfront": "0.518"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.993",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.484",
						"yrTerm1Standard.noUpfront": "0.578",
						"yrTerm1Standard.partialUpfront": "0.494",
						"yrTerm3Convertible.allUpfront": "0.448",
						"yrTerm3Convertible.noUpfront": "0.536",
						"yrTerm3Convertible.partialUpfront": "0.458",
						"yrTerm3Standard.allUpfront": "0.334",
						"yrTerm3Standard.partialUpfront": "0.355"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 800,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 27,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": false,
		"family": "Storage optimized",
		"generation": "previous",
		"instance_type": "i2.2xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 61,
		"network_performance": "Moderate",
		"placement_group_support": true,
		"pretty_name": "I2 Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "2.001",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.044",
						"yrTerm1Standard.noUpfront": "1.246",
						"yrTerm1Standard.partialUpfront": "1.066",
						"yrTerm3Convertible.allUpfront": "0.940",
						"yrTerm3Convertible.noUpfront": "1.121",
						"yrTerm3Convertible.partialUpfront": "0.959",
						"yrTerm3Standard.allUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.659"
					}
				},
				"mswin": {
					"ondemand": "2.226",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.390",
						"yrTerm1Standard.noUpfront": "1.660",
						"yrTerm1Standard.partialUpfront": "1.419",
						"yrTerm3Convertible.allUpfront": "1.286",
						"yrTerm3Convertible.noUpfront": "1.535",
						"yrTerm3Convertible.partialUpfront": "1.312",
						"yrTerm3Standard.allUpfront": "0.951",
						"yrTerm3Standard.partialUpfront": "1.012"
					}
				},
				"mswinSQL": {
					"ondemand": "4.051",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.887",
						"yrTerm1Standard.noUpfront": "2.253",
						"yrTerm1Standard.partialUpfront": "1.926",
						"yrTerm3Convertible.allUpfront": "1.783",
						"yrTerm3Convertible.noUpfront": "2.128",
						"yrTerm3Convertible.partialUpfront": "1.819",
						"yrTerm3Standard.allUpfront": "1.428",
						"yrTerm3Standard.partialUpfront": "1.520"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.462",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.420",
						"yrTerm1Standard.noUpfront": "1.695",
						"yrTerm1Standard.partialUpfront": "1.449",
						"yrTerm3Convertible.allUpfront": "1.315",
						"yrTerm3Convertible.noUpfront": "1.570",
						"yrTerm3Convertible.partialUpfront": "1.342",
						"yrTerm3Standard.allUpfront": "0.981",
						"yrTerm3Standard.partialUpfront": "1.043"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "2.001",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.044",
						"yrTerm1Standard.noUpfront": "1.247",
						"yrTerm1Standard.partialUpfront": "1.066",
						"yrTerm3Convertible.allUpfront": "0.940",
						"yrTerm3Convertible.noUpfront": "1.122",
						"yrTerm3Convertible.partialUpfront": "0.959",
						"yrTerm3Standard.allUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.659"
					}
				},
				"mswin": {
					"ondemand": "2.369",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.412",
						"yrTerm1Standard.noUpfront": "1.615",
						"yrTerm1Standard.partialUpfront": "1.434",
						"yrTerm3Convertible.allUpfront": "1.308",
						"yrTerm3Convertible.noUpfront": "1.490",
						"yrTerm3Convertible.partialUpfront": "1.327",
						"yrTerm3Standard.allUpfront": "0.987",
						"yrTerm3Standard.partialUpfront": "1.027"
					}
				},
				"mswinSQL": {
					"ondemand": "3.785",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.828",
						"yrTerm1Standard.noUpfront": "3.031",
						"yrTerm1Standard.partialUpfront": "2.850",
						"yrTerm3Convertible.allUpfront": "2.724",
						"yrTerm3Convertible.noUpfront": "2.906",
						"yrTerm3Convertible.partialUpfront": "2.743",
						"yrTerm3Standard.allUpfront": "2.403",
						"yrTerm3Standard.partialUpfront": "2.443"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.515",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.558",
						"yrTerm1Standard.noUpfront": "1.761",
						"yrTerm1Standard.partialUpfront": "1.580",
						"yrTerm3Convertible.allUpfront": "1.454",
						"yrTerm3Convertible.noUpfront": "1.636",
						"yrTerm3Convertible.partialUpfront": "1.473",
						"yrTerm3Standard.allUpfront": "1.133",
						"yrTerm3Standard.partialUpfront": "1.173"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.933",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.974",
						"yrTerm1Standard.noUpfront": "1.163",
						"yrTerm1Standard.partialUpfront": "0.994",
						"yrTerm3Convertible.allUpfront": "0.877",
						"yrTerm3Convertible.noUpfront": "1.047",
						"yrTerm3Convertible.partialUpfront": "0.895",
						"yrTerm3Standard.allUpfront": "0.578",
						"yrTerm3Standard.partialUpfront": "0.615"
					}
				},
				"mswin": {
					"ondemand": "2.301",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.342",
						"yrTerm1Standard.noUpfront": "1.531",
						"yrTerm1Standard.partialUpfront": "1.362",
						"yrTerm3Convertible.allUpfront": "1.245",
						"yrTerm3Convertible.noUpfront": "1.415",
						"yrTerm3Convertible.partialUpfront": "1.263",
						"yrTerm3Standard.allUpfront": "0.946",
						"yrTerm3Standard.partialUpfront": "0.983"
					}
				},
				"mswinSQL": {
					"ondemand": "3.717",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.758",
						"yrTerm1Standard.noUpfront": "2.947",
						"yrTerm1Standard.partialUpfront": "2.778",
						"yrTerm3Convertible.allUpfront": "2.661",
						"yrTerm3Convertible.noUpfront": "2.831",
						"yrTerm3Convertible.partialUpfront": "2.679",
						"yrTerm3Standard.allUpfront": "2.362",
						"yrTerm3Standard.partialUpfront": "2.399"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.447",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.488",
						"yrTerm1Standard.noUpfront": "1.677",
						"yrTerm1Standard.partialUpfront": "1.508",
						"yrTerm3Convertible.allUpfront": "1.391",
						"yrTerm3Convertible.noUpfront": "1.561",
						"yrTerm3Convertible.partialUpfront": "1.409",
						"yrTerm3Standard.allUpfront": "1.092",
						"yrTerm3Standard.partialUpfront": "1.129"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "2.035",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.026",
						"yrTerm1Standard.noUpfront": "1.220",
						"yrTerm1Standard.partialUpfront": "1.046",
						"yrTerm3Convertible.allUpfront": "0.923",
						"yrTerm3Convertible.noUpfront": "1.098",
						"yrTerm3Convertible.partialUpfront": "0.942",
						"yrTerm3Standard.allUpfront": "0.608",
						"yrTerm3Standard.partialUpfront": "0.647"
					}
				},
				"mswin": {
					"ondemand": "2.337",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.364",
						"yrTerm1Standard.noUpfront": "1.628",
						"yrTerm1Standard.partialUpfront": "1.391",
						"yrTerm3Convertible.allUpfront": "1.261",
						"yrTerm3Convertible.noUpfront": "1.506",
						"yrTerm3Convertible.partialUpfront": "1.287",
						"yrTerm3Standard.allUpfront": "0.934",
						"yrTerm3Standard.partialUpfront": "0.993"
					}
				},
				"mswinSQL": {
					"ondemand": "4.254",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.853",
						"yrTerm1Standard.noUpfront": "2.213",
						"yrTerm1Standard.partialUpfront": "1.891",
						"yrTerm3Convertible.allUpfront": "1.751",
						"yrTerm3Convertible.noUpfront": "2.091",
						"yrTerm3Convertible.partialUpfront": "1.786",
						"yrTerm3Standard.allUpfront": "1.403",
						"yrTerm3Standard.partialUpfront": "1.493"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.585",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.394",
						"yrTerm1Standard.noUpfront": "1.664",
						"yrTerm1Standard.partialUpfront": "1.423",
						"yrTerm3Convertible.allUpfront": "1.291",
						"yrTerm3Convertible.noUpfront": "1.542",
						"yrTerm3Convertible.partialUpfront": "1.318",
						"yrTerm3Standard.allUpfront": "0.963",
						"yrTerm3Standard.partialUpfront": "1.025"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "2.035",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.026",
						"yrTerm1Standard.noUpfront": "1.220",
						"yrTerm1Standard.partialUpfront": "1.046",
						"yrTerm3Convertible.allUpfront": "0.923",
						"yrTerm3Convertible.noUpfront": "1.098",
						"yrTerm3Convertible.partialUpfront": "0.942",
						"yrTerm3Standard.allUpfront": "0.608",
						"yrTerm3Standard.partialUpfront": "0.647"
					}
				},
				"mswin": {
					"ondemand": "2.337",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.364",
						"yrTerm1Standard.noUpfront": "1.628",
						"yrTerm1Standard.partialUpfront": "1.391",
						"yrTerm3Convertible.allUpfront": "1.261",
						"yrTerm3Convertible.noUpfront": "1.506",
						"yrTerm3Convertible.partialUpfront": "1.287",
						"yrTerm3Standard.allUpfront": "0.934",
						"yrTerm3Standard.partialUpfront": "0.993"
					}
				},
				"mswinSQL": {
					"ondemand": "4.254",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.853",
						"yrTerm1Standard.noUpfront": "2.213",
						"yrTerm1Standard.partialUpfront": "1.891",
						"yrTerm3Convertible.allUpfront": "1.751",
						"yrTerm3Convertible.noUpfront": "2.091",
						"yrTerm3Convertible.partialUpfront": "1.786",
						"yrTerm3Standard.allUpfront": "1.403",
						"yrTerm3Standard.partialUpfront": "1.493"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.585",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.394",
						"yrTerm1Standard.noUpfront": "1.664",
						"yrTerm1Standard.partialUpfront": "1.423",
						"yrTerm3Convertible.allUpfront": "1.291",
						"yrTerm3Convertible.noUpfront": "1.542",
						"yrTerm3Convertible.partialUpfront": "1.318",
						"yrTerm3Standard.allUpfront": "0.963",
						"yrTerm3Standard.partialUpfront": "1.025"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "2.026",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.933",
						"yrTerm1Standard.noUpfront": "1.112",
						"yrTerm1Standard.partialUpfront": "0.952",
						"yrTerm3Convertible.allUpfront": "0.840",
						"yrTerm3Convertible.noUpfront": "1.001",
						"yrTerm3Convertible.partialUpfront": "0.857",
						"yrTerm3Standard.allUpfront": "0.588",
						"yrTerm3Standard.partialUpfront": "0.626"
					}
				},
				"mswin": {
					"ondemand": "2.267",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.188",
						"yrTerm1Standard.noUpfront": "1.418",
						"yrTerm1Standard.partialUpfront": "1.212",
						"yrTerm3Convertible.allUpfront": "1.095",
						"yrTerm3Convertible.noUpfront": "1.307",
						"yrTerm3Convertible.partialUpfront": "1.117",
						"yrTerm3Standard.allUpfront": "0.814",
						"yrTerm3Standard.partialUpfront": "0.866"
					}
				},
				"mswinSQL": {
					"ondemand": "4.931",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.601",
						"yrTerm1Standard.noUpfront": "3.105",
						"yrTerm1Standard.partialUpfront": "2.654",
						"yrTerm3Convertible.allUpfront": "2.508",
						"yrTerm3Convertible.noUpfront": "2.994",
						"yrTerm3Convertible.partialUpfront": "2.559",
						"yrTerm3Standard.allUpfront": "2.091",
						"yrTerm3Standard.partialUpfront": "2.224"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.223",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.190",
						"yrTerm1Standard.noUpfront": "1.420",
						"yrTerm1Standard.partialUpfront": "1.214",
						"yrTerm3Convertible.allUpfront": "1.096",
						"yrTerm3Convertible.noUpfront": "1.309",
						"yrTerm3Convertible.partialUpfront": "1.119",
						"yrTerm3Standard.allUpfront": "0.835",
						"yrTerm3Standard.partialUpfront": "0.888"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.876",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.864",
						"yrTerm1Standard.noUpfront": "1.030",
						"yrTerm1Standard.partialUpfront": "0.882",
						"yrTerm3Convertible.allUpfront": "0.777",
						"yrTerm3Convertible.noUpfront": "0.927",
						"yrTerm3Convertible.partialUpfront": "0.793",
						"yrTerm3Standard.allUpfront": "0.545",
						"yrTerm3Standard.partialUpfront": "0.580"
					}
				},
				"mswin": {
					"ondemand": "1.946",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.184",
						"yrTerm1Standard.noUpfront": "1.414",
						"yrTerm1Standard.partialUpfront": "1.209",
						"yrTerm3Convertible.allUpfront": "1.098",
						"yrTerm3Convertible.noUpfront": "1.311",
						"yrTerm3Convertible.partialUpfront": "1.120",
						"yrTerm3Standard.allUpfront": "0.811",
						"yrTerm3Standard.partialUpfront": "0.863"
					}
				},
				"mswinSQL": {
					"ondemand": "2.459",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.608",
						"yrTerm1Standard.noUpfront": "1.920",
						"yrTerm1Standard.partialUpfront": "1.641",
						"yrTerm3Convertible.allUpfront": "1.522",
						"yrTerm3Convertible.noUpfront": "1.817",
						"yrTerm3Convertible.partialUpfront": "1.553",
						"yrTerm3Standard.allUpfront": "1.218",
						"yrTerm3Standard.partialUpfront": "1.295"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.986",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.968",
						"yrTerm1Standard.noUpfront": "1.155",
						"yrTerm1Standard.partialUpfront": "0.988",
						"yrTerm3Convertible.allUpfront": "0.881",
						"yrTerm3Convertible.noUpfront": "1.052",
						"yrTerm3Convertible.partialUpfront": "0.900",
						"yrTerm3Standard.allUpfront": "0.669",
						"yrTerm3Standard.partialUpfront": "0.712"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.705",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.712",
						"yrTerm1Standard.noUpfront": "0.848",
						"yrTerm1Standard.partialUpfront": "0.727",
						"yrTerm3Convertible.allUpfront": "0.641",
						"yrTerm3Convertible.noUpfront": "0.763",
						"yrTerm3Convertible.partialUpfront": "0.654",
						"yrTerm3Standard.allUpfront": "0.423",
						"yrTerm3Standard.partialUpfront": "0.450"
					}
				},
				"mswin": {
					"ondemand": "1.946",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.947",
						"yrTerm1Standard.noUpfront": "1.131",
						"yrTerm1Standard.partialUpfront": "0.967",
						"yrTerm3Convertible.allUpfront": "0.876",
						"yrTerm3Convertible.noUpfront": "1.046",
						"yrTerm3Convertible.partialUpfront": "0.894",
						"yrTerm3Standard.allUpfront": "0.648",
						"yrTerm3Standard.partialUpfront": "0.690"
					}
				},
				"mswinSQL": {
					"ondemand": "2.459",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.287",
						"yrTerm1Standard.noUpfront": "1.536",
						"yrTerm1Standard.partialUpfront": "1.313",
						"yrTerm3Convertible.allUpfront": "1.216",
						"yrTerm3Convertible.noUpfront": "1.451",
						"yrTerm3Convertible.partialUpfront": "1.240",
						"yrTerm3Standard.allUpfront": "0.974",
						"yrTerm3Standard.partialUpfront": "1.036"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.986",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.968",
						"yrTerm1Standard.noUpfront": "1.155",
						"yrTerm1Standard.partialUpfront": "0.988",
						"yrTerm3Convertible.allUpfront": "0.897",
						"yrTerm3Convertible.noUpfront": "1.070",
						"yrTerm3Convertible.partialUpfront": "0.915",
						"yrTerm3Standard.allUpfront": "0.669",
						"yrTerm3Standard.partialUpfront": "0.712"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.705",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.712",
						"yrTerm1Standard.noUpfront": "0.848",
						"yrTerm1Standard.partialUpfront": "0.727",
						"yrTerm3Convertible.allUpfront": "0.641",
						"yrTerm3Convertible.noUpfront": "0.763",
						"yrTerm3Convertible.partialUpfront": "0.654",
						"yrTerm3Standard.allUpfront": "0.423",
						"yrTerm3Standard.partialUpfront": "0.450"
					}
				},
				"mswin": {
					"ondemand": "1.946",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.947",
						"yrTerm1Standard.noUpfront": "1.131",
						"yrTerm1Standard.partialUpfront": "0.967",
						"yrTerm3Convertible.allUpfront": "0.876",
						"yrTerm3Convertible.noUpfront": "1.046",
						"yrTerm3Convertible.partialUpfront": "0.894",
						"yrTerm3Standard.allUpfront": "0.648",
						"yrTerm3Standard.partialUpfront": "0.690"
					}
				},
				"mswinSQL": {
					"ondemand": "2.459",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.287",
						"yrTerm1Standard.noUpfront": "1.536",
						"yrTerm1Standard.partialUpfront": "1.313",
						"yrTerm3Convertible.allUpfront": "1.216",
						"yrTerm3Convertible.noUpfront": "1.451",
						"yrTerm3Convertible.partialUpfront": "1.240",
						"yrTerm3Standard.allUpfront": "0.974",
						"yrTerm3Standard.partialUpfront": "1.036"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.986",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.968",
						"yrTerm1Standard.noUpfront": "1.155",
						"yrTerm1Standard.partialUpfront": "0.988",
						"yrTerm3Convertible.allUpfront": "0.897",
						"yrTerm3Convertible.noUpfront": "1.070",
						"yrTerm3Convertible.partialUpfront": "0.915",
						"yrTerm3Standard.allUpfront": "0.669",
						"yrTerm3Standard.partialUpfront": "0.712"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "2.046",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.854",
						"yrTerm1Standard.noUpfront": "1.018",
						"yrTerm1Standard.partialUpfront": "0.872",
						"yrTerm3Convertible.allUpfront": "0.769",
						"yrTerm3Convertible.noUpfront": "0.916",
						"yrTerm3Convertible.partialUpfront": "0.784",
						"yrTerm3Standard.allUpfront": "0.507",
						"yrTerm3Standard.partialUpfront": "0.539"
					}
				},
				"mswin": {
					"ondemand": "2.287",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.090",
						"yrTerm1Standard.noUpfront": "1.301",
						"yrTerm1Standard.partialUpfront": "1.112",
						"yrTerm3Convertible.allUpfront": "1.004",
						"yrTerm3Convertible.noUpfront": "1.199",
						"yrTerm3Convertible.partialUpfront": "1.025",
						"yrTerm3Standard.allUpfront": "0.733",
						"yrTerm3Standard.partialUpfront": "0.780"
					}
				},
				"mswinSQL": {
					"ondemand": "2.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.430",
						"yrTerm1Standard.noUpfront": "1.707",
						"yrTerm1Standard.partialUpfront": "1.459",
						"yrTerm3Convertible.allUpfront": "1.344",
						"yrTerm3Convertible.noUpfront": "1.605",
						"yrTerm3Convertible.partialUpfront": "1.372",
						"yrTerm3Standard.allUpfront": "1.059",
						"yrTerm3Standard.partialUpfront": "1.127"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.327",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.111",
						"yrTerm1Standard.noUpfront": "1.326",
						"yrTerm1Standard.partialUpfront": "1.134",
						"yrTerm3Convertible.allUpfront": "1.026",
						"yrTerm3Convertible.noUpfront": "1.224",
						"yrTerm3Convertible.partialUpfront": "1.047",
						"yrTerm3Standard.allUpfront": "0.753",
						"yrTerm3Standard.partialUpfront": "0.802"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.876",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.864",
						"yrTerm1Standard.noUpfront": "1.030",
						"yrTerm1Standard.partialUpfront": "0.882",
						"yrTerm3Convertible.allUpfront": "0.777",
						"yrTerm3Convertible.noUpfront": "0.927",
						"yrTerm3Convertible.partialUpfront": "0.793",
						"yrTerm3Standard.allUpfront": "0.545",
						"yrTerm3Standard.partialUpfront": "0.580"
					}
				},
				"mswin": {
					"ondemand": "2.116",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.184",
						"yrTerm1Standard.noUpfront": "1.414",
						"yrTerm1Standard.partialUpfront": "1.209",
						"yrTerm3Convertible.allUpfront": "1.098",
						"yrTerm3Convertible.noUpfront": "1.311",
						"yrTerm3Convertible.partialUpfront": "1.120",
						"yrTerm3Standard.allUpfront": "0.811",
						"yrTerm3Standard.partialUpfront": "0.863"
					}
				},
				"mswinSQL": {
					"ondemand": "2.63",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.608",
						"yrTerm1Standard.noUpfront": "1.920",
						"yrTerm1Standard.partialUpfront": "1.641",
						"yrTerm3Convertible.allUpfront": "1.522",
						"yrTerm3Convertible.noUpfront": "1.817",
						"yrTerm3Convertible.partialUpfront": "1.553",
						"yrTerm3Standard.allUpfront": "1.218",
						"yrTerm3Standard.partialUpfront": "1.295"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.968",
						"yrTerm1Standard.noUpfront": "1.155",
						"yrTerm1Standard.partialUpfront": "0.988",
						"yrTerm3Convertible.allUpfront": "0.881",
						"yrTerm3Convertible.noUpfront": "1.052",
						"yrTerm3Convertible.partialUpfront": "0.900",
						"yrTerm3Standard.allUpfront": "0.669",
						"yrTerm3Standard.partialUpfront": "0.712"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.705",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.712",
						"yrTerm1Standard.noUpfront": "0.848",
						"yrTerm1Standard.partialUpfront": "0.727",
						"yrTerm3Convertible.allUpfront": "0.641",
						"yrTerm3Convertible.noUpfront": "0.763",
						"yrTerm3Convertible.partialUpfront": "0.654",
						"yrTerm3Standard.allUpfront": "0.423",
						"yrTerm3Standard.partialUpfront": "0.450"
					}
				},
				"mswin": {
					"ondemand": "1.946",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.947",
						"yrTerm1Standard.noUpfront": "1.131",
						"yrTerm1Standard.partialUpfront": "0.967",
						"yrTerm3Convertible.allUpfront": "0.876",
						"yrTerm3Convertible.noUpfront": "1.046",
						"yrTerm3Convertible.partialUpfront": "0.894",
						"yrTerm3Standard.allUpfront": "0.648",
						"yrTerm3Standard.partialUpfront": "0.690"
					}
				},
				"mswinSQL": {
					"ondemand": "2.459",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.287",
						"yrTerm1Standard.noUpfront": "1.536",
						"yrTerm1Standard.partialUpfront": "1.313",
						"yrTerm3Convertible.allUpfront": "1.216",
						"yrTerm3Convertible.noUpfront": "1.451",
						"yrTerm3Convertible.partialUpfront": "1.240",
						"yrTerm3Standard.allUpfront": "0.974",
						"yrTerm3Standard.partialUpfront": "1.036"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.986",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.968",
						"yrTerm1Standard.noUpfront": "1.155",
						"yrTerm1Standard.partialUpfront": "0.988",
						"yrTerm3Convertible.allUpfront": "0.897",
						"yrTerm3Convertible.noUpfront": "1.070",
						"yrTerm3Convertible.partialUpfront": "0.915",
						"yrTerm3Standard.allUpfront": "0.669",
						"yrTerm3Standard.partialUpfront": "0.712"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 800,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 53,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 16000,
		"ebs_max_bandwidth": 2000,
		"ebs_optimized": true,
		"ebs_throughput": 250,
		"enhanced_networking": false,
		"family": "Storage optimized",
		"generation": "previous",
		"instance_type": "i2.4xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 122,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "I2 Quadruple Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "4.002",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.086",
						"yrTerm1Standard.noUpfront": "2.492",
						"yrTerm1Standard.partialUpfront": "2.129",
						"yrTerm3Convertible.allUpfront": "1.878",
						"yrTerm3Convertible.noUpfront": "2.243",
						"yrTerm3Convertible.partialUpfront": "1.916",
						"yrTerm3Standard.allUpfront": "1.240",
						"yrTerm3Standard.partialUpfront": "1.319"
					}
				},
				"mswin": {
					"ondemand": "4.451",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.777",
						"yrTerm1Standard.noUpfront": "3.316",
						"yrTerm1Standard.partialUpfront": "2.834",
						"yrTerm3Convertible.allUpfront": "2.569",
						"yrTerm3Convertible.noUpfront": "3.067",
						"yrTerm3Convertible.partialUpfront": "2.621",
						"yrTerm3Standard.allUpfront": "1.900",
						"yrTerm3Standard.partialUpfront": "2.022"
					}
				},
				"mswinSQL": {
					"ondemand": "8.103",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.773",
						"yrTerm1Standard.noUpfront": "4.504",
						"yrTerm1Standard.partialUpfront": "3.850",
						"yrTerm3Convertible.allUpfront": "3.564",
						"yrTerm3Convertible.noUpfront": "4.255",
						"yrTerm3Convertible.partialUpfront": "3.637",
						"yrTerm3Standard.allUpfront": "2.856",
						"yrTerm3Standard.partialUpfront": "3.038"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.923",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.840",
						"yrTerm1Standard.noUpfront": "3.390",
						"yrTerm1Standard.partialUpfront": "2.898",
						"yrTerm3Convertible.allUpfront": "2.631",
						"yrTerm3Convertible.noUpfront": "3.141",
						"yrTerm3Convertible.partialUpfront": "2.685",
						"yrTerm3Standard.allUpfront": "1.961",
						"yrTerm3Standard.partialUpfront": "2.086"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "4.002",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.086",
						"yrTerm1Standard.noUpfront": "2.491",
						"yrTerm1Standard.partialUpfront": "2.129",
						"yrTerm3Convertible.allUpfront": "1.878",
						"yrTerm3Convertible.noUpfront": "2.242",
						"yrTerm3Convertible.partialUpfront": "1.916",
						"yrTerm3Standard.allUpfront": "1.240",
						"yrTerm3Standard.partialUpfront": "1.319"
					}
				},
				"mswin": {
					"ondemand": "4.738",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.822",
						"yrTerm1Standard.noUpfront": "3.227",
						"yrTerm1Standard.partialUpfront": "2.865",
						"yrTerm3Convertible.allUpfront": "2.614",
						"yrTerm3Convertible.noUpfront": "2.978",
						"yrTerm3Convertible.partialUpfront": "2.652",
						"yrTerm3Standard.allUpfront": "1.976",
						"yrTerm3Standard.partialUpfront": "2.055"
					}
				},
				"mswinSQL": {
					"ondemand": "7.57",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.654",
						"yrTerm1Standard.noUpfront": "6.059",
						"yrTerm1Standard.partialUpfront": "5.697",
						"yrTerm3Convertible.allUpfront": "5.446",
						"yrTerm3Convertible.noUpfront": "5.810",
						"yrTerm3Convertible.partialUpfront": "5.484",
						"yrTerm3Standard.allUpfront": "4.808",
						"yrTerm3Standard.partialUpfront": "4.887"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.03",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.114",
						"yrTerm1Standard.noUpfront": "3.519",
						"yrTerm1Standard.partialUpfront": "3.157",
						"yrTerm3Convertible.allUpfront": "2.906",
						"yrTerm3Convertible.noUpfront": "3.270",
						"yrTerm3Convertible.partialUpfront": "2.944",
						"yrTerm3Standard.allUpfront": "2.268",
						"yrTerm3Standard.partialUpfront": "2.347"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "3.867",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.947",
						"yrTerm1Standard.noUpfront": "2.324",
						"yrTerm1Standard.partialUpfront": "1.986",
						"yrTerm3Convertible.allUpfront": "1.752",
						"yrTerm3Convertible.noUpfront": "2.092",
						"yrTerm3Convertible.partialUpfront": "1.787",
						"yrTerm3Standard.allUpfront": "1.156",
						"yrTerm3Standard.partialUpfront": "1.230"
					}
				},
				"mswin": {
					"ondemand": "4.603",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.683",
						"yrTerm1Standard.noUpfront": "3.060",
						"yrTerm1Standard.partialUpfront": "2.722",
						"yrTerm3Convertible.allUpfront": "2.488",
						"yrTerm3Convertible.noUpfront": "2.828",
						"yrTerm3Convertible.partialUpfront": "2.523",
						"yrTerm3Standard.allUpfront": "1.892",
						"yrTerm3Standard.partialUpfront": "1.966"
					}
				},
				"mswinSQL": {
					"ondemand": "7.435",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.515",
						"yrTerm1Standard.noUpfront": "5.892",
						"yrTerm1Standard.partialUpfront": "5.554",
						"yrTerm3Convertible.allUpfront": "5.320",
						"yrTerm3Convertible.noUpfront": "5.660",
						"yrTerm3Convertible.partialUpfront": "5.355",
						"yrTerm3Standard.allUpfront": "4.724",
						"yrTerm3Standard.partialUpfront": "4.798"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.895",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.975",
						"yrTerm1Standard.noUpfront": "3.352",
						"yrTerm1Standard.partialUpfront": "3.014",
						"yrTerm3Convertible.allUpfront": "2.780",
						"yrTerm3Convertible.noUpfront": "3.120",
						"yrTerm3Convertible.partialUpfront": "2.815",
						"yrTerm3Standard.allUpfront": "2.184",
						"yrTerm3Standard.partialUpfront": "2.258"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "4.07",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.049",
						"yrTerm1Standard.noUpfront": "2.440",
						"yrTerm1Standard.partialUpfront": "2.091",
						"yrTerm3Convertible.allUpfront": "1.844",
						"yrTerm3Convertible.noUpfront": "2.196",
						"yrTerm3Convertible.partialUpfront": "1.882",
						"yrTerm3Standard.allUpfront": "1.217",
						"yrTerm3Standard.partialUpfront": "1.295"
					}
				},
				"mswin": {
					"ondemand": "4.674",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.726",
						"yrTerm1Standard.noUpfront": "3.255",
						"yrTerm1Standard.partialUpfront": "2.782",
						"yrTerm3Convertible.allUpfront": "2.521",
						"yrTerm3Convertible.noUpfront": "3.011",
						"yrTerm3Convertible.partialUpfront": "2.573",
						"yrTerm3Standard.allUpfront": "1.866",
						"yrTerm3Standard.partialUpfront": "1.986"
					}
				},
				"mswinSQL": {
					"ondemand": "8.508",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.704",
						"yrTerm1Standard.noUpfront": "4.422",
						"yrTerm1Standard.partialUpfront": "3.780",
						"yrTerm3Convertible.allUpfront": "3.499",
						"yrTerm3Convertible.noUpfront": "4.178",
						"yrTerm3Convertible.partialUpfront": "3.571",
						"yrTerm3Standard.allUpfront": "2.804",
						"yrTerm3Standard.partialUpfront": "2.983"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.169",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.788",
						"yrTerm1Standard.noUpfront": "3.328",
						"yrTerm1Standard.partialUpfront": "2.845",
						"yrTerm3Convertible.allUpfront": "2.583",
						"yrTerm3Convertible.noUpfront": "3.084",
						"yrTerm3Convertible.partialUpfront": "2.636",
						"yrTerm3Standard.allUpfront": "1.925",
						"yrTerm3Standard.partialUpfront": "2.048"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "4.07",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.049",
						"yrTerm1Standard.noUpfront": "2.440",
						"yrTerm1Standard.partialUpfront": "2.091",
						"yrTerm3Convertible.allUpfront": "1.844",
						"yrTerm3Convertible.noUpfront": "2.196",
						"yrTerm3Convertible.partialUpfront": "1.882",
						"yrTerm3Standard.allUpfront": "1.217",
						"yrTerm3Standard.partialUpfront": "1.295"
					}
				},
				"mswin": {
					"ondemand": "4.674",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.726",
						"yrTerm1Standard.noUpfront": "3.255",
						"yrTerm1Standard.partialUpfront": "2.782",
						"yrTerm3Convertible.allUpfront": "2.521",
						"yrTerm3Convertible.noUpfront": "3.011",
						"yrTerm3Convertible.partialUpfront": "2.573",
						"yrTerm3Standard.allUpfront": "1.866",
						"yrTerm3Standard.partialUpfront": "1.986"
					}
				},
				"mswinSQL": {
					"ondemand": "8.508",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.704",
						"yrTerm1Standard.noUpfront": "4.422",
						"yrTerm1Standard.partialUpfront": "3.780",
						"yrTerm3Convertible.allUpfront": "3.499",
						"yrTerm3Convertible.noUpfront": "4.178",
						"yrTerm3Convertible.partialUpfront": "3.571",
						"yrTerm3Standard.allUpfront": "2.804",
						"yrTerm3Standard.partialUpfront": "2.983"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.169",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.788",
						"yrTerm1Standard.noUpfront": "3.328",
						"yrTerm1Standard.partialUpfront": "2.845",
						"yrTerm3Convertible.allUpfront": "2.583",
						"yrTerm3Convertible.noUpfront": "3.084",
						"yrTerm3Convertible.partialUpfront": "2.636",
						"yrTerm3Standard.allUpfront": "1.925",
						"yrTerm3Standard.partialUpfront": "2.048"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "4.051",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.865",
						"yrTerm1Standard.noUpfront": "2.224",
						"yrTerm1Standard.partialUpfront": "1.903",
						"yrTerm3Convertible.allUpfront": "1.678",
						"yrTerm3Convertible.noUpfront": "2.002",
						"yrTerm3Convertible.partialUpfront": "1.713",
						"yrTerm3Standard.allUpfront": "1.177",
						"yrTerm3Standard.partialUpfront": "1.252"
					}
				},
				"mswin": {
					"ondemand": "4.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.375",
						"yrTerm1Standard.noUpfront": "2.835",
						"yrTerm1Standard.partialUpfront": "2.423",
						"yrTerm3Convertible.allUpfront": "2.188",
						"yrTerm3Convertible.noUpfront": "2.613",
						"yrTerm3Convertible.partialUpfront": "2.233",
						"yrTerm3Standard.allUpfront": "1.628",
						"yrTerm3Standard.partialUpfront": "1.732"
					}
				},
				"mswinSQL": {
					"ondemand": "8.608",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.544",
						"yrTerm1Standard.noUpfront": "5.425",
						"yrTerm1Standard.partialUpfront": "4.636",
						"yrTerm3Convertible.allUpfront": "4.357",
						"yrTerm3Convertible.noUpfront": "5.203",
						"yrTerm3Convertible.partialUpfront": "4.446",
						"yrTerm3Standard.allUpfront": "3.617",
						"yrTerm3Standard.partialUpfront": "3.848"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.402",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.378",
						"yrTerm1Standard.noUpfront": "2.839",
						"yrTerm1Standard.partialUpfront": "2.427",
						"yrTerm3Convertible.allUpfront": "2.192",
						"yrTerm3Convertible.noUpfront": "2.617",
						"yrTerm3Convertible.partialUpfront": "2.236",
						"yrTerm3Standard.allUpfront": "1.668",
						"yrTerm3Standard.partialUpfront": "1.774"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "3.751",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.727",
						"yrTerm1Standard.noUpfront": "2.060",
						"yrTerm1Standard.partialUpfront": "1.762",
						"yrTerm3Convertible.allUpfront": "1.554",
						"yrTerm3Convertible.noUpfront": "1.854",
						"yrTerm3Convertible.partialUpfront": "1.586",
						"yrTerm3Standard.allUpfront": "1.090",
						"yrTerm3Standard.partialUpfront": "1.159"
					}
				},
				"mswin": {
					"ondemand": "3.891",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.368",
						"yrTerm1Standard.noUpfront": "2.827",
						"yrTerm1Standard.partialUpfront": "2.416",
						"yrTerm3Convertible.allUpfront": "2.195",
						"yrTerm3Convertible.noUpfront": "2.621",
						"yrTerm3Convertible.partialUpfront": "2.240",
						"yrTerm3Standard.allUpfront": "1.621",
						"yrTerm3Standard.partialUpfront": "1.724"
					}
				},
				"mswinSQL": {
					"ondemand": "4.918",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.215",
						"yrTerm1Standard.noUpfront": "3.839",
						"yrTerm1Standard.partialUpfront": "3.281",
						"yrTerm3Convertible.allUpfront": "3.043",
						"yrTerm3Convertible.noUpfront": "3.633",
						"yrTerm3Convertible.partialUpfront": "3.105",
						"yrTerm3Standard.allUpfront": "2.434",
						"yrTerm3Standard.partialUpfront": "2.590"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.971",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.936",
						"yrTerm1Standard.noUpfront": "2.311",
						"yrTerm1Standard.partialUpfront": "1.976",
						"yrTerm3Convertible.allUpfront": "1.763",
						"yrTerm3Convertible.noUpfront": "2.105",
						"yrTerm3Convertible.partialUpfront": "1.800",
						"yrTerm3Standard.allUpfront": "1.337",
						"yrTerm3Standard.partialUpfront": "1.422"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "3.41",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.423",
						"yrTerm1Standard.noUpfront": "1.696",
						"yrTerm1Standard.partialUpfront": "1.452",
						"yrTerm3Convertible.allUpfront": "1.281",
						"yrTerm3Convertible.noUpfront": "1.526",
						"yrTerm3Convertible.partialUpfront": "1.307",
						"yrTerm3Standard.allUpfront": "0.845",
						"yrTerm3Standard.partialUpfront": "0.899"
					}
				},
				"mswin": {
					"ondemand": "3.891",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.893",
						"yrTerm1Standard.noUpfront": "2.260",
						"yrTerm1Standard.partialUpfront": "1.932",
						"yrTerm3Convertible.allUpfront": "1.751",
						"yrTerm3Convertible.noUpfront": "2.090",
						"yrTerm3Convertible.partialUpfront": "1.787",
						"yrTerm3Standard.allUpfront": "1.296",
						"yrTerm3Standard.partialUpfront": "1.379"
					}
				},
				"mswinSQL": {
					"ondemand": "4.918",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.572",
						"yrTerm1Standard.noUpfront": "3.071",
						"yrTerm1Standard.partialUpfront": "2.625",
						"yrTerm3Convertible.allUpfront": "2.430",
						"yrTerm3Convertible.noUpfront": "2.901",
						"yrTerm3Convertible.partialUpfront": "2.480",
						"yrTerm3Standard.allUpfront": "1.947",
						"yrTerm3Standard.partialUpfront": "2.072"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.971",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.936",
						"yrTerm1Standard.noUpfront": "2.311",
						"yrTerm1Standard.partialUpfront": "1.976",
						"yrTerm3Convertible.allUpfront": "1.793",
						"yrTerm3Convertible.noUpfront": "2.141",
						"yrTerm3Convertible.partialUpfront": "1.831",
						"yrTerm3Standard.allUpfront": "1.337",
						"yrTerm3Standard.partialUpfront": "1.422"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "3.41",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.423",
						"yrTerm1Standard.noUpfront": "1.696",
						"yrTerm1Standard.partialUpfront": "1.452",
						"yrTerm3Convertible.allUpfront": "1.281",
						"yrTerm3Convertible.noUpfront": "1.526",
						"yrTerm3Convertible.partialUpfront": "1.307",
						"yrTerm3Standard.allUpfront": "0.845",
						"yrTerm3Standard.partialUpfront": "0.899"
					}
				},
				"mswin": {
					"ondemand": "3.891",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.893",
						"yrTerm1Standard.noUpfront": "2.260",
						"yrTerm1Standard.partialUpfront": "1.932",
						"yrTerm3Convertible.allUpfront": "1.751",
						"yrTerm3Convertible.noUpfront": "2.090",
						"yrTerm3Convertible.partialUpfront": "1.787",
						"yrTerm3Standard.allUpfront": "1.296",
						"yrTerm3Standard.partialUpfront": "1.379"
					}
				},
				"mswinSQL": {
					"ondemand": "4.918",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.572",
						"yrTerm1Standard.noUpfront": "3.071",
						"yrTerm1Standard.partialUpfront": "2.625",
						"yrTerm3Convertible.allUpfront": "2.430",
						"yrTerm3Convertible.noUpfront": "2.901",
						"yrTerm3Convertible.partialUpfront": "2.480",
						"yrTerm3Standard.allUpfront": "1.947",
						"yrTerm3Standard.partialUpfront": "2.072"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.971",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.936",
						"yrTerm1Standard.noUpfront": "2.311",
						"yrTerm1Standard.partialUpfront": "1.976",
						"yrTerm3Convertible.allUpfront": "1.793",
						"yrTerm3Convertible.noUpfront": "2.141",
						"yrTerm3Convertible.partialUpfront": "1.831",
						"yrTerm3Standard.allUpfront": "1.337",
						"yrTerm3Standard.partialUpfront": "1.422"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "4.092",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.708",
						"yrTerm1Standard.noUpfront": "2.036",
						"yrTerm1Standard.partialUpfront": "1.742",
						"yrTerm3Convertible.allUpfront": "1.537",
						"yrTerm3Convertible.noUpfront": "1.832",
						"yrTerm3Convertible.partialUpfront": "1.568",
						"yrTerm3Standard.allUpfront": "1.014",
						"yrTerm3Standard.partialUpfront": "1.079"
					}
				},
				"mswin": {
					"ondemand": "4.573",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.179",
						"yrTerm1Standard.noUpfront": "2.601",
						"yrTerm1Standard.partialUpfront": "2.223",
						"yrTerm3Convertible.allUpfront": "2.008",
						"yrTerm3Convertible.noUpfront": "2.397",
						"yrTerm3Convertible.partialUpfront": "2.049",
						"yrTerm3Standard.allUpfront": "1.466",
						"yrTerm3Standard.partialUpfront": "1.560"
					}
				},
				"mswinSQL": {
					"ondemand": "5.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.857",
						"yrTerm1Standard.noUpfront": "3.411",
						"yrTerm1Standard.partialUpfront": "2.916",
						"yrTerm3Convertible.allUpfront": "2.687",
						"yrTerm3Convertible.noUpfront": "3.207",
						"yrTerm3Convertible.partialUpfront": "2.741",
						"yrTerm3Standard.allUpfront": "2.117",
						"yrTerm3Standard.partialUpfront": "2.252"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.653",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.222",
						"yrTerm1Standard.noUpfront": "2.653",
						"yrTerm1Standard.partialUpfront": "2.267",
						"yrTerm3Convertible.allUpfront": "2.051",
						"yrTerm3Convertible.noUpfront": "2.449",
						"yrTerm3Convertible.partialUpfront": "2.093",
						"yrTerm3Standard.allUpfront": "1.506",
						"yrTerm3Standard.partialUpfront": "1.603"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "3.751",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.727",
						"yrTerm1Standard.noUpfront": "2.060",
						"yrTerm1Standard.partialUpfront": "1.762",
						"yrTerm3Convertible.allUpfront": "1.554",
						"yrTerm3Convertible.noUpfront": "1.854",
						"yrTerm3Convertible.partialUpfront": "1.586",
						"yrTerm3Standard.allUpfront": "1.090",
						"yrTerm3Standard.partialUpfront": "1.159"
					}
				},
				"mswin": {
					"ondemand": "4.232",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.368",
						"yrTerm1Standard.noUpfront": "2.827",
						"yrTerm1Standard.partialUpfront": "2.416",
						"yrTerm3Convertible.allUpfront": "2.195",
						"yrTerm3Convertible.noUpfront": "2.621",
						"yrTerm3Convertible.partialUpfront": "2.240",
						"yrTerm3Standard.allUpfront": "1.621",
						"yrTerm3Standard.partialUpfront": "1.724"
					}
				},
				"mswinSQL": {
					"ondemand": "5.259",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.215",
						"yrTerm1Standard.noUpfront": "3.839",
						"yrTerm1Standard.partialUpfront": "3.281",
						"yrTerm3Convertible.allUpfront": "3.043",
						"yrTerm3Convertible.noUpfront": "3.633",
						"yrTerm3Convertible.partialUpfront": "3.105",
						"yrTerm3Standard.allUpfront": "2.434",
						"yrTerm3Standard.partialUpfront": "2.590"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.312",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.936",
						"yrTerm1Standard.noUpfront": "2.311",
						"yrTerm1Standard.partialUpfront": "1.976",
						"yrTerm3Convertible.allUpfront": "1.763",
						"yrTerm3Convertible.noUpfront": "2.105",
						"yrTerm3Convertible.partialUpfront": "1.800",
						"yrTerm3Standard.allUpfront": "1.337",
						"yrTerm3Standard.partialUpfront": "1.422"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "3.41",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.423",
						"yrTerm1Standard.noUpfront": "1.696",
						"yrTerm1Standard.partialUpfront": "1.452",
						"yrTerm3Convertible.allUpfront": "1.281",
						"yrTerm3Convertible.noUpfront": "1.526",
						"yrTerm3Convertible.partialUpfront": "1.307",
						"yrTerm3Standard.allUpfront": "0.845",
						"yrTerm3Standard.partialUpfront": "0.899"
					}
				},
				"mswin": {
					"ondemand": "3.891",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.893",
						"yrTerm1Standard.noUpfront": "2.260",
						"yrTerm1Standard.partialUpfront": "1.932",
						"yrTerm3Convertible.allUpfront": "1.751",
						"yrTerm3Convertible.noUpfront": "2.090",
						"yrTerm3Convertible.partialUpfront": "1.787",
						"yrTerm3Standard.allUpfront": "1.296",
						"yrTerm3Standard.partialUpfront": "1.379"
					}
				},
				"mswinSQL": {
					"ondemand": "4.918",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.572",
						"yrTerm1Standard.noUpfront": "3.071",
						"yrTerm1Standard.partialUpfront": "2.625",
						"yrTerm3Convertible.allUpfront": "2.430",
						"yrTerm3Convertible.noUpfront": "2.901",
						"yrTerm3Convertible.partialUpfront": "2.480",
						"yrTerm3Standard.allUpfront": "1.947",
						"yrTerm3Standard.partialUpfront": "2.072"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.971",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.936",
						"yrTerm1Standard.noUpfront": "2.311",
						"yrTerm1Standard.partialUpfront": "1.976",
						"yrTerm3Convertible.allUpfront": "1.793",
						"yrTerm3Convertible.noUpfront": "2.141",
						"yrTerm3Convertible.partialUpfront": "1.831",
						"yrTerm3Standard.allUpfront": "1.337",
						"yrTerm3Standard.partialUpfront": "1.422"
					}
				}
			}
		},
		"storage": {
			"devices": 4,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 800,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 104,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": true,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "Storage optimized",
		"generation": "previous",
		"instance_type": "i2.8xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 244,
		"network_performance": "10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "I2 Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "8.004",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.174",
						"yrTerm1Standard.noUpfront": "4.984",
						"yrTerm1Standard.partialUpfront": "4.260",
						"yrTerm3Convertible.allUpfront": "3.757",
						"yrTerm3Convertible.noUpfront": "4.486",
						"yrTerm3Convertible.partialUpfront": "3.834",
						"yrTerm3Standard.allUpfront": "2.479",
						"yrTerm3Standard.partialUpfront": "2.637"
					}
				},
				"mswin": {
					"ondemand": "8.903",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.554",
						"yrTerm1Standard.noUpfront": "6.631",
						"yrTerm1Standard.partialUpfront": "5.668",
						"yrTerm3Convertible.allUpfront": "5.137",
						"yrTerm3Convertible.noUpfront": "6.133",
						"yrTerm3Convertible.partialUpfront": "5.242",
						"yrTerm3Standard.allUpfront": "3.803",
						"yrTerm3Standard.partialUpfront": "4.045"
					}
				},
				"mswinSQL": {
					"ondemand": "16.206",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.546",
						"yrTerm1Standard.noUpfront": "9.009",
						"yrTerm1Standard.partialUpfront": "7.700",
						"yrTerm3Convertible.allUpfront": "7.128",
						"yrTerm3Convertible.noUpfront": "8.511",
						"yrTerm3Convertible.partialUpfront": "7.274",
						"yrTerm3Standard.allUpfront": "5.712",
						"yrTerm3Standard.partialUpfront": "6.076"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.846",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.680",
						"yrTerm1Standard.noUpfront": "6.781",
						"yrTerm1Standard.partialUpfront": "5.796",
						"yrTerm3Convertible.allUpfront": "5.262",
						"yrTerm3Convertible.noUpfront": "6.283",
						"yrTerm3Convertible.partialUpfront": "5.370",
						"yrTerm3Standard.allUpfront": "3.920",
						"yrTerm3Standard.partialUpfront": "4.170"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "8.004",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.175",
						"yrTerm1Standard.noUpfront": "4.984",
						"yrTerm1Standard.partialUpfront": "4.260",
						"yrTerm3Convertible.allUpfront": "3.757",
						"yrTerm3Convertible.noUpfront": "4.485",
						"yrTerm3Convertible.partialUpfront": "3.834",
						"yrTerm3Standard.allUpfront": "2.479",
						"yrTerm3Standard.partialUpfront": "2.637"
					}
				},
				"mswin": {
					"ondemand": "9.476",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.647",
						"yrTerm1Standard.noUpfront": "6.456",
						"yrTerm1Standard.partialUpfront": "5.732",
						"yrTerm3Convertible.allUpfront": "5.229",
						"yrTerm3Convertible.noUpfront": "5.957",
						"yrTerm3Convertible.partialUpfront": "5.306",
						"yrTerm3Standard.allUpfront": "3.951",
						"yrTerm3Standard.partialUpfront": "4.109"
					}
				},
				"mswinSQL": {
					"ondemand": "15.14",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.311",
						"yrTerm1Standard.noUpfront": "12.120",
						"yrTerm1Standard.partialUpfront": "11.396",
						"yrTerm3Convertible.allUpfront": "10.893",
						"yrTerm3Convertible.noUpfront": "11.621",
						"yrTerm3Convertible.partialUpfront": "10.970",
						"yrTerm3Standard.allUpfront": "9.615",
						"yrTerm3Standard.partialUpfront": "9.773"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "10.06",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.231",
						"yrTerm1Standard.noUpfront": "7.040",
						"yrTerm1Standard.partialUpfront": "6.316",
						"yrTerm3Convertible.allUpfront": "5.813",
						"yrTerm3Convertible.noUpfront": "6.541",
						"yrTerm3Convertible.partialUpfront": "5.890",
						"yrTerm3Standard.allUpfront": "4.535",
						"yrTerm3Standard.partialUpfront": "4.693"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "7.733",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.893",
						"yrTerm1Standard.noUpfront": "4.648",
						"yrTerm1Standard.partialUpfront": "3.972",
						"yrTerm3Convertible.allUpfront": "3.504",
						"yrTerm3Convertible.noUpfront": "4.183",
						"yrTerm3Convertible.partialUpfront": "3.575",
						"yrTerm3Standard.allUpfront": "2.312",
						"yrTerm3Standard.partialUpfront": "2.460"
					}
				},
				"mswin": {
					"ondemand": "9.205",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.365",
						"yrTerm1Standard.noUpfront": "6.120",
						"yrTerm1Standard.partialUpfront": "5.444",
						"yrTerm3Convertible.allUpfront": "4.976",
						"yrTerm3Convertible.noUpfront": "5.655",
						"yrTerm3Convertible.partialUpfront": "5.047",
						"yrTerm3Standard.allUpfront": "3.784",
						"yrTerm3Standard.partialUpfront": "3.932"
					}
				},
				"mswinSQL": {
					"ondemand": "14.869",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.029",
						"yrTerm1Standard.noUpfront": "11.784",
						"yrTerm1Standard.partialUpfront": "11.108",
						"yrTerm3Convertible.allUpfront": "10.640",
						"yrTerm3Convertible.noUpfront": "11.319",
						"yrTerm3Convertible.partialUpfront": "10.711",
						"yrTerm3Standard.allUpfront": "9.448",
						"yrTerm3Standard.partialUpfront": "9.596"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.789",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.949",
						"yrTerm1Standard.noUpfront": "6.704",
						"yrTerm1Standard.partialUpfront": "6.028",
						"yrTerm3Convertible.allUpfront": "5.560",
						"yrTerm3Convertible.noUpfront": "6.239",
						"yrTerm3Convertible.partialUpfront": "5.631",
						"yrTerm3Standard.allUpfront": "4.368",
						"yrTerm3Standard.partialUpfront": "4.516"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "8.14",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.098",
						"yrTerm1Standard.noUpfront": "4.880",
						"yrTerm1Standard.partialUpfront": "4.181",
						"yrTerm3Convertible.allUpfront": "3.688",
						"yrTerm3Convertible.noUpfront": "4.392",
						"yrTerm3Convertible.partialUpfront": "3.763",
						"yrTerm3Standard.allUpfront": "2.434",
						"yrTerm3Standard.partialUpfront": "2.589"
					}
				},
				"mswin": {
					"ondemand": "9.348",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.453",
						"yrTerm1Standard.noUpfront": "6.510",
						"yrTerm1Standard.partialUpfront": "5.564",
						"yrTerm3Convertible.allUpfront": "5.043",
						"yrTerm3Convertible.noUpfront": "6.022",
						"yrTerm3Convertible.partialUpfront": "5.146",
						"yrTerm3Standard.allUpfront": "3.734",
						"yrTerm3Standard.partialUpfront": "3.972"
					}
				},
				"mswinSQL": {
					"ondemand": "17.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.408",
						"yrTerm1Standard.noUpfront": "8.845",
						"yrTerm1Standard.partialUpfront": "7.560",
						"yrTerm3Convertible.allUpfront": "6.999",
						"yrTerm3Convertible.noUpfront": "8.357",
						"yrTerm3Convertible.partialUpfront": "7.141",
						"yrTerm3Standard.allUpfront": "5.608",
						"yrTerm3Standard.partialUpfront": "5.966"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "10.338",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.576",
						"yrTerm1Standard.noUpfront": "6.657",
						"yrTerm1Standard.partialUpfront": "5.690",
						"yrTerm3Convertible.allUpfront": "5.166",
						"yrTerm3Convertible.noUpfront": "6.169",
						"yrTerm3Convertible.partialUpfront": "5.272",
						"yrTerm3Standard.allUpfront": "3.849",
						"yrTerm3Standard.partialUpfront": "4.095"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "8.14",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.098",
						"yrTerm1Standard.noUpfront": "4.880",
						"yrTerm1Standard.partialUpfront": "4.181",
						"yrTerm3Convertible.allUpfront": "3.688",
						"yrTerm3Convertible.noUpfront": "4.392",
						"yrTerm3Convertible.partialUpfront": "3.763",
						"yrTerm3Standard.allUpfront": "2.434",
						"yrTerm3Standard.partialUpfront": "2.589"
					}
				},
				"mswin": {
					"ondemand": "9.348",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.453",
						"yrTerm1Standard.noUpfront": "6.510",
						"yrTerm1Standard.partialUpfront": "5.564",
						"yrTerm3Convertible.allUpfront": "5.043",
						"yrTerm3Convertible.noUpfront": "6.022",
						"yrTerm3Convertible.partialUpfront": "5.146",
						"yrTerm3Standard.allUpfront": "3.734",
						"yrTerm3Standard.partialUpfront": "3.972"
					}
				},
				"mswinSQL": {
					"ondemand": "17.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.408",
						"yrTerm1Standard.noUpfront": "8.845",
						"yrTerm1Standard.partialUpfront": "7.560",
						"yrTerm3Convertible.allUpfront": "6.999",
						"yrTerm3Convertible.noUpfront": "8.357",
						"yrTerm3Convertible.partialUpfront": "7.141",
						"yrTerm3Standard.allUpfront": "5.608",
						"yrTerm3Standard.partialUpfront": "5.966"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "10.338",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.576",
						"yrTerm1Standard.noUpfront": "6.657",
						"yrTerm1Standard.partialUpfront": "5.690",
						"yrTerm3Convertible.allUpfront": "5.166",
						"yrTerm3Convertible.noUpfront": "6.169",
						"yrTerm3Convertible.partialUpfront": "5.272",
						"yrTerm3Standard.allUpfront": "3.849",
						"yrTerm3Standard.partialUpfront": "4.095"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "8.102",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.730",
						"yrTerm1Standard.noUpfront": "4.448",
						"yrTerm1Standard.partialUpfront": "3.806",
						"yrTerm3Convertible.allUpfront": "3.357",
						"yrTerm3Convertible.noUpfront": "4.003",
						"yrTerm3Convertible.partialUpfront": "3.425",
						"yrTerm3Standard.allUpfront": "2.353",
						"yrTerm3Standard.partialUpfront": "2.504"
					}
				},
				"mswin": {
					"ondemand": "9.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.750",
						"yrTerm1Standard.noUpfront": "5.670",
						"yrTerm1Standard.partialUpfront": "4.847",
						"yrTerm3Convertible.allUpfront": "4.377",
						"yrTerm3Convertible.noUpfront": "5.225",
						"yrTerm3Convertible.partialUpfront": "4.466",
						"yrTerm3Standard.allUpfront": "3.256",
						"yrTerm3Standard.partialUpfront": "3.463"
					}
				},
				"mswinSQL": {
					"ondemand": "16.439",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.679",
						"yrTerm1Standard.noUpfront": "10.362",
						"yrTerm1Standard.partialUpfront": "8.856",
						"yrTerm3Convertible.allUpfront": "8.306",
						"yrTerm3Convertible.noUpfront": "9.917",
						"yrTerm3Convertible.partialUpfront": "8.476",
						"yrTerm3Standard.allUpfront": "6.885",
						"yrTerm3Standard.partialUpfront": "7.324"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.775",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.756",
						"yrTerm1Standard.noUpfront": "5.678",
						"yrTerm1Standard.partialUpfront": "4.853",
						"yrTerm3Convertible.allUpfront": "4.383",
						"yrTerm3Convertible.noUpfront": "5.233",
						"yrTerm3Convertible.partialUpfront": "4.472",
						"yrTerm3Standard.allUpfront": "3.337",
						"yrTerm3Standard.partialUpfront": "3.550"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "7.502",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.454",
						"yrTerm1Standard.noUpfront": "4.120",
						"yrTerm1Standard.partialUpfront": "3.524",
						"yrTerm3Convertible.allUpfront": "3.108",
						"yrTerm3Convertible.noUpfront": "3.708",
						"yrTerm3Convertible.partialUpfront": "3.172",
						"yrTerm3Standard.allUpfront": "2.179",
						"yrTerm3Standard.partialUpfront": "2.318"
					}
				},
				"mswin": {
					"ondemand": "7.782",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.736",
						"yrTerm1Standard.noUpfront": "5.654",
						"yrTerm1Standard.partialUpfront": "4.832",
						"yrTerm3Convertible.allUpfront": "4.390",
						"yrTerm3Convertible.noUpfront": "5.242",
						"yrTerm3Convertible.partialUpfront": "4.480",
						"yrTerm3Standard.allUpfront": "3.241",
						"yrTerm3Standard.partialUpfront": "3.448"
					}
				},
				"mswinSQL": {
					"ondemand": "9.836",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.431",
						"yrTerm1Standard.noUpfront": "7.677",
						"yrTerm1Standard.partialUpfront": "6.562",
						"yrTerm3Convertible.allUpfront": "6.085",
						"yrTerm3Convertible.noUpfront": "7.265",
						"yrTerm3Convertible.partialUpfront": "6.209",
						"yrTerm3Standard.allUpfront": "4.868",
						"yrTerm3Standard.partialUpfront": "5.179"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.942",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.872",
						"yrTerm1Standard.noUpfront": "4.623",
						"yrTerm1Standard.partialUpfront": "3.952",
						"yrTerm3Convertible.allUpfront": "3.527",
						"yrTerm3Convertible.noUpfront": "4.211",
						"yrTerm3Convertible.partialUpfront": "3.599",
						"yrTerm3Standard.allUpfront": "2.673",
						"yrTerm3Standard.partialUpfront": "2.844"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "6.82",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.846",
						"yrTerm1Standard.noUpfront": "3.392",
						"yrTerm1Standard.partialUpfront": "2.904",
						"yrTerm3Convertible.allUpfront": "2.561",
						"yrTerm3Convertible.noUpfront": "3.053",
						"yrTerm3Convertible.partialUpfront": "2.614",
						"yrTerm3Standard.allUpfront": "1.690",
						"yrTerm3Standard.partialUpfront": "1.798"
					}
				},
				"mswin": {
					"ondemand": "7.782",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.787",
						"yrTerm1Standard.noUpfront": "4.521",
						"yrTerm1Standard.partialUpfront": "3.864",
						"yrTerm3Convertible.allUpfront": "3.502",
						"yrTerm3Convertible.noUpfront": "4.182",
						"yrTerm3Convertible.partialUpfront": "3.574",
						"yrTerm3Standard.allUpfront": "2.593",
						"yrTerm3Standard.partialUpfront": "2.758"
					}
				},
				"mswinSQL": {
					"ondemand": "9.836",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.145",
						"yrTerm1Standard.noUpfront": "6.142",
						"yrTerm1Standard.partialUpfront": "5.250",
						"yrTerm3Convertible.allUpfront": "4.860",
						"yrTerm3Convertible.noUpfront": "5.803",
						"yrTerm3Convertible.partialUpfront": "4.959",
						"yrTerm3Standard.allUpfront": "3.894",
						"yrTerm3Standard.partialUpfront": "4.143"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.942",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.872",
						"yrTerm1Standard.noUpfront": "4.623",
						"yrTerm1Standard.partialUpfront": "3.952",
						"yrTerm3Convertible.allUpfront": "3.587",
						"yrTerm3Convertible.noUpfront": "4.284",
						"yrTerm3Convertible.partialUpfront": "3.661",
						"yrTerm3Standard.allUpfront": "2.673",
						"yrTerm3Standard.partialUpfront": "2.844"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "6.82",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.846",
						"yrTerm1Standard.noUpfront": "3.392",
						"yrTerm1Standard.partialUpfront": "2.904",
						"yrTerm3Convertible.allUpfront": "2.561",
						"yrTerm3Convertible.noUpfront": "3.053",
						"yrTerm3Convertible.partialUpfront": "2.614",
						"yrTerm3Standard.allUpfront": "1.690",
						"yrTerm3Standard.partialUpfront": "1.798"
					}
				},
				"mswin": {
					"ondemand": "7.782",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.787",
						"yrTerm1Standard.noUpfront": "4.521",
						"yrTerm1Standard.partialUpfront": "3.864",
						"yrTerm3Convertible.allUpfront": "3.502",
						"yrTerm3Convertible.noUpfront": "4.182",
						"yrTerm3Convertible.partialUpfront": "3.574",
						"yrTerm3Standard.allUpfront": "2.593",
						"yrTerm3Standard.partialUpfront": "2.758"
					}
				},
				"mswinSQL": {
					"ondemand": "9.836",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.145",
						"yrTerm1Standard.noUpfront": "6.142",
						"yrTerm1Standard.partialUpfront": "5.250",
						"yrTerm3Convertible.allUpfront": "4.860",
						"yrTerm3Convertible.noUpfront": "5.803",
						"yrTerm3Convertible.partialUpfront": "4.959",
						"yrTerm3Standard.allUpfront": "3.894",
						"yrTerm3Standard.partialUpfront": "4.143"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.942",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.872",
						"yrTerm1Standard.noUpfront": "4.623",
						"yrTerm1Standard.partialUpfront": "3.952",
						"yrTerm3Convertible.allUpfront": "3.587",
						"yrTerm3Convertible.noUpfront": "4.284",
						"yrTerm3Convertible.partialUpfront": "3.661",
						"yrTerm3Standard.allUpfront": "2.673",
						"yrTerm3Standard.partialUpfront": "2.844"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "8.184",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.415",
						"yrTerm1Standard.noUpfront": "4.072",
						"yrTerm1Standard.partialUpfront": "3.485",
						"yrTerm3Convertible.allUpfront": "3.074",
						"yrTerm3Convertible.noUpfront": "3.665",
						"yrTerm3Convertible.partialUpfront": "3.136",
						"yrTerm3Standard.allUpfront": "2.028",
						"yrTerm3Standard.partialUpfront": "2.157"
					}
				},
				"mswin": {
					"ondemand": "9.146",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.357",
						"yrTerm1Standard.noUpfront": "5.201",
						"yrTerm1Standard.partialUpfront": "4.446",
						"yrTerm3Convertible.allUpfront": "4.015",
						"yrTerm3Convertible.noUpfront": "4.794",
						"yrTerm3Convertible.partialUpfront": "4.097",
						"yrTerm3Standard.allUpfront": "2.931",
						"yrTerm3Standard.partialUpfront": "3.118"
					}
				},
				"mswinSQL": {
					"ondemand": "11.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.715",
						"yrTerm1Standard.noUpfront": "6.823",
						"yrTerm1Standard.partialUpfront": "5.831",
						"yrTerm3Convertible.allUpfront": "5.373",
						"yrTerm3Convertible.noUpfront": "6.416",
						"yrTerm3Convertible.partialUpfront": "5.483",
						"yrTerm3Standard.allUpfront": "4.233",
						"yrTerm3Standard.partialUpfront": "4.503"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.306",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.443",
						"yrTerm1Standard.noUpfront": "5.304",
						"yrTerm1Standard.partialUpfront": "4.533",
						"yrTerm3Convertible.allUpfront": "4.101",
						"yrTerm3Convertible.noUpfront": "4.897",
						"yrTerm3Convertible.partialUpfront": "4.185",
						"yrTerm3Standard.allUpfront": "3.012",
						"yrTerm3Standard.partialUpfront": "3.204"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "7.502",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.454",
						"yrTerm1Standard.noUpfront": "4.120",
						"yrTerm1Standard.partialUpfront": "3.524",
						"yrTerm3Convertible.allUpfront": "3.108",
						"yrTerm3Convertible.noUpfront": "3.708",
						"yrTerm3Convertible.partialUpfront": "3.172",
						"yrTerm3Standard.allUpfront": "2.179",
						"yrTerm3Standard.partialUpfront": "2.318"
					}
				},
				"mswin": {
					"ondemand": "8.464",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.736",
						"yrTerm1Standard.noUpfront": "5.654",
						"yrTerm1Standard.partialUpfront": "4.832",
						"yrTerm3Convertible.allUpfront": "4.390",
						"yrTerm3Convertible.noUpfront": "5.242",
						"yrTerm3Convertible.partialUpfront": "4.480",
						"yrTerm3Standard.allUpfront": "3.241",
						"yrTerm3Standard.partialUpfront": "3.448"
					}
				},
				"mswinSQL": {
					"ondemand": "10.518",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.431",
						"yrTerm1Standard.noUpfront": "7.677",
						"yrTerm1Standard.partialUpfront": "6.562",
						"yrTerm3Convertible.allUpfront": "6.085",
						"yrTerm3Convertible.noUpfront": "7.265",
						"yrTerm3Convertible.partialUpfront": "6.209",
						"yrTerm3Standard.allUpfront": "4.868",
						"yrTerm3Standard.partialUpfront": "5.179"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.872",
						"yrTerm1Standard.noUpfront": "4.623",
						"yrTerm1Standard.partialUpfront": "3.952",
						"yrTerm3Convertible.allUpfront": "3.527",
						"yrTerm3Convertible.noUpfront": "4.211",
						"yrTerm3Convertible.partialUpfront": "3.599",
						"yrTerm3Standard.allUpfront": "2.673",
						"yrTerm3Standard.partialUpfront": "2.844"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "6.82",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.846",
						"yrTerm1Standard.noUpfront": "3.392",
						"yrTerm1Standard.partialUpfront": "2.904",
						"yrTerm3Convertible.allUpfront": "2.561",
						"yrTerm3Convertible.noUpfront": "3.053",
						"yrTerm3Convertible.partialUpfront": "2.614",
						"yrTerm3Standard.allUpfront": "1.690",
						"yrTerm3Standard.partialUpfront": "1.798"
					}
				},
				"mswin": {
					"ondemand": "7.782",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.787",
						"yrTerm1Standard.noUpfront": "4.521",
						"yrTerm1Standard.partialUpfront": "3.864",
						"yrTerm3Convertible.allUpfront": "3.502",
						"yrTerm3Convertible.noUpfront": "4.182",
						"yrTerm3Convertible.partialUpfront": "3.574",
						"yrTerm3Standard.allUpfront": "2.593",
						"yrTerm3Standard.partialUpfront": "2.758"
					}
				},
				"mswinSQL": {
					"ondemand": "9.836",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.145",
						"yrTerm1Standard.noUpfront": "6.142",
						"yrTerm1Standard.partialUpfront": "5.250",
						"yrTerm3Convertible.allUpfront": "4.860",
						"yrTerm3Convertible.noUpfront": "5.803",
						"yrTerm3Convertible.partialUpfront": "4.959",
						"yrTerm3Standard.allUpfront": "3.894",
						"yrTerm3Standard.partialUpfront": "4.143"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.942",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.872",
						"yrTerm1Standard.noUpfront": "4.623",
						"yrTerm1Standard.partialUpfront": "3.952",
						"yrTerm3Convertible.allUpfront": "3.587",
						"yrTerm3Convertible.noUpfront": "4.284",
						"yrTerm3Convertible.partialUpfront": "3.661",
						"yrTerm3Standard.allUpfront": "2.673",
						"yrTerm3Standard.partialUpfront": "2.844"
					}
				}
			}
		},
		"storage": {
			"devices": 8,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 800,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 32,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 35,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "Storage optimized",
		"generation": "previous",
		"instance_type": "hi1.4xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 60.5,
		"network_performance": "10 Gigabit",
		"placement_group_support": false,
		"pretty_name": "HI1. High I/O Quadruple Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "3.276",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.573",
						"yrTerm1Standard.noUpfront": "1.877",
						"yrTerm1Standard.partialUpfront": "1.605",
						"yrTerm3Standard.allUpfront": "1.118",
						"yrTerm3Standard.partialUpfront": "1.189"
					}
				},
				"mswin": {
					"ondemand": "3.686",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.976",
						"yrTerm1Standard.noUpfront": "2.358",
						"yrTerm1Standard.partialUpfront": "2.016",
						"yrTerm3Standard.allUpfront": "1.504",
						"yrTerm3Standard.partialUpfront": "1.600"
					}
				},
				"mswinSQL": {
					"ondemand": "6.829",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.060",
						"yrTerm1Standard.noUpfront": "6.041",
						"yrTerm1Standard.partialUpfront": "5.163",
						"yrTerm3Standard.allUpfront": "4.461",
						"yrTerm3Standard.partialUpfront": "4.746"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.366",
						"yrTerm1Standard.noUpfront": "2.825",
						"yrTerm1Standard.partialUpfront": "2.415",
						"yrTerm3Standard.allUpfront": "1.878",
						"yrTerm3Standard.partialUpfront": "1.998"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "3.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.423",
						"yrTerm1Standard.noUpfront": "1.698",
						"yrTerm1Standard.partialUpfront": "1.452",
						"yrTerm3Standard.allUpfront": "0.845",
						"yrTerm3Standard.partialUpfront": "0.899"
					}
				},
				"mswin": {
					"ondemand": "3.58",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.893",
						"yrTerm1Standard.noUpfront": "2.260",
						"yrTerm1Standard.partialUpfront": "1.932",
						"yrTerm3Standard.allUpfront": "1.296",
						"yrTerm3Standard.partialUpfront": "1.379"
					}
				},
				"mswinSQL": {
					"ondemand": "4.607",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.572",
						"yrTerm1Standard.noUpfront": "3.071",
						"yrTerm1Standard.partialUpfront": "2.625",
						"yrTerm3Standard.allUpfront": "1.947",
						"yrTerm3Standard.partialUpfront": "2.072"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.66",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.937",
						"yrTerm1Standard.noUpfront": "2.312",
						"yrTerm1Standard.partialUpfront": "1.976",
						"yrTerm3Standard.allUpfront": "1.337",
						"yrTerm3Standard.partialUpfront": "1.422"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "3.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.423",
						"yrTerm1Standard.noUpfront": "1.698",
						"yrTerm1Standard.partialUpfront": "1.452",
						"yrTerm3Standard.allUpfront": "0.845",
						"yrTerm3Standard.partialUpfront": "0.899"
					}
				},
				"mswin": {
					"ondemand": "3.58",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.893",
						"yrTerm1Standard.noUpfront": "2.260",
						"yrTerm1Standard.partialUpfront": "1.932",
						"yrTerm3Standard.allUpfront": "1.296",
						"yrTerm3Standard.partialUpfront": "1.379"
					}
				},
				"mswinSQL": {
					"ondemand": "4.607",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.572",
						"yrTerm1Standard.noUpfront": "3.071",
						"yrTerm1Standard.partialUpfront": "2.625",
						"yrTerm3Standard.allUpfront": "1.947",
						"yrTerm3Standard.partialUpfront": "2.072"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.66",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.937",
						"yrTerm1Standard.noUpfront": "2.312",
						"yrTerm1Standard.partialUpfront": "1.976",
						"yrTerm3Standard.allUpfront": "1.337",
						"yrTerm3Standard.partialUpfront": "1.422"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "3.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.423",
						"yrTerm1Standard.noUpfront": "1.698",
						"yrTerm1Standard.partialUpfront": "1.452",
						"yrTerm3Standard.allUpfront": "0.845",
						"yrTerm3Standard.partialUpfront": "0.899"
					}
				},
				"mswin": {
					"ondemand": "3.58",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.893",
						"yrTerm1Standard.noUpfront": "2.260",
						"yrTerm1Standard.partialUpfront": "1.932",
						"yrTerm3Standard.allUpfront": "1.296",
						"yrTerm3Standard.partialUpfront": "1.379"
					}
				},
				"mswinSQL": {
					"ondemand": "4.607",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.572",
						"yrTerm1Standard.noUpfront": "3.071",
						"yrTerm1Standard.partialUpfront": "2.625",
						"yrTerm3Standard.allUpfront": "1.947",
						"yrTerm3Standard.partialUpfront": "2.072"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.66",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.937",
						"yrTerm1Standard.noUpfront": "2.312",
						"yrTerm1Standard.partialUpfront": "1.976",
						"yrTerm3Standard.allUpfront": "1.337",
						"yrTerm3Standard.partialUpfront": "1.422"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 1024,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": false
		},
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 35,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "Storage optimized",
		"generation": "previous",
		"instance_type": "hs1.8xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 117,
		"network_performance": "10 Gigabit",
		"placement_group_support": false,
		"pretty_name": "High Storage Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "5.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.725",
						"yrTerm1Standard.noUpfront": "3.253",
						"yrTerm1Standard.partialUpfront": "2.781",
						"yrTerm3Standard.allUpfront": "1.937",
						"yrTerm3Standard.partialUpfront": "2.060"
					}
				},
				"mswin": {
					"ondemand": "5.714",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.034",
						"yrTerm1Standard.noUpfront": "3.622",
						"yrTerm1Standard.partialUpfront": "3.096",
						"yrTerm3Standard.allUpfront": "2.233",
						"yrTerm3Standard.partialUpfront": "2.375"
					}
				},
				"mswinSQL": {
					"ondemand": "8.97",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.226",
						"yrTerm1Standard.noUpfront": "7.432",
						"yrTerm1Standard.partialUpfront": "6.353",
						"yrTerm3Standard.allUpfront": "5.293",
						"yrTerm3Standard.partialUpfront": "5.631"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.917",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.233",
						"yrTerm1Standard.noUpfront": "3.859",
						"yrTerm1Standard.partialUpfront": "3.299",
						"yrTerm3Standard.allUpfront": "2.424",
						"yrTerm3Standard.partialUpfront": "2.578"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "5.57",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.646",
						"yrTerm1Standard.noUpfront": "3.158",
						"yrTerm1Standard.partialUpfront": "2.700",
						"yrTerm3Standard.allUpfront": "1.880",
						"yrTerm3Standard.partialUpfront": "2.000"
					}
				},
				"mswin": {
					"ondemand": "5.901",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.084",
						"yrTerm1Standard.noUpfront": "3.682",
						"yrTerm1Standard.partialUpfront": "3.147",
						"yrTerm3Standard.allUpfront": "2.192",
						"yrTerm3Standard.partialUpfront": "2.332"
					}
				},
				"mswinSQL": {
					"ondemand": "9.32",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.607",
						"yrTerm1Standard.noUpfront": "9.082",
						"yrTerm1Standard.partialUpfront": "7.763",
						"yrTerm3Standard.allUpfront": "5.405",
						"yrTerm3Standard.partialUpfront": "5.750"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "6.114",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.366",
						"yrTerm1Standard.noUpfront": "4.019",
						"yrTerm1Standard.partialUpfront": "3.435",
						"yrTerm3Standard.allUpfront": "2.391",
						"yrTerm3Standard.partialUpfront": "2.544"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "5.57",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.646",
						"yrTerm1Standard.noUpfront": "3.158",
						"yrTerm1Standard.partialUpfront": "2.700",
						"yrTerm3Standard.allUpfront": "1.880",
						"yrTerm3Standard.partialUpfront": "2.000"
					}
				},
				"mswin": {
					"ondemand": "5.901",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.084",
						"yrTerm1Standard.noUpfront": "3.682",
						"yrTerm1Standard.partialUpfront": "3.147",
						"yrTerm3Standard.allUpfront": "2.192",
						"yrTerm3Standard.partialUpfront": "2.332"
					}
				},
				"mswinSQL": {
					"ondemand": "9.32",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.607",
						"yrTerm1Standard.noUpfront": "9.082",
						"yrTerm1Standard.partialUpfront": "7.763",
						"yrTerm3Standard.allUpfront": "5.405",
						"yrTerm3Standard.partialUpfront": "5.750"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "6.114",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.366",
						"yrTerm1Standard.noUpfront": "4.019",
						"yrTerm1Standard.partialUpfront": "3.435",
						"yrTerm3Standard.allUpfront": "2.391",
						"yrTerm3Standard.partialUpfront": "2.544"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "4.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.394",
						"yrTerm1Standard.noUpfront": "2.858",
						"yrTerm1Standard.partialUpfront": "2.443",
						"yrTerm3Standard.allUpfront": "1.701",
						"yrTerm3Standard.partialUpfront": "1.810"
					}
				},
				"mswin": {
					"ondemand": "4.931",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.100",
						"yrTerm1Standard.noUpfront": "3.701",
						"yrTerm1Standard.partialUpfront": "3.163",
						"yrTerm3Standard.allUpfront": "2.038",
						"yrTerm3Standard.partialUpfront": "2.168"
					}
				},
				"mswinSQL": {
					"ondemand": "8.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.289",
						"yrTerm1Standard.noUpfront": "7.742",
						"yrTerm1Standard.partialUpfront": "7.438",
						"yrTerm3Standard.allUpfront": "6.056",
						"yrTerm3Standard.partialUpfront": "6.442"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.144",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.362",
						"yrTerm1Standard.noUpfront": "4.014",
						"yrTerm1Standard.partialUpfront": "3.431",
						"yrTerm3Standard.allUpfront": "2.290",
						"yrTerm3Standard.partialUpfront": "2.436"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "4.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.156",
						"yrTerm1Standard.noUpfront": "2.574",
						"yrTerm1Standard.partialUpfront": "2.200",
						"yrTerm3Standard.allUpfront": "1.320",
						"yrTerm3Standard.partialUpfront": "1.404"
					}
				},
				"mswin": {
					"ondemand": "4.931",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.480",
						"yrTerm1Standard.noUpfront": "2.961",
						"yrTerm1Standard.partialUpfront": "2.531",
						"yrTerm3Standard.allUpfront": "1.631",
						"yrTerm3Standard.partialUpfront": "1.735"
					}
				},
				"mswinSQL": {
					"ondemand": "8.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.831",
						"yrTerm1Standard.noUpfront": "6.961",
						"yrTerm1Standard.partialUpfront": "5.950",
						"yrTerm3Standard.allUpfront": "4.845",
						"yrTerm3Standard.partialUpfront": "5.154"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.144",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.690",
						"yrTerm1Standard.noUpfront": "3.211",
						"yrTerm1Standard.partialUpfront": "2.745",
						"yrTerm3Standard.allUpfront": "1.832",
						"yrTerm3Standard.partialUpfront": "1.949"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "5.52",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.587",
						"yrTerm1Standard.noUpfront": "3.088",
						"yrTerm1Standard.partialUpfront": "2.640",
						"yrTerm3Standard.allUpfront": "1.584",
						"yrTerm3Standard.partialUpfront": "1.685"
					}
				},
				"mswin": {
					"ondemand": "6.126",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.912",
						"yrTerm1Standard.noUpfront": "3.477",
						"yrTerm1Standard.partialUpfront": "2.972",
						"yrTerm3Standard.allUpfront": "1.896",
						"yrTerm3Standard.partialUpfront": "2.017"
					}
				},
				"mswinSQL": {
					"ondemand": "9.27",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.262",
						"yrTerm1Standard.noUpfront": "7.476",
						"yrTerm1Standard.partialUpfront": "6.390",
						"yrTerm3Standard.allUpfront": "5.110",
						"yrTerm3Standard.partialUpfront": "5.436"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "6.339",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.122",
						"yrTerm1Standard.noUpfront": "3.727",
						"yrTerm1Standard.partialUpfront": "3.186",
						"yrTerm3Standard.allUpfront": "2.096",
						"yrTerm3Standard.partialUpfront": "2.230"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "4.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.156",
						"yrTerm1Standard.noUpfront": "2.574",
						"yrTerm1Standard.partialUpfront": "2.200",
						"yrTerm3Standard.allUpfront": "1.320",
						"yrTerm3Standard.partialUpfront": "1.404"
					}
				},
				"mswin": {
					"ondemand": "4.931",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.480",
						"yrTerm1Standard.noUpfront": "2.961",
						"yrTerm1Standard.partialUpfront": "2.531",
						"yrTerm3Standard.allUpfront": "1.631",
						"yrTerm3Standard.partialUpfront": "1.735"
					}
				},
				"mswinSQL": {
					"ondemand": "8.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.831",
						"yrTerm1Standard.noUpfront": "6.961",
						"yrTerm1Standard.partialUpfront": "5.950",
						"yrTerm3Standard.allUpfront": "4.845",
						"yrTerm3Standard.partialUpfront": "5.154"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.144",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.690",
						"yrTerm1Standard.noUpfront": "3.211",
						"yrTerm1Standard.partialUpfront": "2.745",
						"yrTerm3Standard.allUpfront": "1.832",
						"yrTerm3Standard.partialUpfront": "1.949"
					}
				}
			}
		},
		"storage": {
			"devices": 24,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 2000,
			"ssd": false,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": "variable",
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"i386",
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "Micro",
		"generation": "previous",
		"instance_type": "t1.micro",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"PV"
		],
		"memory": 0.613,
		"network_performance": "Very Low",
		"placement_group_support": false,
		"pretty_name": "T1 Micro",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.026",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.018",
						"yrTerm1Standard.partialUpfront": "0.016",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswin": {
					"ondemand": "0.033",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.025",
						"yrTerm1Standard.noUpfront": "0.029",
						"yrTerm1Standard.partialUpfront": "0.025",
						"yrTerm3Standard.allUpfront": "0.021",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.077",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.049",
						"yrTerm1Standard.noUpfront": "0.058",
						"yrTerm1Standard.partialUpfront": "0.050",
						"yrTerm3Standard.allUpfront": "0.043",
						"yrTerm3Standard.partialUpfront": "0.046"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.015",
						"yrTerm1Standard.noUpfront": "0.016",
						"yrTerm1Standard.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.011",
						"yrTerm3Standard.partialUpfront": "0.012"
					}
				},
				"mswin": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.019",
						"yrTerm1Standard.partialUpfront": "0.016",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.042",
						"yrTerm1Standard.noUpfront": "0.050",
						"yrTerm1Standard.partialUpfront": "0.043",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.015",
						"yrTerm1Standard.noUpfront": "0.016",
						"yrTerm1Standard.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.011",
						"yrTerm3Standard.partialUpfront": "0.012"
					}
				},
				"mswin": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.019",
						"yrTerm1Standard.partialUpfront": "0.016",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.042",
						"yrTerm1Standard.noUpfront": "0.050",
						"yrTerm1Standard.partialUpfront": "0.043",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.015",
						"yrTerm1Standard.noUpfront": "0.016",
						"yrTerm1Standard.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.011",
						"yrTerm3Standard.partialUpfront": "0.012"
					}
				},
				"mswin": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.019",
						"yrTerm1Standard.partialUpfront": "0.016",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.039",
						"yrTerm1Standard.noUpfront": "0.047",
						"yrTerm1Standard.partialUpfront": "0.040",
						"yrTerm3Standard.allUpfront": "0.034",
						"yrTerm3Standard.partialUpfront": "0.037"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.027",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.019",
						"yrTerm1Standard.partialUpfront": "0.017",
						"yrTerm3Standard.allUpfront": "0.011",
						"yrTerm3Standard.partialUpfront": "0.012"
					}
				},
				"mswin": {
					"ondemand": "0.037",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.022",
						"yrTerm1Standard.noUpfront": "0.026",
						"yrTerm1Standard.partialUpfront": "0.023",
						"yrTerm3Standard.allUpfront": "0.017",
						"yrTerm3Standard.partialUpfront": "0.018"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.077",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.040",
						"yrTerm1Standard.noUpfront": "0.048",
						"yrTerm1Standard.partialUpfront": "0.041",
						"yrTerm3Standard.allUpfront": "0.036",
						"yrTerm3Standard.partialUpfront": "0.038"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.014",
						"yrTerm1Standard.partialUpfront": "0.012",
						"yrTerm3Standard.allUpfront": "0.008",
						"yrTerm3Standard.partialUpfront": "0.009"
					}
				},
				"mswin": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.013",
						"yrTerm1Standard.noUpfront": "0.015",
						"yrTerm1Standard.partialUpfront": "0.013",
						"yrTerm3Standard.allUpfront": "0.010",
						"yrTerm3Standard.partialUpfront": "0.011"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.07",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.039",
						"yrTerm1Standard.noUpfront": "0.047",
						"yrTerm1Standard.partialUpfront": "0.040",
						"yrTerm3Standard.allUpfront": "0.034",
						"yrTerm3Standard.partialUpfront": "0.037"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.024",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.015",
						"yrTerm1Standard.partialUpfront": "0.013",
						"yrTerm3Standard.allUpfront": "0.009",
						"yrTerm3Standard.partialUpfront": "0.010"
					}
				},
				"mswin": {
					"ondemand": "0.025",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.017",
						"yrTerm1Standard.noUpfront": "0.022",
						"yrTerm1Standard.partialUpfront": "0.019",
						"yrTerm3Standard.allUpfront": "0.014",
						"yrTerm3Standard.partialUpfront": "0.016"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.074",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.051",
						"yrTerm1Standard.noUpfront": "0.066",
						"yrTerm1Standard.partialUpfront": "0.057",
						"yrTerm3Standard.allUpfront": "0.049",
						"yrTerm3Standard.partialUpfront": "0.054"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.025",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.015",
						"yrTerm1Standard.noUpfront": "0.017",
						"yrTerm1Standard.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.011",
						"yrTerm3Standard.partialUpfront": "0.012"
					}
				},
				"mswin": {
					"ondemand": "0.035",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.021",
						"yrTerm1Standard.noUpfront": "0.025",
						"yrTerm1Standard.partialUpfront": "0.021",
						"yrTerm3Standard.allUpfront": "0.017",
						"yrTerm3Standard.partialUpfront": "0.018"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.042",
						"yrTerm1Standard.noUpfront": "0.050",
						"yrTerm1Standard.partialUpfront": "0.043",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.014",
						"yrTerm1Standard.partialUpfront": "0.012",
						"yrTerm3Standard.allUpfront": "0.008",
						"yrTerm3Standard.partialUpfront": "0.009"
					}
				},
				"mswin": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.013",
						"yrTerm1Standard.noUpfront": "0.015",
						"yrTerm1Standard.partialUpfront": "0.013",
						"yrTerm3Standard.allUpfront": "0.010",
						"yrTerm3Standard.partialUpfront": "0.011"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.07",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.039",
						"yrTerm1Standard.noUpfront": "0.047",
						"yrTerm1Standard.partialUpfront": "0.040",
						"yrTerm3Standard.allUpfront": "0.034",
						"yrTerm3Standard.partialUpfront": "0.037"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 1,
		"vpc": {
			"ips_per_eni": 2,
			"max_enis": 2
		},
		"vpc_only": false
	},
	{
		"ECU": "variable",
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64",
			"i386"
		],
		"base_performance": 0.05,
		"burst_minutes": 72,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "t2.nano",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 0.5,
		"network_performance": "Low",
		"placement_group_support": false,
		"pretty_name": "T2 Nano",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.006",
						"yrTerm1Standard.noUpfront": "0.006",
						"yrTerm1Standard.partialUpfront": "0.006",
						"yrTerm3Convertible.allUpfront": "0.005",
						"yrTerm3Convertible.noUpfront": "0.005",
						"yrTerm3Convertible.partialUpfront": "0.005",
						"yrTerm3Standard.allUpfront": "0.004",
						"yrTerm3Standard.noUpfront": "0.004",
						"yrTerm3Standard.partialUpfront": "0.004"
					}
				},
				"mswin": {
					"ondemand": "0.0103",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.008",
						"yrTerm1Standard.noUpfront": "0.009",
						"yrTerm1Standard.partialUpfront": "0.008",
						"yrTerm3Convertible.allUpfront": "0.007",
						"yrTerm3Convertible.noUpfront": "0.007",
						"yrTerm3Convertible.partialUpfront": "0.007",
						"yrTerm3Standard.allUpfront": "0.006",
						"yrTerm3Standard.noUpfront": "0.007",
						"yrTerm3Standard.partialUpfront": "0.006"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.006",
						"yrTerm1Standard.noUpfront": "0.006",
						"yrTerm1Standard.partialUpfront": "0.006",
						"yrTerm3Convertible.allUpfront": "0.005",
						"yrTerm3Convertible.noUpfront": "0.005",
						"yrTerm3Convertible.partialUpfront": "0.005",
						"yrTerm3Standard.allUpfront": "0.004",
						"yrTerm3Standard.noUpfront": "0.004",
						"yrTerm3Standard.partialUpfront": "0.004"
					}
				},
				"mswin": {
					"ondemand": "0.0103",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.008",
						"yrTerm1Standard.noUpfront": "0.008",
						"yrTerm1Standard.partialUpfront": "0.008",
						"yrTerm3Convertible.allUpfront": "0.007",
						"yrTerm3Convertible.noUpfront": "0.007",
						"yrTerm3Convertible.partialUpfront": "0.007",
						"yrTerm3Standard.allUpfront": "0.006",
						"yrTerm3Standard.noUpfront": "0.007",
						"yrTerm3Standard.partialUpfront": "0.006"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.0074",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.005",
						"yrTerm1Standard.noUpfront": "0.006",
						"yrTerm1Standard.partialUpfront": "0.006",
						"yrTerm3Convertible.allUpfront": "0.005",
						"yrTerm3Convertible.noUpfront": "0.006",
						"yrTerm3Convertible.partialUpfront": "0.005",
						"yrTerm3Standard.allUpfront": "0.004",
						"yrTerm3Standard.noUpfront": "0.005",
						"yrTerm3Standard.partialUpfront": "0.004"
					}
				},
				"mswin": {
					"ondemand": "0.0097",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.008",
						"yrTerm1Standard.noUpfront": "0.008",
						"yrTerm1Standard.partialUpfront": "0.008",
						"yrTerm3Convertible.allUpfront": "0.007",
						"yrTerm3Convertible.noUpfront": "0.008",
						"yrTerm3Convertible.partialUpfront": "0.007",
						"yrTerm3Standard.allUpfront": "0.006",
						"yrTerm3Standard.noUpfront": "0.007",
						"yrTerm3Standard.partialUpfront": "0.007"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.0075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.006",
						"yrTerm1Standard.noUpfront": "0.006",
						"yrTerm1Standard.partialUpfront": "0.006",
						"yrTerm3Convertible.allUpfront": "0.005",
						"yrTerm3Convertible.noUpfront": "0.006",
						"yrTerm3Convertible.partialUpfront": "0.005",
						"yrTerm3Standard.allUpfront": "0.004",
						"yrTerm3Standard.noUpfront": "0.005",
						"yrTerm3Standard.partialUpfront": "0.004"
					}
				},
				"mswin": {
					"ondemand": "0.0098",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.008",
						"yrTerm1Standard.noUpfront": "0.008",
						"yrTerm1Standard.partialUpfront": "0.008",
						"yrTerm3Convertible.allUpfront": "0.007",
						"yrTerm3Convertible.noUpfront": "0.008",
						"yrTerm3Convertible.partialUpfront": "0.007",
						"yrTerm3Standard.allUpfront": "0.006",
						"yrTerm3Standard.noUpfront": "0.007",
						"yrTerm3Standard.partialUpfront": "0.007"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.006",
						"yrTerm1Standard.noUpfront": "0.006",
						"yrTerm1Standard.partialUpfront": "0.006",
						"yrTerm3Convertible.allUpfront": "0.005",
						"yrTerm3Convertible.noUpfront": "0.006",
						"yrTerm3Convertible.partialUpfront": "0.005",
						"yrTerm3Standard.allUpfront": "0.004",
						"yrTerm3Standard.noUpfront": "0.005",
						"yrTerm3Standard.partialUpfront": "0.005"
					}
				},
				"mswin": {
					"ondemand": "0.0103",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.008",
						"yrTerm1Standard.noUpfront": "0.009",
						"yrTerm1Standard.partialUpfront": "0.008",
						"yrTerm3Convertible.allUpfront": "0.008",
						"yrTerm3Convertible.noUpfront": "0.008",
						"yrTerm3Convertible.partialUpfront": "0.008",
						"yrTerm3Standard.allUpfront": "0.007",
						"yrTerm3Standard.noUpfront": "0.007",
						"yrTerm3Standard.partialUpfront": "0.007"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.0065",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.004",
						"yrTerm1Standard.noUpfront": "0.005",
						"yrTerm1Standard.partialUpfront": "0.004",
						"yrTerm3Convertible.allUpfront": "0.004",
						"yrTerm3Convertible.noUpfront": "0.004",
						"yrTerm3Convertible.partialUpfront": "0.004",
						"yrTerm3Standard.allUpfront": "0.003",
						"yrTerm3Standard.noUpfront": "0.003",
						"yrTerm3Standard.partialUpfront": "0.003"
					}
				},
				"mswin": {
					"ondemand": "0.0088",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.007",
						"yrTerm1Standard.noUpfront": "0.007",
						"yrTerm1Standard.partialUpfront": "0.007",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.006",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.006",
						"yrTerm3Standard.partialUpfront": "0.005"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.0068",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.005",
						"yrTerm1Standard.noUpfront": "0.005",
						"yrTerm1Standard.partialUpfront": "0.005",
						"yrTerm3Convertible.allUpfront": "0.004",
						"yrTerm3Convertible.noUpfront": "0.004",
						"yrTerm3Convertible.partialUpfront": "0.004",
						"yrTerm3Standard.allUpfront": "0.003",
						"yrTerm3Standard.noUpfront": "0.004",
						"yrTerm3Standard.partialUpfront": "0.003"
					}
				},
				"mswin": {
					"ondemand": "0.0091",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.007",
						"yrTerm1Standard.noUpfront": "0.007",
						"yrTerm1Standard.partialUpfront": "0.007",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.006",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.006",
						"yrTerm3Standard.partialUpfront": "0.006"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.0063",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.004",
						"yrTerm1Standard.noUpfront": "0.005",
						"yrTerm1Standard.partialUpfront": "0.004",
						"yrTerm3Convertible.allUpfront": "0.004",
						"yrTerm3Convertible.noUpfront": "0.004",
						"yrTerm3Convertible.partialUpfront": "0.004",
						"yrTerm3Standard.allUpfront": "0.003",
						"yrTerm3Standard.noUpfront": "0.004",
						"yrTerm3Standard.partialUpfront": "0.003"
					}
				},
				"mswin": {
					"ondemand": "0.0086",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.007",
						"yrTerm1Standard.noUpfront": "0.007",
						"yrTerm1Standard.partialUpfront": "0.007",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.007",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.006",
						"yrTerm3Standard.partialUpfront": "0.005"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.0066",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.004",
						"yrTerm1Standard.noUpfront": "0.005",
						"yrTerm1Standard.partialUpfront": "0.005",
						"yrTerm3Convertible.allUpfront": "0.004",
						"yrTerm3Convertible.noUpfront": "0.004",
						"yrTerm3Convertible.partialUpfront": "0.004",
						"yrTerm3Standard.allUpfront": "0.003",
						"yrTerm3Standard.noUpfront": "0.004",
						"yrTerm3Standard.partialUpfront": "0.003"
					}
				},
				"mswin": {
					"ondemand": "0.0089",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.007",
						"yrTerm1Standard.noUpfront": "0.007",
						"yrTerm1Standard.partialUpfront": "0.007",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.006",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.006",
						"yrTerm3Standard.partialUpfront": "0.006"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.0101",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.006",
						"yrTerm1Standard.noUpfront": "0.006",
						"yrTerm1Standard.partialUpfront": "0.006",
						"yrTerm3Convertible.allUpfront": "0.005",
						"yrTerm3Convertible.noUpfront": "0.006",
						"yrTerm3Convertible.partialUpfront": "0.005",
						"yrTerm3Standard.allUpfront": "0.004",
						"yrTerm3Standard.noUpfront": "0.005",
						"yrTerm3Standard.partialUpfront": "0.005"
					}
				},
				"mswin": {
					"ondemand": "0.0124",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.008",
						"yrTerm1Standard.noUpfront": "0.009",
						"yrTerm1Standard.partialUpfront": "0.008",
						"yrTerm3Convertible.allUpfront": "0.008",
						"yrTerm3Convertible.noUpfront": "0.008",
						"yrTerm3Convertible.partialUpfront": "0.008",
						"yrTerm3Standard.allUpfront": "0.007",
						"yrTerm3Standard.noUpfront": "0.007",
						"yrTerm3Standard.partialUpfront": "0.007"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.0059",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.004",
						"yrTerm1Standard.noUpfront": "0.004",
						"yrTerm1Standard.partialUpfront": "0.004",
						"yrTerm3Convertible.allUpfront": "0.003",
						"yrTerm3Convertible.noUpfront": "0.004",
						"yrTerm3Convertible.partialUpfront": "0.003",
						"yrTerm3Standard.allUpfront": "0.003",
						"yrTerm3Standard.noUpfront": "0.003",
						"yrTerm3Standard.partialUpfront": "0.003"
					}
				},
				"mswin": {
					"ondemand": "0.0082",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.006",
						"yrTerm1Standard.noUpfront": "0.007",
						"yrTerm1Standard.partialUpfront": "0.006",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.006",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.005",
						"yrTerm3Standard.partialUpfront": "0.005"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.0059",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.004",
						"yrTerm1Standard.noUpfront": "0.004",
						"yrTerm1Standard.partialUpfront": "0.004",
						"yrTerm3Convertible.allUpfront": "0.003",
						"yrTerm3Convertible.noUpfront": "0.004",
						"yrTerm3Convertible.partialUpfront": "0.003",
						"yrTerm3Standard.allUpfront": "0.003",
						"yrTerm3Standard.noUpfront": "0.003",
						"yrTerm3Standard.partialUpfront": "0.003"
					}
				},
				"mswin": {
					"ondemand": "0.0082",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.006",
						"yrTerm1Standard.noUpfront": "0.007",
						"yrTerm1Standard.partialUpfront": "0.006",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.006",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.005",
						"yrTerm3Standard.partialUpfront": "0.005"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.0068",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.004",
						"yrTerm1Standard.noUpfront": "0.005",
						"yrTerm1Standard.partialUpfront": "0.005",
						"yrTerm3Convertible.allUpfront": "0.004",
						"yrTerm3Convertible.noUpfront": "0.004",
						"yrTerm3Convertible.partialUpfront": "0.004",
						"yrTerm3Standard.allUpfront": "0.003",
						"yrTerm3Standard.noUpfront": "0.004",
						"yrTerm3Standard.partialUpfront": "0.004"
					}
				},
				"mswin": {
					"ondemand": "0.0091",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.007",
						"yrTerm1Standard.noUpfront": "0.007",
						"yrTerm1Standard.partialUpfront": "0.007",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.007",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.006",
						"yrTerm3Standard.partialUpfront": "0.006"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.0077",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.005",
						"yrTerm1Standard.noUpfront": "0.006",
						"yrTerm1Standard.partialUpfront": "0.005",
						"yrTerm3Convertible.allUpfront": "0.004",
						"yrTerm3Convertible.noUpfront": "0.005",
						"yrTerm3Convertible.partialUpfront": "0.004",
						"yrTerm3Standard.allUpfront": "0.004",
						"yrTerm3Standard.noUpfront": "0.004",
						"yrTerm3Standard.partialUpfront": "0.004"
					}
				},
				"mswin": {
					"ondemand": "0.01",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.008",
						"yrTerm1Standard.noUpfront": "0.008",
						"yrTerm1Standard.partialUpfront": "0.008",
						"yrTerm3Convertible.allUpfront": "0.007",
						"yrTerm3Convertible.noUpfront": "0.007",
						"yrTerm3Convertible.partialUpfront": "0.007",
						"yrTerm3Standard.allUpfront": "0.006",
						"yrTerm3Standard.noUpfront": "0.006",
						"yrTerm3Standard.partialUpfront": "0.006"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.0059",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.004",
						"yrTerm1Standard.noUpfront": "0.004",
						"yrTerm1Standard.partialUpfront": "0.004",
						"yrTerm3Convertible.allUpfront": "0.003",
						"yrTerm3Convertible.noUpfront": "0.004",
						"yrTerm3Convertible.partialUpfront": "0.003",
						"yrTerm3Standard.allUpfront": "0.003",
						"yrTerm3Standard.noUpfront": "0.003",
						"yrTerm3Standard.partialUpfront": "0.003"
					}
				},
				"mswin": {
					"ondemand": "0.0082",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.006",
						"yrTerm1Standard.noUpfront": "0.007",
						"yrTerm1Standard.partialUpfront": "0.006",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.006",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.005",
						"yrTerm3Standard.partialUpfront": "0.005"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 1,
		"vpc": {
			"ips_per_eni": 2,
			"max_enis": 2
		},
		"vpc_only": true
	},
	{
		"ECU": "variable",
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64",
			"i386"
		],
		"base_performance": 0.1,
		"burst_minutes": 144,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "t2.micro",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 1,
		"network_performance": "Low to Moderate",
		"placement_group_support": false,
		"pretty_name": "T2 Micro",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.012",
						"yrTerm1Standard.partialUpfront": "0.012",
						"yrTerm3Convertible.allUpfront": "0.009",
						"yrTerm3Convertible.noUpfront": "0.010",
						"yrTerm3Convertible.partialUpfront": "0.009",
						"yrTerm3Standard.allUpfront": "0.008",
						"yrTerm3Standard.noUpfront": "0.009",
						"yrTerm3Standard.partialUpfront": "0.008"
					}
				},
				"mswin": {
					"ondemand": "0.021",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.017",
						"yrTerm1Standard.partialUpfront": "0.017",
						"yrTerm3Convertible.allUpfront": "0.014",
						"yrTerm3Convertible.noUpfront": "0.015",
						"yrTerm3Convertible.partialUpfront": "0.014",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.noUpfront": "0.013",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.044",
						"yrTerm1Standard.noUpfront": "0.052",
						"yrTerm1Standard.partialUpfront": "0.045",
						"yrTerm3Convertible.allUpfront": "0.042",
						"yrTerm3Convertible.noUpfront": "0.051",
						"yrTerm3Convertible.partialUpfront": "0.043",
						"yrTerm3Standard.allUpfront": "0.038",
						"yrTerm3Standard.noUpfront": "0.040",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.012",
						"yrTerm1Standard.partialUpfront": "0.012",
						"yrTerm3Convertible.allUpfront": "0.009",
						"yrTerm3Convertible.noUpfront": "0.010",
						"yrTerm3Convertible.partialUpfront": "0.009",
						"yrTerm3Standard.allUpfront": "0.008",
						"yrTerm3Standard.noUpfront": "0.009",
						"yrTerm3Standard.partialUpfront": "0.008"
					}
				},
				"mswin": {
					"ondemand": "0.021",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.016",
						"yrTerm1Standard.partialUpfront": "0.017",
						"yrTerm3Convertible.allUpfront": "0.014",
						"yrTerm3Convertible.noUpfront": "0.015",
						"yrTerm3Convertible.partialUpfront": "0.014",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.noUpfront": "0.013",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.069",
						"yrTerm1Standard.noUpfront": "0.072",
						"yrTerm1Standard.partialUpfront": "0.070",
						"yrTerm3Convertible.allUpfront": "0.068",
						"yrTerm3Convertible.noUpfront": "0.070",
						"yrTerm3Convertible.partialUpfront": "0.068",
						"yrTerm3Standard.allUpfront": "0.064",
						"yrTerm3Standard.noUpfront": "0.065",
						"yrTerm3Standard.partialUpfront": "0.065"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.015",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.011",
						"yrTerm1Standard.noUpfront": "0.012",
						"yrTerm1Standard.partialUpfront": "0.011",
						"yrTerm3Convertible.allUpfront": "0.010",
						"yrTerm3Convertible.noUpfront": "0.011",
						"yrTerm3Convertible.partialUpfront": "0.010",
						"yrTerm3Standard.allUpfront": "0.008",
						"yrTerm3Standard.noUpfront": "0.010",
						"yrTerm3Standard.partialUpfront": "0.009"
					}
				},
				"mswin": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.015",
						"yrTerm1Standard.noUpfront": "0.016",
						"yrTerm1Standard.partialUpfront": "0.016",
						"yrTerm3Convertible.allUpfront": "0.014",
						"yrTerm3Convertible.noUpfront": "0.016",
						"yrTerm3Convertible.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.013",
						"yrTerm3Standard.noUpfront": "0.014",
						"yrTerm3Standard.partialUpfront": "0.014"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.074",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.069",
						"yrTerm1Standard.noUpfront": "0.072",
						"yrTerm1Standard.partialUpfront": "0.069",
						"yrTerm3Convertible.allUpfront": "0.068",
						"yrTerm3Convertible.noUpfront": "0.070",
						"yrTerm3Convertible.partialUpfront": "0.068",
						"yrTerm3Standard.allUpfront": "0.066",
						"yrTerm3Standard.noUpfront": "0.066",
						"yrTerm3Standard.partialUpfront": "0.066"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.015",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.011",
						"yrTerm1Standard.noUpfront": "0.012",
						"yrTerm1Standard.partialUpfront": "0.011",
						"yrTerm3Convertible.allUpfront": "0.010",
						"yrTerm3Convertible.noUpfront": "0.011",
						"yrTerm3Convertible.partialUpfront": "0.010",
						"yrTerm3Standard.allUpfront": "0.008",
						"yrTerm3Standard.noUpfront": "0.010",
						"yrTerm3Standard.partialUpfront": "0.009"
					}
				},
				"mswin": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.015",
						"yrTerm1Standard.noUpfront": "0.016",
						"yrTerm1Standard.partialUpfront": "0.016",
						"yrTerm3Convertible.allUpfront": "0.014",
						"yrTerm3Convertible.noUpfront": "0.016",
						"yrTerm3Convertible.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.noUpfront": "0.014",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.042",
						"yrTerm1Standard.noUpfront": "0.050",
						"yrTerm1Standard.partialUpfront": "0.043",
						"yrTerm3Convertible.allUpfront": "0.041",
						"yrTerm3Convertible.noUpfront": "0.048",
						"yrTerm3Convertible.partialUpfront": "0.042",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.noUpfront": "0.040",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.013",
						"yrTerm1Standard.partialUpfront": "0.012",
						"yrTerm3Convertible.allUpfront": "0.011",
						"yrTerm3Convertible.noUpfront": "0.012",
						"yrTerm3Convertible.partialUpfront": "0.011",
						"yrTerm3Standard.allUpfront": "0.008",
						"yrTerm3Standard.noUpfront": "0.010",
						"yrTerm3Standard.partialUpfront": "0.009"
					}
				},
				"mswin": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.017",
						"yrTerm1Standard.partialUpfront": "0.017",
						"yrTerm3Convertible.allUpfront": "0.015",
						"yrTerm3Convertible.noUpfront": "0.016",
						"yrTerm3Convertible.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.noUpfront": "0.015",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.042",
						"yrTerm1Standard.noUpfront": "0.050",
						"yrTerm1Standard.partialUpfront": "0.043",
						"yrTerm3Convertible.allUpfront": "0.041",
						"yrTerm3Convertible.noUpfront": "0.048",
						"yrTerm3Convertible.partialUpfront": "0.042",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.noUpfront": "0.040",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.013",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.009",
						"yrTerm1Standard.noUpfront": "0.009",
						"yrTerm1Standard.partialUpfront": "0.009",
						"yrTerm3Convertible.allUpfront": "0.007",
						"yrTerm3Convertible.noUpfront": "0.008",
						"yrTerm3Convertible.partialUpfront": "0.007",
						"yrTerm3Standard.allUpfront": "0.006",
						"yrTerm3Standard.noUpfront": "0.007",
						"yrTerm3Standard.partialUpfront": "0.006"
					}
				},
				"mswin": {
					"ondemand": "0.018",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.013",
						"yrTerm1Standard.noUpfront": "0.014",
						"yrTerm1Standard.partialUpfront": "0.013",
						"yrTerm3Convertible.allUpfront": "0.012",
						"yrTerm3Convertible.noUpfront": "0.012",
						"yrTerm3Convertible.partialUpfront": "0.012",
						"yrTerm3Standard.allUpfront": "0.010",
						"yrTerm3Standard.noUpfront": "0.011",
						"yrTerm3Standard.partialUpfront": "0.011"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.089",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.084",
						"yrTerm1Standard.noUpfront": "0.085",
						"yrTerm1Standard.partialUpfront": "0.084",
						"yrTerm3Convertible.allUpfront": "0.083",
						"yrTerm3Convertible.noUpfront": "0.083",
						"yrTerm3Convertible.partialUpfront": "0.083",
						"yrTerm3Standard.allUpfront": "0.081",
						"yrTerm3Standard.noUpfront": "0.082",
						"yrTerm3Standard.partialUpfront": "0.082"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.014",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.009",
						"yrTerm1Standard.noUpfront": "0.010",
						"yrTerm1Standard.partialUpfront": "0.009",
						"yrTerm3Convertible.allUpfront": "0.007",
						"yrTerm3Convertible.noUpfront": "0.008",
						"yrTerm3Convertible.partialUpfront": "0.007",
						"yrTerm3Standard.allUpfront": "0.007",
						"yrTerm3Standard.noUpfront": "0.007",
						"yrTerm3Standard.partialUpfront": "0.007"
					}
				},
				"mswin": {
					"ondemand": "0.019",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.013",
						"yrTerm1Standard.noUpfront": "0.015",
						"yrTerm1Standard.partialUpfront": "0.014",
						"yrTerm3Convertible.allUpfront": "0.012",
						"yrTerm3Convertible.noUpfront": "0.013",
						"yrTerm3Convertible.partialUpfront": "0.012",
						"yrTerm3Standard.allUpfront": "0.010",
						"yrTerm3Standard.noUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.010"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.07",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.041",
						"yrTerm1Standard.noUpfront": "0.049",
						"yrTerm1Standard.partialUpfront": "0.042",
						"yrTerm3Convertible.allUpfront": "0.040",
						"yrTerm3Convertible.noUpfront": "0.048",
						"yrTerm3Convertible.partialUpfront": "0.041",
						"yrTerm3Standard.allUpfront": "0.035",
						"yrTerm3Standard.noUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.037"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.013",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.009",
						"yrTerm1Standard.noUpfront": "0.009",
						"yrTerm1Standard.partialUpfront": "0.009",
						"yrTerm3Convertible.allUpfront": "0.008",
						"yrTerm3Convertible.noUpfront": "0.008",
						"yrTerm3Convertible.partialUpfront": "0.008",
						"yrTerm3Standard.allUpfront": "0.006",
						"yrTerm3Standard.noUpfront": "0.007",
						"yrTerm3Standard.partialUpfront": "0.006"
					}
				},
				"mswin": {
					"ondemand": "0.018",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.014",
						"yrTerm1Standard.partialUpfront": "0.013",
						"yrTerm3Convertible.allUpfront": "0.011",
						"yrTerm3Convertible.noUpfront": "0.013",
						"yrTerm3Convertible.partialUpfront": "0.012",
						"yrTerm3Standard.allUpfront": "0.009",
						"yrTerm3Standard.noUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.010"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.069",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.039",
						"yrTerm1Standard.noUpfront": "0.047",
						"yrTerm1Standard.partialUpfront": "0.040",
						"yrTerm3Convertible.allUpfront": "0.038",
						"yrTerm3Convertible.noUpfront": "0.046",
						"yrTerm3Convertible.partialUpfront": "0.039",
						"yrTerm3Standard.allUpfront": "0.035",
						"yrTerm3Standard.noUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.037"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.014",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.009",
						"yrTerm1Standard.noUpfront": "0.009",
						"yrTerm1Standard.partialUpfront": "0.009",
						"yrTerm3Convertible.allUpfront": "0.007",
						"yrTerm3Convertible.noUpfront": "0.008",
						"yrTerm3Convertible.partialUpfront": "0.008",
						"yrTerm3Standard.allUpfront": "0.006",
						"yrTerm3Standard.noUpfront": "0.007",
						"yrTerm3Standard.partialUpfront": "0.006"
					}
				},
				"mswin": {
					"ondemand": "0.019",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.013",
						"yrTerm1Standard.noUpfront": "0.014",
						"yrTerm1Standard.partialUpfront": "0.014",
						"yrTerm3Convertible.allUpfront": "0.012",
						"yrTerm3Convertible.noUpfront": "0.013",
						"yrTerm3Convertible.partialUpfront": "0.012",
						"yrTerm3Standard.allUpfront": "0.011",
						"yrTerm3Standard.noUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.011"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.09",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.084",
						"yrTerm1Standard.noUpfront": "0.085",
						"yrTerm1Standard.partialUpfront": "0.085",
						"yrTerm3Convertible.allUpfront": "0.083",
						"yrTerm3Convertible.noUpfront": "0.084",
						"yrTerm3Convertible.partialUpfront": "0.083",
						"yrTerm3Standard.allUpfront": "0.082",
						"yrTerm3Standard.noUpfront": "0.083",
						"yrTerm3Standard.partialUpfront": "0.082"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.012",
						"yrTerm1Standard.partialUpfront": "0.012",
						"yrTerm3Convertible.allUpfront": "0.010",
						"yrTerm3Convertible.noUpfront": "0.011",
						"yrTerm3Convertible.partialUpfront": "0.011",
						"yrTerm3Standard.allUpfront": "0.008",
						"yrTerm3Standard.noUpfront": "0.010",
						"yrTerm3Standard.partialUpfront": "0.009"
					}
				},
				"mswin": {
					"ondemand": "0.025",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.017",
						"yrTerm1Standard.partialUpfront": "0.017",
						"yrTerm3Convertible.allUpfront": "0.015",
						"yrTerm3Convertible.noUpfront": "0.016",
						"yrTerm3Convertible.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.013",
						"yrTerm3Standard.noUpfront": "0.015",
						"yrTerm3Standard.partialUpfront": "0.014"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.077",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.040",
						"yrTerm1Standard.noUpfront": "0.048",
						"yrTerm1Standard.partialUpfront": "0.041",
						"yrTerm3Convertible.allUpfront": "0.038",
						"yrTerm3Convertible.noUpfront": "0.046",
						"yrTerm3Convertible.partialUpfront": "0.039",
						"yrTerm3Standard.allUpfront": "0.036",
						"yrTerm3Standard.noUpfront": "0.038",
						"yrTerm3Standard.partialUpfront": "0.038"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.012",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.008",
						"yrTerm1Standard.noUpfront": "0.008",
						"yrTerm1Standard.partialUpfront": "0.008",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.007",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.006",
						"yrTerm3Standard.partialUpfront": "0.005"
					}
				},
				"mswin": {
					"ondemand": "0.017",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.013",
						"yrTerm1Standard.partialUpfront": "0.012",
						"yrTerm3Convertible.allUpfront": "0.011",
						"yrTerm3Convertible.noUpfront": "0.012",
						"yrTerm3Convertible.partialUpfront": "0.011",
						"yrTerm3Standard.allUpfront": "0.009",
						"yrTerm3Standard.noUpfront": "0.011",
						"yrTerm3Standard.partialUpfront": "0.010"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.068",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.039",
						"yrTerm1Standard.noUpfront": "0.047",
						"yrTerm1Standard.partialUpfront": "0.040",
						"yrTerm3Convertible.allUpfront": "0.038",
						"yrTerm3Convertible.noUpfront": "0.046",
						"yrTerm3Convertible.partialUpfront": "0.039",
						"yrTerm3Standard.allUpfront": "0.034",
						"yrTerm3Standard.noUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.037"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.012",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.008",
						"yrTerm1Standard.noUpfront": "0.008",
						"yrTerm1Standard.partialUpfront": "0.008",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.007",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.006",
						"yrTerm3Standard.partialUpfront": "0.005"
					}
				},
				"mswin": {
					"ondemand": "0.017",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.013",
						"yrTerm1Standard.partialUpfront": "0.012",
						"yrTerm3Convertible.allUpfront": "0.011",
						"yrTerm3Convertible.noUpfront": "0.012",
						"yrTerm3Convertible.partialUpfront": "0.011",
						"yrTerm3Standard.allUpfront": "0.009",
						"yrTerm3Standard.noUpfront": "0.011",
						"yrTerm3Standard.partialUpfront": "0.010"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.068",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.039",
						"yrTerm1Standard.noUpfront": "0.047",
						"yrTerm1Standard.partialUpfront": "0.040",
						"yrTerm3Convertible.allUpfront": "0.038",
						"yrTerm3Convertible.noUpfront": "0.046",
						"yrTerm3Convertible.partialUpfront": "0.039",
						"yrTerm3Standard.allUpfront": "0.034",
						"yrTerm3Standard.noUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.037"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.014",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.009",
						"yrTerm1Standard.noUpfront": "0.010",
						"yrTerm1Standard.partialUpfront": "0.009",
						"yrTerm3Convertible.allUpfront": "0.008",
						"yrTerm3Convertible.noUpfront": "0.009",
						"yrTerm3Convertible.partialUpfront": "0.008",
						"yrTerm3Standard.allUpfront": "0.006",
						"yrTerm3Standard.noUpfront": "0.008",
						"yrTerm3Standard.partialUpfront": "0.006"
					}
				},
				"mswin": {
					"ondemand": "0.019",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.013",
						"yrTerm1Standard.noUpfront": "0.014",
						"yrTerm1Standard.partialUpfront": "0.014",
						"yrTerm3Convertible.allUpfront": "0.012",
						"yrTerm3Convertible.noUpfront": "0.013",
						"yrTerm3Convertible.partialUpfront": "0.013",
						"yrTerm3Standard.allUpfront": "0.010",
						"yrTerm3Standard.noUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.011"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.071",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.041",
						"yrTerm1Standard.noUpfront": "0.049",
						"yrTerm1Standard.partialUpfront": "0.042",
						"yrTerm3Convertible.allUpfront": "0.040",
						"yrTerm3Convertible.noUpfront": "0.048",
						"yrTerm3Convertible.partialUpfront": "0.041",
						"yrTerm3Standard.allUpfront": "0.036",
						"yrTerm3Standard.noUpfront": "0.038",
						"yrTerm3Standard.partialUpfront": "0.038"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.015",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.011",
						"yrTerm1Standard.noUpfront": "0.011",
						"yrTerm1Standard.partialUpfront": "0.011",
						"yrTerm3Convertible.allUpfront": "0.009",
						"yrTerm3Convertible.noUpfront": "0.009",
						"yrTerm3Convertible.partialUpfront": "0.009",
						"yrTerm3Standard.allUpfront": "0.008",
						"yrTerm3Standard.noUpfront": "0.008",
						"yrTerm3Standard.partialUpfront": "0.008"
					}
				},
				"mswin": {
					"ondemand": "0.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.015",
						"yrTerm1Standard.noUpfront": "0.016",
						"yrTerm1Standard.partialUpfront": "0.016",
						"yrTerm3Convertible.allUpfront": "0.013",
						"yrTerm3Convertible.noUpfront": "0.014",
						"yrTerm3Convertible.partialUpfront": "0.013",
						"yrTerm3Standard.allUpfront": "0.011",
						"yrTerm3Standard.noUpfront": "0.013",
						"yrTerm3Standard.partialUpfront": "0.012"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.072",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.042",
						"yrTerm1Standard.noUpfront": "0.050",
						"yrTerm1Standard.partialUpfront": "0.043",
						"yrTerm3Convertible.allUpfront": "0.040",
						"yrTerm3Convertible.noUpfront": "0.049",
						"yrTerm3Convertible.partialUpfront": "0.041",
						"yrTerm3Standard.allUpfront": "0.036",
						"yrTerm3Standard.noUpfront": "0.038",
						"yrTerm3Standard.partialUpfront": "0.038"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.012",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.008",
						"yrTerm1Standard.noUpfront": "0.008",
						"yrTerm1Standard.partialUpfront": "0.008",
						"yrTerm3Convertible.allUpfront": "0.006",
						"yrTerm3Convertible.noUpfront": "0.007",
						"yrTerm3Convertible.partialUpfront": "0.006",
						"yrTerm3Standard.allUpfront": "0.005",
						"yrTerm3Standard.noUpfront": "0.006",
						"yrTerm3Standard.partialUpfront": "0.005"
					}
				},
				"mswin": {
					"ondemand": "0.017",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.012",
						"yrTerm1Standard.noUpfront": "0.013",
						"yrTerm1Standard.partialUpfront": "0.012",
						"yrTerm3Convertible.allUpfront": "0.011",
						"yrTerm3Convertible.noUpfront": "0.012",
						"yrTerm3Convertible.partialUpfront": "0.011",
						"yrTerm3Standard.allUpfront": "0.009",
						"yrTerm3Standard.noUpfront": "0.011",
						"yrTerm3Standard.partialUpfront": "0.010"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.068",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.039",
						"yrTerm1Standard.noUpfront": "0.047",
						"yrTerm1Standard.partialUpfront": "0.040",
						"yrTerm3Convertible.allUpfront": "0.038",
						"yrTerm3Convertible.noUpfront": "0.046",
						"yrTerm3Convertible.partialUpfront": "0.039",
						"yrTerm3Standard.allUpfront": "0.034",
						"yrTerm3Standard.noUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.037"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 1,
		"vpc": {
			"ips_per_eni": 2,
			"max_enis": 2
		},
		"vpc_only": true
	},
	{
		"ECU": "variable",
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64",
			"i386"
		],
		"base_performance": 0.2,
		"burst_minutes": 288,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "t2.small",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 2,
		"network_performance": "Low to Moderate",
		"placement_group_support": false,
		"pretty_name": "T2 Small",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.024",
						"yrTerm1Standard.noUpfront": "0.025",
						"yrTerm1Standard.partialUpfront": "0.024",
						"yrTerm3Convertible.allUpfront": "0.018",
						"yrTerm3Convertible.noUpfront": "0.020",
						"yrTerm3Convertible.partialUpfront": "0.018",
						"yrTerm3Standard.allUpfront": "0.015",
						"yrTerm3Standard.noUpfront": "0.017",
						"yrTerm3Standard.partialUpfront": "0.016"
					}
				},
				"mswin": {
					"ondemand": "0.041",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.033",
						"yrTerm1Standard.noUpfront": "0.034",
						"yrTerm1Standard.partialUpfront": "0.033",
						"yrTerm3Convertible.allUpfront": "0.027",
						"yrTerm3Convertible.noUpfront": "0.029",
						"yrTerm3Convertible.partialUpfront": "0.028",
						"yrTerm3Standard.allUpfront": "0.024",
						"yrTerm3Standard.noUpfront": "0.027",
						"yrTerm3Standard.partialUpfront": "0.025"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.115",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.088",
						"yrTerm1Standard.noUpfront": "0.105",
						"yrTerm1Standard.partialUpfront": "0.089",
						"yrTerm3Convertible.allUpfront": "0.085",
						"yrTerm3Convertible.noUpfront": "0.100",
						"yrTerm3Convertible.partialUpfront": "0.086",
						"yrTerm3Standard.allUpfront": "0.075",
						"yrTerm3Standard.noUpfront": "0.098",
						"yrTerm3Standard.partialUpfront": "0.080"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.024",
						"yrTerm1Standard.noUpfront": "0.023",
						"yrTerm1Standard.partialUpfront": "0.024",
						"yrTerm3Convertible.allUpfront": "0.018",
						"yrTerm3Convertible.noUpfront": "0.020",
						"yrTerm3Convertible.partialUpfront": "0.018",
						"yrTerm3Standard.allUpfront": "0.015",
						"yrTerm3Standard.noUpfront": "0.017",
						"yrTerm3Standard.partialUpfront": "0.016"
					}
				},
				"mswin": {
					"ondemand": "0.041",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.033",
						"yrTerm1Standard.noUpfront": "0.032",
						"yrTerm1Standard.partialUpfront": "0.033",
						"yrTerm3Convertible.allUpfront": "0.027",
						"yrTerm3Convertible.noUpfront": "0.029",
						"yrTerm3Convertible.partialUpfront": "0.028",
						"yrTerm3Standard.allUpfront": "0.024",
						"yrTerm3Standard.noUpfront": "0.027",
						"yrTerm3Standard.partialUpfront": "0.025"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.115",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.107",
						"yrTerm1Standard.noUpfront": "0.103",
						"yrTerm1Standard.partialUpfront": "0.107",
						"yrTerm3Convertible.allUpfront": "0.098",
						"yrTerm3Convertible.noUpfront": "0.100",
						"yrTerm3Convertible.partialUpfront": "0.099",
						"yrTerm3Standard.allUpfront": "0.098",
						"yrTerm3Standard.noUpfront": "0.098",
						"yrTerm3Standard.partialUpfront": "0.099"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.03",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.023",
						"yrTerm1Standard.noUpfront": "0.023",
						"yrTerm1Standard.partialUpfront": "0.023",
						"yrTerm3Convertible.allUpfront": "0.020",
						"yrTerm3Convertible.noUpfront": "0.022",
						"yrTerm3Convertible.partialUpfront": "0.020",
						"yrTerm3Standard.allUpfront": "0.016",
						"yrTerm3Standard.noUpfront": "0.019",
						"yrTerm3Standard.partialUpfront": "0.017"
					}
				},
				"mswin": {
					"ondemand": "0.039",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.032",
						"yrTerm1Standard.noUpfront": "0.032",
						"yrTerm1Standard.partialUpfront": "0.032",
						"yrTerm3Convertible.allUpfront": "0.029",
						"yrTerm3Convertible.noUpfront": "0.031",
						"yrTerm3Convertible.partialUpfront": "0.029",
						"yrTerm3Standard.allUpfront": "0.025",
						"yrTerm3Standard.noUpfront": "0.028",
						"yrTerm3Standard.partialUpfront": "0.026"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.113",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.106",
						"yrTerm1Standard.noUpfront": "0.103",
						"yrTerm1Standard.partialUpfront": "0.106",
						"yrTerm3Convertible.allUpfront": "0.100",
						"yrTerm3Convertible.noUpfront": "0.102",
						"yrTerm3Convertible.partialUpfront": "0.100",
						"yrTerm3Standard.allUpfront": "0.099",
						"yrTerm3Standard.noUpfront": "0.099",
						"yrTerm3Standard.partialUpfront": "0.100"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.03",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.023",
						"yrTerm1Standard.noUpfront": "0.024",
						"yrTerm1Standard.partialUpfront": "0.023",
						"yrTerm3Convertible.allUpfront": "0.020",
						"yrTerm3Convertible.noUpfront": "0.022",
						"yrTerm3Convertible.partialUpfront": "0.020",
						"yrTerm3Standard.allUpfront": "0.017",
						"yrTerm3Standard.noUpfront": "0.019",
						"yrTerm3Standard.partialUpfront": "0.018"
					}
				},
				"mswin": {
					"ondemand": "0.039",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.032",
						"yrTerm1Standard.noUpfront": "0.033",
						"yrTerm1Standard.partialUpfront": "0.032",
						"yrTerm3Convertible.allUpfront": "0.029",
						"yrTerm3Convertible.noUpfront": "0.031",
						"yrTerm3Convertible.partialUpfront": "0.029",
						"yrTerm3Standard.allUpfront": "0.026",
						"yrTerm3Standard.noUpfront": "0.028",
						"yrTerm3Standard.partialUpfront": "0.027"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.113",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.090",
						"yrTerm1Standard.noUpfront": "0.104",
						"yrTerm1Standard.partialUpfront": "0.092",
						"yrTerm3Convertible.allUpfront": "0.087",
						"yrTerm3Convertible.noUpfront": "0.102",
						"yrTerm3Convertible.partialUpfront": "0.089",
						"yrTerm3Standard.allUpfront": "0.079",
						"yrTerm3Standard.noUpfront": "0.099",
						"yrTerm3Standard.partialUpfront": "0.084"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.024",
						"yrTerm1Standard.noUpfront": "0.026",
						"yrTerm1Standard.partialUpfront": "0.024",
						"yrTerm3Convertible.allUpfront": "0.021",
						"yrTerm3Convertible.noUpfront": "0.023",
						"yrTerm3Convertible.partialUpfront": "0.022",
						"yrTerm3Standard.allUpfront": "0.018",
						"yrTerm3Standard.noUpfront": "0.020",
						"yrTerm3Standard.partialUpfront": "0.019"
					}
				},
				"mswin": {
					"ondemand": "0.041",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.033",
						"yrTerm1Standard.noUpfront": "0.035",
						"yrTerm1Standard.partialUpfront": "0.033",
						"yrTerm3Convertible.allUpfront": "0.030",
						"yrTerm3Convertible.noUpfront": "0.033",
						"yrTerm3Convertible.partialUpfront": "0.031",
						"yrTerm3Standard.allUpfront": "0.027",
						"yrTerm3Standard.noUpfront": "0.030",
						"yrTerm3Standard.partialUpfront": "0.028"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.115",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.090",
						"yrTerm1Standard.noUpfront": "0.106",
						"yrTerm1Standard.partialUpfront": "0.092",
						"yrTerm3Convertible.allUpfront": "0.087",
						"yrTerm3Convertible.noUpfront": "0.104",
						"yrTerm3Convertible.partialUpfront": "0.089",
						"yrTerm3Standard.allUpfront": "0.079",
						"yrTerm3Standard.noUpfront": "0.101",
						"yrTerm3Standard.partialUpfront": "0.084"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.026",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.018",
						"yrTerm1Standard.noUpfront": "0.019",
						"yrTerm1Standard.partialUpfront": "0.018",
						"yrTerm3Convertible.allUpfront": "0.014",
						"yrTerm3Convertible.noUpfront": "0.015",
						"yrTerm3Convertible.partialUpfront": "0.014",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.noUpfront": "0.013",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswin": {
					"ondemand": "0.035",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.027",
						"yrTerm1Standard.noUpfront": "0.028",
						"yrTerm1Standard.partialUpfront": "0.027",
						"yrTerm3Convertible.allUpfront": "0.023",
						"yrTerm3Convertible.noUpfront": "0.025",
						"yrTerm3Convertible.partialUpfront": "0.023",
						"yrTerm3Standard.allUpfront": "0.021",
						"yrTerm3Standard.noUpfront": "0.023",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.106",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.098",
						"yrTerm1Standard.noUpfront": "0.099",
						"yrTerm1Standard.partialUpfront": "0.098",
						"yrTerm3Convertible.allUpfront": "0.094",
						"yrTerm3Convertible.noUpfront": "0.096",
						"yrTerm3Convertible.partialUpfront": "0.094",
						"yrTerm3Standard.allUpfront": "0.092",
						"yrTerm3Standard.noUpfront": "0.094",
						"yrTerm3Standard.partialUpfront": "0.093"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.027",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.019",
						"yrTerm1Standard.noUpfront": "0.020",
						"yrTerm1Standard.partialUpfront": "0.019",
						"yrTerm3Convertible.allUpfront": "0.014",
						"yrTerm3Convertible.noUpfront": "0.016",
						"yrTerm3Convertible.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.noUpfront": "0.014",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswin": {
					"ondemand": "0.036",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.028",
						"yrTerm1Standard.noUpfront": "0.029",
						"yrTerm1Standard.partialUpfront": "0.028",
						"yrTerm3Convertible.allUpfront": "0.024",
						"yrTerm3Convertible.noUpfront": "0.025",
						"yrTerm3Convertible.partialUpfront": "0.024",
						"yrTerm3Standard.allUpfront": "0.019",
						"yrTerm3Standard.noUpfront": "0.023",
						"yrTerm3Standard.partialUpfront": "0.020"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.11",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.081",
						"yrTerm1Standard.noUpfront": "0.096",
						"yrTerm1Standard.partialUpfront": "0.082",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.094",
						"yrTerm3Convertible.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.070",
						"yrTerm3Standard.noUpfront": "0.094",
						"yrTerm3Standard.partialUpfront": "0.075"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.025",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.017",
						"yrTerm1Standard.noUpfront": "0.018",
						"yrTerm1Standard.partialUpfront": "0.017",
						"yrTerm3Convertible.allUpfront": "0.015",
						"yrTerm3Convertible.noUpfront": "0.017",
						"yrTerm3Convertible.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.011",
						"yrTerm3Standard.noUpfront": "0.015",
						"yrTerm3Standard.partialUpfront": "0.012"
					}
				},
				"mswin": {
					"ondemand": "0.034",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.026",
						"yrTerm1Standard.noUpfront": "0.027",
						"yrTerm1Standard.partialUpfront": "0.026",
						"yrTerm3Convertible.allUpfront": "0.024",
						"yrTerm3Convertible.noUpfront": "0.026",
						"yrTerm3Convertible.partialUpfront": "0.024",
						"yrTerm3Standard.allUpfront": "0.017",
						"yrTerm3Standard.noUpfront": "0.024",
						"yrTerm3Standard.partialUpfront": "0.018"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.108",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.079",
						"yrTerm1Standard.noUpfront": "0.094",
						"yrTerm1Standard.partialUpfront": "0.081",
						"yrTerm3Convertible.allUpfront": "0.077",
						"yrTerm3Convertible.noUpfront": "0.092",
						"yrTerm3Convertible.partialUpfront": "0.079",
						"yrTerm3Standard.allUpfront": "0.069",
						"yrTerm3Standard.noUpfront": "0.095",
						"yrTerm3Standard.partialUpfront": "0.074"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.026",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.018",
						"yrTerm1Standard.noUpfront": "0.018",
						"yrTerm1Standard.partialUpfront": "0.018",
						"yrTerm3Convertible.allUpfront": "0.015",
						"yrTerm3Convertible.noUpfront": "0.016",
						"yrTerm3Convertible.partialUpfront": "0.015",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.noUpfront": "0.014",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswin": {
					"ondemand": "0.035",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.027",
						"yrTerm1Standard.noUpfront": "0.027",
						"yrTerm1Standard.partialUpfront": "0.027",
						"yrTerm3Convertible.allUpfront": "0.024",
						"yrTerm3Convertible.noUpfront": "0.026",
						"yrTerm3Convertible.partialUpfront": "0.024",
						"yrTerm3Standard.allUpfront": "0.021",
						"yrTerm3Standard.noUpfront": "0.024",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.106",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.098",
						"yrTerm1Standard.noUpfront": "0.098",
						"yrTerm1Standard.partialUpfront": "0.098",
						"yrTerm3Convertible.allUpfront": "0.095",
						"yrTerm3Convertible.noUpfront": "0.097",
						"yrTerm3Convertible.partialUpfront": "0.095",
						"yrTerm3Standard.allUpfront": "0.092",
						"yrTerm3Standard.noUpfront": "0.095",
						"yrTerm3Standard.partialUpfront": "0.093"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.041",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.024",
						"yrTerm1Standard.noUpfront": "0.025",
						"yrTerm1Standard.partialUpfront": "0.024",
						"yrTerm3Convertible.allUpfront": "0.021",
						"yrTerm3Convertible.noUpfront": "0.023",
						"yrTerm3Convertible.partialUpfront": "0.021",
						"yrTerm3Standard.allUpfront": "0.017",
						"yrTerm3Standard.noUpfront": "0.020",
						"yrTerm3Standard.partialUpfront": "0.018"
					}
				},
				"mswin": {
					"ondemand": "0.05",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.033",
						"yrTerm1Standard.noUpfront": "0.034",
						"yrTerm1Standard.partialUpfront": "0.033",
						"yrTerm3Convertible.allUpfront": "0.030",
						"yrTerm3Convertible.noUpfront": "0.032",
						"yrTerm3Convertible.partialUpfront": "0.030",
						"yrTerm3Standard.allUpfront": "0.026",
						"yrTerm3Standard.noUpfront": "0.029",
						"yrTerm3Standard.partialUpfront": "0.027"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.124",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.091",
						"yrTerm1Standard.noUpfront": "0.105",
						"yrTerm1Standard.partialUpfront": "0.093",
						"yrTerm3Convertible.allUpfront": "0.088",
						"yrTerm3Convertible.noUpfront": "0.103",
						"yrTerm3Convertible.partialUpfront": "0.089",
						"yrTerm3Standard.allUpfront": "0.080",
						"yrTerm3Standard.noUpfront": "0.100",
						"yrTerm3Standard.partialUpfront": "0.085"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.023",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.017",
						"yrTerm1Standard.partialUpfront": "0.016",
						"yrTerm3Convertible.allUpfront": "0.013",
						"yrTerm3Convertible.noUpfront": "0.014",
						"yrTerm3Convertible.partialUpfront": "0.013",
						"yrTerm3Standard.allUpfront": "0.010",
						"yrTerm3Standard.noUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.011"
					}
				},
				"mswin": {
					"ondemand": "0.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.025",
						"yrTerm1Standard.noUpfront": "0.026",
						"yrTerm1Standard.partialUpfront": "0.025",
						"yrTerm3Convertible.allUpfront": "0.022",
						"yrTerm3Convertible.noUpfront": "0.023",
						"yrTerm3Convertible.partialUpfront": "0.022",
						"yrTerm3Standard.allUpfront": "0.016",
						"yrTerm3Standard.noUpfront": "0.021",
						"yrTerm3Standard.partialUpfront": "0.017"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.106",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.093",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Convertible.allUpfront": "0.076",
						"yrTerm3Convertible.noUpfront": "0.091",
						"yrTerm3Convertible.partialUpfront": "0.078",
						"yrTerm3Standard.allUpfront": "0.068",
						"yrTerm3Standard.noUpfront": "0.092",
						"yrTerm3Standard.partialUpfront": "0.072"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.023",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.017",
						"yrTerm1Standard.partialUpfront": "0.016",
						"yrTerm3Convertible.allUpfront": "0.013",
						"yrTerm3Convertible.noUpfront": "0.014",
						"yrTerm3Convertible.partialUpfront": "0.013",
						"yrTerm3Standard.allUpfront": "0.010",
						"yrTerm3Standard.noUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.011"
					}
				},
				"mswin": {
					"ondemand": "0.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.025",
						"yrTerm1Standard.noUpfront": "0.026",
						"yrTerm1Standard.partialUpfront": "0.025",
						"yrTerm3Convertible.allUpfront": "0.022",
						"yrTerm3Convertible.noUpfront": "0.023",
						"yrTerm3Convertible.partialUpfront": "0.022",
						"yrTerm3Standard.allUpfront": "0.016",
						"yrTerm3Standard.noUpfront": "0.021",
						"yrTerm3Standard.partialUpfront": "0.017"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.106",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.093",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Convertible.allUpfront": "0.076",
						"yrTerm3Convertible.noUpfront": "0.091",
						"yrTerm3Convertible.partialUpfront": "0.078",
						"yrTerm3Standard.allUpfront": "0.068",
						"yrTerm3Standard.noUpfront": "0.092",
						"yrTerm3Standard.partialUpfront": "0.072"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.028",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.019",
						"yrTerm1Standard.noUpfront": "0.019",
						"yrTerm1Standard.partialUpfront": "0.019",
						"yrTerm3Convertible.allUpfront": "0.016",
						"yrTerm3Convertible.noUpfront": "0.017",
						"yrTerm3Convertible.partialUpfront": "0.016",
						"yrTerm3Standard.allUpfront": "0.012",
						"yrTerm3Standard.noUpfront": "0.015",
						"yrTerm3Standard.partialUpfront": "0.013"
					}
				},
				"mswin": {
					"ondemand": "0.037",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.028",
						"yrTerm1Standard.noUpfront": "0.028",
						"yrTerm1Standard.partialUpfront": "0.028",
						"yrTerm3Convertible.allUpfront": "0.025",
						"yrTerm3Convertible.noUpfront": "0.027",
						"yrTerm3Convertible.partialUpfront": "0.025",
						"yrTerm3Standard.allUpfront": "0.019",
						"yrTerm3Standard.noUpfront": "0.024",
						"yrTerm3Standard.partialUpfront": "0.020"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.111",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.082",
						"yrTerm1Standard.noUpfront": "0.098",
						"yrTerm1Standard.partialUpfront": "0.084",
						"yrTerm3Convertible.allUpfront": "0.080",
						"yrTerm3Convertible.noUpfront": "0.096",
						"yrTerm3Convertible.partialUpfront": "0.082",
						"yrTerm3Standard.allUpfront": "0.070",
						"yrTerm3Standard.noUpfront": "0.095",
						"yrTerm3Standard.partialUpfront": "0.075"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.031",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.021",
						"yrTerm1Standard.noUpfront": "0.022",
						"yrTerm1Standard.partialUpfront": "0.021",
						"yrTerm3Convertible.allUpfront": "0.017",
						"yrTerm3Convertible.noUpfront": "0.019",
						"yrTerm3Convertible.partialUpfront": "0.017",
						"yrTerm3Standard.allUpfront": "0.014",
						"yrTerm3Standard.noUpfront": "0.016",
						"yrTerm3Standard.partialUpfront": "0.015"
					}
				},
				"mswin": {
					"ondemand": "0.04",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.030",
						"yrTerm1Standard.noUpfront": "0.032",
						"yrTerm1Standard.partialUpfront": "0.030",
						"yrTerm3Convertible.allUpfront": "0.026",
						"yrTerm3Convertible.noUpfront": "0.028",
						"yrTerm3Convertible.partialUpfront": "0.027",
						"yrTerm3Standard.allUpfront": "0.021",
						"yrTerm3Standard.noUpfront": "0.026",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.114",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.083",
						"yrTerm1Standard.noUpfront": "0.099",
						"yrTerm1Standard.partialUpfront": "0.085",
						"yrTerm3Convertible.allUpfront": "0.081",
						"yrTerm3Convertible.noUpfront": "0.097",
						"yrTerm3Convertible.partialUpfront": "0.082",
						"yrTerm3Standard.allUpfront": "0.072",
						"yrTerm3Standard.noUpfront": "0.097",
						"yrTerm3Standard.partialUpfront": "0.077"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.023",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.016",
						"yrTerm1Standard.noUpfront": "0.017",
						"yrTerm1Standard.partialUpfront": "0.016",
						"yrTerm3Convertible.allUpfront": "0.013",
						"yrTerm3Convertible.noUpfront": "0.014",
						"yrTerm3Convertible.partialUpfront": "0.013",
						"yrTerm3Standard.allUpfront": "0.010",
						"yrTerm3Standard.noUpfront": "0.012",
						"yrTerm3Standard.partialUpfront": "0.011"
					}
				},
				"mswin": {
					"ondemand": "0.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.025",
						"yrTerm1Standard.noUpfront": "0.026",
						"yrTerm1Standard.partialUpfront": "0.025",
						"yrTerm3Convertible.allUpfront": "0.022",
						"yrTerm3Convertible.noUpfront": "0.023",
						"yrTerm3Convertible.partialUpfront": "0.022",
						"yrTerm3Standard.allUpfront": "0.016",
						"yrTerm3Standard.noUpfront": "0.021",
						"yrTerm3Standard.partialUpfront": "0.017"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.106",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.093",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Convertible.allUpfront": "0.076",
						"yrTerm3Convertible.noUpfront": "0.091",
						"yrTerm3Convertible.partialUpfront": "0.078",
						"yrTerm3Standard.allUpfront": "0.068",
						"yrTerm3Standard.noUpfront": "0.092",
						"yrTerm3Standard.partialUpfront": "0.072"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 1,
		"vpc": {
			"ips_per_eni": 4,
			"max_enis": 2
		},
		"vpc_only": true
	},
	{
		"ECU": "variable",
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64",
			"i386"
		],
		"base_performance": 0.4,
		"burst_minutes": 288,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "t2.medium",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 4,
		"network_performance": "Low to Moderate",
		"placement_group_support": false,
		"pretty_name": "T2 Medium",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.046",
						"yrTerm1Standard.noUpfront": "0.050",
						"yrTerm1Standard.partialUpfront": "0.047",
						"yrTerm3Convertible.allUpfront": "0.036",
						"yrTerm3Convertible.noUpfront": "0.040",
						"yrTerm3Convertible.partialUpfront": "0.037",
						"yrTerm3Standard.allUpfront": "0.030",
						"yrTerm3Standard.noUpfront": "0.035",
						"yrTerm3Standard.partialUpfront": "0.032"
					}
				},
				"mswin": {
					"ondemand": "0.082",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.064",
						"yrTerm1Standard.noUpfront": "0.068",
						"yrTerm1Standard.partialUpfront": "0.065",
						"yrTerm3Convertible.allUpfront": "0.054",
						"yrTerm3Convertible.noUpfront": "0.058",
						"yrTerm3Convertible.partialUpfront": "0.055",
						"yrTerm3Standard.allUpfront": "0.047",
						"yrTerm3Standard.noUpfront": "0.053",
						"yrTerm3Standard.partialUpfront": "0.050"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.135",
						"yrTerm1Standard.noUpfront": "0.139",
						"yrTerm1Standard.partialUpfront": "0.136",
						"yrTerm3Convertible.allUpfront": "0.126",
						"yrTerm3Convertible.noUpfront": "0.129",
						"yrTerm3Convertible.partialUpfront": "0.126",
						"yrTerm3Standard.allUpfront": "0.119",
						"yrTerm3Standard.noUpfront": "0.124",
						"yrTerm3Standard.partialUpfront": "0.122"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.046",
						"yrTerm1Standard.noUpfront": "0.046",
						"yrTerm1Standard.partialUpfront": "0.047",
						"yrTerm3Convertible.allUpfront": "0.036",
						"yrTerm3Convertible.noUpfront": "0.040",
						"yrTerm3Convertible.partialUpfront": "0.037",
						"yrTerm3Standard.allUpfront": "0.030",
						"yrTerm3Standard.noUpfront": "0.035",
						"yrTerm3Standard.partialUpfront": "0.032"
					}
				},
				"mswin": {
					"ondemand": "0.082",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.064",
						"yrTerm1Standard.noUpfront": "0.064",
						"yrTerm1Standard.partialUpfront": "0.065",
						"yrTerm3Convertible.allUpfront": "0.054",
						"yrTerm3Convertible.noUpfront": "0.058",
						"yrTerm3Convertible.partialUpfront": "0.055",
						"yrTerm3Standard.allUpfront": "0.048",
						"yrTerm3Standard.noUpfront": "0.053",
						"yrTerm3Standard.partialUpfront": "0.050"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.312",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.294",
						"yrTerm1Standard.noUpfront": "0.135",
						"yrTerm1Standard.partialUpfront": "0.295",
						"yrTerm3Convertible.allUpfront": "0.126",
						"yrTerm3Convertible.noUpfront": "0.129",
						"yrTerm3Convertible.partialUpfront": "0.126",
						"yrTerm3Standard.allUpfront": "0.278",
						"yrTerm3Standard.noUpfront": "0.124",
						"yrTerm3Standard.partialUpfront": "0.280"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.059",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.043",
						"yrTerm1Standard.noUpfront": "0.046",
						"yrTerm1Standard.partialUpfront": "0.044",
						"yrTerm3Convertible.allUpfront": "0.039",
						"yrTerm3Convertible.noUpfront": "0.044",
						"yrTerm3Convertible.partialUpfront": "0.040",
						"yrTerm3Standard.allUpfront": "0.033",
						"yrTerm3Standard.noUpfront": "0.038",
						"yrTerm3Standard.partialUpfront": "0.035"
					}
				},
				"mswin": {
					"ondemand": "0.077",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.061",
						"yrTerm1Standard.noUpfront": "0.064",
						"yrTerm1Standard.partialUpfront": "0.062",
						"yrTerm3Convertible.allUpfront": "0.057",
						"yrTerm3Convertible.noUpfront": "0.062",
						"yrTerm3Convertible.partialUpfront": "0.058",
						"yrTerm3Standard.allUpfront": "0.051",
						"yrTerm3Standard.noUpfront": "0.056",
						"yrTerm3Standard.partialUpfront": "0.053"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.307",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.291",
						"yrTerm1Standard.noUpfront": "0.136",
						"yrTerm1Standard.partialUpfront": "0.292",
						"yrTerm3Convertible.allUpfront": "0.129",
						"yrTerm3Convertible.noUpfront": "0.133",
						"yrTerm3Convertible.partialUpfront": "0.130",
						"yrTerm3Standard.allUpfront": "0.281",
						"yrTerm3Standard.noUpfront": "0.127",
						"yrTerm3Standard.partialUpfront": "0.283"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.06",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.044",
						"yrTerm1Standard.noUpfront": "0.047",
						"yrTerm1Standard.partialUpfront": "0.045",
						"yrTerm3Convertible.allUpfront": "0.040",
						"yrTerm3Convertible.noUpfront": "0.044",
						"yrTerm3Convertible.partialUpfront": "0.040",
						"yrTerm3Standard.allUpfront": "0.033",
						"yrTerm3Standard.noUpfront": "0.038",
						"yrTerm3Standard.partialUpfront": "0.035"
					}
				},
				"mswin": {
					"ondemand": "0.078",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.062",
						"yrTerm1Standard.noUpfront": "0.065",
						"yrTerm1Standard.partialUpfront": "0.063",
						"yrTerm3Convertible.allUpfront": "0.058",
						"yrTerm3Convertible.noUpfront": "0.062",
						"yrTerm3Convertible.partialUpfront": "0.058",
						"yrTerm3Standard.allUpfront": "0.051",
						"yrTerm3Standard.noUpfront": "0.056",
						"yrTerm3Standard.partialUpfront": "0.053"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.225",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.135",
						"yrTerm1Standard.noUpfront": "0.136",
						"yrTerm1Standard.partialUpfront": "0.138",
						"yrTerm3Convertible.allUpfront": "0.129",
						"yrTerm3Convertible.noUpfront": "0.133",
						"yrTerm3Convertible.partialUpfront": "0.130",
						"yrTerm3Standard.allUpfront": "0.122",
						"yrTerm3Standard.noUpfront": "0.127",
						"yrTerm3Standard.partialUpfront": "0.125"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.047",
						"yrTerm1Standard.noUpfront": "0.051",
						"yrTerm1Standard.partialUpfront": "0.048",
						"yrTerm3Convertible.allUpfront": "0.042",
						"yrTerm3Convertible.noUpfront": "0.047",
						"yrTerm3Convertible.partialUpfront": "0.043",
						"yrTerm3Standard.allUpfront": "0.036",
						"yrTerm3Standard.noUpfront": "0.041",
						"yrTerm3Standard.partialUpfront": "0.038"
					}
				},
				"mswin": {
					"ondemand": "0.082",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.065",
						"yrTerm1Standard.noUpfront": "0.069",
						"yrTerm1Standard.partialUpfront": "0.066",
						"yrTerm3Convertible.allUpfront": "0.060",
						"yrTerm3Convertible.noUpfront": "0.065",
						"yrTerm3Convertible.partialUpfront": "0.061",
						"yrTerm3Standard.allUpfront": "0.054",
						"yrTerm3Standard.noUpfront": "0.059",
						"yrTerm3Standard.partialUpfront": "0.056"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.138",
						"yrTerm1Standard.noUpfront": "0.141",
						"yrTerm1Standard.partialUpfront": "0.141",
						"yrTerm3Convertible.allUpfront": "0.132",
						"yrTerm3Convertible.noUpfront": "0.136",
						"yrTerm3Convertible.partialUpfront": "0.133",
						"yrTerm3Standard.allUpfront": "0.125",
						"yrTerm3Standard.noUpfront": "0.130",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.052",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.034",
						"yrTerm1Standard.noUpfront": "0.037",
						"yrTerm1Standard.partialUpfront": "0.035",
						"yrTerm3Convertible.allUpfront": "0.028",
						"yrTerm3Convertible.noUpfront": "0.031",
						"yrTerm3Convertible.partialUpfront": "0.029",
						"yrTerm3Standard.allUpfront": "0.023",
						"yrTerm3Standard.noUpfront": "0.027",
						"yrTerm3Standard.partialUpfront": "0.024"
					}
				},
				"mswin": {
					"ondemand": "0.07",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.053",
						"yrTerm1Standard.noUpfront": "0.055",
						"yrTerm1Standard.partialUpfront": "0.053",
						"yrTerm3Convertible.allUpfront": "0.046",
						"yrTerm3Convertible.noUpfront": "0.049",
						"yrTerm3Convertible.partialUpfront": "0.047",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.noUpfront": "0.045",
						"yrTerm3Standard.partialUpfront": "0.043"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.141",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.124",
						"yrTerm1Standard.noUpfront": "0.126",
						"yrTerm1Standard.partialUpfront": "0.124",
						"yrTerm3Convertible.allUpfront": "0.117",
						"yrTerm3Convertible.noUpfront": "0.120",
						"yrTerm3Convertible.partialUpfront": "0.118",
						"yrTerm3Standard.allUpfront": "0.112",
						"yrTerm3Standard.noUpfront": "0.116",
						"yrTerm3Standard.partialUpfront": "0.114"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.054",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.036",
						"yrTerm1Standard.noUpfront": "0.040",
						"yrTerm1Standard.partialUpfront": "0.037",
						"yrTerm3Convertible.allUpfront": "0.029",
						"yrTerm3Convertible.noUpfront": "0.032",
						"yrTerm3Convertible.partialUpfront": "0.029",
						"yrTerm3Standard.allUpfront": "0.024",
						"yrTerm3Standard.noUpfront": "0.028",
						"yrTerm3Standard.partialUpfront": "0.026"
					}
				},
				"mswin": {
					"ondemand": "0.072",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.054",
						"yrTerm1Standard.noUpfront": "0.058",
						"yrTerm1Standard.partialUpfront": "0.055",
						"yrTerm3Convertible.allUpfront": "0.047",
						"yrTerm3Convertible.noUpfront": "0.050",
						"yrTerm3Convertible.partialUpfront": "0.047",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.noUpfront": "0.046",
						"yrTerm3Standard.partialUpfront": "0.039"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.219",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.127",
						"yrTerm1Standard.noUpfront": "0.129",
						"yrTerm1Standard.partialUpfront": "0.130",
						"yrTerm3Convertible.allUpfront": "0.118",
						"yrTerm3Convertible.noUpfront": "0.121",
						"yrTerm3Convertible.partialUpfront": "0.119",
						"yrTerm3Standard.allUpfront": "0.114",
						"yrTerm3Standard.noUpfront": "0.117",
						"yrTerm3Standard.partialUpfront": "0.116"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.05",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.033",
						"yrTerm1Standard.noUpfront": "0.036",
						"yrTerm1Standard.partialUpfront": "0.034",
						"yrTerm3Convertible.allUpfront": "0.030",
						"yrTerm3Convertible.noUpfront": "0.034",
						"yrTerm3Convertible.partialUpfront": "0.031",
						"yrTerm3Standard.allUpfront": "0.023",
						"yrTerm3Standard.noUpfront": "0.029",
						"yrTerm3Standard.partialUpfront": "0.024"
					}
				},
				"mswin": {
					"ondemand": "0.068",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.051",
						"yrTerm1Standard.noUpfront": "0.054",
						"yrTerm1Standard.partialUpfront": "0.052",
						"yrTerm3Convertible.allUpfront": "0.048",
						"yrTerm3Convertible.noUpfront": "0.052",
						"yrTerm3Convertible.partialUpfront": "0.049",
						"yrTerm3Standard.allUpfront": "0.035",
						"yrTerm3Standard.noUpfront": "0.047",
						"yrTerm3Standard.partialUpfront": "0.037"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.215",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.124",
						"yrTerm1Standard.noUpfront": "0.126",
						"yrTerm1Standard.partialUpfront": "0.127",
						"yrTerm3Convertible.allUpfront": "0.120",
						"yrTerm3Convertible.noUpfront": "0.123",
						"yrTerm3Convertible.partialUpfront": "0.121",
						"yrTerm3Standard.allUpfront": "0.112",
						"yrTerm3Standard.noUpfront": "0.119",
						"yrTerm3Standard.partialUpfront": "0.114"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.052",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.035",
						"yrTerm1Standard.noUpfront": "0.036",
						"yrTerm1Standard.partialUpfront": "0.035",
						"yrTerm3Convertible.allUpfront": "0.030",
						"yrTerm3Convertible.noUpfront": "0.033",
						"yrTerm3Convertible.partialUpfront": "0.030",
						"yrTerm3Standard.allUpfront": "0.023",
						"yrTerm3Standard.noUpfront": "0.029",
						"yrTerm3Standard.partialUpfront": "0.025"
					}
				},
				"mswin": {
					"ondemand": "0.07",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.053",
						"yrTerm1Standard.noUpfront": "0.054",
						"yrTerm1Standard.partialUpfront": "0.054",
						"yrTerm3Convertible.allUpfront": "0.048",
						"yrTerm3Convertible.noUpfront": "0.051",
						"yrTerm3Convertible.partialUpfront": "0.048",
						"yrTerm3Standard.allUpfront": "0.042",
						"yrTerm3Standard.noUpfront": "0.047",
						"yrTerm3Standard.partialUpfront": "0.043"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.141",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.124",
						"yrTerm1Standard.noUpfront": "0.126",
						"yrTerm1Standard.partialUpfront": "0.125",
						"yrTerm3Convertible.allUpfront": "0.119",
						"yrTerm3Convertible.noUpfront": "0.122",
						"yrTerm3Convertible.partialUpfront": "0.120",
						"yrTerm3Standard.allUpfront": "0.113",
						"yrTerm3Standard.noUpfront": "0.118",
						"yrTerm3Standard.partialUpfront": "0.114"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.081",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.046",
						"yrTerm1Standard.noUpfront": "0.050",
						"yrTerm1Standard.partialUpfront": "0.047",
						"yrTerm3Convertible.allUpfront": "0.041",
						"yrTerm3Convertible.noUpfront": "0.046",
						"yrTerm3Convertible.partialUpfront": "0.042",
						"yrTerm3Standard.allUpfront": "0.034",
						"yrTerm3Standard.noUpfront": "0.040",
						"yrTerm3Standard.partialUpfront": "0.036"
					}
				},
				"mswin": {
					"ondemand": "0.099",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.064",
						"yrTerm1Standard.noUpfront": "0.068",
						"yrTerm1Standard.partialUpfront": "0.065",
						"yrTerm3Convertible.allUpfront": "0.059",
						"yrTerm3Convertible.noUpfront": "0.064",
						"yrTerm3Convertible.partialUpfront": "0.060",
						"yrTerm3Standard.allUpfront": "0.052",
						"yrTerm3Standard.noUpfront": "0.058",
						"yrTerm3Standard.partialUpfront": "0.054"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.246",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.136",
						"yrTerm1Standard.noUpfront": "0.139",
						"yrTerm1Standard.partialUpfront": "0.138",
						"yrTerm3Convertible.allUpfront": "0.131",
						"yrTerm3Convertible.noUpfront": "0.135",
						"yrTerm3Convertible.partialUpfront": "0.132",
						"yrTerm3Standard.allUpfront": "0.123",
						"yrTerm3Standard.noUpfront": "0.129",
						"yrTerm3Standard.partialUpfront": "0.126"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.047",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.031",
						"yrTerm1Standard.noUpfront": "0.034",
						"yrTerm1Standard.partialUpfront": "0.032",
						"yrTerm3Convertible.allUpfront": "0.025",
						"yrTerm3Convertible.noUpfront": "0.028",
						"yrTerm3Convertible.partialUpfront": "0.026",
						"yrTerm3Standard.allUpfront": "0.021",
						"yrTerm3Standard.noUpfront": "0.024",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswin": {
					"ondemand": "0.065",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.049",
						"yrTerm1Standard.noUpfront": "0.052",
						"yrTerm1Standard.partialUpfront": "0.050",
						"yrTerm3Convertible.allUpfront": "0.043",
						"yrTerm3Convertible.noUpfront": "0.046",
						"yrTerm3Convertible.partialUpfront": "0.044",
						"yrTerm3Standard.allUpfront": "0.033",
						"yrTerm3Standard.noUpfront": "0.042",
						"yrTerm3Standard.partialUpfront": "0.035"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.212",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.122",
						"yrTerm1Standard.noUpfront": "0.123",
						"yrTerm1Standard.partialUpfront": "0.125",
						"yrTerm3Convertible.allUpfront": "0.115",
						"yrTerm3Convertible.noUpfront": "0.117",
						"yrTerm3Convertible.partialUpfront": "0.115",
						"yrTerm3Standard.allUpfront": "0.110",
						"yrTerm3Standard.noUpfront": "0.114",
						"yrTerm3Standard.partialUpfront": "0.112"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.047",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.031",
						"yrTerm1Standard.noUpfront": "0.034",
						"yrTerm1Standard.partialUpfront": "0.032",
						"yrTerm3Convertible.allUpfront": "0.025",
						"yrTerm3Convertible.noUpfront": "0.028",
						"yrTerm3Convertible.partialUpfront": "0.026",
						"yrTerm3Standard.allUpfront": "0.021",
						"yrTerm3Standard.noUpfront": "0.024",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswin": {
					"ondemand": "0.065",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.049",
						"yrTerm1Standard.noUpfront": "0.052",
						"yrTerm1Standard.partialUpfront": "0.050",
						"yrTerm3Convertible.allUpfront": "0.043",
						"yrTerm3Convertible.noUpfront": "0.046",
						"yrTerm3Convertible.partialUpfront": "0.044",
						"yrTerm3Standard.allUpfront": "0.033",
						"yrTerm3Standard.noUpfront": "0.042",
						"yrTerm3Standard.partialUpfront": "0.035"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.212",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.122",
						"yrTerm1Standard.noUpfront": "0.123",
						"yrTerm1Standard.partialUpfront": "0.125",
						"yrTerm3Convertible.allUpfront": "0.115",
						"yrTerm3Convertible.noUpfront": "0.117",
						"yrTerm3Convertible.partialUpfront": "0.115",
						"yrTerm3Standard.allUpfront": "0.110",
						"yrTerm3Standard.noUpfront": "0.114",
						"yrTerm3Standard.partialUpfront": "0.112"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.056",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.037",
						"yrTerm1Standard.noUpfront": "0.038",
						"yrTerm1Standard.partialUpfront": "0.038",
						"yrTerm3Convertible.allUpfront": "0.032",
						"yrTerm3Convertible.noUpfront": "0.035",
						"yrTerm3Convertible.partialUpfront": "0.032",
						"yrTerm3Standard.allUpfront": "0.024",
						"yrTerm3Standard.noUpfront": "0.030",
						"yrTerm3Standard.partialUpfront": "0.026"
					}
				},
				"mswin": {
					"ondemand": "0.074",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.055",
						"yrTerm1Standard.noUpfront": "0.056",
						"yrTerm1Standard.partialUpfront": "0.056",
						"yrTerm3Convertible.allUpfront": "0.050",
						"yrTerm3Convertible.noUpfront": "0.053",
						"yrTerm3Convertible.partialUpfront": "0.050",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.noUpfront": "0.048",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.221",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.129",
						"yrTerm1Standard.noUpfront": "0.127",
						"yrTerm1Standard.partialUpfront": "0.132",
						"yrTerm3Convertible.allUpfront": "0.121",
						"yrTerm3Convertible.noUpfront": "0.124",
						"yrTerm3Convertible.partialUpfront": "0.122",
						"yrTerm3Standard.allUpfront": "0.114",
						"yrTerm3Standard.noUpfront": "0.120",
						"yrTerm3Standard.partialUpfront": "0.117"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.061",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.041",
						"yrTerm1Standard.noUpfront": "0.045",
						"yrTerm1Standard.partialUpfront": "0.042",
						"yrTerm3Convertible.allUpfront": "0.034",
						"yrTerm3Convertible.noUpfront": "0.038",
						"yrTerm3Convertible.partialUpfront": "0.035",
						"yrTerm3Standard.allUpfront": "0.029",
						"yrTerm3Standard.noUpfront": "0.033",
						"yrTerm3Standard.partialUpfront": "0.031"
					}
				},
				"mswin": {
					"ondemand": "0.079",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.059",
						"yrTerm1Standard.noUpfront": "0.063",
						"yrTerm1Standard.partialUpfront": "0.060",
						"yrTerm3Convertible.allUpfront": "0.052",
						"yrTerm3Convertible.noUpfront": "0.056",
						"yrTerm3Convertible.partialUpfront": "0.053",
						"yrTerm3Standard.allUpfront": "0.042",
						"yrTerm3Standard.noUpfront": "0.051",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.226",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.131",
						"yrTerm1Standard.noUpfront": "0.134",
						"yrTerm1Standard.partialUpfront": "0.134",
						"yrTerm3Convertible.allUpfront": "0.124",
						"yrTerm3Convertible.noUpfront": "0.127",
						"yrTerm3Convertible.partialUpfront": "0.124",
						"yrTerm3Standard.allUpfront": "0.119",
						"yrTerm3Standard.noUpfront": "0.122",
						"yrTerm3Standard.partialUpfront": "0.121"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.047",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.031",
						"yrTerm1Standard.noUpfront": "0.034",
						"yrTerm1Standard.partialUpfront": "0.032",
						"yrTerm3Convertible.allUpfront": "0.025",
						"yrTerm3Convertible.noUpfront": "0.028",
						"yrTerm3Convertible.partialUpfront": "0.026",
						"yrTerm3Standard.allUpfront": "0.021",
						"yrTerm3Standard.noUpfront": "0.024",
						"yrTerm3Standard.partialUpfront": "0.022"
					}
				},
				"mswin": {
					"ondemand": "0.065",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.049",
						"yrTerm1Standard.noUpfront": "0.052",
						"yrTerm1Standard.partialUpfront": "0.050",
						"yrTerm3Convertible.allUpfront": "0.043",
						"yrTerm3Convertible.noUpfront": "0.046",
						"yrTerm3Convertible.partialUpfront": "0.044",
						"yrTerm3Standard.allUpfront": "0.033",
						"yrTerm3Standard.noUpfront": "0.042",
						"yrTerm3Standard.partialUpfront": "0.035"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.212",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.122",
						"yrTerm1Standard.noUpfront": "0.123",
						"yrTerm1Standard.partialUpfront": "0.125",
						"yrTerm3Convertible.allUpfront": "0.115",
						"yrTerm3Convertible.noUpfront": "0.117",
						"yrTerm3Convertible.partialUpfront": "0.115",
						"yrTerm3Standard.allUpfront": "0.110",
						"yrTerm3Standard.noUpfront": "0.114",
						"yrTerm3Standard.partialUpfront": "0.112"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 6,
			"max_enis": 3
		},
		"vpc_only": true
	},
	{
		"ECU": "variable",
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": 0.6,
		"burst_minutes": 432,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "t2.large",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 8,
		"network_performance": "Low to Moderate",
		"placement_group_support": false,
		"pretty_name": "T2 Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.128",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.092",
						"yrTerm1Standard.noUpfront": "0.099",
						"yrTerm1Standard.partialUpfront": "0.094",
						"yrTerm3Convertible.allUpfront": "0.072",
						"yrTerm3Convertible.noUpfront": "0.080",
						"yrTerm3Convertible.partialUpfront": "0.074",
						"yrTerm3Standard.allUpfront": "0.060",
						"yrTerm3Standard.noUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.120",
						"yrTerm1Standard.noUpfront": "0.127",
						"yrTerm1Standard.partialUpfront": "0.122",
						"yrTerm3Convertible.allUpfront": "0.100",
						"yrTerm3Convertible.noUpfront": "0.108",
						"yrTerm3Convertible.partialUpfront": "0.102",
						"yrTerm3Standard.allUpfront": "0.088",
						"yrTerm3Standard.noUpfront": "0.097",
						"yrTerm3Standard.partialUpfront": "0.092"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.225",
						"yrTerm1Standard.noUpfront": "0.198",
						"yrTerm1Standard.partialUpfront": "0.229",
						"yrTerm3Convertible.allUpfront": "0.171",
						"yrTerm3Convertible.noUpfront": "0.179",
						"yrTerm3Convertible.partialUpfront": "0.173",
						"yrTerm3Standard.allUpfront": "0.187",
						"yrTerm3Standard.noUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.199"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.128",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.092",
						"yrTerm1Standard.noUpfront": "0.092",
						"yrTerm1Standard.partialUpfront": "0.094",
						"yrTerm3Convertible.allUpfront": "0.072",
						"yrTerm3Convertible.noUpfront": "0.080",
						"yrTerm3Convertible.partialUpfront": "0.074",
						"yrTerm3Standard.allUpfront": "0.060",
						"yrTerm3Standard.noUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.120",
						"yrTerm1Standard.noUpfront": "0.120",
						"yrTerm1Standard.partialUpfront": "0.122",
						"yrTerm3Convertible.allUpfront": "0.100",
						"yrTerm3Convertible.noUpfront": "0.108",
						"yrTerm3Convertible.partialUpfront": "0.102",
						"yrTerm3Standard.allUpfront": "0.088",
						"yrTerm3Standard.noUpfront": "0.097",
						"yrTerm3Standard.partialUpfront": "0.092"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.541",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.505",
						"yrTerm1Standard.noUpfront": "0.191",
						"yrTerm1Standard.partialUpfront": "0.507",
						"yrTerm3Convertible.allUpfront": "0.171",
						"yrTerm3Convertible.noUpfront": "0.179",
						"yrTerm3Convertible.partialUpfront": "0.173",
						"yrTerm3Standard.allUpfront": "0.473",
						"yrTerm3Standard.noUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.477"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.119",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.087",
						"yrTerm1Standard.noUpfront": "0.092",
						"yrTerm1Standard.partialUpfront": "0.089",
						"yrTerm3Convertible.allUpfront": "0.078",
						"yrTerm3Convertible.noUpfront": "0.087",
						"yrTerm3Convertible.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.065",
						"yrTerm3Standard.noUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.069"
					}
				},
				"mswin": {
					"ondemand": "0.147",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.115",
						"yrTerm1Standard.noUpfront": "0.120",
						"yrTerm1Standard.partialUpfront": "0.117",
						"yrTerm3Convertible.allUpfront": "0.106",
						"yrTerm3Convertible.noUpfront": "0.115",
						"yrTerm3Convertible.partialUpfront": "0.108",
						"yrTerm3Standard.allUpfront": "0.093",
						"yrTerm3Standard.noUpfront": "0.104",
						"yrTerm3Standard.partialUpfront": "0.097"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.500",
						"yrTerm1Standard.noUpfront": "0.191",
						"yrTerm1Standard.partialUpfront": "0.502",
						"yrTerm3Convertible.allUpfront": "0.178",
						"yrTerm3Convertible.noUpfront": "0.186",
						"yrTerm3Convertible.partialUpfront": "0.180",
						"yrTerm3Standard.allUpfront": "0.478",
						"yrTerm3Standard.noUpfront": "0.175",
						"yrTerm3Standard.partialUpfront": "0.482"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.088",
						"yrTerm1Standard.noUpfront": "0.094",
						"yrTerm1Standard.partialUpfront": "0.090",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.087",
						"yrTerm3Convertible.partialUpfront": "0.081",
						"yrTerm3Standard.allUpfront": "0.067",
						"yrTerm3Standard.noUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.071"
					}
				},
				"mswin": {
					"ondemand": "0.148",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.116",
						"yrTerm1Standard.noUpfront": "0.122",
						"yrTerm1Standard.partialUpfront": "0.118",
						"yrTerm3Convertible.allUpfront": "0.107",
						"yrTerm3Convertible.noUpfront": "0.115",
						"yrTerm3Convertible.partialUpfront": "0.109",
						"yrTerm3Standard.allUpfront": "0.095",
						"yrTerm3Standard.noUpfront": "0.104",
						"yrTerm3Standard.partialUpfront": "0.099"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.368",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.221",
						"yrTerm1Standard.noUpfront": "0.193",
						"yrTerm1Standard.partialUpfront": "0.226",
						"yrTerm3Convertible.allUpfront": "0.178",
						"yrTerm3Convertible.noUpfront": "0.186",
						"yrTerm3Convertible.partialUpfront": "0.180",
						"yrTerm3Standard.allUpfront": "0.195",
						"yrTerm3Standard.noUpfront": "0.175",
						"yrTerm3Standard.partialUpfront": "0.207"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.128",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.094",
						"yrTerm1Standard.noUpfront": "0.103",
						"yrTerm1Standard.partialUpfront": "0.096",
						"yrTerm3Convertible.allUpfront": "0.085",
						"yrTerm3Convertible.noUpfront": "0.093",
						"yrTerm3Convertible.partialUpfront": "0.086",
						"yrTerm3Standard.allUpfront": "0.070",
						"yrTerm3Standard.noUpfront": "0.081",
						"yrTerm3Standard.partialUpfront": "0.075"
					}
				},
				"mswin": {
					"ondemand": "0.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.122",
						"yrTerm1Standard.noUpfront": "0.131",
						"yrTerm1Standard.partialUpfront": "0.124",
						"yrTerm3Convertible.allUpfront": "0.113",
						"yrTerm3Convertible.noUpfront": "0.121",
						"yrTerm3Convertible.partialUpfront": "0.114",
						"yrTerm3Standard.allUpfront": "0.098",
						"yrTerm3Standard.noUpfront": "0.109",
						"yrTerm3Standard.partialUpfront": "0.103"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.227",
						"yrTerm1Standard.noUpfront": "0.202",
						"yrTerm1Standard.partialUpfront": "0.232",
						"yrTerm3Convertible.allUpfront": "0.184",
						"yrTerm3Convertible.noUpfront": "0.192",
						"yrTerm3Convertible.partialUpfront": "0.185",
						"yrTerm3Standard.allUpfront": "0.198",
						"yrTerm3Standard.noUpfront": "0.180",
						"yrTerm3Standard.partialUpfront": "0.211"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.103",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.069",
						"yrTerm1Standard.noUpfront": "0.074",
						"yrTerm1Standard.partialUpfront": "0.070",
						"yrTerm3Convertible.allUpfront": "0.056",
						"yrTerm3Convertible.noUpfront": "0.062",
						"yrTerm3Convertible.partialUpfront": "0.057",
						"yrTerm3Standard.allUpfront": "0.046",
						"yrTerm3Standard.noUpfront": "0.054",
						"yrTerm3Standard.partialUpfront": "0.049"
					}
				},
				"mswin": {
					"ondemand": "0.131",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.096",
						"yrTerm1Standard.noUpfront": "0.102",
						"yrTerm1Standard.partialUpfront": "0.098",
						"yrTerm3Convertible.allUpfront": "0.084",
						"yrTerm3Convertible.noUpfront": "0.090",
						"yrTerm3Convertible.partialUpfront": "0.085",
						"yrTerm3Standard.allUpfront": "0.073",
						"yrTerm3Standard.noUpfront": "0.082",
						"yrTerm3Standard.partialUpfront": "0.076"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.202",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.167",
						"yrTerm1Standard.noUpfront": "0.173",
						"yrTerm1Standard.partialUpfront": "0.168",
						"yrTerm3Convertible.allUpfront": "0.155",
						"yrTerm3Convertible.noUpfront": "0.161",
						"yrTerm3Convertible.partialUpfront": "0.156",
						"yrTerm3Standard.allUpfront": "0.144",
						"yrTerm3Standard.noUpfront": "0.153",
						"yrTerm3Standard.partialUpfront": "0.147"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.108",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.073",
						"yrTerm1Standard.noUpfront": "0.079",
						"yrTerm1Standard.partialUpfront": "0.074",
						"yrTerm3Convertible.allUpfront": "0.058",
						"yrTerm3Convertible.noUpfront": "0.064",
						"yrTerm3Convertible.partialUpfront": "0.059",
						"yrTerm3Standard.allUpfront": "0.049",
						"yrTerm3Standard.noUpfront": "0.055",
						"yrTerm3Standard.partialUpfront": "0.052"
					}
				},
				"mswin": {
					"ondemand": "0.136",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.101",
						"yrTerm1Standard.noUpfront": "0.107",
						"yrTerm1Standard.partialUpfront": "0.102",
						"yrTerm3Convertible.allUpfront": "0.086",
						"yrTerm3Convertible.noUpfront": "0.092",
						"yrTerm3Convertible.partialUpfront": "0.087",
						"yrTerm3Standard.allUpfront": "0.074",
						"yrTerm3Standard.noUpfront": "0.083",
						"yrTerm3Standard.partialUpfront": "0.079"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.356",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.206",
						"yrTerm1Standard.noUpfront": "0.178",
						"yrTerm1Standard.partialUpfront": "0.209",
						"yrTerm3Convertible.allUpfront": "0.157",
						"yrTerm3Convertible.noUpfront": "0.163",
						"yrTerm3Convertible.partialUpfront": "0.158",
						"yrTerm3Standard.allUpfront": "0.176",
						"yrTerm3Standard.noUpfront": "0.154",
						"yrTerm3Standard.partialUpfront": "0.188"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.101",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.067",
						"yrTerm1Standard.noUpfront": "0.072",
						"yrTerm1Standard.partialUpfront": "0.068",
						"yrTerm3Convertible.allUpfront": "0.060",
						"yrTerm3Convertible.noUpfront": "0.068",
						"yrTerm3Convertible.partialUpfront": "0.061",
						"yrTerm3Standard.allUpfront": "0.045",
						"yrTerm3Standard.noUpfront": "0.059",
						"yrTerm3Standard.partialUpfront": "0.048"
					}
				},
				"mswin": {
					"ondemand": "0.129",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.094",
						"yrTerm1Standard.noUpfront": "0.100",
						"yrTerm1Standard.partialUpfront": "0.096",
						"yrTerm3Convertible.allUpfront": "0.087",
						"yrTerm3Convertible.noUpfront": "0.096",
						"yrTerm3Convertible.partialUpfront": "0.089",
						"yrTerm3Standard.allUpfront": "0.070",
						"yrTerm3Standard.noUpfront": "0.087",
						"yrTerm3Standard.partialUpfront": "0.074"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.349",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.200",
						"yrTerm1Standard.noUpfront": "0.171",
						"yrTerm1Standard.partialUpfront": "0.203",
						"yrTerm3Convertible.allUpfront": "0.160",
						"yrTerm3Convertible.noUpfront": "0.167",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.172",
						"yrTerm3Standard.noUpfront": "0.158",
						"yrTerm3Standard.partialUpfront": "0.183"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.106",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.070",
						"yrTerm1Standard.noUpfront": "0.073",
						"yrTerm1Standard.partialUpfront": "0.072",
						"yrTerm3Convertible.allUpfront": "0.060",
						"yrTerm3Convertible.noUpfront": "0.066",
						"yrTerm3Convertible.partialUpfront": "0.061",
						"yrTerm3Standard.allUpfront": "0.048",
						"yrTerm3Standard.noUpfront": "0.057",
						"yrTerm3Standard.partialUpfront": "0.051"
					}
				},
				"mswin": {
					"ondemand": "0.134",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.098",
						"yrTerm1Standard.noUpfront": "0.101",
						"yrTerm1Standard.partialUpfront": "0.100",
						"yrTerm3Convertible.allUpfront": "0.088",
						"yrTerm3Convertible.noUpfront": "0.094",
						"yrTerm3Convertible.partialUpfront": "0.089",
						"yrTerm3Standard.allUpfront": "0.075",
						"yrTerm3Standard.noUpfront": "0.085",
						"yrTerm3Standard.partialUpfront": "0.078"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.205",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.169",
						"yrTerm1Standard.noUpfront": "0.172",
						"yrTerm1Standard.partialUpfront": "0.170",
						"yrTerm3Convertible.allUpfront": "0.159",
						"yrTerm3Convertible.noUpfront": "0.165",
						"yrTerm3Convertible.partialUpfront": "0.160",
						"yrTerm3Standard.allUpfront": "0.146",
						"yrTerm3Standard.noUpfront": "0.156",
						"yrTerm3Standard.partialUpfront": "0.149"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.162",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.093",
						"yrTerm1Standard.noUpfront": "0.099",
						"yrTerm1Standard.partialUpfront": "0.095",
						"yrTerm3Convertible.allUpfront": "0.083",
						"yrTerm3Convertible.noUpfront": "0.091",
						"yrTerm3Convertible.partialUpfront": "0.085",
						"yrTerm3Standard.allUpfront": "0.069",
						"yrTerm3Standard.noUpfront": "0.080",
						"yrTerm3Standard.partialUpfront": "0.073"
					}
				},
				"mswin": {
					"ondemand": "0.19",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.121",
						"yrTerm1Standard.noUpfront": "0.127",
						"yrTerm1Standard.partialUpfront": "0.123",
						"yrTerm3Convertible.allUpfront": "0.111",
						"yrTerm3Convertible.noUpfront": "0.119",
						"yrTerm3Convertible.partialUpfront": "0.113",
						"yrTerm3Standard.allUpfront": "0.097",
						"yrTerm3Standard.noUpfront": "0.108",
						"yrTerm3Standard.partialUpfront": "0.101"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.41",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.226",
						"yrTerm1Standard.noUpfront": "0.198",
						"yrTerm1Standard.partialUpfront": "0.230",
						"yrTerm3Convertible.allUpfront": "0.182",
						"yrTerm3Convertible.noUpfront": "0.190",
						"yrTerm3Convertible.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.196",
						"yrTerm3Standard.noUpfront": "0.179",
						"yrTerm3Standard.partialUpfront": "0.208"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.094",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.063",
						"yrTerm1Standard.noUpfront": "0.067",
						"yrTerm1Standard.partialUpfront": "0.064",
						"yrTerm3Convertible.allUpfront": "0.051",
						"yrTerm3Convertible.noUpfront": "0.056",
						"yrTerm3Convertible.partialUpfront": "0.052",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.noUpfront": "0.048",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswin": {
					"ondemand": "0.122",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.089",
						"yrTerm1Standard.noUpfront": "0.095",
						"yrTerm1Standard.partialUpfront": "0.091",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.084",
						"yrTerm3Convertible.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.065",
						"yrTerm3Standard.noUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.070"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.342",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.196",
						"yrTerm1Standard.noUpfront": "0.166",
						"yrTerm1Standard.partialUpfront": "0.199",
						"yrTerm3Convertible.allUpfront": "0.150",
						"yrTerm3Convertible.noUpfront": "0.155",
						"yrTerm3Convertible.partialUpfront": "0.151",
						"yrTerm3Standard.allUpfront": "0.168",
						"yrTerm3Standard.noUpfront": "0.147",
						"yrTerm3Standard.partialUpfront": "0.179"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.094",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.063",
						"yrTerm1Standard.noUpfront": "0.067",
						"yrTerm1Standard.partialUpfront": "0.064",
						"yrTerm3Convertible.allUpfront": "0.051",
						"yrTerm3Convertible.noUpfront": "0.056",
						"yrTerm3Convertible.partialUpfront": "0.052",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.noUpfront": "0.048",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswin": {
					"ondemand": "0.122",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.089",
						"yrTerm1Standard.noUpfront": "0.095",
						"yrTerm1Standard.partialUpfront": "0.091",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.084",
						"yrTerm3Convertible.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.065",
						"yrTerm3Standard.noUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.070"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.342",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.196",
						"yrTerm1Standard.noUpfront": "0.166",
						"yrTerm1Standard.partialUpfront": "0.199",
						"yrTerm3Convertible.allUpfront": "0.150",
						"yrTerm3Convertible.noUpfront": "0.155",
						"yrTerm3Convertible.partialUpfront": "0.151",
						"yrTerm3Standard.allUpfront": "0.168",
						"yrTerm3Standard.noUpfront": "0.147",
						"yrTerm3Standard.partialUpfront": "0.179"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.112",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.074",
						"yrTerm1Standard.noUpfront": "0.076",
						"yrTerm1Standard.partialUpfront": "0.075",
						"yrTerm3Convertible.allUpfront": "0.063",
						"yrTerm3Convertible.noUpfront": "0.070",
						"yrTerm3Convertible.partialUpfront": "0.064",
						"yrTerm3Standard.allUpfront": "0.049",
						"yrTerm3Standard.noUpfront": "0.061",
						"yrTerm3Standard.partialUpfront": "0.052"
					}
				},
				"mswin": {
					"ondemand": "0.14",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.101",
						"yrTerm1Standard.noUpfront": "0.104",
						"yrTerm1Standard.partialUpfront": "0.103",
						"yrTerm3Convertible.allUpfront": "0.091",
						"yrTerm3Convertible.noUpfront": "0.098",
						"yrTerm3Convertible.partialUpfront": "0.092",
						"yrTerm3Standard.allUpfront": "0.075",
						"yrTerm3Standard.noUpfront": "0.089",
						"yrTerm3Standard.partialUpfront": "0.079"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.36",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.207",
						"yrTerm1Standard.noUpfront": "0.175",
						"yrTerm1Standard.partialUpfront": "0.211",
						"yrTerm3Convertible.allUpfront": "0.162",
						"yrTerm3Convertible.noUpfront": "0.169",
						"yrTerm3Convertible.partialUpfront": "0.163",
						"yrTerm3Standard.allUpfront": "0.177",
						"yrTerm3Standard.noUpfront": "0.160",
						"yrTerm3Standard.partialUpfront": "0.188"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.122",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.083",
						"yrTerm1Standard.noUpfront": "0.089",
						"yrTerm1Standard.partialUpfront": "0.085",
						"yrTerm3Convertible.allUpfront": "0.069",
						"yrTerm3Convertible.noUpfront": "0.076",
						"yrTerm3Convertible.partialUpfront": "0.070",
						"yrTerm3Standard.allUpfront": "0.057",
						"yrTerm3Standard.noUpfront": "0.066",
						"yrTerm3Standard.partialUpfront": "0.061"
					}
				},
				"mswin": {
					"ondemand": "0.15",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.111",
						"yrTerm1Standard.noUpfront": "0.117",
						"yrTerm1Standard.partialUpfront": "0.113",
						"yrTerm3Convertible.allUpfront": "0.097",
						"yrTerm3Convertible.noUpfront": "0.104",
						"yrTerm3Convertible.partialUpfront": "0.098",
						"yrTerm3Standard.allUpfront": "0.084",
						"yrTerm3Standard.noUpfront": "0.094",
						"yrTerm3Standard.partialUpfront": "0.089"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.37",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.216",
						"yrTerm1Standard.noUpfront": "0.188",
						"yrTerm1Standard.partialUpfront": "0.220",
						"yrTerm3Convertible.allUpfront": "0.168",
						"yrTerm3Convertible.noUpfront": "0.175",
						"yrTerm3Convertible.partialUpfront": "0.169",
						"yrTerm3Standard.allUpfront": "0.184",
						"yrTerm3Standard.noUpfront": "0.165",
						"yrTerm3Standard.partialUpfront": "0.197"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.094",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.063",
						"yrTerm1Standard.noUpfront": "0.067",
						"yrTerm1Standard.partialUpfront": "0.064",
						"yrTerm3Convertible.allUpfront": "0.051",
						"yrTerm3Convertible.noUpfront": "0.056",
						"yrTerm3Convertible.partialUpfront": "0.052",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.noUpfront": "0.048",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswin": {
					"ondemand": "0.122",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.089",
						"yrTerm1Standard.noUpfront": "0.095",
						"yrTerm1Standard.partialUpfront": "0.091",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.084",
						"yrTerm3Convertible.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.065",
						"yrTerm3Standard.noUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.070"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.342",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.196",
						"yrTerm1Standard.noUpfront": "0.166",
						"yrTerm1Standard.partialUpfront": "0.199",
						"yrTerm3Convertible.allUpfront": "0.150",
						"yrTerm3Convertible.noUpfront": "0.155",
						"yrTerm3Convertible.partialUpfront": "0.151",
						"yrTerm3Standard.allUpfront": "0.168",
						"yrTerm3Standard.noUpfront": "0.147",
						"yrTerm3Standard.partialUpfront": "0.179"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 12,
			"max_enis": 3
		},
		"vpc_only": true
	},
	{
		"ECU": "variable",
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": 0.9,
		"burst_minutes": 324,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "t2.xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 16,
		"network_performance": "Moderate",
		"placement_group_support": false,
		"pretty_name": "T2 Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.256",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.185",
						"yrTerm1Standard.noUpfront": "0.198",
						"yrTerm1Standard.partialUpfront": "0.189",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.120",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				},
				"mswin": {
					"ondemand": "0.297",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.226",
						"yrTerm1Standard.noUpfront": "0.239",
						"yrTerm1Standard.partialUpfront": "0.230",
						"yrTerm3Convertible.allUpfront": "0.185",
						"yrTerm3Convertible.noUpfront": "0.200",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.161",
						"yrTerm3Standard.noUpfront": "0.179",
						"yrTerm3Standard.partialUpfront": "0.169"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.368",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.297",
						"yrTerm1Standard.noUpfront": "0.311",
						"yrTerm1Standard.partialUpfront": "0.301",
						"yrTerm3Convertible.allUpfront": "0.257",
						"yrTerm3Convertible.noUpfront": "0.271",
						"yrTerm3Convertible.partialUpfront": "0.260",
						"yrTerm3Standard.allUpfront": "0.233",
						"yrTerm3Standard.noUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.240"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.256",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.185",
						"yrTerm1Standard.noUpfront": "0.183",
						"yrTerm1Standard.partialUpfront": "0.189",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.120",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				},
				"mswin": {
					"ondemand": "0.297",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.226",
						"yrTerm1Standard.noUpfront": "0.224",
						"yrTerm1Standard.partialUpfront": "0.230",
						"yrTerm3Convertible.allUpfront": "0.185",
						"yrTerm3Convertible.noUpfront": "0.200",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.161",
						"yrTerm3Standard.noUpfront": "0.179",
						"yrTerm3Standard.partialUpfront": "0.169"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.368",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.297",
						"yrTerm1Standard.noUpfront": "0.296",
						"yrTerm1Standard.partialUpfront": "0.301",
						"yrTerm3Convertible.allUpfront": "0.257",
						"yrTerm3Convertible.noUpfront": "0.271",
						"yrTerm3Convertible.partialUpfront": "0.260",
						"yrTerm3Standard.allUpfront": "0.233",
						"yrTerm3Standard.noUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.240"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.238",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.175",
						"yrTerm1Standard.noUpfront": "0.185",
						"yrTerm1Standard.partialUpfront": "0.178",
						"yrTerm3Convertible.allUpfront": "0.157",
						"yrTerm3Convertible.noUpfront": "0.175",
						"yrTerm3Convertible.partialUpfront": "0.161",
						"yrTerm3Standard.allUpfront": "0.131",
						"yrTerm3Standard.noUpfront": "0.152",
						"yrTerm3Standard.partialUpfront": "0.139"
					}
				},
				"mswin": {
					"ondemand": "0.279",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.216",
						"yrTerm1Standard.noUpfront": "0.226",
						"yrTerm1Standard.partialUpfront": "0.220",
						"yrTerm3Convertible.allUpfront": "0.198",
						"yrTerm3Convertible.noUpfront": "0.216",
						"yrTerm3Convertible.partialUpfront": "0.202",
						"yrTerm3Standard.allUpfront": "0.172",
						"yrTerm3Standard.noUpfront": "0.193",
						"yrTerm3Standard.partialUpfront": "0.180"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.287",
						"yrTerm1Standard.noUpfront": "0.297",
						"yrTerm1Standard.partialUpfront": "0.291",
						"yrTerm3Convertible.allUpfront": "0.270",
						"yrTerm3Convertible.noUpfront": "0.287",
						"yrTerm3Convertible.partialUpfront": "0.273",
						"yrTerm3Standard.allUpfront": "0.243",
						"yrTerm3Standard.noUpfront": "0.265",
						"yrTerm3Standard.partialUpfront": "0.252"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.24",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.176",
						"yrTerm1Standard.noUpfront": "0.188",
						"yrTerm1Standard.partialUpfront": "0.180",
						"yrTerm3Convertible.allUpfront": "0.159",
						"yrTerm3Convertible.noUpfront": "0.175",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.133",
						"yrTerm3Standard.noUpfront": "0.152",
						"yrTerm3Standard.partialUpfront": "0.141"
					}
				},
				"mswin": {
					"ondemand": "0.281",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.217",
						"yrTerm1Standard.noUpfront": "0.229",
						"yrTerm1Standard.partialUpfront": "0.221",
						"yrTerm3Convertible.allUpfront": "0.200",
						"yrTerm3Convertible.noUpfront": "0.216",
						"yrTerm3Convertible.partialUpfront": "0.203",
						"yrTerm3Standard.allUpfront": "0.174",
						"yrTerm3Standard.noUpfront": "0.193",
						"yrTerm3Standard.partialUpfront": "0.182"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.352",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.289",
						"yrTerm1Standard.noUpfront": "0.301",
						"yrTerm1Standard.partialUpfront": "0.292",
						"yrTerm3Convertible.allUpfront": "0.271",
						"yrTerm3Convertible.noUpfront": "0.287",
						"yrTerm3Convertible.partialUpfront": "0.274",
						"yrTerm3Standard.allUpfront": "0.245",
						"yrTerm3Standard.noUpfront": "0.265",
						"yrTerm3Standard.partialUpfront": "0.253"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.256",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.188",
						"yrTerm1Standard.noUpfront": "0.205",
						"yrTerm1Standard.partialUpfront": "0.192",
						"yrTerm3Convertible.allUpfront": "0.169",
						"yrTerm3Convertible.noUpfront": "0.187",
						"yrTerm3Convertible.partialUpfront": "0.173",
						"yrTerm3Standard.allUpfront": "0.141",
						"yrTerm3Standard.noUpfront": "0.162",
						"yrTerm3Standard.partialUpfront": "0.150"
					}
				},
				"mswin": {
					"ondemand": "0.297",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.229",
						"yrTerm1Standard.noUpfront": "0.246",
						"yrTerm1Standard.partialUpfront": "0.233",
						"yrTerm3Convertible.allUpfront": "0.210",
						"yrTerm3Convertible.noUpfront": "0.228",
						"yrTerm3Convertible.partialUpfront": "0.214",
						"yrTerm3Standard.allUpfront": "0.182",
						"yrTerm3Standard.noUpfront": "0.203",
						"yrTerm3Standard.partialUpfront": "0.191"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.368",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.301",
						"yrTerm1Standard.noUpfront": "0.317",
						"yrTerm1Standard.partialUpfront": "0.304",
						"yrTerm3Convertible.allUpfront": "0.282",
						"yrTerm3Convertible.noUpfront": "0.299",
						"yrTerm3Convertible.partialUpfront": "0.285",
						"yrTerm3Standard.allUpfront": "0.254",
						"yrTerm3Standard.noUpfront": "0.275",
						"yrTerm3Standard.partialUpfront": "0.263"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.206",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.138",
						"yrTerm1Standard.noUpfront": "0.148",
						"yrTerm1Standard.partialUpfront": "0.141",
						"yrTerm3Convertible.allUpfront": "0.112",
						"yrTerm3Convertible.noUpfront": "0.123",
						"yrTerm3Convertible.partialUpfront": "0.114",
						"yrTerm3Standard.allUpfront": "0.091",
						"yrTerm3Standard.noUpfront": "0.107",
						"yrTerm3Standard.partialUpfront": "0.097"
					}
				},
				"mswin": {
					"ondemand": "0.247",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.179",
						"yrTerm1Standard.noUpfront": "0.189",
						"yrTerm1Standard.partialUpfront": "0.182",
						"yrTerm3Convertible.allUpfront": "0.153",
						"yrTerm3Convertible.noUpfront": "0.164",
						"yrTerm3Convertible.partialUpfront": "0.155",
						"yrTerm3Standard.allUpfront": "0.132",
						"yrTerm3Standard.noUpfront": "0.148",
						"yrTerm3Standard.partialUpfront": "0.138"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.318",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.250",
						"yrTerm1Standard.noUpfront": "0.260",
						"yrTerm1Standard.partialUpfront": "0.253",
						"yrTerm3Convertible.allUpfront": "0.224",
						"yrTerm3Convertible.noUpfront": "0.236",
						"yrTerm3Convertible.partialUpfront": "0.226",
						"yrTerm3Standard.allUpfront": "0.204",
						"yrTerm3Standard.noUpfront": "0.220",
						"yrTerm3Standard.partialUpfront": "0.209"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.216",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.145",
						"yrTerm1Standard.noUpfront": "0.158",
						"yrTerm1Standard.partialUpfront": "0.148",
						"yrTerm3Convertible.allUpfront": "0.115",
						"yrTerm3Convertible.noUpfront": "0.127",
						"yrTerm3Convertible.partialUpfront": "0.118",
						"yrTerm3Standard.allUpfront": "0.098",
						"yrTerm3Standard.noUpfront": "0.111",
						"yrTerm3Standard.partialUpfront": "0.104"
					}
				},
				"mswin": {
					"ondemand": "0.257",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.199",
						"yrTerm1Standard.partialUpfront": "0.189",
						"yrTerm3Convertible.allUpfront": "0.156",
						"yrTerm3Convertible.noUpfront": "0.168",
						"yrTerm3Convertible.partialUpfront": "0.159",
						"yrTerm3Standard.allUpfront": "0.139",
						"yrTerm3Standard.noUpfront": "0.152",
						"yrTerm3Standard.partialUpfront": "0.145"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.328",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.270",
						"yrTerm1Standard.partialUpfront": "0.260",
						"yrTerm3Convertible.allUpfront": "0.228",
						"yrTerm3Convertible.noUpfront": "0.240",
						"yrTerm3Convertible.partialUpfront": "0.230",
						"yrTerm3Standard.allUpfront": "0.211",
						"yrTerm3Standard.noUpfront": "0.223",
						"yrTerm3Standard.partialUpfront": "0.217"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.202",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.134",
						"yrTerm1Standard.noUpfront": "0.145",
						"yrTerm1Standard.partialUpfront": "0.137",
						"yrTerm3Convertible.allUpfront": "0.121",
						"yrTerm3Convertible.noUpfront": "0.135",
						"yrTerm3Convertible.partialUpfront": "0.123",
						"yrTerm3Standard.allUpfront": "0.092",
						"yrTerm3Standard.noUpfront": "0.118",
						"yrTerm3Standard.partialUpfront": "0.097"
					}
				},
				"mswin": {
					"ondemand": "0.243",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.175",
						"yrTerm1Standard.noUpfront": "0.186",
						"yrTerm1Standard.partialUpfront": "0.178",
						"yrTerm3Convertible.allUpfront": "0.162",
						"yrTerm3Convertible.noUpfront": "0.176",
						"yrTerm3Convertible.partialUpfront": "0.164",
						"yrTerm3Standard.allUpfront": "0.133",
						"yrTerm3Standard.noUpfront": "0.159",
						"yrTerm3Standard.partialUpfront": "0.138"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.314",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.247",
						"yrTerm1Standard.noUpfront": "0.257",
						"yrTerm1Standard.partialUpfront": "0.249",
						"yrTerm3Convertible.allUpfront": "0.233",
						"yrTerm3Convertible.noUpfront": "0.248",
						"yrTerm3Convertible.partialUpfront": "0.236",
						"yrTerm3Standard.allUpfront": "0.204",
						"yrTerm3Standard.noUpfront": "0.230",
						"yrTerm3Standard.partialUpfront": "0.210"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.212",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.141",
						"yrTerm1Standard.noUpfront": "0.145",
						"yrTerm1Standard.partialUpfront": "0.144",
						"yrTerm3Convertible.allUpfront": "0.119",
						"yrTerm3Convertible.noUpfront": "0.131",
						"yrTerm3Convertible.partialUpfront": "0.121",
						"yrTerm3Standard.allUpfront": "0.096",
						"yrTerm3Standard.noUpfront": "0.114",
						"yrTerm3Standard.partialUpfront": "0.102"
					}
				},
				"mswin": {
					"ondemand": "0.253",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.182",
						"yrTerm1Standard.noUpfront": "0.186",
						"yrTerm1Standard.partialUpfront": "0.185",
						"yrTerm3Convertible.allUpfront": "0.160",
						"yrTerm3Convertible.noUpfront": "0.172",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.137",
						"yrTerm3Standard.noUpfront": "0.155",
						"yrTerm3Standard.partialUpfront": "0.143"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.324",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.253",
						"yrTerm1Standard.noUpfront": "0.258",
						"yrTerm1Standard.partialUpfront": "0.256",
						"yrTerm3Convertible.allUpfront": "0.231",
						"yrTerm3Convertible.noUpfront": "0.244",
						"yrTerm3Convertible.partialUpfront": "0.234",
						"yrTerm3Standard.allUpfront": "0.208",
						"yrTerm3Standard.noUpfront": "0.226",
						"yrTerm3Standard.partialUpfront": "0.215"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.324",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.185",
						"yrTerm1Standard.noUpfront": "0.198",
						"yrTerm1Standard.partialUpfront": "0.189",
						"yrTerm3Convertible.allUpfront": "0.166",
						"yrTerm3Convertible.noUpfront": "0.183",
						"yrTerm3Convertible.partialUpfront": "0.169",
						"yrTerm3Standard.allUpfront": "0.137",
						"yrTerm3Standard.noUpfront": "0.159",
						"yrTerm3Standard.partialUpfront": "0.146"
					}
				},
				"mswin": {
					"ondemand": "0.365",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.226",
						"yrTerm1Standard.noUpfront": "0.239",
						"yrTerm1Standard.partialUpfront": "0.230",
						"yrTerm3Convertible.allUpfront": "0.207",
						"yrTerm3Convertible.noUpfront": "0.224",
						"yrTerm3Convertible.partialUpfront": "0.210",
						"yrTerm3Standard.allUpfront": "0.178",
						"yrTerm3Standard.noUpfront": "0.200",
						"yrTerm3Standard.partialUpfront": "0.186"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.436",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.298",
						"yrTerm1Standard.noUpfront": "0.311",
						"yrTerm1Standard.partialUpfront": "0.301",
						"yrTerm3Convertible.allUpfront": "0.278",
						"yrTerm3Convertible.noUpfront": "0.295",
						"yrTerm3Convertible.partialUpfront": "0.282",
						"yrTerm3Standard.allUpfront": "0.249",
						"yrTerm3Standard.noUpfront": "0.271",
						"yrTerm3Standard.partialUpfront": "0.258"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.188",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.126",
						"yrTerm1Standard.noUpfront": "0.134",
						"yrTerm1Standard.partialUpfront": "0.128",
						"yrTerm3Convertible.allUpfront": "0.101",
						"yrTerm3Convertible.noUpfront": "0.111",
						"yrTerm3Convertible.partialUpfront": "0.103",
						"yrTerm3Standard.allUpfront": "0.083",
						"yrTerm3Standard.noUpfront": "0.097",
						"yrTerm3Standard.partialUpfront": "0.089"
					}
				},
				"mswin": {
					"ondemand": "0.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.167",
						"yrTerm1Standard.noUpfront": "0.175",
						"yrTerm1Standard.partialUpfront": "0.169",
						"yrTerm3Convertible.allUpfront": "0.142",
						"yrTerm3Convertible.noUpfront": "0.152",
						"yrTerm3Convertible.partialUpfront": "0.144",
						"yrTerm3Standard.allUpfront": "0.124",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.130"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.3",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.238",
						"yrTerm1Standard.noUpfront": "0.247",
						"yrTerm1Standard.partialUpfront": "0.241",
						"yrTerm3Convertible.allUpfront": "0.213",
						"yrTerm3Convertible.noUpfront": "0.224",
						"yrTerm3Convertible.partialUpfront": "0.215",
						"yrTerm3Standard.allUpfront": "0.196",
						"yrTerm3Standard.noUpfront": "0.209",
						"yrTerm3Standard.partialUpfront": "0.201"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.188",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.126",
						"yrTerm1Standard.noUpfront": "0.134",
						"yrTerm1Standard.partialUpfront": "0.128",
						"yrTerm3Convertible.allUpfront": "0.101",
						"yrTerm3Convertible.noUpfront": "0.111",
						"yrTerm3Convertible.partialUpfront": "0.103",
						"yrTerm3Standard.allUpfront": "0.083",
						"yrTerm3Standard.noUpfront": "0.097",
						"yrTerm3Standard.partialUpfront": "0.089"
					}
				},
				"mswin": {
					"ondemand": "0.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.167",
						"yrTerm1Standard.noUpfront": "0.175",
						"yrTerm1Standard.partialUpfront": "0.169",
						"yrTerm3Convertible.allUpfront": "0.142",
						"yrTerm3Convertible.noUpfront": "0.152",
						"yrTerm3Convertible.partialUpfront": "0.144",
						"yrTerm3Standard.allUpfront": "0.124",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.130"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.3",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.238",
						"yrTerm1Standard.noUpfront": "0.247",
						"yrTerm1Standard.partialUpfront": "0.241",
						"yrTerm3Convertible.allUpfront": "0.213",
						"yrTerm3Convertible.noUpfront": "0.224",
						"yrTerm3Convertible.partialUpfront": "0.215",
						"yrTerm3Standard.allUpfront": "0.196",
						"yrTerm3Standard.noUpfront": "0.209",
						"yrTerm3Standard.partialUpfront": "0.201"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.224",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.149",
						"yrTerm1Standard.noUpfront": "0.151",
						"yrTerm1Standard.partialUpfront": "0.152",
						"yrTerm3Convertible.allUpfront": "0.126",
						"yrTerm3Convertible.noUpfront": "0.139",
						"yrTerm3Convertible.partialUpfront": "0.129",
						"yrTerm3Standard.allUpfront": "0.098",
						"yrTerm3Standard.noUpfront": "0.121",
						"yrTerm3Standard.partialUpfront": "0.105"
					}
				},
				"mswin": {
					"ondemand": "0.265",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.190",
						"yrTerm1Standard.noUpfront": "0.192",
						"yrTerm1Standard.partialUpfront": "0.193",
						"yrTerm3Convertible.allUpfront": "0.167",
						"yrTerm3Convertible.noUpfront": "0.180",
						"yrTerm3Convertible.partialUpfront": "0.170",
						"yrTerm3Standard.allUpfront": "0.139",
						"yrTerm3Standard.noUpfront": "0.162",
						"yrTerm3Standard.partialUpfront": "0.146"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.336",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.261",
						"yrTerm1Standard.noUpfront": "0.264",
						"yrTerm1Standard.partialUpfront": "0.264",
						"yrTerm3Convertible.allUpfront": "0.239",
						"yrTerm3Convertible.noUpfront": "0.252",
						"yrTerm3Convertible.partialUpfront": "0.241",
						"yrTerm3Standard.allUpfront": "0.211",
						"yrTerm3Standard.noUpfront": "0.233",
						"yrTerm3Standard.partialUpfront": "0.217"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.244",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.165",
						"yrTerm1Standard.noUpfront": "0.178",
						"yrTerm1Standard.partialUpfront": "0.169",
						"yrTerm3Convertible.allUpfront": "0.137",
						"yrTerm3Convertible.noUpfront": "0.151",
						"yrTerm3Convertible.partialUpfront": "0.140",
						"yrTerm3Standard.allUpfront": "0.115",
						"yrTerm3Standard.noUpfront": "0.131",
						"yrTerm3Standard.partialUpfront": "0.122"
					}
				},
				"mswin": {
					"ondemand": "0.285",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.206",
						"yrTerm1Standard.noUpfront": "0.219",
						"yrTerm1Standard.partialUpfront": "0.210",
						"yrTerm3Convertible.allUpfront": "0.178",
						"yrTerm3Convertible.noUpfront": "0.192",
						"yrTerm3Convertible.partialUpfront": "0.181",
						"yrTerm3Standard.allUpfront": "0.156",
						"yrTerm3Standard.noUpfront": "0.172",
						"yrTerm3Standard.partialUpfront": "0.163"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.356",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.278",
						"yrTerm1Standard.noUpfront": "0.291",
						"yrTerm1Standard.partialUpfront": "0.281",
						"yrTerm3Convertible.allUpfront": "0.249",
						"yrTerm3Convertible.noUpfront": "0.263",
						"yrTerm3Convertible.partialUpfront": "0.252",
						"yrTerm3Standard.allUpfront": "0.227",
						"yrTerm3Standard.noUpfront": "0.244",
						"yrTerm3Standard.partialUpfront": "0.234"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.188",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.126",
						"yrTerm1Standard.noUpfront": "0.134",
						"yrTerm1Standard.partialUpfront": "0.128",
						"yrTerm3Convertible.allUpfront": "0.101",
						"yrTerm3Convertible.noUpfront": "0.111",
						"yrTerm3Convertible.partialUpfront": "0.103",
						"yrTerm3Standard.allUpfront": "0.083",
						"yrTerm3Standard.noUpfront": "0.097",
						"yrTerm3Standard.partialUpfront": "0.089"
					}
				},
				"mswin": {
					"ondemand": "0.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.167",
						"yrTerm1Standard.noUpfront": "0.175",
						"yrTerm1Standard.partialUpfront": "0.169",
						"yrTerm3Convertible.allUpfront": "0.142",
						"yrTerm3Convertible.noUpfront": "0.152",
						"yrTerm3Convertible.partialUpfront": "0.144",
						"yrTerm3Standard.allUpfront": "0.124",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.130"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.3",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.238",
						"yrTerm1Standard.noUpfront": "0.247",
						"yrTerm1Standard.partialUpfront": "0.241",
						"yrTerm3Convertible.allUpfront": "0.213",
						"yrTerm3Convertible.noUpfront": "0.224",
						"yrTerm3Convertible.partialUpfront": "0.215",
						"yrTerm3Standard.allUpfront": "0.196",
						"yrTerm3Standard.noUpfront": "0.209",
						"yrTerm3Standard.partialUpfront": "0.201"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 3
		},
		"vpc_only": true
	},
	{
		"ECU": "variable",
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": 1.35,
		"burst_minutes": 243,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "t2.2xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 32,
		"network_performance": "Moderate",
		"placement_group_support": false,
		"pretty_name": "T2 Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.512",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.370",
						"yrTerm1Standard.noUpfront": "0.397",
						"yrTerm1Standard.partialUpfront": "0.378",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.241",
						"yrTerm3Standard.noUpfront": "0.277",
						"yrTerm3Standard.partialUpfront": "0.256"
					}
				},
				"mswin": {
					"ondemand": "0.574",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.432",
						"yrTerm1Standard.noUpfront": "0.459",
						"yrTerm1Standard.partialUpfront": "0.440",
						"yrTerm3Convertible.allUpfront": "0.351",
						"yrTerm3Convertible.noUpfront": "0.380",
						"yrTerm3Convertible.partialUpfront": "0.356",
						"yrTerm3Standard.allUpfront": "0.303",
						"yrTerm3Standard.noUpfront": "0.339",
						"yrTerm3Standard.partialUpfront": "0.318"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.715",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.573",
						"yrTerm1Standard.noUpfront": "0.600",
						"yrTerm1Standard.partialUpfront": "0.581",
						"yrTerm3Convertible.allUpfront": "0.492",
						"yrTerm3Convertible.noUpfront": "0.521",
						"yrTerm3Convertible.partialUpfront": "0.497",
						"yrTerm3Standard.allUpfront": "0.444",
						"yrTerm3Standard.noUpfront": "0.480",
						"yrTerm3Standard.partialUpfront": "0.459"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.512",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.370",
						"yrTerm1Standard.noUpfront": "0.367",
						"yrTerm1Standard.partialUpfront": "0.378",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.241",
						"yrTerm3Standard.noUpfront": "0.277",
						"yrTerm3Standard.partialUpfront": "0.256"
					}
				},
				"mswin": {
					"ondemand": "0.574",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.432",
						"yrTerm1Standard.noUpfront": "0.429",
						"yrTerm1Standard.partialUpfront": "0.440",
						"yrTerm3Convertible.allUpfront": "0.351",
						"yrTerm3Convertible.noUpfront": "0.380",
						"yrTerm3Convertible.partialUpfront": "0.356",
						"yrTerm3Standard.allUpfront": "0.303",
						"yrTerm3Standard.noUpfront": "0.339",
						"yrTerm3Standard.partialUpfront": "0.318"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.715",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.573",
						"yrTerm1Standard.noUpfront": "0.570",
						"yrTerm1Standard.partialUpfront": "0.581",
						"yrTerm3Convertible.allUpfront": "0.492",
						"yrTerm3Convertible.noUpfront": "0.521",
						"yrTerm3Convertible.partialUpfront": "0.497",
						"yrTerm3Standard.allUpfront": "0.444",
						"yrTerm3Standard.noUpfront": "0.480",
						"yrTerm3Standard.partialUpfront": "0.459"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.476",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.350",
						"yrTerm1Standard.noUpfront": "0.370",
						"yrTerm1Standard.partialUpfront": "0.357",
						"yrTerm3Convertible.allUpfront": "0.315",
						"yrTerm3Convertible.noUpfront": "0.350",
						"yrTerm3Convertible.partialUpfront": "0.321",
						"yrTerm3Standard.allUpfront": "0.262",
						"yrTerm3Standard.noUpfront": "0.304",
						"yrTerm3Standard.partialUpfront": "0.279"
					}
				},
				"mswin": {
					"ondemand": "0.538",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.412",
						"yrTerm1Standard.noUpfront": "0.432",
						"yrTerm1Standard.partialUpfront": "0.419",
						"yrTerm3Convertible.allUpfront": "0.377",
						"yrTerm3Convertible.noUpfront": "0.412",
						"yrTerm3Convertible.partialUpfront": "0.383",
						"yrTerm3Standard.allUpfront": "0.324",
						"yrTerm3Standard.noUpfront": "0.366",
						"yrTerm3Standard.partialUpfront": "0.341"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.679",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.553",
						"yrTerm1Standard.noUpfront": "0.573",
						"yrTerm1Standard.partialUpfront": "0.560",
						"yrTerm3Convertible.allUpfront": "0.518",
						"yrTerm3Convertible.noUpfront": "0.553",
						"yrTerm3Convertible.partialUpfront": "0.524",
						"yrTerm3Standard.allUpfront": "0.465",
						"yrTerm3Standard.noUpfront": "0.507",
						"yrTerm3Standard.partialUpfront": "0.482"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.48",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.353",
						"yrTerm1Standard.noUpfront": "0.376",
						"yrTerm1Standard.partialUpfront": "0.360",
						"yrTerm3Convertible.allUpfront": "0.317",
						"yrTerm3Convertible.noUpfront": "0.350",
						"yrTerm3Convertible.partialUpfront": "0.324",
						"yrTerm3Standard.allUpfront": "0.265",
						"yrTerm3Standard.noUpfront": "0.304",
						"yrTerm3Standard.partialUpfront": "0.282"
					}
				},
				"mswin": {
					"ondemand": "0.542",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.415",
						"yrTerm1Standard.noUpfront": "0.438",
						"yrTerm1Standard.partialUpfront": "0.422",
						"yrTerm3Convertible.allUpfront": "0.379",
						"yrTerm3Convertible.noUpfront": "0.412",
						"yrTerm3Convertible.partialUpfront": "0.386",
						"yrTerm3Standard.allUpfront": "0.327",
						"yrTerm3Standard.noUpfront": "0.366",
						"yrTerm3Standard.partialUpfront": "0.344"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.683",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.556",
						"yrTerm1Standard.noUpfront": "0.579",
						"yrTerm1Standard.partialUpfront": "0.563",
						"yrTerm3Convertible.allUpfront": "0.520",
						"yrTerm3Convertible.noUpfront": "0.553",
						"yrTerm3Convertible.partialUpfront": "0.527",
						"yrTerm3Standard.allUpfront": "0.468",
						"yrTerm3Standard.noUpfront": "0.507",
						"yrTerm3Standard.partialUpfront": "0.485"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.512",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.376",
						"yrTerm1Standard.noUpfront": "0.410",
						"yrTerm1Standard.partialUpfront": "0.384",
						"yrTerm3Convertible.allUpfront": "0.339",
						"yrTerm3Convertible.noUpfront": "0.374",
						"yrTerm3Convertible.partialUpfront": "0.346",
						"yrTerm3Standard.allUpfront": "0.283",
						"yrTerm3Standard.noUpfront": "0.325",
						"yrTerm3Standard.partialUpfront": "0.301"
					}
				},
				"mswin": {
					"ondemand": "0.574",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.438",
						"yrTerm1Standard.noUpfront": "0.472",
						"yrTerm1Standard.partialUpfront": "0.446",
						"yrTerm3Convertible.allUpfront": "0.401",
						"yrTerm3Convertible.noUpfront": "0.436",
						"yrTerm3Convertible.partialUpfront": "0.408",
						"yrTerm3Standard.allUpfront": "0.345",
						"yrTerm3Standard.noUpfront": "0.387",
						"yrTerm3Standard.partialUpfront": "0.363"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.715",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.579",
						"yrTerm1Standard.noUpfront": "0.613",
						"yrTerm1Standard.partialUpfront": "0.587",
						"yrTerm3Convertible.allUpfront": "0.542",
						"yrTerm3Convertible.noUpfront": "0.577",
						"yrTerm3Convertible.partialUpfront": "0.549",
						"yrTerm3Standard.allUpfront": "0.486",
						"yrTerm3Standard.noUpfront": "0.528",
						"yrTerm3Standard.partialUpfront": "0.504"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.412",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.276",
						"yrTerm1Standard.noUpfront": "0.296",
						"yrTerm1Standard.partialUpfront": "0.281",
						"yrTerm3Convertible.allUpfront": "0.224",
						"yrTerm3Convertible.noUpfront": "0.246",
						"yrTerm3Convertible.partialUpfront": "0.228",
						"yrTerm3Standard.allUpfront": "0.182",
						"yrTerm3Standard.noUpfront": "0.214",
						"yrTerm3Standard.partialUpfront": "0.194"
					}
				},
				"mswin": {
					"ondemand": "0.474",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.338",
						"yrTerm1Standard.noUpfront": "0.358",
						"yrTerm1Standard.partialUpfront": "0.343",
						"yrTerm3Convertible.allUpfront": "0.286",
						"yrTerm3Convertible.noUpfront": "0.308",
						"yrTerm3Convertible.partialUpfront": "0.290",
						"yrTerm3Standard.allUpfront": "0.244",
						"yrTerm3Standard.noUpfront": "0.276",
						"yrTerm3Standard.partialUpfront": "0.256"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.615",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.479",
						"yrTerm1Standard.noUpfront": "0.499",
						"yrTerm1Standard.partialUpfront": "0.484",
						"yrTerm3Convertible.allUpfront": "0.427",
						"yrTerm3Convertible.noUpfront": "0.449",
						"yrTerm3Convertible.partialUpfront": "0.431",
						"yrTerm3Standard.allUpfront": "0.385",
						"yrTerm3Standard.noUpfront": "0.417",
						"yrTerm3Standard.partialUpfront": "0.397"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.432",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.289",
						"yrTerm1Standard.noUpfront": "0.316",
						"yrTerm1Standard.partialUpfront": "0.295",
						"yrTerm3Convertible.allUpfront": "0.231",
						"yrTerm3Convertible.noUpfront": "0.254",
						"yrTerm3Convertible.partialUpfront": "0.236",
						"yrTerm3Standard.allUpfront": "0.196",
						"yrTerm3Standard.noUpfront": "0.221",
						"yrTerm3Standard.partialUpfront": "0.209"
					}
				},
				"mswin": {
					"ondemand": "0.494",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.351",
						"yrTerm1Standard.noUpfront": "0.378",
						"yrTerm1Standard.partialUpfront": "0.357",
						"yrTerm3Convertible.allUpfront": "0.293",
						"yrTerm3Convertible.noUpfront": "0.316",
						"yrTerm3Convertible.partialUpfront": "0.298",
						"yrTerm3Standard.allUpfront": "0.258",
						"yrTerm3Standard.noUpfront": "0.283",
						"yrTerm3Standard.partialUpfront": "0.271"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.635",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.492",
						"yrTerm1Standard.noUpfront": "0.519",
						"yrTerm1Standard.partialUpfront": "0.498",
						"yrTerm3Convertible.allUpfront": "0.434",
						"yrTerm3Convertible.noUpfront": "0.457",
						"yrTerm3Convertible.partialUpfront": "0.439",
						"yrTerm3Standard.allUpfront": "0.399",
						"yrTerm3Standard.noUpfront": "0.424",
						"yrTerm3Standard.partialUpfront": "0.412"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.404",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.269",
						"yrTerm1Standard.noUpfront": "0.289",
						"yrTerm1Standard.partialUpfront": "0.274",
						"yrTerm3Convertible.allUpfront": "0.242",
						"yrTerm3Convertible.noUpfront": "0.270",
						"yrTerm3Convertible.partialUpfront": "0.247",
						"yrTerm3Standard.allUpfront": "0.183",
						"yrTerm3Standard.noUpfront": "0.235",
						"yrTerm3Standard.partialUpfront": "0.195"
					}
				},
				"mswin": {
					"ondemand": "0.466",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.331",
						"yrTerm1Standard.noUpfront": "0.351",
						"yrTerm1Standard.partialUpfront": "0.336",
						"yrTerm3Convertible.allUpfront": "0.304",
						"yrTerm3Convertible.noUpfront": "0.332",
						"yrTerm3Convertible.partialUpfront": "0.309",
						"yrTerm3Standard.allUpfront": "0.245",
						"yrTerm3Standard.noUpfront": "0.297",
						"yrTerm3Standard.partialUpfront": "0.257"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.607",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.472",
						"yrTerm1Standard.noUpfront": "0.492",
						"yrTerm1Standard.partialUpfront": "0.477",
						"yrTerm3Convertible.allUpfront": "0.445",
						"yrTerm3Convertible.noUpfront": "0.473",
						"yrTerm3Convertible.partialUpfront": "0.450",
						"yrTerm3Standard.allUpfront": "0.386",
						"yrTerm3Standard.noUpfront": "0.438",
						"yrTerm3Standard.partialUpfront": "0.398"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.424",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.282",
						"yrTerm1Standard.noUpfront": "0.291",
						"yrTerm1Standard.partialUpfront": "0.288",
						"yrTerm3Convertible.allUpfront": "0.238",
						"yrTerm3Convertible.noUpfront": "0.262",
						"yrTerm3Convertible.partialUpfront": "0.243",
						"yrTerm3Standard.allUpfront": "0.192",
						"yrTerm3Standard.noUpfront": "0.228",
						"yrTerm3Standard.partialUpfront": "0.204"
					}
				},
				"mswin": {
					"ondemand": "0.486",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.344",
						"yrTerm1Standard.noUpfront": "0.353",
						"yrTerm1Standard.partialUpfront": "0.350",
						"yrTerm3Convertible.allUpfront": "0.300",
						"yrTerm3Convertible.noUpfront": "0.324",
						"yrTerm3Convertible.partialUpfront": "0.305",
						"yrTerm3Standard.allUpfront": "0.254",
						"yrTerm3Standard.noUpfront": "0.290",
						"yrTerm3Standard.partialUpfront": "0.266"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.627",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.485",
						"yrTerm1Standard.noUpfront": "0.494",
						"yrTerm1Standard.partialUpfront": "0.491",
						"yrTerm3Convertible.allUpfront": "0.441",
						"yrTerm3Convertible.noUpfront": "0.465",
						"yrTerm3Convertible.partialUpfront": "0.446",
						"yrTerm3Standard.allUpfront": "0.395",
						"yrTerm3Standard.noUpfront": "0.431",
						"yrTerm3Standard.partialUpfront": "0.407"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.648",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.370",
						"yrTerm1Standard.noUpfront": "0.397",
						"yrTerm1Standard.partialUpfront": "0.378",
						"yrTerm3Convertible.allUpfront": "0.332",
						"yrTerm3Convertible.noUpfront": "0.366",
						"yrTerm3Convertible.partialUpfront": "0.339",
						"yrTerm3Standard.allUpfront": "0.274",
						"yrTerm3Standard.noUpfront": "0.318",
						"yrTerm3Standard.partialUpfront": "0.291"
					}
				},
				"mswin": {
					"ondemand": "0.71",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.432",
						"yrTerm1Standard.noUpfront": "0.459",
						"yrTerm1Standard.partialUpfront": "0.440",
						"yrTerm3Convertible.allUpfront": "0.394",
						"yrTerm3Convertible.noUpfront": "0.428",
						"yrTerm3Convertible.partialUpfront": "0.401",
						"yrTerm3Standard.allUpfront": "0.336",
						"yrTerm3Standard.noUpfront": "0.380",
						"yrTerm3Standard.partialUpfront": "0.353"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.851",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.573",
						"yrTerm1Standard.noUpfront": "0.600",
						"yrTerm1Standard.partialUpfront": "0.581",
						"yrTerm3Convertible.allUpfront": "0.535",
						"yrTerm3Convertible.noUpfront": "0.569",
						"yrTerm3Convertible.partialUpfront": "0.542",
						"yrTerm3Standard.allUpfront": "0.477",
						"yrTerm3Standard.noUpfront": "0.521",
						"yrTerm3Standard.partialUpfront": "0.494"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.252",
						"yrTerm1Standard.noUpfront": "0.269",
						"yrTerm1Standard.partialUpfront": "0.257",
						"yrTerm3Convertible.allUpfront": "0.202",
						"yrTerm3Convertible.noUpfront": "0.223",
						"yrTerm3Convertible.partialUpfront": "0.206",
						"yrTerm3Standard.allUpfront": "0.167",
						"yrTerm3Standard.noUpfront": "0.194",
						"yrTerm3Standard.partialUpfront": "0.177"
					}
				},
				"mswin": {
					"ondemand": "0.438",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.314",
						"yrTerm1Standard.noUpfront": "0.331",
						"yrTerm1Standard.partialUpfront": "0.319",
						"yrTerm3Convertible.allUpfront": "0.264",
						"yrTerm3Convertible.noUpfront": "0.285",
						"yrTerm3Convertible.partialUpfront": "0.268",
						"yrTerm3Standard.allUpfront": "0.229",
						"yrTerm3Standard.noUpfront": "0.256",
						"yrTerm3Standard.partialUpfront": "0.239"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.579",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.455",
						"yrTerm1Standard.noUpfront": "0.472",
						"yrTerm1Standard.partialUpfront": "0.460",
						"yrTerm3Convertible.allUpfront": "0.405",
						"yrTerm3Convertible.noUpfront": "0.426",
						"yrTerm3Convertible.partialUpfront": "0.409",
						"yrTerm3Standard.allUpfront": "0.370",
						"yrTerm3Standard.noUpfront": "0.397",
						"yrTerm3Standard.partialUpfront": "0.380"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.252",
						"yrTerm1Standard.noUpfront": "0.269",
						"yrTerm1Standard.partialUpfront": "0.257",
						"yrTerm3Convertible.allUpfront": "0.202",
						"yrTerm3Convertible.noUpfront": "0.223",
						"yrTerm3Convertible.partialUpfront": "0.206",
						"yrTerm3Standard.allUpfront": "0.167",
						"yrTerm3Standard.noUpfront": "0.194",
						"yrTerm3Standard.partialUpfront": "0.177"
					}
				},
				"mswin": {
					"ondemand": "0.438",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.314",
						"yrTerm1Standard.noUpfront": "0.331",
						"yrTerm1Standard.partialUpfront": "0.319",
						"yrTerm3Convertible.allUpfront": "0.264",
						"yrTerm3Convertible.noUpfront": "0.285",
						"yrTerm3Convertible.partialUpfront": "0.268",
						"yrTerm3Standard.allUpfront": "0.229",
						"yrTerm3Standard.noUpfront": "0.256",
						"yrTerm3Standard.partialUpfront": "0.239"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.579",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.455",
						"yrTerm1Standard.noUpfront": "0.472",
						"yrTerm1Standard.partialUpfront": "0.460",
						"yrTerm3Convertible.allUpfront": "0.405",
						"yrTerm3Convertible.noUpfront": "0.426",
						"yrTerm3Convertible.partialUpfront": "0.409",
						"yrTerm3Standard.allUpfront": "0.370",
						"yrTerm3Standard.noUpfront": "0.397",
						"yrTerm3Standard.partialUpfront": "0.380"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.448",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.297",
						"yrTerm1Standard.noUpfront": "0.302",
						"yrTerm1Standard.partialUpfront": "0.303",
						"yrTerm3Convertible.allUpfront": "0.252",
						"yrTerm3Convertible.noUpfront": "0.278",
						"yrTerm3Convertible.partialUpfront": "0.258",
						"yrTerm3Standard.allUpfront": "0.197",
						"yrTerm3Standard.noUpfront": "0.242",
						"yrTerm3Standard.partialUpfront": "0.210"
					}
				},
				"mswin": {
					"ondemand": "0.51",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.359",
						"yrTerm1Standard.noUpfront": "0.364",
						"yrTerm1Standard.partialUpfront": "0.365",
						"yrTerm3Convertible.allUpfront": "0.314",
						"yrTerm3Convertible.noUpfront": "0.340",
						"yrTerm3Convertible.partialUpfront": "0.320",
						"yrTerm3Standard.allUpfront": "0.259",
						"yrTerm3Standard.noUpfront": "0.304",
						"yrTerm3Standard.partialUpfront": "0.272"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.651",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.500",
						"yrTerm1Standard.noUpfront": "0.505",
						"yrTerm1Standard.partialUpfront": "0.506",
						"yrTerm3Convertible.allUpfront": "0.455",
						"yrTerm3Convertible.noUpfront": "0.481",
						"yrTerm3Convertible.partialUpfront": "0.461",
						"yrTerm3Standard.allUpfront": "0.400",
						"yrTerm3Standard.noUpfront": "0.445",
						"yrTerm3Standard.partialUpfront": "0.413"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.488",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.331",
						"yrTerm1Standard.noUpfront": "0.356",
						"yrTerm1Standard.partialUpfront": "0.337",
						"yrTerm3Convertible.allUpfront": "0.274",
						"yrTerm3Convertible.noUpfront": "0.302",
						"yrTerm3Convertible.partialUpfront": "0.280",
						"yrTerm3Standard.allUpfront": "0.229",
						"yrTerm3Standard.noUpfront": "0.263",
						"yrTerm3Standard.partialUpfront": "0.244"
					}
				},
				"mswin": {
					"ondemand": "0.55",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.393",
						"yrTerm1Standard.noUpfront": "0.418",
						"yrTerm1Standard.partialUpfront": "0.399",
						"yrTerm3Convertible.allUpfront": "0.336",
						"yrTerm3Convertible.noUpfront": "0.364",
						"yrTerm3Convertible.partialUpfront": "0.342",
						"yrTerm3Standard.allUpfront": "0.291",
						"yrTerm3Standard.noUpfront": "0.325",
						"yrTerm3Standard.partialUpfront": "0.306"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.691",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.534",
						"yrTerm1Standard.noUpfront": "0.559",
						"yrTerm1Standard.partialUpfront": "0.540",
						"yrTerm3Convertible.allUpfront": "0.477",
						"yrTerm3Convertible.noUpfront": "0.505",
						"yrTerm3Convertible.partialUpfront": "0.483",
						"yrTerm3Standard.allUpfront": "0.432",
						"yrTerm3Standard.noUpfront": "0.466",
						"yrTerm3Standard.partialUpfront": "0.447"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.252",
						"yrTerm1Standard.noUpfront": "0.269",
						"yrTerm1Standard.partialUpfront": "0.257",
						"yrTerm3Convertible.allUpfront": "0.202",
						"yrTerm3Convertible.noUpfront": "0.223",
						"yrTerm3Convertible.partialUpfront": "0.206",
						"yrTerm3Standard.allUpfront": "0.167",
						"yrTerm3Standard.noUpfront": "0.194",
						"yrTerm3Standard.partialUpfront": "0.177"
					}
				},
				"mswin": {
					"ondemand": "0.438",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.314",
						"yrTerm1Standard.noUpfront": "0.331",
						"yrTerm1Standard.partialUpfront": "0.319",
						"yrTerm3Convertible.allUpfront": "0.264",
						"yrTerm3Convertible.noUpfront": "0.285",
						"yrTerm3Convertible.partialUpfront": "0.268",
						"yrTerm3Standard.allUpfront": "0.229",
						"yrTerm3Standard.noUpfront": "0.256",
						"yrTerm3Standard.partialUpfront": "0.239"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.579",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.455",
						"yrTerm1Standard.noUpfront": "0.472",
						"yrTerm1Standard.partialUpfront": "0.460",
						"yrTerm3Convertible.allUpfront": "0.405",
						"yrTerm3Convertible.noUpfront": "0.426",
						"yrTerm3Convertible.partialUpfront": "0.409",
						"yrTerm3Standard.allUpfront": "0.370",
						"yrTerm3Standard.noUpfront": "0.397",
						"yrTerm3Standard.partialUpfront": "0.380"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 3
		},
		"vpc_only": true
	},
	{
		"ECU": 6.5,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 3600,
		"ebs_max_bandwidth": 450,
		"ebs_optimized": true,
		"ebs_throughput": 56.25,
		"enhanced_networking": true,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "m4.large",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 8,
		"network_performance": "Moderate",
		"placement_group_support": true,
		"pretty_name": "M4 Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.129",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.081",
						"yrTerm1Standard.noUpfront": "0.087",
						"yrTerm1Standard.partialUpfront": "0.083",
						"yrTerm3Convertible.allUpfront": "0.067",
						"yrTerm3Convertible.noUpfront": "0.073",
						"yrTerm3Convertible.partialUpfront": "0.068",
						"yrTerm3Standard.allUpfront": "0.056",
						"yrTerm3Standard.noUpfront": "0.064",
						"yrTerm3Standard.partialUpfront": "0.059"
					}
				},
				"mswin": {
					"ondemand": "0.221",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.173",
						"yrTerm1Standard.noUpfront": "0.179",
						"yrTerm1Standard.partialUpfront": "0.175",
						"yrTerm3Convertible.allUpfront": "0.159",
						"yrTerm3Convertible.noUpfront": "0.165",
						"yrTerm3Convertible.partialUpfront": "0.160",
						"yrTerm3Standard.allUpfront": "0.143",
						"yrTerm3Standard.noUpfront": "0.156",
						"yrTerm3Standard.partialUpfront": "0.151"
					}
				},
				"mswinSQL": {
					"ondemand": "0.975",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.705",
						"yrTerm1Standard.noUpfront": "0.841",
						"yrTerm1Standard.partialUpfront": "0.720",
						"yrTerm3Convertible.allUpfront": "0.696",
						"yrTerm3Convertible.noUpfront": "0.830",
						"yrTerm3Convertible.partialUpfront": "0.710",
						"yrTerm3Standard.allUpfront": "0.652",
						"yrTerm3Standard.noUpfront": "0.693",
						"yrTerm3Standard.partialUpfront": "0.693"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.294",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.222",
						"yrTerm1Standard.partialUpfront": "0.190",
						"yrTerm3Convertible.allUpfront": "0.177",
						"yrTerm3Convertible.noUpfront": "0.211",
						"yrTerm3Convertible.partialUpfront": "0.181",
						"yrTerm3Standard.allUpfront": "0.153",
						"yrTerm3Standard.noUpfront": "0.163",
						"yrTerm3Standard.partialUpfront": "0.163"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.123",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.069",
						"yrTerm1Standard.noUpfront": "0.074",
						"yrTerm1Standard.partialUpfront": "0.070",
						"yrTerm3Convertible.allUpfront": "0.056",
						"yrTerm3Convertible.noUpfront": "0.062",
						"yrTerm3Convertible.partialUpfront": "0.058",
						"yrTerm3Standard.allUpfront": "0.047",
						"yrTerm3Standard.noUpfront": "0.054",
						"yrTerm3Standard.partialUpfront": "0.050"
					}
				},
				"mswin": {
					"ondemand": "0.215",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.161",
						"yrTerm1Standard.noUpfront": "0.166",
						"yrTerm1Standard.partialUpfront": "0.162",
						"yrTerm3Convertible.allUpfront": "0.148",
						"yrTerm3Convertible.noUpfront": "0.154",
						"yrTerm3Convertible.partialUpfront": "0.150",
						"yrTerm3Standard.allUpfront": "0.139",
						"yrTerm3Standard.noUpfront": "0.146",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				},
				"mswinSQL": {
					"ondemand": "0.994",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.916",
						"yrTerm1Standard.noUpfront": "0.932",
						"yrTerm1Standard.partialUpfront": "0.917",
						"yrTerm3Convertible.allUpfront": "0.907",
						"yrTerm3Convertible.noUpfront": "0.922",
						"yrTerm3Convertible.partialUpfront": "0.909",
						"yrTerm3Standard.allUpfront": "0.889",
						"yrTerm3Standard.noUpfront": "0.893",
						"yrTerm3Standard.partialUpfront": "0.893"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.286",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.232",
						"yrTerm1Standard.noUpfront": "0.237",
						"yrTerm1Standard.partialUpfront": "0.233",
						"yrTerm3Convertible.allUpfront": "0.219",
						"yrTerm3Convertible.noUpfront": "0.225",
						"yrTerm3Convertible.partialUpfront": "0.221",
						"yrTerm3Standard.allUpfront": "0.210",
						"yrTerm3Standard.noUpfront": "0.217",
						"yrTerm3Standard.partialUpfront": "0.213"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.123",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.072",
						"yrTerm1Standard.noUpfront": "0.077",
						"yrTerm1Standard.partialUpfront": "0.073",
						"yrTerm3Convertible.allUpfront": "0.054",
						"yrTerm3Convertible.noUpfront": "0.060",
						"yrTerm3Convertible.partialUpfront": "0.055",
						"yrTerm3Standard.allUpfront": "0.045",
						"yrTerm3Standard.noUpfront": "0.052",
						"yrTerm3Standard.partialUpfront": "0.048"
					}
				},
				"mswin": {
					"ondemand": "0.215",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.164",
						"yrTerm1Standard.noUpfront": "0.169",
						"yrTerm1Standard.partialUpfront": "0.165",
						"yrTerm3Convertible.allUpfront": "0.146",
						"yrTerm3Convertible.noUpfront": "0.152",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.137",
						"yrTerm3Standard.noUpfront": "0.144",
						"yrTerm3Standard.partialUpfront": "0.140"
					}
				},
				"mswinSQL": {
					"ondemand": "0.998",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.928",
						"yrTerm1Standard.noUpfront": "0.947",
						"yrTerm1Standard.partialUpfront": "0.930",
						"yrTerm3Convertible.allUpfront": "0.918",
						"yrTerm3Convertible.noUpfront": "0.935",
						"yrTerm3Convertible.partialUpfront": "0.920",
						"yrTerm3Standard.allUpfront": "0.892",
						"yrTerm3Standard.noUpfront": "0.896",
						"yrTerm3Standard.partialUpfront": "0.896"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.286",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.235",
						"yrTerm1Standard.noUpfront": "0.240",
						"yrTerm1Standard.partialUpfront": "0.236",
						"yrTerm3Convertible.allUpfront": "0.217",
						"yrTerm3Convertible.noUpfront": "0.223",
						"yrTerm3Convertible.partialUpfront": "0.218",
						"yrTerm3Standard.allUpfront": "0.208",
						"yrTerm3Standard.noUpfront": "0.215",
						"yrTerm3Standard.partialUpfront": "0.211"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.125",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.073",
						"yrTerm1Standard.noUpfront": "0.078",
						"yrTerm1Standard.partialUpfront": "0.074",
						"yrTerm3Convertible.allUpfront": "0.055",
						"yrTerm3Convertible.noUpfront": "0.061",
						"yrTerm3Convertible.partialUpfront": "0.056",
						"yrTerm3Standard.allUpfront": "0.046",
						"yrTerm3Standard.noUpfront": "0.053",
						"yrTerm3Standard.partialUpfront": "0.049"
					}
				},
				"mswin": {
					"ondemand": "0.217",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.165",
						"yrTerm1Standard.noUpfront": "0.170",
						"yrTerm1Standard.partialUpfront": "0.166",
						"yrTerm3Convertible.allUpfront": "0.147",
						"yrTerm3Convertible.noUpfront": "0.153",
						"yrTerm3Convertible.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.138",
						"yrTerm3Standard.noUpfront": "0.145",
						"yrTerm3Standard.partialUpfront": "0.141"
					}
				},
				"mswinSQL": {
					"ondemand": "0.979",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.718",
						"yrTerm1Standard.noUpfront": "0.856",
						"yrTerm1Standard.partialUpfront": "0.732",
						"yrTerm3Convertible.allUpfront": "0.707",
						"yrTerm3Convertible.noUpfront": "0.844",
						"yrTerm3Convertible.partialUpfront": "0.721",
						"yrTerm3Standard.allUpfront": "0.655",
						"yrTerm3Standard.noUpfront": "0.696",
						"yrTerm3Standard.partialUpfront": "0.696"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.288",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.200",
						"yrTerm1Standard.noUpfront": "0.239",
						"yrTerm1Standard.partialUpfront": "0.204",
						"yrTerm3Convertible.allUpfront": "0.189",
						"yrTerm3Convertible.noUpfront": "0.224",
						"yrTerm3Convertible.partialUpfront": "0.193",
						"yrTerm3Standard.allUpfront": "0.156",
						"yrTerm3Standard.noUpfront": "0.166",
						"yrTerm3Standard.partialUpfront": "0.166"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.125",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.084",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Convertible.allUpfront": "0.063",
						"yrTerm3Convertible.noUpfront": "0.070",
						"yrTerm3Convertible.partialUpfront": "0.064",
						"yrTerm3Standard.allUpfront": "0.053",
						"yrTerm3Standard.noUpfront": "0.061",
						"yrTerm3Standard.partialUpfront": "0.056"
					}
				},
				"mswin": {
					"ondemand": "0.217",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.170",
						"yrTerm1Standard.noUpfront": "0.176",
						"yrTerm1Standard.partialUpfront": "0.172",
						"yrTerm3Convertible.allUpfront": "0.155",
						"yrTerm3Convertible.noUpfront": "0.162",
						"yrTerm3Convertible.partialUpfront": "0.156",
						"yrTerm3Standard.allUpfront": "0.140",
						"yrTerm3Standard.noUpfront": "0.153",
						"yrTerm3Standard.partialUpfront": "0.148"
					}
				},
				"mswinSQL": {
					"ondemand": "0.969",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.713",
						"yrTerm1Standard.noUpfront": "0.852",
						"yrTerm1Standard.partialUpfront": "0.727",
						"yrTerm3Convertible.allUpfront": "0.703",
						"yrTerm3Convertible.noUpfront": "0.840",
						"yrTerm3Convertible.partialUpfront": "0.717",
						"yrTerm3Standard.allUpfront": "0.655",
						"yrTerm3Standard.noUpfront": "0.696",
						"yrTerm3Standard.partialUpfront": "0.696"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.288",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.195",
						"yrTerm1Standard.noUpfront": "0.233",
						"yrTerm1Standard.partialUpfront": "0.199",
						"yrTerm3Convertible.allUpfront": "0.185",
						"yrTerm3Convertible.noUpfront": "0.221",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.156",
						"yrTerm3Standard.noUpfront": "0.166",
						"yrTerm3Standard.partialUpfront": "0.166"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.111",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.064",
						"yrTerm1Standard.noUpfront": "0.068",
						"yrTerm1Standard.partialUpfront": "0.065",
						"yrTerm3Convertible.allUpfront": "0.050",
						"yrTerm3Convertible.noUpfront": "0.055",
						"yrTerm3Convertible.partialUpfront": "0.051",
						"yrTerm3Standard.allUpfront": "0.041",
						"yrTerm3Standard.noUpfront": "0.048",
						"yrTerm3Standard.partialUpfront": "0.044"
					}
				},
				"mswin": {
					"ondemand": "0.203",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.156",
						"yrTerm1Standard.noUpfront": "0.160",
						"yrTerm1Standard.partialUpfront": "0.157",
						"yrTerm3Convertible.allUpfront": "0.142",
						"yrTerm3Convertible.noUpfront": "0.147",
						"yrTerm3Convertible.partialUpfront": "0.143",
						"yrTerm3Standard.allUpfront": "0.133",
						"yrTerm3Standard.noUpfront": "0.140",
						"yrTerm3Standard.partialUpfront": "0.136"
					}
				},
				"mswinSQL": {
					"ondemand": "1.33",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.283",
						"yrTerm1Standard.noUpfront": "1.287",
						"yrTerm1Standard.partialUpfront": "1.284",
						"yrTerm3Convertible.allUpfront": "1.269",
						"yrTerm3Convertible.noUpfront": "1.274",
						"yrTerm3Convertible.partialUpfront": "1.270",
						"yrTerm3Standard.allUpfront": "1.260",
						"yrTerm3Standard.noUpfront": "1.267",
						"yrTerm3Standard.partialUpfront": "1.263"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.274",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.227",
						"yrTerm1Standard.noUpfront": "0.231",
						"yrTerm1Standard.partialUpfront": "0.228",
						"yrTerm3Convertible.allUpfront": "0.213",
						"yrTerm3Convertible.noUpfront": "0.218",
						"yrTerm3Convertible.partialUpfront": "0.214",
						"yrTerm3Standard.allUpfront": "0.204",
						"yrTerm3Standard.noUpfront": "0.211",
						"yrTerm3Standard.partialUpfront": "0.207"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.076",
						"yrTerm1Standard.noUpfront": "0.082",
						"yrTerm1Standard.partialUpfront": "0.078",
						"yrTerm3Convertible.allUpfront": "0.063",
						"yrTerm3Convertible.noUpfront": "0.070",
						"yrTerm3Convertible.partialUpfront": "0.064",
						"yrTerm3Standard.allUpfront": "0.053",
						"yrTerm3Standard.noUpfront": "0.061",
						"yrTerm3Standard.partialUpfront": "0.056"
					}
				},
				"mswin": {
					"ondemand": "0.212",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.168",
						"yrTerm1Standard.noUpfront": "0.174",
						"yrTerm1Standard.partialUpfront": "0.170",
						"yrTerm3Convertible.allUpfront": "0.155",
						"yrTerm3Convertible.noUpfront": "0.162",
						"yrTerm3Convertible.partialUpfront": "0.156",
						"yrTerm3Standard.allUpfront": "0.141",
						"yrTerm3Standard.noUpfront": "0.153",
						"yrTerm3Standard.partialUpfront": "0.148"
					}
				},
				"mswinSQL": {
					"ondemand": "0.944",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.705",
						"yrTerm1Standard.noUpfront": "0.841",
						"yrTerm1Standard.partialUpfront": "0.720",
						"yrTerm3Convertible.allUpfront": "0.696",
						"yrTerm3Convertible.noUpfront": "0.830",
						"yrTerm3Convertible.partialUpfront": "0.710",
						"yrTerm3Standard.allUpfront": "0.651",
						"yrTerm3Standard.noUpfront": "0.692",
						"yrTerm3Standard.partialUpfront": "0.692"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.263",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.222",
						"yrTerm1Standard.partialUpfront": "0.190",
						"yrTerm3Convertible.allUpfront": "0.177",
						"yrTerm3Convertible.noUpfront": "0.211",
						"yrTerm3Convertible.partialUpfront": "0.181",
						"yrTerm3Standard.allUpfront": "0.152",
						"yrTerm3Standard.noUpfront": "0.162",
						"yrTerm3Standard.partialUpfront": "0.162"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.111",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.071",
						"yrTerm1Standard.noUpfront": "0.076",
						"yrTerm1Standard.partialUpfront": "0.072",
						"yrTerm3Convertible.allUpfront": "0.056",
						"yrTerm3Convertible.noUpfront": "0.062",
						"yrTerm3Convertible.partialUpfront": "0.058",
						"yrTerm3Standard.allUpfront": "0.047",
						"yrTerm3Standard.noUpfront": "0.054",
						"yrTerm3Standard.partialUpfront": "0.050"
					}
				},
				"mswin": {
					"ondemand": "0.203",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.163",
						"yrTerm1Standard.noUpfront": "0.168",
						"yrTerm1Standard.partialUpfront": "0.164",
						"yrTerm3Convertible.allUpfront": "0.148",
						"yrTerm3Convertible.noUpfront": "0.154",
						"yrTerm3Convertible.partialUpfront": "0.150",
						"yrTerm3Standard.allUpfront": "0.139",
						"yrTerm3Standard.noUpfront": "0.146",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				},
				"mswinSQL": {
					"ondemand": "0.933",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.697",
						"yrTerm1Standard.noUpfront": "0.833",
						"yrTerm1Standard.partialUpfront": "0.712",
						"yrTerm3Convertible.allUpfront": "0.689",
						"yrTerm3Convertible.noUpfront": "0.823",
						"yrTerm3Convertible.partialUpfront": "0.703",
						"yrTerm3Standard.allUpfront": "0.646",
						"yrTerm3Standard.noUpfront": "0.686",
						"yrTerm3Standard.partialUpfront": "0.686"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.178",
						"yrTerm1Standard.noUpfront": "0.213",
						"yrTerm1Standard.partialUpfront": "0.182",
						"yrTerm3Convertible.allUpfront": "0.170",
						"yrTerm3Convertible.noUpfront": "0.203",
						"yrTerm3Convertible.partialUpfront": "0.173",
						"yrTerm3Standard.allUpfront": "0.147",
						"yrTerm3Standard.noUpfront": "0.156",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.116",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.074",
						"yrTerm1Standard.noUpfront": "0.079",
						"yrTerm1Standard.partialUpfront": "0.075",
						"yrTerm3Convertible.allUpfront": "0.060",
						"yrTerm3Convertible.noUpfront": "0.066",
						"yrTerm3Convertible.partialUpfront": "0.061",
						"yrTerm3Standard.allUpfront": "0.050",
						"yrTerm3Standard.noUpfront": "0.057",
						"yrTerm3Standard.partialUpfront": "0.053"
					}
				},
				"mswin": {
					"ondemand": "0.208",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.166",
						"yrTerm1Standard.noUpfront": "0.171",
						"yrTerm1Standard.partialUpfront": "0.167",
						"yrTerm3Convertible.allUpfront": "0.152",
						"yrTerm3Convertible.noUpfront": "0.158",
						"yrTerm3Convertible.partialUpfront": "0.153",
						"yrTerm3Standard.allUpfront": "0.142",
						"yrTerm3Standard.noUpfront": "0.149",
						"yrTerm3Standard.partialUpfront": "0.145"
					}
				},
				"mswinSQL": {
					"ondemand": "1.335",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.293",
						"yrTerm1Standard.noUpfront": "1.298",
						"yrTerm1Standard.partialUpfront": "1.294",
						"yrTerm3Convertible.allUpfront": "1.279",
						"yrTerm3Convertible.noUpfront": "1.285",
						"yrTerm3Convertible.partialUpfront": "1.280",
						"yrTerm3Standard.allUpfront": "1.269",
						"yrTerm3Standard.noUpfront": "1.276",
						"yrTerm3Standard.partialUpfront": "1.272"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.279",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.237",
						"yrTerm1Standard.noUpfront": "0.242",
						"yrTerm1Standard.partialUpfront": "0.238",
						"yrTerm3Convertible.allUpfront": "0.223",
						"yrTerm3Convertible.noUpfront": "0.229",
						"yrTerm3Convertible.partialUpfront": "0.224",
						"yrTerm3Standard.allUpfront": "0.213",
						"yrTerm3Standard.noUpfront": "0.220",
						"yrTerm3Standard.partialUpfront": "0.216"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.159",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.084",
						"yrTerm1Standard.noUpfront": "0.090",
						"yrTerm1Standard.partialUpfront": "0.086",
						"yrTerm3Convertible.allUpfront": "0.072",
						"yrTerm3Convertible.noUpfront": "0.080",
						"yrTerm3Convertible.partialUpfront": "0.074",
						"yrTerm3Standard.allUpfront": "0.060",
						"yrTerm3Standard.noUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.251",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.176",
						"yrTerm1Standard.noUpfront": "0.182",
						"yrTerm1Standard.partialUpfront": "0.178",
						"yrTerm3Convertible.allUpfront": "0.164",
						"yrTerm3Convertible.noUpfront": "0.172",
						"yrTerm3Convertible.partialUpfront": "0.166",
						"yrTerm3Standard.allUpfront": "0.152",
						"yrTerm3Standard.noUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswinSQL": {
					"ondemand": "1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.920",
						"yrTerm1Standard.noUpfront": "0.938",
						"yrTerm1Standard.partialUpfront": "0.922",
						"yrTerm3Convertible.allUpfront": "0.911",
						"yrTerm3Convertible.noUpfront": "0.927",
						"yrTerm3Convertible.partialUpfront": "0.913",
						"yrTerm3Standard.allUpfront": "0.894",
						"yrTerm3Standard.noUpfront": "0.898",
						"yrTerm3Standard.partialUpfront": "0.898"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.322",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.247",
						"yrTerm1Standard.noUpfront": "0.253",
						"yrTerm1Standard.partialUpfront": "0.249",
						"yrTerm3Convertible.allUpfront": "0.235",
						"yrTerm3Convertible.noUpfront": "0.243",
						"yrTerm3Convertible.partialUpfront": "0.237",
						"yrTerm3Standard.allUpfront": "0.223",
						"yrTerm3Standard.noUpfront": "0.232",
						"yrTerm3Standard.partialUpfront": "0.227"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.058",
						"yrTerm1Standard.noUpfront": "0.062",
						"yrTerm1Standard.partialUpfront": "0.059",
						"yrTerm3Convertible.allUpfront": "0.045",
						"yrTerm3Convertible.noUpfront": "0.050",
						"yrTerm3Convertible.partialUpfront": "0.046",
						"yrTerm3Standard.allUpfront": "0.038",
						"yrTerm3Standard.noUpfront": "0.043",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				},
				"mswin": {
					"ondemand": "0.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.150",
						"yrTerm1Standard.noUpfront": "0.154",
						"yrTerm1Standard.partialUpfront": "0.151",
						"yrTerm3Convertible.allUpfront": "0.137",
						"yrTerm3Convertible.noUpfront": "0.142",
						"yrTerm3Convertible.partialUpfront": "0.138",
						"yrTerm3Standard.allUpfront": "0.122",
						"yrTerm3Standard.noUpfront": "0.135",
						"yrTerm3Standard.partialUpfront": "0.130"
					}
				},
				"mswinSQL": {
					"ondemand": "0.921",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.682",
						"yrTerm1Standard.noUpfront": "0.815",
						"yrTerm1Standard.partialUpfront": "0.696",
						"yrTerm3Convertible.allUpfront": "0.675",
						"yrTerm3Convertible.noUpfront": "0.807",
						"yrTerm3Convertible.partialUpfront": "0.689",
						"yrTerm3Standard.allUpfront": "0.633",
						"yrTerm3Standard.noUpfront": "0.674",
						"yrTerm3Standard.partialUpfront": "0.674"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.24",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.163",
						"yrTerm1Standard.noUpfront": "0.194",
						"yrTerm1Standard.partialUpfront": "0.166",
						"yrTerm3Convertible.allUpfront": "0.156",
						"yrTerm3Convertible.noUpfront": "0.186",
						"yrTerm3Convertible.partialUpfront": "0.159",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.noUpfront": "0.142",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.058",
						"yrTerm1Standard.noUpfront": "0.062",
						"yrTerm1Standard.partialUpfront": "0.059",
						"yrTerm3Convertible.allUpfront": "0.045",
						"yrTerm3Convertible.noUpfront": "0.050",
						"yrTerm3Convertible.partialUpfront": "0.046",
						"yrTerm3Standard.allUpfront": "0.038",
						"yrTerm3Standard.noUpfront": "0.043",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				},
				"mswin": {
					"ondemand": "0.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.150",
						"yrTerm1Standard.noUpfront": "0.154",
						"yrTerm1Standard.partialUpfront": "0.151",
						"yrTerm3Convertible.allUpfront": "0.137",
						"yrTerm3Convertible.noUpfront": "0.142",
						"yrTerm3Convertible.partialUpfront": "0.138",
						"yrTerm3Standard.allUpfront": "0.122",
						"yrTerm3Standard.noUpfront": "0.135",
						"yrTerm3Standard.partialUpfront": "0.130"
					}
				},
				"mswinSQL": {
					"ondemand": "0.921",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.682",
						"yrTerm1Standard.noUpfront": "0.815",
						"yrTerm1Standard.partialUpfront": "0.696",
						"yrTerm3Convertible.allUpfront": "0.675",
						"yrTerm3Convertible.noUpfront": "0.807",
						"yrTerm3Convertible.partialUpfront": "0.689",
						"yrTerm3Standard.allUpfront": "0.633",
						"yrTerm3Standard.noUpfront": "0.674",
						"yrTerm3Standard.partialUpfront": "0.674"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.24",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.163",
						"yrTerm1Standard.noUpfront": "0.194",
						"yrTerm1Standard.partialUpfront": "0.166",
						"yrTerm3Convertible.allUpfront": "0.156",
						"yrTerm3Convertible.noUpfront": "0.186",
						"yrTerm3Convertible.partialUpfront": "0.159",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.noUpfront": "0.142",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.126",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.084",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Convertible.allUpfront": "0.059",
						"yrTerm3Convertible.noUpfront": "0.065",
						"yrTerm3Convertible.partialUpfront": "0.060",
						"yrTerm3Standard.allUpfront": "0.049",
						"yrTerm3Standard.noUpfront": "0.056",
						"yrTerm3Standard.partialUpfront": "0.052"
					}
				},
				"mswin": {
					"ondemand": "0.218",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.170",
						"yrTerm1Standard.noUpfront": "0.176",
						"yrTerm1Standard.partialUpfront": "0.172",
						"yrTerm3Convertible.allUpfront": "0.151",
						"yrTerm3Convertible.noUpfront": "0.157",
						"yrTerm3Convertible.partialUpfront": "0.152",
						"yrTerm3Standard.allUpfront": "0.141",
						"yrTerm3Standard.noUpfront": "0.148",
						"yrTerm3Standard.partialUpfront": "0.144"
					}
				},
				"mswinSQL": {
					"ondemand": "0.98",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.922",
						"yrTerm1Standard.noUpfront": "0.940",
						"yrTerm1Standard.partialUpfront": "0.924",
						"yrTerm3Convertible.allUpfront": "0.914",
						"yrTerm3Convertible.noUpfront": "0.930",
						"yrTerm3Convertible.partialUpfront": "0.915",
						"yrTerm3Standard.allUpfront": "0.887",
						"yrTerm3Standard.noUpfront": "0.891",
						"yrTerm3Standard.partialUpfront": "0.891"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.289",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.241",
						"yrTerm1Standard.noUpfront": "0.247",
						"yrTerm1Standard.partialUpfront": "0.243",
						"yrTerm3Convertible.allUpfront": "0.222",
						"yrTerm3Convertible.noUpfront": "0.228",
						"yrTerm3Convertible.partialUpfront": "0.223",
						"yrTerm3Standard.allUpfront": "0.212",
						"yrTerm3Standard.noUpfront": "0.219",
						"yrTerm3Standard.partialUpfront": "0.215"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.117",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.079",
						"yrTerm1Standard.noUpfront": "0.085",
						"yrTerm1Standard.partialUpfront": "0.081",
						"yrTerm3Convertible.allUpfront": "0.061",
						"yrTerm3Convertible.noUpfront": "0.067",
						"yrTerm3Convertible.partialUpfront": "0.062",
						"yrTerm3Standard.allUpfront": "0.051",
						"yrTerm3Standard.noUpfront": "0.058",
						"yrTerm3Standard.partialUpfront": "0.054"
					}
				},
				"mswin": {
					"ondemand": "0.209",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.171",
						"yrTerm1Standard.noUpfront": "0.177",
						"yrTerm1Standard.partialUpfront": "0.173",
						"yrTerm3Convertible.allUpfront": "0.153",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.154",
						"yrTerm3Standard.allUpfront": "0.143",
						"yrTerm3Standard.noUpfront": "0.150",
						"yrTerm3Standard.partialUpfront": "0.146"
					}
				},
				"mswinSQL": {
					"ondemand": "0.941",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.708",
						"yrTerm1Standard.noUpfront": "0.846",
						"yrTerm1Standard.partialUpfront": "0.723",
						"yrTerm3Convertible.allUpfront": "0.699",
						"yrTerm3Convertible.noUpfront": "0.835",
						"yrTerm3Convertible.partialUpfront": "0.713",
						"yrTerm3Standard.allUpfront": "0.649",
						"yrTerm3Standard.noUpfront": "0.690",
						"yrTerm3Standard.partialUpfront": "0.690"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.26",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.190",
						"yrTerm1Standard.noUpfront": "0.227",
						"yrTerm1Standard.partialUpfront": "0.194",
						"yrTerm3Convertible.allUpfront": "0.181",
						"yrTerm3Convertible.noUpfront": "0.216",
						"yrTerm3Convertible.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.noUpfront": "0.160",
						"yrTerm3Standard.partialUpfront": "0.160"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.058",
						"yrTerm1Standard.noUpfront": "0.062",
						"yrTerm1Standard.partialUpfront": "0.059",
						"yrTerm3Convertible.allUpfront": "0.045",
						"yrTerm3Convertible.noUpfront": "0.050",
						"yrTerm3Convertible.partialUpfront": "0.046",
						"yrTerm3Standard.allUpfront": "0.038",
						"yrTerm3Standard.noUpfront": "0.043",
						"yrTerm3Standard.partialUpfront": "0.040"
					}
				},
				"mswin": {
					"ondemand": "0.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.150",
						"yrTerm1Standard.noUpfront": "0.154",
						"yrTerm1Standard.partialUpfront": "0.151",
						"yrTerm3Convertible.allUpfront": "0.137",
						"yrTerm3Convertible.noUpfront": "0.142",
						"yrTerm3Convertible.partialUpfront": "0.138",
						"yrTerm3Standard.allUpfront": "0.122",
						"yrTerm3Standard.noUpfront": "0.135",
						"yrTerm3Standard.partialUpfront": "0.130"
					}
				},
				"mswinSQL": {
					"ondemand": "0.921",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.682",
						"yrTerm1Standard.noUpfront": "0.815",
						"yrTerm1Standard.partialUpfront": "0.696",
						"yrTerm3Convertible.allUpfront": "0.675",
						"yrTerm3Convertible.noUpfront": "0.807",
						"yrTerm3Convertible.partialUpfront": "0.689",
						"yrTerm3Standard.allUpfront": "0.633",
						"yrTerm3Standard.noUpfront": "0.674",
						"yrTerm3Standard.partialUpfront": "0.674"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.24",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.163",
						"yrTerm1Standard.noUpfront": "0.194",
						"yrTerm1Standard.partialUpfront": "0.166",
						"yrTerm3Convertible.allUpfront": "0.156",
						"yrTerm3Convertible.noUpfront": "0.186",
						"yrTerm3Convertible.partialUpfront": "0.159",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.noUpfront": "0.142",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 10,
			"max_enis": 2
		},
		"vpc_only": true
	},
	{
		"ECU": 13,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 6000,
		"ebs_max_bandwidth": 750,
		"ebs_optimized": true,
		"ebs_throughput": 93.75,
		"enhanced_networking": true,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "m4.xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 16,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "M4 Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.258",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.163",
						"yrTerm1Standard.noUpfront": "0.174",
						"yrTerm1Standard.partialUpfront": "0.166",
						"yrTerm3Convertible.allUpfront": "0.133",
						"yrTerm3Convertible.noUpfront": "0.147",
						"yrTerm3Convertible.partialUpfront": "0.136",
						"yrTerm3Standard.allUpfront": "0.111",
						"yrTerm3Standard.noUpfront": "0.127",
						"yrTerm3Standard.partialUpfront": "0.118"
					}
				},
				"mswin": {
					"ondemand": "0.442",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.347",
						"yrTerm1Standard.noUpfront": "0.358",
						"yrTerm1Standard.partialUpfront": "0.350",
						"yrTerm3Convertible.allUpfront": "0.317",
						"yrTerm3Convertible.noUpfront": "0.331",
						"yrTerm3Convertible.partialUpfront": "0.320",
						"yrTerm3Standard.allUpfront": "0.285",
						"yrTerm3Standard.noUpfront": "0.311",
						"yrTerm3Standard.partialUpfront": "0.302"
					}
				},
				"mswinSQL": {
					"ondemand": "1.219",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.850",
						"yrTerm1Standard.noUpfront": "1.015",
						"yrTerm1Standard.partialUpfront": "0.868",
						"yrTerm3Convertible.allUpfront": "0.832",
						"yrTerm3Convertible.noUpfront": "0.993",
						"yrTerm3Convertible.partialUpfront": "0.849",
						"yrTerm3Standard.allUpfront": "0.767",
						"yrTerm3Standard.noUpfront": "0.816",
						"yrTerm3Standard.partialUpfront": "0.816"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.533",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.337",
						"yrTerm1Standard.noUpfront": "0.402",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.319",
						"yrTerm3Convertible.noUpfront": "0.380",
						"yrTerm3Convertible.partialUpfront": "0.325",
						"yrTerm3Standard.allUpfront": "0.273",
						"yrTerm3Standard.noUpfront": "0.290",
						"yrTerm3Standard.partialUpfront": "0.290"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.246",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.137",
						"yrTerm1Standard.noUpfront": "0.147",
						"yrTerm1Standard.partialUpfront": "0.140",
						"yrTerm3Convertible.allUpfront": "0.113",
						"yrTerm3Convertible.noUpfront": "0.124",
						"yrTerm3Convertible.partialUpfront": "0.115",
						"yrTerm3Standard.allUpfront": "0.094",
						"yrTerm3Standard.noUpfront": "0.108",
						"yrTerm3Standard.partialUpfront": "0.100"
					}
				},
				"mswin": {
					"ondemand": "0.43",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.321",
						"yrTerm1Standard.noUpfront": "0.331",
						"yrTerm1Standard.partialUpfront": "0.324",
						"yrTerm3Convertible.allUpfront": "0.297",
						"yrTerm3Convertible.noUpfront": "0.308",
						"yrTerm3Convertible.partialUpfront": "0.299",
						"yrTerm3Standard.allUpfront": "0.278",
						"yrTerm3Standard.noUpfront": "0.292",
						"yrTerm3Standard.partialUpfront": "0.284"
					}
				},
				"mswinSQL": {
					"ondemand": "1.223",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.065",
						"yrTerm1Standard.noUpfront": "1.099",
						"yrTerm1Standard.partialUpfront": "1.069",
						"yrTerm3Convertible.allUpfront": "1.048",
						"yrTerm3Convertible.noUpfront": "1.078",
						"yrTerm3Convertible.partialUpfront": "1.051",
						"yrTerm3Standard.allUpfront": "1.013",
						"yrTerm3Standard.noUpfront": "1.020",
						"yrTerm3Standard.partialUpfront": "1.020"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.501",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.392",
						"yrTerm1Standard.noUpfront": "0.402",
						"yrTerm1Standard.partialUpfront": "0.395",
						"yrTerm3Convertible.allUpfront": "0.368",
						"yrTerm3Convertible.noUpfront": "0.379",
						"yrTerm3Convertible.partialUpfront": "0.370",
						"yrTerm3Standard.allUpfront": "0.349",
						"yrTerm3Standard.noUpfront": "0.363",
						"yrTerm3Standard.partialUpfront": "0.355"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.246",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.143",
						"yrTerm1Standard.noUpfront": "0.153",
						"yrTerm1Standard.partialUpfront": "0.146",
						"yrTerm3Convertible.allUpfront": "0.108",
						"yrTerm3Convertible.noUpfront": "0.119",
						"yrTerm3Convertible.partialUpfront": "0.110",
						"yrTerm3Standard.allUpfront": "0.090",
						"yrTerm3Standard.noUpfront": "0.104",
						"yrTerm3Standard.partialUpfront": "0.096"
					}
				},
				"mswin": {
					"ondemand": "0.43",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.327",
						"yrTerm1Standard.noUpfront": "0.337",
						"yrTerm1Standard.partialUpfront": "0.330",
						"yrTerm3Convertible.allUpfront": "0.292",
						"yrTerm3Convertible.noUpfront": "0.303",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.274",
						"yrTerm3Standard.noUpfront": "0.288",
						"yrTerm3Standard.partialUpfront": "0.280"
					}
				},
				"mswinSQL": {
					"ondemand": "1.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.090",
						"yrTerm1Standard.noUpfront": "1.128",
						"yrTerm1Standard.partialUpfront": "1.094",
						"yrTerm3Convertible.allUpfront": "1.070",
						"yrTerm3Convertible.noUpfront": "1.104",
						"yrTerm3Convertible.partialUpfront": "1.074",
						"yrTerm3Standard.allUpfront": "1.017",
						"yrTerm3Standard.noUpfront": "1.025",
						"yrTerm3Standard.partialUpfront": "1.025"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.501",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.398",
						"yrTerm1Standard.noUpfront": "0.408",
						"yrTerm1Standard.partialUpfront": "0.401",
						"yrTerm3Convertible.allUpfront": "0.363",
						"yrTerm3Convertible.noUpfront": "0.374",
						"yrTerm3Convertible.partialUpfront": "0.365",
						"yrTerm3Standard.allUpfront": "0.345",
						"yrTerm3Standard.noUpfront": "0.359",
						"yrTerm3Standard.partialUpfront": "0.351"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.145",
						"yrTerm1Standard.noUpfront": "0.155",
						"yrTerm1Standard.partialUpfront": "0.148",
						"yrTerm3Convertible.allUpfront": "0.110",
						"yrTerm3Convertible.noUpfront": "0.122",
						"yrTerm3Convertible.partialUpfront": "0.113",
						"yrTerm3Standard.allUpfront": "0.092",
						"yrTerm3Standard.noUpfront": "0.106",
						"yrTerm3Standard.partialUpfront": "0.098"
					}
				},
				"mswin": {
					"ondemand": "0.434",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.329",
						"yrTerm1Standard.noUpfront": "0.339",
						"yrTerm1Standard.partialUpfront": "0.332",
						"yrTerm3Convertible.allUpfront": "0.294",
						"yrTerm3Convertible.noUpfront": "0.306",
						"yrTerm3Convertible.partialUpfront": "0.297",
						"yrTerm3Standard.allUpfront": "0.276",
						"yrTerm3Standard.noUpfront": "0.290",
						"yrTerm3Standard.partialUpfront": "0.282"
					}
				},
				"mswinSQL": {
					"ondemand": "1.226",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.876",
						"yrTerm1Standard.noUpfront": "1.046",
						"yrTerm1Standard.partialUpfront": "0.893",
						"yrTerm3Convertible.allUpfront": "0.855",
						"yrTerm3Convertible.noUpfront": "1.021",
						"yrTerm3Convertible.partialUpfront": "0.872",
						"yrTerm3Standard.allUpfront": "0.772",
						"yrTerm3Standard.noUpfront": "0.822",
						"yrTerm3Standard.partialUpfront": "0.822"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.505",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.365",
						"yrTerm1Standard.noUpfront": "0.410",
						"yrTerm1Standard.partialUpfront": "0.372",
						"yrTerm3Convertible.allUpfront": "0.344",
						"yrTerm3Convertible.noUpfront": "0.377",
						"yrTerm3Convertible.partialUpfront": "0.351",
						"yrTerm3Standard.allUpfront": "0.278",
						"yrTerm3Standard.noUpfront": "0.296",
						"yrTerm3Standard.partialUpfront": "0.296"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.157",
						"yrTerm1Standard.noUpfront": "0.168",
						"yrTerm1Standard.partialUpfront": "0.160",
						"yrTerm3Convertible.allUpfront": "0.126",
						"yrTerm3Convertible.noUpfront": "0.139",
						"yrTerm3Convertible.partialUpfront": "0.129",
						"yrTerm3Standard.allUpfront": "0.105",
						"yrTerm3Standard.noUpfront": "0.121",
						"yrTerm3Standard.partialUpfront": "0.112"
					}
				},
				"mswin": {
					"ondemand": "0.434",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.341",
						"yrTerm1Standard.noUpfront": "0.352",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.310",
						"yrTerm3Convertible.noUpfront": "0.323",
						"yrTerm3Convertible.partialUpfront": "0.313",
						"yrTerm3Standard.allUpfront": "0.280",
						"yrTerm3Standard.noUpfront": "0.305",
						"yrTerm3Standard.partialUpfront": "0.296"
					}
				},
				"mswinSQL": {
					"ondemand": "1.207",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.867",
						"yrTerm1Standard.noUpfront": "1.035",
						"yrTerm1Standard.partialUpfront": "0.885",
						"yrTerm3Convertible.allUpfront": "0.847",
						"yrTerm3Convertible.noUpfront": "1.011",
						"yrTerm3Convertible.partialUpfront": "0.865",
						"yrTerm3Standard.allUpfront": "0.772",
						"yrTerm3Standard.noUpfront": "0.822",
						"yrTerm3Standard.partialUpfront": "0.822"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.505",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.355",
						"yrTerm1Standard.noUpfront": "0.423",
						"yrTerm1Standard.partialUpfront": "0.362",
						"yrTerm3Convertible.allUpfront": "0.335",
						"yrTerm3Convertible.noUpfront": "0.394",
						"yrTerm3Convertible.partialUpfront": "0.342",
						"yrTerm3Standard.allUpfront": "0.278",
						"yrTerm3Standard.noUpfront": "0.296",
						"yrTerm3Standard.partialUpfront": "0.296"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.222",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.127",
						"yrTerm1Standard.noUpfront": "0.137",
						"yrTerm1Standard.partialUpfront": "0.130",
						"yrTerm3Convertible.allUpfront": "0.099",
						"yrTerm3Convertible.noUpfront": "0.109",
						"yrTerm3Convertible.partialUpfront": "0.101",
						"yrTerm3Standard.allUpfront": "0.083",
						"yrTerm3Standard.noUpfront": "0.095",
						"yrTerm3Standard.partialUpfront": "0.088"
					}
				},
				"mswin": {
					"ondemand": "0.406",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.311",
						"yrTerm1Standard.noUpfront": "0.321",
						"yrTerm1Standard.partialUpfront": "0.314",
						"yrTerm3Convertible.allUpfront": "0.283",
						"yrTerm3Convertible.noUpfront": "0.293",
						"yrTerm3Convertible.partialUpfront": "0.285",
						"yrTerm3Standard.allUpfront": "0.267",
						"yrTerm3Standard.noUpfront": "0.279",
						"yrTerm3Standard.partialUpfront": "0.272"
					}
				},
				"mswinSQL": {
					"ondemand": "1.533",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.438",
						"yrTerm1Standard.noUpfront": "1.448",
						"yrTerm1Standard.partialUpfront": "1.441",
						"yrTerm3Convertible.allUpfront": "1.410",
						"yrTerm3Convertible.noUpfront": "1.420",
						"yrTerm3Convertible.partialUpfront": "1.412",
						"yrTerm3Standard.allUpfront": "1.394",
						"yrTerm3Standard.noUpfront": "1.406",
						"yrTerm3Standard.partialUpfront": "1.399"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.477",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.382",
						"yrTerm1Standard.noUpfront": "0.392",
						"yrTerm1Standard.partialUpfront": "0.385",
						"yrTerm3Convertible.allUpfront": "0.354",
						"yrTerm3Convertible.noUpfront": "0.364",
						"yrTerm3Convertible.partialUpfront": "0.356",
						"yrTerm3Standard.allUpfront": "0.338",
						"yrTerm3Standard.noUpfront": "0.350",
						"yrTerm3Standard.partialUpfront": "0.343"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.24",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.153",
						"yrTerm1Standard.noUpfront": "0.164",
						"yrTerm1Standard.partialUpfront": "0.156",
						"yrTerm3Convertible.allUpfront": "0.126",
						"yrTerm3Convertible.noUpfront": "0.139",
						"yrTerm3Convertible.partialUpfront": "0.129",
						"yrTerm3Standard.allUpfront": "0.105",
						"yrTerm3Standard.noUpfront": "0.121",
						"yrTerm3Standard.partialUpfront": "0.112"
					}
				},
				"mswin": {
					"ondemand": "0.424",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.337",
						"yrTerm1Standard.noUpfront": "0.348",
						"yrTerm1Standard.partialUpfront": "0.340",
						"yrTerm3Convertible.allUpfront": "0.310",
						"yrTerm3Convertible.noUpfront": "0.323",
						"yrTerm3Convertible.partialUpfront": "0.313",
						"yrTerm3Standard.allUpfront": "0.282",
						"yrTerm3Standard.noUpfront": "0.305",
						"yrTerm3Standard.partialUpfront": "0.296"
					}
				},
				"mswinSQL": {
					"ondemand": "1.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.850",
						"yrTerm1Standard.noUpfront": "1.015",
						"yrTerm1Standard.partialUpfront": "0.868",
						"yrTerm3Convertible.allUpfront": "0.832",
						"yrTerm3Convertible.noUpfront": "0.993",
						"yrTerm3Convertible.partialUpfront": "0.849",
						"yrTerm3Standard.allUpfront": "0.765",
						"yrTerm3Standard.noUpfront": "0.814",
						"yrTerm3Standard.partialUpfront": "0.814"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.487",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.337",
						"yrTerm1Standard.noUpfront": "0.402",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.319",
						"yrTerm3Convertible.noUpfront": "0.380",
						"yrTerm3Convertible.partialUpfront": "0.325",
						"yrTerm3Standard.allUpfront": "0.271",
						"yrTerm3Standard.noUpfront": "0.288",
						"yrTerm3Standard.partialUpfront": "0.288"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.222",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.141",
						"yrTerm1Standard.noUpfront": "0.151",
						"yrTerm1Standard.partialUpfront": "0.144",
						"yrTerm3Convertible.allUpfront": "0.113",
						"yrTerm3Convertible.noUpfront": "0.124",
						"yrTerm3Convertible.partialUpfront": "0.115",
						"yrTerm3Standard.allUpfront": "0.094",
						"yrTerm3Standard.noUpfront": "0.108",
						"yrTerm3Standard.partialUpfront": "0.100"
					}
				},
				"mswin": {
					"ondemand": "0.406",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.325",
						"yrTerm1Standard.noUpfront": "0.335",
						"yrTerm1Standard.partialUpfront": "0.328",
						"yrTerm3Convertible.allUpfront": "0.297",
						"yrTerm3Convertible.noUpfront": "0.308",
						"yrTerm3Convertible.partialUpfront": "0.299",
						"yrTerm3Standard.allUpfront": "0.278",
						"yrTerm3Standard.noUpfront": "0.292",
						"yrTerm3Standard.partialUpfront": "0.284"
					}
				},
				"mswinSQL": {
					"ondemand": "1.135",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.835",
						"yrTerm1Standard.noUpfront": "0.996",
						"yrTerm1Standard.partialUpfront": "0.853",
						"yrTerm3Convertible.allUpfront": "0.818",
						"yrTerm3Convertible.noUpfront": "0.976",
						"yrTerm3Convertible.partialUpfront": "0.836",
						"yrTerm3Standard.allUpfront": "0.755",
						"yrTerm3Standard.noUpfront": "0.803",
						"yrTerm3Standard.partialUpfront": "0.803"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.465",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.322",
						"yrTerm1Standard.noUpfront": "0.384",
						"yrTerm1Standard.partialUpfront": "0.328",
						"yrTerm3Convertible.allUpfront": "0.305",
						"yrTerm3Convertible.noUpfront": "0.364",
						"yrTerm3Convertible.partialUpfront": "0.311",
						"yrTerm3Standard.allUpfront": "0.259",
						"yrTerm3Standard.noUpfront": "0.276",
						"yrTerm3Standard.partialUpfront": "0.276"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.232",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.147",
						"yrTerm1Standard.noUpfront": "0.158",
						"yrTerm1Standard.partialUpfront": "0.150",
						"yrTerm3Convertible.allUpfront": "0.120",
						"yrTerm3Convertible.noUpfront": "0.132",
						"yrTerm3Convertible.partialUpfront": "0.122",
						"yrTerm3Standard.allUpfront": "0.100",
						"yrTerm3Standard.noUpfront": "0.115",
						"yrTerm3Standard.partialUpfront": "0.106"
					}
				},
				"mswin": {
					"ondemand": "0.416",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.331",
						"yrTerm1Standard.noUpfront": "0.342",
						"yrTerm1Standard.partialUpfront": "0.334",
						"yrTerm3Convertible.allUpfront": "0.304",
						"yrTerm3Convertible.noUpfront": "0.316",
						"yrTerm3Convertible.partialUpfront": "0.306",
						"yrTerm3Standard.allUpfront": "0.284",
						"yrTerm3Standard.noUpfront": "0.299",
						"yrTerm3Standard.partialUpfront": "0.290"
					}
				},
				"mswinSQL": {
					"ondemand": "1.543",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.458",
						"yrTerm1Standard.noUpfront": "1.469",
						"yrTerm1Standard.partialUpfront": "1.461",
						"yrTerm3Convertible.allUpfront": "1.431",
						"yrTerm3Convertible.noUpfront": "1.443",
						"yrTerm3Convertible.partialUpfront": "1.433",
						"yrTerm3Standard.allUpfront": "1.411",
						"yrTerm3Standard.noUpfront": "1.426",
						"yrTerm3Standard.partialUpfront": "1.417"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.487",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.402",
						"yrTerm1Standard.noUpfront": "0.413",
						"yrTerm1Standard.partialUpfront": "0.405",
						"yrTerm3Convertible.allUpfront": "0.375",
						"yrTerm3Convertible.noUpfront": "0.387",
						"yrTerm3Convertible.partialUpfront": "0.377",
						"yrTerm3Standard.allUpfront": "0.355",
						"yrTerm3Standard.noUpfront": "0.370",
						"yrTerm3Standard.partialUpfront": "0.361"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.318",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.169",
						"yrTerm1Standard.noUpfront": "0.181",
						"yrTerm1Standard.partialUpfront": "0.172",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.120",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				},
				"mswin": {
					"ondemand": "0.502",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.353",
						"yrTerm1Standard.noUpfront": "0.365",
						"yrTerm1Standard.partialUpfront": "0.356",
						"yrTerm3Convertible.allUpfront": "0.328",
						"yrTerm3Convertible.noUpfront": "0.343",
						"yrTerm3Convertible.partialUpfront": "0.331",
						"yrTerm3Standard.allUpfront": "0.304",
						"yrTerm3Standard.noUpfront": "0.322",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswinSQL": {
					"ondemand": "1.235",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.075",
						"yrTerm1Standard.noUpfront": "1.111",
						"yrTerm1Standard.partialUpfront": "1.079",
						"yrTerm3Convertible.allUpfront": "1.057",
						"yrTerm3Convertible.noUpfront": "1.089",
						"yrTerm3Convertible.partialUpfront": "1.060",
						"yrTerm3Standard.allUpfront": "1.023",
						"yrTerm3Standard.noUpfront": "1.031",
						"yrTerm3Standard.partialUpfront": "1.031"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.573",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.424",
						"yrTerm1Standard.noUpfront": "0.436",
						"yrTerm1Standard.partialUpfront": "0.427",
						"yrTerm3Convertible.allUpfront": "0.399",
						"yrTerm3Convertible.noUpfront": "0.414",
						"yrTerm3Convertible.partialUpfront": "0.402",
						"yrTerm3Standard.allUpfront": "0.375",
						"yrTerm3Standard.noUpfront": "0.393",
						"yrTerm3Standard.partialUpfront": "0.383"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.116",
						"yrTerm1Standard.noUpfront": "0.124",
						"yrTerm1Standard.partialUpfront": "0.118",
						"yrTerm3Convertible.allUpfront": "0.090",
						"yrTerm3Convertible.noUpfront": "0.099",
						"yrTerm3Convertible.partialUpfront": "0.092",
						"yrTerm3Standard.allUpfront": "0.075",
						"yrTerm3Standard.noUpfront": "0.086",
						"yrTerm3Standard.partialUpfront": "0.080"
					}
				},
				"mswin": {
					"ondemand": "0.384",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.300",
						"yrTerm1Standard.noUpfront": "0.308",
						"yrTerm1Standard.partialUpfront": "0.302",
						"yrTerm3Convertible.allUpfront": "0.274",
						"yrTerm3Convertible.noUpfront": "0.283",
						"yrTerm3Convertible.partialUpfront": "0.276",
						"yrTerm3Standard.allUpfront": "0.245",
						"yrTerm3Standard.noUpfront": "0.270",
						"yrTerm3Standard.partialUpfront": "0.260"
					}
				},
				"mswinSQL": {
					"ondemand": "1.11",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.805",
						"yrTerm1Standard.noUpfront": "0.961",
						"yrTerm1Standard.partialUpfront": "0.822",
						"yrTerm3Convertible.allUpfront": "0.791",
						"yrTerm3Convertible.noUpfront": "0.945",
						"yrTerm3Convertible.partialUpfront": "0.808",
						"yrTerm3Standard.allUpfront": "0.730",
						"yrTerm3Standard.noUpfront": "0.777",
						"yrTerm3Standard.partialUpfront": "0.777"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.439",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.290",
						"yrTerm1Standard.noUpfront": "0.346",
						"yrTerm1Standard.partialUpfront": "0.296",
						"yrTerm3Convertible.allUpfront": "0.276",
						"yrTerm3Convertible.noUpfront": "0.330",
						"yrTerm3Convertible.partialUpfront": "0.282",
						"yrTerm3Standard.allUpfront": "0.233",
						"yrTerm3Standard.noUpfront": "0.248",
						"yrTerm3Standard.partialUpfront": "0.248"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.116",
						"yrTerm1Standard.noUpfront": "0.124",
						"yrTerm1Standard.partialUpfront": "0.118",
						"yrTerm3Convertible.allUpfront": "0.090",
						"yrTerm3Convertible.noUpfront": "0.099",
						"yrTerm3Convertible.partialUpfront": "0.092",
						"yrTerm3Standard.allUpfront": "0.075",
						"yrTerm3Standard.noUpfront": "0.086",
						"yrTerm3Standard.partialUpfront": "0.080"
					}
				},
				"mswin": {
					"ondemand": "0.384",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.300",
						"yrTerm1Standard.noUpfront": "0.308",
						"yrTerm1Standard.partialUpfront": "0.302",
						"yrTerm3Convertible.allUpfront": "0.274",
						"yrTerm3Convertible.noUpfront": "0.283",
						"yrTerm3Convertible.partialUpfront": "0.276",
						"yrTerm3Standard.allUpfront": "0.245",
						"yrTerm3Standard.noUpfront": "0.270",
						"yrTerm3Standard.partialUpfront": "0.260"
					}
				},
				"mswinSQL": {
					"ondemand": "1.11",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.805",
						"yrTerm1Standard.noUpfront": "0.961",
						"yrTerm1Standard.partialUpfront": "0.822",
						"yrTerm3Convertible.allUpfront": "0.791",
						"yrTerm3Convertible.noUpfront": "0.945",
						"yrTerm3Convertible.partialUpfront": "0.808",
						"yrTerm3Standard.allUpfront": "0.730",
						"yrTerm3Standard.noUpfront": "0.777",
						"yrTerm3Standard.partialUpfront": "0.777"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.439",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.290",
						"yrTerm1Standard.noUpfront": "0.346",
						"yrTerm1Standard.partialUpfront": "0.296",
						"yrTerm3Convertible.allUpfront": "0.276",
						"yrTerm3Convertible.noUpfront": "0.330",
						"yrTerm3Convertible.partialUpfront": "0.282",
						"yrTerm3Standard.allUpfront": "0.233",
						"yrTerm3Standard.noUpfront": "0.248",
						"yrTerm3Standard.partialUpfront": "0.248"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.157",
						"yrTerm1Standard.noUpfront": "0.168",
						"yrTerm1Standard.partialUpfront": "0.160",
						"yrTerm3Convertible.allUpfront": "0.117",
						"yrTerm3Convertible.noUpfront": "0.129",
						"yrTerm3Convertible.partialUpfront": "0.120",
						"yrTerm3Standard.allUpfront": "0.098",
						"yrTerm3Standard.noUpfront": "0.112",
						"yrTerm3Standard.partialUpfront": "0.104"
					}
				},
				"mswin": {
					"ondemand": "0.436",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.341",
						"yrTerm1Standard.noUpfront": "0.352",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.301",
						"yrTerm3Convertible.noUpfront": "0.313",
						"yrTerm3Convertible.partialUpfront": "0.304",
						"yrTerm3Standard.allUpfront": "0.282",
						"yrTerm3Standard.noUpfront": "0.296",
						"yrTerm3Standard.partialUpfront": "0.288"
					}
				},
				"mswinSQL": {
					"ondemand": "1.195",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.077",
						"yrTerm1Standard.noUpfront": "1.113",
						"yrTerm1Standard.partialUpfront": "1.081",
						"yrTerm3Convertible.allUpfront": "1.060",
						"yrTerm3Convertible.noUpfront": "1.093",
						"yrTerm3Convertible.partialUpfront": "1.064",
						"yrTerm3Standard.allUpfront": "1.009",
						"yrTerm3Standard.noUpfront": "1.016",
						"yrTerm3Standard.partialUpfront": "1.016"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.507",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.412",
						"yrTerm1Standard.noUpfront": "0.423",
						"yrTerm1Standard.partialUpfront": "0.415",
						"yrTerm3Convertible.allUpfront": "0.372",
						"yrTerm3Convertible.noUpfront": "0.384",
						"yrTerm3Convertible.partialUpfront": "0.375",
						"yrTerm3Standard.allUpfront": "0.353",
						"yrTerm3Standard.noUpfront": "0.367",
						"yrTerm3Standard.partialUpfront": "0.359"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.234",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.159",
						"yrTerm1Standard.noUpfront": "0.170",
						"yrTerm1Standard.partialUpfront": "0.162",
						"yrTerm3Convertible.allUpfront": "0.122",
						"yrTerm3Convertible.noUpfront": "0.134",
						"yrTerm3Convertible.partialUpfront": "0.124",
						"yrTerm3Standard.allUpfront": "0.102",
						"yrTerm3Standard.noUpfront": "0.117",
						"yrTerm3Standard.partialUpfront": "0.108"
					}
				},
				"mswin": {
					"ondemand": "0.418",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.343",
						"yrTerm1Standard.noUpfront": "0.354",
						"yrTerm1Standard.partialUpfront": "0.346",
						"yrTerm3Convertible.allUpfront": "0.306",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.308",
						"yrTerm3Standard.allUpfront": "0.286",
						"yrTerm3Standard.noUpfront": "0.301",
						"yrTerm3Standard.partialUpfront": "0.292"
					}
				},
				"mswinSQL": {
					"ondemand": "1.15",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.857",
						"yrTerm1Standard.noUpfront": "1.023",
						"yrTerm1Standard.partialUpfront": "0.875",
						"yrTerm3Convertible.allUpfront": "0.838",
						"yrTerm3Convertible.noUpfront": "1.000",
						"yrTerm3Convertible.partialUpfront": "0.856",
						"yrTerm3Standard.allUpfront": "0.762",
						"yrTerm3Standard.noUpfront": "0.811",
						"yrTerm3Standard.partialUpfront": "0.811"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.481",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.345",
						"yrTerm1Standard.noUpfront": "0.412",
						"yrTerm1Standard.partialUpfront": "0.352",
						"yrTerm3Convertible.allUpfront": "0.326",
						"yrTerm3Convertible.noUpfront": "0.389",
						"yrTerm3Convertible.partialUpfront": "0.333",
						"yrTerm3Standard.allUpfront": "0.267",
						"yrTerm3Standard.noUpfront": "0.284",
						"yrTerm3Standard.partialUpfront": "0.284"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.116",
						"yrTerm1Standard.noUpfront": "0.124",
						"yrTerm1Standard.partialUpfront": "0.118",
						"yrTerm3Convertible.allUpfront": "0.090",
						"yrTerm3Convertible.noUpfront": "0.099",
						"yrTerm3Convertible.partialUpfront": "0.092",
						"yrTerm3Standard.allUpfront": "0.075",
						"yrTerm3Standard.noUpfront": "0.086",
						"yrTerm3Standard.partialUpfront": "0.080"
					}
				},
				"mswin": {
					"ondemand": "0.384",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.300",
						"yrTerm1Standard.noUpfront": "0.308",
						"yrTerm1Standard.partialUpfront": "0.302",
						"yrTerm3Convertible.allUpfront": "0.274",
						"yrTerm3Convertible.noUpfront": "0.283",
						"yrTerm3Convertible.partialUpfront": "0.276",
						"yrTerm3Standard.allUpfront": "0.245",
						"yrTerm3Standard.noUpfront": "0.270",
						"yrTerm3Standard.partialUpfront": "0.260"
					}
				},
				"mswinSQL": {
					"ondemand": "1.11",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.805",
						"yrTerm1Standard.noUpfront": "0.961",
						"yrTerm1Standard.partialUpfront": "0.822",
						"yrTerm3Convertible.allUpfront": "0.791",
						"yrTerm3Convertible.noUpfront": "0.945",
						"yrTerm3Convertible.partialUpfront": "0.808",
						"yrTerm3Standard.allUpfront": "0.730",
						"yrTerm3Standard.noUpfront": "0.777",
						"yrTerm3Standard.partialUpfront": "0.777"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.439",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.290",
						"yrTerm1Standard.noUpfront": "0.346",
						"yrTerm1Standard.partialUpfront": "0.296",
						"yrTerm3Convertible.allUpfront": "0.276",
						"yrTerm3Convertible.noUpfront": "0.330",
						"yrTerm3Convertible.partialUpfront": "0.282",
						"yrTerm3Standard.allUpfront": "0.233",
						"yrTerm3Standard.noUpfront": "0.248",
						"yrTerm3Standard.partialUpfront": "0.248"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": true
	},
	{
		"ECU": 26,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": true,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "m4.2xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 32,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "M4 Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.516",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.325",
						"yrTerm1Standard.noUpfront": "0.349",
						"yrTerm1Standard.partialUpfront": "0.332",
						"yrTerm3Convertible.allUpfront": "0.266",
						"yrTerm3Convertible.noUpfront": "0.293",
						"yrTerm3Convertible.partialUpfront": "0.271",
						"yrTerm3Standard.allUpfront": "0.222",
						"yrTerm3Standard.noUpfront": "0.255",
						"yrTerm3Standard.partialUpfront": "0.236"
					}
				},
				"mswin": {
					"ondemand": "0.884",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.693",
						"yrTerm1Standard.noUpfront": "0.717",
						"yrTerm1Standard.partialUpfront": "0.700",
						"yrTerm3Convertible.allUpfront": "0.634",
						"yrTerm3Convertible.noUpfront": "0.661",
						"yrTerm3Convertible.partialUpfront": "0.639",
						"yrTerm3Standard.allUpfront": "0.568",
						"yrTerm3Standard.noUpfront": "0.623",
						"yrTerm3Standard.partialUpfront": "0.604"
					}
				},
				"mswinSQL": {
					"ondemand": "2.537",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.700",
						"yrTerm1Standard.noUpfront": "2.029",
						"yrTerm1Standard.partialUpfront": "1.734",
						"yrTerm3Convertible.allUpfront": "1.663",
						"yrTerm3Convertible.noUpfront": "1.985",
						"yrTerm3Convertible.partialUpfront": "1.697",
						"yrTerm3Standard.allUpfront": "1.534",
						"yrTerm3Standard.noUpfront": "1.632",
						"yrTerm3Standard.partialUpfront": "1.632"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.065",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.671",
						"yrTerm1Standard.noUpfront": "0.801",
						"yrTerm1Standard.partialUpfront": "0.686",
						"yrTerm3Convertible.allUpfront": "0.635",
						"yrTerm3Convertible.noUpfront": "0.757",
						"yrTerm3Convertible.partialUpfront": "0.648",
						"yrTerm3Standard.allUpfront": "0.542",
						"yrTerm3Standard.noUpfront": "0.577",
						"yrTerm3Standard.partialUpfront": "0.577"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.492",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.274",
						"yrTerm1Standard.noUpfront": "0.294",
						"yrTerm1Standard.partialUpfront": "0.280",
						"yrTerm3Convertible.allUpfront": "0.225",
						"yrTerm3Convertible.noUpfront": "0.248",
						"yrTerm3Convertible.partialUpfront": "0.230",
						"yrTerm3Standard.allUpfront": "0.188",
						"yrTerm3Standard.noUpfront": "0.216",
						"yrTerm3Standard.partialUpfront": "0.200"
					}
				},
				"mswin": {
					"ondemand": "0.86",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.642",
						"yrTerm1Standard.noUpfront": "0.662",
						"yrTerm1Standard.partialUpfront": "0.648",
						"yrTerm3Convertible.allUpfront": "0.593",
						"yrTerm3Convertible.noUpfront": "0.616",
						"yrTerm3Convertible.partialUpfront": "0.598",
						"yrTerm3Standard.allUpfront": "0.556",
						"yrTerm3Standard.noUpfront": "0.584",
						"yrTerm3Standard.partialUpfront": "0.568"
					}
				},
				"mswinSQL": {
					"ondemand": "2.444",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.130",
						"yrTerm1Standard.noUpfront": "2.198",
						"yrTerm1Standard.partialUpfront": "2.137",
						"yrTerm3Convertible.allUpfront": "2.096",
						"yrTerm3Convertible.noUpfront": "2.156",
						"yrTerm3Convertible.partialUpfront": "2.102",
						"yrTerm3Standard.allUpfront": "2.025",
						"yrTerm3Standard.noUpfront": "2.041",
						"yrTerm3Standard.partialUpfront": "2.041"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.001",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.783",
						"yrTerm1Standard.noUpfront": "0.803",
						"yrTerm1Standard.partialUpfront": "0.789",
						"yrTerm3Convertible.allUpfront": "0.734",
						"yrTerm3Convertible.noUpfront": "0.757",
						"yrTerm3Convertible.partialUpfront": "0.739",
						"yrTerm3Standard.allUpfront": "0.697",
						"yrTerm3Standard.noUpfront": "0.725",
						"yrTerm3Standard.partialUpfront": "0.709"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.492",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.286",
						"yrTerm1Standard.noUpfront": "0.307",
						"yrTerm1Standard.partialUpfront": "0.292",
						"yrTerm3Convertible.allUpfront": "0.216",
						"yrTerm3Convertible.noUpfront": "0.239",
						"yrTerm3Convertible.partialUpfront": "0.221",
						"yrTerm3Standard.allUpfront": "0.181",
						"yrTerm3Standard.noUpfront": "0.207",
						"yrTerm3Standard.partialUpfront": "0.192"
					}
				},
				"mswin": {
					"ondemand": "0.86",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.654",
						"yrTerm1Standard.noUpfront": "0.675",
						"yrTerm1Standard.partialUpfront": "0.660",
						"yrTerm3Convertible.allUpfront": "0.584",
						"yrTerm3Convertible.noUpfront": "0.607",
						"yrTerm3Convertible.partialUpfront": "0.589",
						"yrTerm3Standard.allUpfront": "0.549",
						"yrTerm3Standard.noUpfront": "0.575",
						"yrTerm3Standard.partialUpfront": "0.560"
					}
				},
				"mswinSQL": {
					"ondemand": "2.459",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.180",
						"yrTerm1Standard.noUpfront": "2.257",
						"yrTerm1Standard.partialUpfront": "2.188",
						"yrTerm3Convertible.allUpfront": "2.140",
						"yrTerm3Convertible.noUpfront": "2.210",
						"yrTerm3Convertible.partialUpfront": "2.148",
						"yrTerm3Standard.allUpfront": "2.035",
						"yrTerm3Standard.noUpfront": "2.051",
						"yrTerm3Standard.partialUpfront": "2.051"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.001",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.795",
						"yrTerm1Standard.noUpfront": "0.816",
						"yrTerm1Standard.partialUpfront": "0.801",
						"yrTerm3Convertible.allUpfront": "0.725",
						"yrTerm3Convertible.noUpfront": "0.748",
						"yrTerm3Convertible.partialUpfront": "0.730",
						"yrTerm3Standard.allUpfront": "0.690",
						"yrTerm3Standard.noUpfront": "0.716",
						"yrTerm3Standard.partialUpfront": "0.701"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.290",
						"yrTerm1Standard.noUpfront": "0.311",
						"yrTerm1Standard.partialUpfront": "0.296",
						"yrTerm3Convertible.allUpfront": "0.221",
						"yrTerm3Convertible.noUpfront": "0.243",
						"yrTerm3Convertible.partialUpfront": "0.225",
						"yrTerm3Standard.allUpfront": "0.184",
						"yrTerm3Standard.noUpfront": "0.212",
						"yrTerm3Standard.partialUpfront": "0.196"
					}
				},
				"mswin": {
					"ondemand": "0.868",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.658",
						"yrTerm1Standard.noUpfront": "0.679",
						"yrTerm1Standard.partialUpfront": "0.664",
						"yrTerm3Convertible.allUpfront": "0.589",
						"yrTerm3Convertible.noUpfront": "0.611",
						"yrTerm3Convertible.partialUpfront": "0.593",
						"yrTerm3Standard.allUpfront": "0.552",
						"yrTerm3Standard.noUpfront": "0.580",
						"yrTerm3Standard.partialUpfront": "0.564"
					}
				},
				"mswinSQL": {
					"ondemand": "2.553",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.752",
						"yrTerm1Standard.noUpfront": "2.092",
						"yrTerm1Standard.partialUpfront": "1.788",
						"yrTerm3Convertible.allUpfront": "1.710",
						"yrTerm3Convertible.noUpfront": "2.042",
						"yrTerm3Convertible.partialUpfront": "1.745",
						"yrTerm3Standard.allUpfront": "1.545",
						"yrTerm3Standard.noUpfront": "1.644",
						"yrTerm3Standard.partialUpfront": "1.644"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.009",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.726",
						"yrTerm1Standard.noUpfront": "0.820",
						"yrTerm1Standard.partialUpfront": "0.741",
						"yrTerm3Convertible.allUpfront": "0.684",
						"yrTerm3Convertible.noUpfront": "0.752",
						"yrTerm3Convertible.partialUpfront": "0.698",
						"yrTerm3Standard.allUpfront": "0.554",
						"yrTerm3Standard.noUpfront": "0.590",
						"yrTerm3Standard.partialUpfront": "0.590"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.314",
						"yrTerm1Standard.noUpfront": "0.336",
						"yrTerm1Standard.partialUpfront": "0.320",
						"yrTerm3Convertible.allUpfront": "0.252",
						"yrTerm3Convertible.noUpfront": "0.278",
						"yrTerm3Convertible.partialUpfront": "0.258",
						"yrTerm3Standard.allUpfront": "0.211",
						"yrTerm3Standard.noUpfront": "0.242",
						"yrTerm3Standard.partialUpfront": "0.224"
					}
				},
				"mswin": {
					"ondemand": "0.868",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.682",
						"yrTerm1Standard.noUpfront": "0.704",
						"yrTerm1Standard.partialUpfront": "0.688",
						"yrTerm3Convertible.allUpfront": "0.620",
						"yrTerm3Convertible.noUpfront": "0.646",
						"yrTerm3Convertible.partialUpfront": "0.626",
						"yrTerm3Standard.allUpfront": "0.560",
						"yrTerm3Standard.noUpfront": "0.610",
						"yrTerm3Standard.partialUpfront": "0.592"
					}
				},
				"mswinSQL": {
					"ondemand": "2.515",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.733",
						"yrTerm1Standard.noUpfront": "2.069",
						"yrTerm1Standard.partialUpfront": "1.768",
						"yrTerm3Convertible.allUpfront": "1.693",
						"yrTerm3Convertible.noUpfront": "2.021",
						"yrTerm3Convertible.partialUpfront": "1.728",
						"yrTerm3Standard.allUpfront": "1.545",
						"yrTerm3Standard.noUpfront": "1.644",
						"yrTerm3Standard.partialUpfront": "1.644"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.009",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.707",
						"yrTerm1Standard.noUpfront": "0.844",
						"yrTerm1Standard.partialUpfront": "0.721",
						"yrTerm3Convertible.allUpfront": "0.667",
						"yrTerm3Convertible.noUpfront": "0.787",
						"yrTerm3Convertible.partialUpfront": "0.680",
						"yrTerm3Standard.allUpfront": "0.554",
						"yrTerm3Standard.noUpfront": "0.590",
						"yrTerm3Standard.partialUpfront": "0.590"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.444",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.255",
						"yrTerm1Standard.noUpfront": "0.273",
						"yrTerm1Standard.partialUpfront": "0.260",
						"yrTerm3Convertible.allUpfront": "0.198",
						"yrTerm3Convertible.noUpfront": "0.219",
						"yrTerm3Convertible.partialUpfront": "0.202",
						"yrTerm3Standard.allUpfront": "0.165",
						"yrTerm3Standard.noUpfront": "0.190",
						"yrTerm3Standard.partialUpfront": "0.176"
					}
				},
				"mswin": {
					"ondemand": "0.812",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.623",
						"yrTerm1Standard.noUpfront": "0.641",
						"yrTerm1Standard.partialUpfront": "0.628",
						"yrTerm3Convertible.allUpfront": "0.566",
						"yrTerm3Convertible.noUpfront": "0.587",
						"yrTerm3Convertible.partialUpfront": "0.570",
						"yrTerm3Standard.allUpfront": "0.533",
						"yrTerm3Standard.noUpfront": "0.558",
						"yrTerm3Standard.partialUpfront": "0.544"
					}
				},
				"mswinSQL": {
					"ondemand": "3.065",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.876",
						"yrTerm1Standard.noUpfront": "2.894",
						"yrTerm1Standard.partialUpfront": "2.881",
						"yrTerm3Convertible.allUpfront": "2.819",
						"yrTerm3Convertible.noUpfront": "2.840",
						"yrTerm3Convertible.partialUpfront": "2.823",
						"yrTerm3Standard.allUpfront": "2.786",
						"yrTerm3Standard.noUpfront": "2.811",
						"yrTerm3Standard.partialUpfront": "2.797"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.953",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.764",
						"yrTerm1Standard.noUpfront": "0.782",
						"yrTerm1Standard.partialUpfront": "0.769",
						"yrTerm3Convertible.allUpfront": "0.707",
						"yrTerm3Convertible.noUpfront": "0.728",
						"yrTerm3Convertible.partialUpfront": "0.711",
						"yrTerm3Standard.allUpfront": "0.674",
						"yrTerm3Standard.noUpfront": "0.699",
						"yrTerm3Standard.partialUpfront": "0.685"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.48",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.306",
						"yrTerm1Standard.noUpfront": "0.328",
						"yrTerm1Standard.partialUpfront": "0.312",
						"yrTerm3Convertible.allUpfront": "0.252",
						"yrTerm3Convertible.noUpfront": "0.278",
						"yrTerm3Convertible.partialUpfront": "0.258",
						"yrTerm3Standard.allUpfront": "0.211",
						"yrTerm3Standard.noUpfront": "0.242",
						"yrTerm3Standard.partialUpfront": "0.224"
					}
				},
				"mswin": {
					"ondemand": "0.848",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.674",
						"yrTerm1Standard.noUpfront": "0.696",
						"yrTerm1Standard.partialUpfront": "0.680",
						"yrTerm3Convertible.allUpfront": "0.620",
						"yrTerm3Convertible.noUpfront": "0.646",
						"yrTerm3Convertible.partialUpfront": "0.626",
						"yrTerm3Standard.allUpfront": "0.565",
						"yrTerm3Standard.noUpfront": "0.610",
						"yrTerm3Standard.partialUpfront": "0.592"
					}
				},
				"mswinSQL": {
					"ondemand": "2.412",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.700",
						"yrTerm1Standard.noUpfront": "2.029",
						"yrTerm1Standard.partialUpfront": "1.734",
						"yrTerm3Convertible.allUpfront": "1.663",
						"yrTerm3Convertible.noUpfront": "1.985",
						"yrTerm3Convertible.partialUpfront": "1.697",
						"yrTerm3Standard.allUpfront": "1.530",
						"yrTerm3Standard.noUpfront": "1.628",
						"yrTerm3Standard.partialUpfront": "1.628"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.996",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.671",
						"yrTerm1Standard.noUpfront": "0.801",
						"yrTerm1Standard.partialUpfront": "0.686",
						"yrTerm3Convertible.allUpfront": "0.635",
						"yrTerm3Convertible.noUpfront": "0.757",
						"yrTerm3Convertible.partialUpfront": "0.648",
						"yrTerm3Standard.allUpfront": "0.539",
						"yrTerm3Standard.noUpfront": "0.574",
						"yrTerm3Standard.partialUpfront": "0.574"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.444",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.282",
						"yrTerm1Standard.noUpfront": "0.302",
						"yrTerm1Standard.partialUpfront": "0.288",
						"yrTerm3Convertible.allUpfront": "0.225",
						"yrTerm3Convertible.noUpfront": "0.248",
						"yrTerm3Convertible.partialUpfront": "0.230",
						"yrTerm3Standard.allUpfront": "0.188",
						"yrTerm3Standard.noUpfront": "0.216",
						"yrTerm3Standard.partialUpfront": "0.200"
					}
				},
				"mswin": {
					"ondemand": "0.812",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.650",
						"yrTerm1Standard.noUpfront": "0.670",
						"yrTerm1Standard.partialUpfront": "0.656",
						"yrTerm3Convertible.allUpfront": "0.593",
						"yrTerm3Convertible.noUpfront": "0.616",
						"yrTerm3Convertible.partialUpfront": "0.598",
						"yrTerm3Standard.allUpfront": "0.556",
						"yrTerm3Standard.noUpfront": "0.584",
						"yrTerm3Standard.partialUpfront": "0.568"
					}
				},
				"mswinSQL": {
					"ondemand": "2.37",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.670",
						"yrTerm1Standard.noUpfront": "1.994",
						"yrTerm1Standard.partialUpfront": "1.704",
						"yrTerm3Convertible.allUpfront": "1.636",
						"yrTerm3Convertible.noUpfront": "1.954",
						"yrTerm3Convertible.partialUpfront": "1.670",
						"yrTerm3Standard.allUpfront": "1.509",
						"yrTerm3Standard.noUpfront": "1.606",
						"yrTerm3Standard.partialUpfront": "1.606"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.952",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.640",
						"yrTerm1Standard.noUpfront": "0.764",
						"yrTerm1Standard.partialUpfront": "0.654",
						"yrTerm3Convertible.allUpfront": "0.606",
						"yrTerm3Convertible.noUpfront": "0.724",
						"yrTerm3Convertible.partialUpfront": "0.619",
						"yrTerm3Standard.allUpfront": "0.516",
						"yrTerm3Standard.noUpfront": "0.549",
						"yrTerm3Standard.partialUpfront": "0.549"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.464",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.294",
						"yrTerm1Standard.noUpfront": "0.315",
						"yrTerm1Standard.partialUpfront": "0.300",
						"yrTerm3Convertible.allUpfront": "0.239",
						"yrTerm3Convertible.noUpfront": "0.263",
						"yrTerm3Convertible.partialUpfront": "0.244",
						"yrTerm3Standard.allUpfront": "0.199",
						"yrTerm3Standard.noUpfront": "0.229",
						"yrTerm3Standard.partialUpfront": "0.212"
					}
				},
				"mswin": {
					"ondemand": "0.832",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.662",
						"yrTerm1Standard.noUpfront": "0.683",
						"yrTerm1Standard.partialUpfront": "0.668",
						"yrTerm3Convertible.allUpfront": "0.607",
						"yrTerm3Convertible.noUpfront": "0.631",
						"yrTerm3Convertible.partialUpfront": "0.612",
						"yrTerm3Standard.allUpfront": "0.567",
						"yrTerm3Standard.noUpfront": "0.597",
						"yrTerm3Standard.partialUpfront": "0.580"
					}
				},
				"mswinSQL": {
					"ondemand": "3.085",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.915",
						"yrTerm1Standard.noUpfront": "2.936",
						"yrTerm1Standard.partialUpfront": "2.921",
						"yrTerm3Convertible.allUpfront": "2.860",
						"yrTerm3Convertible.noUpfront": "2.884",
						"yrTerm3Convertible.partialUpfront": "2.865",
						"yrTerm3Standard.allUpfront": "2.820",
						"yrTerm3Standard.noUpfront": "2.850",
						"yrTerm3Standard.partialUpfront": "2.833"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.973",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.803",
						"yrTerm1Standard.noUpfront": "0.824",
						"yrTerm1Standard.partialUpfront": "0.809",
						"yrTerm3Convertible.allUpfront": "0.748",
						"yrTerm3Convertible.noUpfront": "0.772",
						"yrTerm3Convertible.partialUpfront": "0.753",
						"yrTerm3Standard.allUpfront": "0.708",
						"yrTerm3Standard.noUpfront": "0.738",
						"yrTerm3Standard.partialUpfront": "0.721"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.636",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.337",
						"yrTerm1Standard.noUpfront": "0.361",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.241",
						"yrTerm3Standard.noUpfront": "0.277",
						"yrTerm3Standard.partialUpfront": "0.256"
					}
				},
				"mswin": {
					"ondemand": "1.004",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.705",
						"yrTerm1Standard.noUpfront": "0.729",
						"yrTerm1Standard.partialUpfront": "0.712",
						"yrTerm3Convertible.allUpfront": "0.657",
						"yrTerm3Convertible.noUpfront": "0.686",
						"yrTerm3Convertible.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.609",
						"yrTerm3Standard.noUpfront": "0.645",
						"yrTerm3Standard.partialUpfront": "0.624"
					}
				},
				"mswinSQL": {
					"ondemand": "2.469",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.150",
						"yrTerm1Standard.noUpfront": "2.220",
						"yrTerm1Standard.partialUpfront": "2.157",
						"yrTerm3Convertible.allUpfront": "2.113",
						"yrTerm3Convertible.noUpfront": "2.176",
						"yrTerm3Convertible.partialUpfront": "2.120",
						"yrTerm3Standard.allUpfront": "2.044",
						"yrTerm3Standard.noUpfront": "2.061",
						"yrTerm3Standard.partialUpfront": "2.061"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.145",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.846",
						"yrTerm1Standard.noUpfront": "0.870",
						"yrTerm1Standard.partialUpfront": "0.853",
						"yrTerm3Convertible.allUpfront": "0.798",
						"yrTerm3Convertible.noUpfront": "0.827",
						"yrTerm3Convertible.partialUpfront": "0.803",
						"yrTerm3Standard.allUpfront": "0.750",
						"yrTerm3Standard.noUpfront": "0.786",
						"yrTerm3Standard.partialUpfront": "0.765"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.231",
						"yrTerm1Standard.noUpfront": "0.248",
						"yrTerm1Standard.partialUpfront": "0.236",
						"yrTerm3Convertible.allUpfront": "0.180",
						"yrTerm3Convertible.noUpfront": "0.199",
						"yrTerm3Convertible.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.noUpfront": "0.173",
						"yrTerm3Standard.partialUpfront": "0.160"
					}
				},
				"mswin": {
					"ondemand": "0.768",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.599",
						"yrTerm1Standard.noUpfront": "0.616",
						"yrTerm1Standard.partialUpfront": "0.604",
						"yrTerm3Convertible.allUpfront": "0.548",
						"yrTerm3Convertible.noUpfront": "0.567",
						"yrTerm3Convertible.partialUpfront": "0.552",
						"yrTerm3Standard.allUpfront": "0.490",
						"yrTerm3Standard.noUpfront": "0.541",
						"yrTerm3Standard.partialUpfront": "0.520"
					}
				},
				"mswinSQL": {
					"ondemand": "2.321",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.610",
						"yrTerm1Standard.noUpfront": "1.923",
						"yrTerm1Standard.partialUpfront": "1.644",
						"yrTerm3Convertible.allUpfront": "1.583",
						"yrTerm3Convertible.noUpfront": "1.890",
						"yrTerm3Convertible.partialUpfront": "1.615",
						"yrTerm3Standard.allUpfront": "1.459",
						"yrTerm3Standard.noUpfront": "1.552",
						"yrTerm3Standard.partialUpfront": "1.552"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.577",
						"yrTerm1Standard.noUpfront": "0.689",
						"yrTerm1Standard.partialUpfront": "0.589",
						"yrTerm3Convertible.allUpfront": "0.550",
						"yrTerm3Convertible.noUpfront": "0.656",
						"yrTerm3Convertible.partialUpfront": "0.560",
						"yrTerm3Standard.allUpfront": "0.463",
						"yrTerm3Standard.noUpfront": "0.494",
						"yrTerm3Standard.partialUpfront": "0.494"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.231",
						"yrTerm1Standard.noUpfront": "0.248",
						"yrTerm1Standard.partialUpfront": "0.236",
						"yrTerm3Convertible.allUpfront": "0.180",
						"yrTerm3Convertible.noUpfront": "0.199",
						"yrTerm3Convertible.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.noUpfront": "0.173",
						"yrTerm3Standard.partialUpfront": "0.160"
					}
				},
				"mswin": {
					"ondemand": "0.768",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.599",
						"yrTerm1Standard.noUpfront": "0.616",
						"yrTerm1Standard.partialUpfront": "0.604",
						"yrTerm3Convertible.allUpfront": "0.548",
						"yrTerm3Convertible.noUpfront": "0.567",
						"yrTerm3Convertible.partialUpfront": "0.552",
						"yrTerm3Standard.allUpfront": "0.490",
						"yrTerm3Standard.noUpfront": "0.541",
						"yrTerm3Standard.partialUpfront": "0.520"
					}
				},
				"mswinSQL": {
					"ondemand": "2.321",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.610",
						"yrTerm1Standard.noUpfront": "1.923",
						"yrTerm1Standard.partialUpfront": "1.644",
						"yrTerm3Convertible.allUpfront": "1.583",
						"yrTerm3Convertible.noUpfront": "1.890",
						"yrTerm3Convertible.partialUpfront": "1.615",
						"yrTerm3Standard.allUpfront": "1.459",
						"yrTerm3Standard.noUpfront": "1.552",
						"yrTerm3Standard.partialUpfront": "1.552"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.577",
						"yrTerm1Standard.noUpfront": "0.689",
						"yrTerm1Standard.partialUpfront": "0.589",
						"yrTerm3Convertible.allUpfront": "0.550",
						"yrTerm3Convertible.noUpfront": "0.656",
						"yrTerm3Convertible.partialUpfront": "0.560",
						"yrTerm3Standard.allUpfront": "0.463",
						"yrTerm3Standard.noUpfront": "0.494",
						"yrTerm3Standard.partialUpfront": "0.494"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.314",
						"yrTerm1Standard.noUpfront": "0.336",
						"yrTerm1Standard.partialUpfront": "0.320",
						"yrTerm3Convertible.allUpfront": "0.234",
						"yrTerm3Convertible.noUpfront": "0.258",
						"yrTerm3Convertible.partialUpfront": "0.239",
						"yrTerm3Standard.allUpfront": "0.196",
						"yrTerm3Standard.noUpfront": "0.225",
						"yrTerm3Standard.partialUpfront": "0.208"
					}
				},
				"mswin": {
					"ondemand": "0.872",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.682",
						"yrTerm1Standard.noUpfront": "0.704",
						"yrTerm1Standard.partialUpfront": "0.688",
						"yrTerm3Convertible.allUpfront": "0.602",
						"yrTerm3Convertible.noUpfront": "0.626",
						"yrTerm3Convertible.partialUpfront": "0.607",
						"yrTerm3Standard.allUpfront": "0.564",
						"yrTerm3Standard.noUpfront": "0.593",
						"yrTerm3Standard.partialUpfront": "0.576"
					}
				},
				"mswinSQL": {
					"ondemand": "2.389",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.154",
						"yrTerm1Standard.noUpfront": "2.226",
						"yrTerm1Standard.partialUpfront": "2.162",
						"yrTerm3Convertible.allUpfront": "2.121",
						"yrTerm3Convertible.noUpfront": "2.186",
						"yrTerm3Convertible.partialUpfront": "2.128",
						"yrTerm3Standard.allUpfront": "2.016",
						"yrTerm3Standard.noUpfront": "2.031",
						"yrTerm3Standard.partialUpfront": "2.031"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.013",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.823",
						"yrTerm1Standard.noUpfront": "0.845",
						"yrTerm1Standard.partialUpfront": "0.829",
						"yrTerm3Convertible.allUpfront": "0.743",
						"yrTerm3Convertible.noUpfront": "0.767",
						"yrTerm3Convertible.partialUpfront": "0.748",
						"yrTerm3Standard.allUpfront": "0.705",
						"yrTerm3Standard.noUpfront": "0.734",
						"yrTerm3Standard.partialUpfront": "0.717"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.468",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.318",
						"yrTerm1Standard.noUpfront": "0.340",
						"yrTerm1Standard.partialUpfront": "0.324",
						"yrTerm3Convertible.allUpfront": "0.243",
						"yrTerm3Convertible.noUpfront": "0.268",
						"yrTerm3Convertible.partialUpfront": "0.248",
						"yrTerm3Standard.allUpfront": "0.203",
						"yrTerm3Standard.noUpfront": "0.233",
						"yrTerm3Standard.partialUpfront": "0.216"
					}
				},
				"mswin": {
					"ondemand": "0.836",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.686",
						"yrTerm1Standard.noUpfront": "0.708",
						"yrTerm1Standard.partialUpfront": "0.692",
						"yrTerm3Convertible.allUpfront": "0.611",
						"yrTerm3Convertible.noUpfront": "0.636",
						"yrTerm3Convertible.partialUpfront": "0.616",
						"yrTerm3Standard.allUpfront": "0.570",
						"yrTerm3Standard.noUpfront": "0.601",
						"yrTerm3Standard.partialUpfront": "0.584"
					}
				},
				"mswinSQL": {
					"ondemand": "2.401",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.715",
						"yrTerm1Standard.noUpfront": "2.047",
						"yrTerm1Standard.partialUpfront": "1.750",
						"yrTerm3Convertible.allUpfront": "1.677",
						"yrTerm3Convertible.noUpfront": "2.002",
						"yrTerm3Convertible.partialUpfront": "1.711",
						"yrTerm3Standard.allUpfront": "1.523",
						"yrTerm3Standard.noUpfront": "1.620",
						"yrTerm3Standard.partialUpfront": "1.620"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.984",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.687",
						"yrTerm1Standard.noUpfront": "0.820",
						"yrTerm1Standard.partialUpfront": "0.702",
						"yrTerm3Convertible.allUpfront": "0.649",
						"yrTerm3Convertible.noUpfront": "0.775",
						"yrTerm3Convertible.partialUpfront": "0.663",
						"yrTerm3Standard.allUpfront": "0.531",
						"yrTerm3Standard.noUpfront": "0.566",
						"yrTerm3Standard.partialUpfront": "0.566"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.231",
						"yrTerm1Standard.noUpfront": "0.248",
						"yrTerm1Standard.partialUpfront": "0.236",
						"yrTerm3Convertible.allUpfront": "0.180",
						"yrTerm3Convertible.noUpfront": "0.199",
						"yrTerm3Convertible.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.noUpfront": "0.173",
						"yrTerm3Standard.partialUpfront": "0.160"
					}
				},
				"mswin": {
					"ondemand": "0.768",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.599",
						"yrTerm1Standard.noUpfront": "0.616",
						"yrTerm1Standard.partialUpfront": "0.604",
						"yrTerm3Convertible.allUpfront": "0.548",
						"yrTerm3Convertible.noUpfront": "0.567",
						"yrTerm3Convertible.partialUpfront": "0.552",
						"yrTerm3Standard.allUpfront": "0.490",
						"yrTerm3Standard.noUpfront": "0.541",
						"yrTerm3Standard.partialUpfront": "0.520"
					}
				},
				"mswinSQL": {
					"ondemand": "2.321",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.610",
						"yrTerm1Standard.noUpfront": "1.923",
						"yrTerm1Standard.partialUpfront": "1.644",
						"yrTerm3Convertible.allUpfront": "1.583",
						"yrTerm3Convertible.noUpfront": "1.890",
						"yrTerm3Convertible.partialUpfront": "1.615",
						"yrTerm3Standard.allUpfront": "1.459",
						"yrTerm3Standard.noUpfront": "1.552",
						"yrTerm3Standard.partialUpfront": "1.552"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.577",
						"yrTerm1Standard.noUpfront": "0.689",
						"yrTerm1Standard.partialUpfront": "0.589",
						"yrTerm3Convertible.allUpfront": "0.550",
						"yrTerm3Convertible.noUpfront": "0.656",
						"yrTerm3Convertible.partialUpfront": "0.560",
						"yrTerm3Standard.allUpfront": "0.463",
						"yrTerm3Standard.noUpfront": "0.494",
						"yrTerm3Standard.partialUpfront": "0.494"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": true
	},
	{
		"ECU": 53.5,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 16000,
		"ebs_max_bandwidth": 2000,
		"ebs_optimized": true,
		"ebs_throughput": 250,
		"enhanced_networking": true,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "m4.4xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 64,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "M4 Quadruple Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.651",
						"yrTerm1Standard.noUpfront": "0.697",
						"yrTerm1Standard.partialUpfront": "0.664",
						"yrTerm3Convertible.allUpfront": "0.532",
						"yrTerm3Convertible.noUpfront": "0.586",
						"yrTerm3Convertible.partialUpfront": "0.543",
						"yrTerm3Standard.allUpfront": "0.444",
						"yrTerm3Standard.noUpfront": "0.510",
						"yrTerm3Standard.partialUpfront": "0.472"
					}
				},
				"mswin": {
					"ondemand": "1.768",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.387",
						"yrTerm1Standard.noUpfront": "1.433",
						"yrTerm1Standard.partialUpfront": "1.400",
						"yrTerm3Convertible.allUpfront": "1.268",
						"yrTerm3Convertible.noUpfront": "1.322",
						"yrTerm3Convertible.partialUpfront": "1.279",
						"yrTerm3Standard.allUpfront": "1.135",
						"yrTerm3Standard.noUpfront": "1.246",
						"yrTerm3Standard.partialUpfront": "1.208"
					}
				},
				"mswinSQL": {
					"ondemand": "5.027",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.399",
						"yrTerm1Standard.noUpfront": "4.058",
						"yrTerm1Standard.partialUpfront": "3.468",
						"yrTerm3Convertible.allUpfront": "3.326",
						"yrTerm3Convertible.noUpfront": "3.971",
						"yrTerm3Convertible.partialUpfront": "3.394",
						"yrTerm3Standard.allUpfront": "3.068",
						"yrTerm3Standard.noUpfront": "3.264",
						"yrTerm3Standard.partialUpfront": "3.264"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.131",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.345",
						"yrTerm1Standard.noUpfront": "1.605",
						"yrTerm1Standard.partialUpfront": "1.372",
						"yrTerm3Convertible.allUpfront": "1.272",
						"yrTerm3Convertible.noUpfront": "1.518",
						"yrTerm3Convertible.partialUpfront": "1.298",
						"yrTerm3Standard.allUpfront": "1.087",
						"yrTerm3Standard.noUpfront": "1.156",
						"yrTerm3Standard.partialUpfront": "1.156"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.984",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.549",
						"yrTerm1Standard.noUpfront": "0.588",
						"yrTerm1Standard.partialUpfront": "0.560",
						"yrTerm3Convertible.allUpfront": "0.451",
						"yrTerm3Convertible.noUpfront": "0.497",
						"yrTerm3Convertible.partialUpfront": "0.460",
						"yrTerm3Standard.allUpfront": "0.376",
						"yrTerm3Standard.noUpfront": "0.432",
						"yrTerm3Standard.partialUpfront": "0.400"
					}
				},
				"mswin": {
					"ondemand": "1.72",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.285",
						"yrTerm1Standard.noUpfront": "1.324",
						"yrTerm1Standard.partialUpfront": "1.296",
						"yrTerm3Convertible.allUpfront": "1.187",
						"yrTerm3Convertible.noUpfront": "1.233",
						"yrTerm3Convertible.partialUpfront": "1.196",
						"yrTerm3Standard.allUpfront": "1.112",
						"yrTerm3Standard.noUpfront": "1.168",
						"yrTerm3Standard.partialUpfront": "1.136"
					}
				},
				"mswinSQL": {
					"ondemand": "4.889",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.262",
						"yrTerm1Standard.noUpfront": "4.396",
						"yrTerm1Standard.partialUpfront": "4.276",
						"yrTerm3Convertible.allUpfront": "4.192",
						"yrTerm3Convertible.noUpfront": "4.313",
						"yrTerm3Convertible.partialUpfront": "4.205",
						"yrTerm3Standard.allUpfront": "4.050",
						"yrTerm3Standard.noUpfront": "4.081",
						"yrTerm3Standard.partialUpfront": "4.081"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.002",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.567",
						"yrTerm1Standard.noUpfront": "1.606",
						"yrTerm1Standard.partialUpfront": "1.578",
						"yrTerm3Convertible.allUpfront": "1.469",
						"yrTerm3Convertible.noUpfront": "1.515",
						"yrTerm3Convertible.partialUpfront": "1.478",
						"yrTerm3Standard.allUpfront": "1.394",
						"yrTerm3Standard.noUpfront": "1.450",
						"yrTerm3Standard.partialUpfront": "1.418"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.984",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.572",
						"yrTerm1Standard.noUpfront": "0.613",
						"yrTerm1Standard.partialUpfront": "0.584",
						"yrTerm3Convertible.allUpfront": "0.433",
						"yrTerm3Convertible.noUpfront": "0.477",
						"yrTerm3Convertible.partialUpfront": "0.442",
						"yrTerm3Standard.allUpfront": "0.361",
						"yrTerm3Standard.noUpfront": "0.415",
						"yrTerm3Standard.partialUpfront": "0.384"
					}
				},
				"mswin": {
					"ondemand": "1.72",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.308",
						"yrTerm1Standard.noUpfront": "1.349",
						"yrTerm1Standard.partialUpfront": "1.320",
						"yrTerm3Convertible.allUpfront": "1.169",
						"yrTerm3Convertible.noUpfront": "1.213",
						"yrTerm3Convertible.partialUpfront": "1.178",
						"yrTerm3Standard.allUpfront": "1.097",
						"yrTerm3Standard.noUpfront": "1.151",
						"yrTerm3Standard.partialUpfront": "1.120"
					}
				},
				"mswinSQL": {
					"ondemand": "4.918",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.361",
						"yrTerm1Standard.noUpfront": "4.515",
						"yrTerm1Standard.partialUpfront": "4.377",
						"yrTerm3Convertible.allUpfront": "4.282",
						"yrTerm3Convertible.noUpfront": "4.420",
						"yrTerm3Convertible.partialUpfront": "4.296",
						"yrTerm3Standard.allUpfront": "4.070",
						"yrTerm3Standard.noUpfront": "4.102",
						"yrTerm3Standard.partialUpfront": "4.102"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.002",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.590",
						"yrTerm1Standard.noUpfront": "1.631",
						"yrTerm1Standard.partialUpfront": "1.602",
						"yrTerm3Convertible.allUpfront": "1.451",
						"yrTerm3Convertible.noUpfront": "1.495",
						"yrTerm3Convertible.partialUpfront": "1.460",
						"yrTerm3Standard.allUpfront": "1.379",
						"yrTerm3Standard.noUpfront": "1.433",
						"yrTerm3Standard.partialUpfront": "1.402"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.580",
						"yrTerm1Standard.noUpfront": "0.622",
						"yrTerm1Standard.partialUpfront": "0.592",
						"yrTerm3Convertible.allUpfront": "0.442",
						"yrTerm3Convertible.noUpfront": "0.487",
						"yrTerm3Convertible.partialUpfront": "0.451",
						"yrTerm3Standard.allUpfront": "0.369",
						"yrTerm3Standard.noUpfront": "0.423",
						"yrTerm3Standard.partialUpfront": "0.392"
					}
				},
				"mswin": {
					"ondemand": "1.736",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.316",
						"yrTerm1Standard.noUpfront": "1.358",
						"yrTerm1Standard.partialUpfront": "1.328",
						"yrTerm3Convertible.allUpfront": "1.178",
						"yrTerm3Convertible.noUpfront": "1.223",
						"yrTerm3Convertible.partialUpfront": "1.187",
						"yrTerm3Standard.allUpfront": "1.105",
						"yrTerm3Standard.noUpfront": "1.159",
						"yrTerm3Standard.partialUpfront": "1.128"
					}
				},
				"mswinSQL": {
					"ondemand": "5.057",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.504",
						"yrTerm1Standard.noUpfront": "4.183",
						"yrTerm1Standard.partialUpfront": "3.576",
						"yrTerm3Convertible.allUpfront": "3.420",
						"yrTerm3Convertible.noUpfront": "4.083",
						"yrTerm3Convertible.partialUpfront": "3.491",
						"yrTerm3Standard.allUpfront": "3.089",
						"yrTerm3Standard.noUpfront": "3.286",
						"yrTerm3Standard.partialUpfront": "3.286"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.018",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.454",
						"yrTerm1Standard.noUpfront": "1.640",
						"yrTerm1Standard.partialUpfront": "1.484",
						"yrTerm3Convertible.allUpfront": "1.371",
						"yrTerm3Convertible.noUpfront": "1.505",
						"yrTerm3Convertible.partialUpfront": "1.399",
						"yrTerm3Standard.allUpfront": "1.109",
						"yrTerm3Standard.noUpfront": "1.180",
						"yrTerm3Standard.partialUpfront": "1.180"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.627",
						"yrTerm1Standard.noUpfront": "0.672",
						"yrTerm1Standard.partialUpfront": "0.640",
						"yrTerm3Convertible.allUpfront": "0.505",
						"yrTerm3Convertible.noUpfront": "0.556",
						"yrTerm3Convertible.partialUpfront": "0.515",
						"yrTerm3Standard.allUpfront": "0.421",
						"yrTerm3Standard.noUpfront": "0.484",
						"yrTerm3Standard.partialUpfront": "0.448"
					}
				},
				"mswin": {
					"ondemand": "1.736",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.363",
						"yrTerm1Standard.noUpfront": "1.408",
						"yrTerm1Standard.partialUpfront": "1.376",
						"yrTerm3Convertible.allUpfront": "1.241",
						"yrTerm3Convertible.noUpfront": "1.292",
						"yrTerm3Convertible.partialUpfront": "1.251",
						"yrTerm3Standard.allUpfront": "1.119",
						"yrTerm3Standard.noUpfront": "1.220",
						"yrTerm3Standard.partialUpfront": "1.184"
					}
				},
				"mswinSQL": {
					"ondemand": "4.981",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.467",
						"yrTerm1Standard.noUpfront": "4.139",
						"yrTerm1Standard.partialUpfront": "3.538",
						"yrTerm3Convertible.allUpfront": "3.387",
						"yrTerm3Convertible.noUpfront": "4.044",
						"yrTerm3Convertible.partialUpfront": "3.456",
						"yrTerm3Standard.allUpfront": "3.089",
						"yrTerm3Standard.noUpfront": "3.286",
						"yrTerm3Standard.partialUpfront": "3.286"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.018",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.415",
						"yrTerm1Standard.noUpfront": "1.689",
						"yrTerm1Standard.partialUpfront": "1.444",
						"yrTerm3Convertible.allUpfront": "1.335",
						"yrTerm3Convertible.noUpfront": "1.574",
						"yrTerm3Convertible.partialUpfront": "1.363",
						"yrTerm3Standard.allUpfront": "1.109",
						"yrTerm3Standard.noUpfront": "1.180",
						"yrTerm3Standard.partialUpfront": "1.180"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.888",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.510",
						"yrTerm1Standard.noUpfront": "0.546",
						"yrTerm1Standard.partialUpfront": "0.520",
						"yrTerm3Convertible.allUpfront": "0.397",
						"yrTerm3Convertible.noUpfront": "0.437",
						"yrTerm3Convertible.partialUpfront": "0.405",
						"yrTerm3Standard.allUpfront": "0.331",
						"yrTerm3Standard.noUpfront": "0.380",
						"yrTerm3Standard.partialUpfront": "0.352"
					}
				},
				"mswin": {
					"ondemand": "1.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.246",
						"yrTerm1Standard.noUpfront": "1.282",
						"yrTerm1Standard.partialUpfront": "1.256",
						"yrTerm3Convertible.allUpfront": "1.133",
						"yrTerm3Convertible.noUpfront": "1.173",
						"yrTerm3Convertible.partialUpfront": "1.141",
						"yrTerm3Standard.allUpfront": "1.067",
						"yrTerm3Standard.noUpfront": "1.116",
						"yrTerm3Standard.partialUpfront": "1.088"
					}
				},
				"mswinSQL": {
					"ondemand": "6.13",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.752",
						"yrTerm1Standard.noUpfront": "5.788",
						"yrTerm1Standard.partialUpfront": "5.762",
						"yrTerm3Convertible.allUpfront": "5.639",
						"yrTerm3Convertible.noUpfront": "5.679",
						"yrTerm3Convertible.partialUpfront": "5.647",
						"yrTerm3Standard.allUpfront": "5.573",
						"yrTerm3Standard.noUpfront": "5.622",
						"yrTerm3Standard.partialUpfront": "5.594"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.906",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.528",
						"yrTerm1Standard.noUpfront": "1.564",
						"yrTerm1Standard.partialUpfront": "1.538",
						"yrTerm3Convertible.allUpfront": "1.415",
						"yrTerm3Convertible.noUpfront": "1.455",
						"yrTerm3Convertible.partialUpfront": "1.423",
						"yrTerm3Standard.allUpfront": "1.349",
						"yrTerm3Standard.noUpfront": "1.398",
						"yrTerm3Standard.partialUpfront": "1.370"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.96",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.612",
						"yrTerm1Standard.noUpfront": "0.655",
						"yrTerm1Standard.partialUpfront": "0.624",
						"yrTerm3Convertible.allUpfront": "0.505",
						"yrTerm3Convertible.noUpfront": "0.556",
						"yrTerm3Convertible.partialUpfront": "0.515",
						"yrTerm3Standard.allUpfront": "0.421",
						"yrTerm3Standard.noUpfront": "0.484",
						"yrTerm3Standard.partialUpfront": "0.448"
					}
				},
				"mswin": {
					"ondemand": "1.696",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.348",
						"yrTerm1Standard.noUpfront": "1.391",
						"yrTerm1Standard.partialUpfront": "1.360",
						"yrTerm3Convertible.allUpfront": "1.241",
						"yrTerm3Convertible.noUpfront": "1.292",
						"yrTerm3Convertible.partialUpfront": "1.251",
						"yrTerm3Standard.allUpfront": "1.129",
						"yrTerm3Standard.noUpfront": "1.220",
						"yrTerm3Standard.partialUpfront": "1.184"
					}
				},
				"mswinSQL": {
					"ondemand": "4.776",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.399",
						"yrTerm1Standard.noUpfront": "4.058",
						"yrTerm1Standard.partialUpfront": "3.468",
						"yrTerm3Convertible.allUpfront": "3.326",
						"yrTerm3Convertible.noUpfront": "3.971",
						"yrTerm3Convertible.partialUpfront": "3.394",
						"yrTerm3Standard.allUpfront": "3.061",
						"yrTerm3Standard.noUpfront": "3.256",
						"yrTerm3Standard.partialUpfront": "3.256"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.036",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.345",
						"yrTerm1Standard.noUpfront": "1.605",
						"yrTerm1Standard.partialUpfront": "1.372",
						"yrTerm3Convertible.allUpfront": "1.272",
						"yrTerm3Convertible.noUpfront": "1.518",
						"yrTerm3Convertible.partialUpfront": "1.298",
						"yrTerm3Standard.allUpfront": "1.079",
						"yrTerm3Standard.noUpfront": "1.148",
						"yrTerm3Standard.partialUpfront": "1.148"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.888",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.565",
						"yrTerm1Standard.noUpfront": "0.605",
						"yrTerm1Standard.partialUpfront": "0.576",
						"yrTerm3Convertible.allUpfront": "0.451",
						"yrTerm3Convertible.noUpfront": "0.497",
						"yrTerm3Convertible.partialUpfront": "0.460",
						"yrTerm3Standard.allUpfront": "0.376",
						"yrTerm3Standard.noUpfront": "0.432",
						"yrTerm3Standard.partialUpfront": "0.400"
					}
				},
				"mswin": {
					"ondemand": "1.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.301",
						"yrTerm1Standard.noUpfront": "1.341",
						"yrTerm1Standard.partialUpfront": "1.312",
						"yrTerm3Convertible.allUpfront": "1.187",
						"yrTerm3Convertible.noUpfront": "1.233",
						"yrTerm3Convertible.partialUpfront": "1.196",
						"yrTerm3Standard.allUpfront": "1.112",
						"yrTerm3Standard.noUpfront": "1.168",
						"yrTerm3Standard.partialUpfront": "1.136"
					}
				},
				"mswinSQL": {
					"ondemand": "4.692",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.340",
						"yrTerm1Standard.noUpfront": "3.987",
						"yrTerm1Standard.partialUpfront": "3.408",
						"yrTerm3Convertible.allUpfront": "3.273",
						"yrTerm3Convertible.noUpfront": "3.907",
						"yrTerm3Convertible.partialUpfront": "3.340",
						"yrTerm3Standard.allUpfront": "3.018",
						"yrTerm3Standard.noUpfront": "3.210",
						"yrTerm3Standard.partialUpfront": "3.210"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.948",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.282",
						"yrTerm1Standard.noUpfront": "1.530",
						"yrTerm1Standard.partialUpfront": "1.308",
						"yrTerm3Convertible.allUpfront": "1.215",
						"yrTerm3Convertible.noUpfront": "1.450",
						"yrTerm3Convertible.partialUpfront": "1.240",
						"yrTerm3Standard.allUpfront": "1.034",
						"yrTerm3Standard.noUpfront": "1.100",
						"yrTerm3Standard.partialUpfront": "1.100"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.928",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.588",
						"yrTerm1Standard.noUpfront": "0.630",
						"yrTerm1Standard.partialUpfront": "0.600",
						"yrTerm3Convertible.allUpfront": "0.478",
						"yrTerm3Convertible.noUpfront": "0.527",
						"yrTerm3Convertible.partialUpfront": "0.488",
						"yrTerm3Standard.allUpfront": "0.399",
						"yrTerm3Standard.noUpfront": "0.458",
						"yrTerm3Standard.partialUpfront": "0.424"
					}
				},
				"mswin": {
					"ondemand": "1.664",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.324",
						"yrTerm1Standard.noUpfront": "1.366",
						"yrTerm1Standard.partialUpfront": "1.336",
						"yrTerm3Convertible.allUpfront": "1.214",
						"yrTerm3Convertible.noUpfront": "1.263",
						"yrTerm3Convertible.partialUpfront": "1.224",
						"yrTerm3Standard.allUpfront": "1.135",
						"yrTerm3Standard.noUpfront": "1.194",
						"yrTerm3Standard.partialUpfront": "1.160"
					}
				},
				"mswinSQL": {
					"ondemand": "6.17",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.830",
						"yrTerm1Standard.noUpfront": "5.872",
						"yrTerm1Standard.partialUpfront": "5.842",
						"yrTerm3Convertible.allUpfront": "5.720",
						"yrTerm3Convertible.noUpfront": "5.769",
						"yrTerm3Convertible.partialUpfront": "5.730",
						"yrTerm3Standard.allUpfront": "5.641",
						"yrTerm3Standard.noUpfront": "5.700",
						"yrTerm3Standard.partialUpfront": "5.666"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.946",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.606",
						"yrTerm1Standard.noUpfront": "1.648",
						"yrTerm1Standard.partialUpfront": "1.618",
						"yrTerm3Convertible.allUpfront": "1.496",
						"yrTerm3Convertible.noUpfront": "1.545",
						"yrTerm3Convertible.partialUpfront": "1.506",
						"yrTerm3Standard.allUpfront": "1.417",
						"yrTerm3Standard.noUpfront": "1.476",
						"yrTerm3Standard.partialUpfront": "1.442"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.272",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.674",
						"yrTerm1Standard.noUpfront": "0.722",
						"yrTerm1Standard.partialUpfront": "0.688",
						"yrTerm3Convertible.allUpfront": "0.577",
						"yrTerm3Convertible.noUpfront": "0.636",
						"yrTerm3Convertible.partialUpfront": "0.589",
						"yrTerm3Standard.allUpfront": "0.481",
						"yrTerm3Standard.noUpfront": "0.553",
						"yrTerm3Standard.partialUpfront": "0.512"
					}
				},
				"mswin": {
					"ondemand": "2.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.410",
						"yrTerm1Standard.noUpfront": "1.458",
						"yrTerm1Standard.partialUpfront": "1.424",
						"yrTerm3Convertible.allUpfront": "1.313",
						"yrTerm3Convertible.noUpfront": "1.372",
						"yrTerm3Convertible.partialUpfront": "1.325",
						"yrTerm3Standard.allUpfront": "1.217",
						"yrTerm3Standard.noUpfront": "1.289",
						"yrTerm3Standard.partialUpfront": "1.248"
					}
				},
				"mswinSQL": {
					"ondemand": "4.938",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.299",
						"yrTerm1Standard.noUpfront": "4.441",
						"yrTerm1Standard.partialUpfront": "4.314",
						"yrTerm3Convertible.allUpfront": "4.226",
						"yrTerm3Convertible.noUpfront": "4.354",
						"yrTerm3Convertible.partialUpfront": "4.239",
						"yrTerm3Standard.allUpfront": "4.089",
						"yrTerm3Standard.noUpfront": "4.122",
						"yrTerm3Standard.partialUpfront": "4.122"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.29",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.692",
						"yrTerm1Standard.noUpfront": "1.740",
						"yrTerm1Standard.partialUpfront": "1.706",
						"yrTerm3Convertible.allUpfront": "1.595",
						"yrTerm3Convertible.noUpfront": "1.654",
						"yrTerm3Convertible.partialUpfront": "1.607",
						"yrTerm3Standard.allUpfront": "1.499",
						"yrTerm3Standard.noUpfront": "1.571",
						"yrTerm3Standard.partialUpfront": "1.530"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.463",
						"yrTerm1Standard.noUpfront": "0.496",
						"yrTerm1Standard.partialUpfront": "0.472",
						"yrTerm3Convertible.allUpfront": "0.361",
						"yrTerm3Convertible.noUpfront": "0.397",
						"yrTerm3Convertible.partialUpfront": "0.368",
						"yrTerm3Standard.allUpfront": "0.301",
						"yrTerm3Standard.noUpfront": "0.346",
						"yrTerm3Standard.partialUpfront": "0.320"
					}
				},
				"mswin": {
					"ondemand": "1.536",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.199",
						"yrTerm1Standard.noUpfront": "1.232",
						"yrTerm1Standard.partialUpfront": "1.208",
						"yrTerm3Convertible.allUpfront": "1.097",
						"yrTerm3Convertible.noUpfront": "1.133",
						"yrTerm3Convertible.partialUpfront": "1.104",
						"yrTerm3Standard.allUpfront": "0.979",
						"yrTerm3Standard.noUpfront": "1.082",
						"yrTerm3Standard.partialUpfront": "1.042"
					}
				},
				"mswinSQL": {
					"ondemand": "4.594",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.221",
						"yrTerm1Standard.noUpfront": "3.845",
						"yrTerm1Standard.partialUpfront": "3.286",
						"yrTerm3Convertible.allUpfront": "3.166",
						"yrTerm3Convertible.noUpfront": "3.779",
						"yrTerm3Convertible.partialUpfront": "3.230",
						"yrTerm3Standard.allUpfront": "2.918",
						"yrTerm3Standard.noUpfront": "3.104",
						"yrTerm3Standard.partialUpfront": "3.104"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.844",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.156",
						"yrTerm1Standard.noUpfront": "1.381",
						"yrTerm1Standard.partialUpfront": "1.180",
						"yrTerm3Convertible.allUpfront": "1.101",
						"yrTerm3Convertible.noUpfront": "1.315",
						"yrTerm3Convertible.partialUpfront": "1.124",
						"yrTerm3Standard.allUpfront": "0.929",
						"yrTerm3Standard.noUpfront": "0.988",
						"yrTerm3Standard.partialUpfront": "0.988"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.463",
						"yrTerm1Standard.noUpfront": "0.496",
						"yrTerm1Standard.partialUpfront": "0.472",
						"yrTerm3Convertible.allUpfront": "0.361",
						"yrTerm3Convertible.noUpfront": "0.397",
						"yrTerm3Convertible.partialUpfront": "0.368",
						"yrTerm3Standard.allUpfront": "0.301",
						"yrTerm3Standard.noUpfront": "0.346",
						"yrTerm3Standard.partialUpfront": "0.320"
					}
				},
				"mswin": {
					"ondemand": "1.536",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.199",
						"yrTerm1Standard.noUpfront": "1.232",
						"yrTerm1Standard.partialUpfront": "1.208",
						"yrTerm3Convertible.allUpfront": "1.097",
						"yrTerm3Convertible.noUpfront": "1.133",
						"yrTerm3Convertible.partialUpfront": "1.104",
						"yrTerm3Standard.allUpfront": "0.979",
						"yrTerm3Standard.noUpfront": "1.082",
						"yrTerm3Standard.partialUpfront": "1.042"
					}
				},
				"mswinSQL": {
					"ondemand": "4.594",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.221",
						"yrTerm1Standard.noUpfront": "3.845",
						"yrTerm1Standard.partialUpfront": "3.286",
						"yrTerm3Convertible.allUpfront": "3.166",
						"yrTerm3Convertible.noUpfront": "3.779",
						"yrTerm3Convertible.partialUpfront": "3.230",
						"yrTerm3Standard.allUpfront": "2.918",
						"yrTerm3Standard.noUpfront": "3.104",
						"yrTerm3Standard.partialUpfront": "3.104"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.844",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.156",
						"yrTerm1Standard.noUpfront": "1.381",
						"yrTerm1Standard.partialUpfront": "1.180",
						"yrTerm3Convertible.allUpfront": "1.101",
						"yrTerm3Convertible.noUpfront": "1.315",
						"yrTerm3Convertible.partialUpfront": "1.124",
						"yrTerm3Standard.allUpfront": "0.929",
						"yrTerm3Standard.noUpfront": "0.988",
						"yrTerm3Standard.partialUpfront": "0.988"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "1.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.627",
						"yrTerm1Standard.noUpfront": "0.672",
						"yrTerm1Standard.partialUpfront": "0.640",
						"yrTerm3Convertible.allUpfront": "0.469",
						"yrTerm3Convertible.noUpfront": "0.517",
						"yrTerm3Convertible.partialUpfront": "0.478",
						"yrTerm3Standard.allUpfront": "0.391",
						"yrTerm3Standard.noUpfront": "0.449",
						"yrTerm3Standard.partialUpfront": "0.416"
					}
				},
				"mswin": {
					"ondemand": "1.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.363",
						"yrTerm1Standard.noUpfront": "1.408",
						"yrTerm1Standard.partialUpfront": "1.376",
						"yrTerm3Convertible.allUpfront": "1.205",
						"yrTerm3Convertible.noUpfront": "1.253",
						"yrTerm3Convertible.partialUpfront": "1.214",
						"yrTerm3Standard.allUpfront": "1.127",
						"yrTerm3Standard.noUpfront": "1.185",
						"yrTerm3Standard.partialUpfront": "1.152"
					}
				},
				"mswinSQL": {
					"ondemand": "4.778",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.309",
						"yrTerm1Standard.noUpfront": "4.453",
						"yrTerm1Standard.partialUpfront": "4.324",
						"yrTerm3Convertible.allUpfront": "4.242",
						"yrTerm3Convertible.noUpfront": "4.373",
						"yrTerm3Convertible.partialUpfront": "4.256",
						"yrTerm3Standard.allUpfront": "4.032",
						"yrTerm3Standard.noUpfront": "4.062",
						"yrTerm3Standard.partialUpfront": "4.062"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.026",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.645",
						"yrTerm1Standard.noUpfront": "1.690",
						"yrTerm1Standard.partialUpfront": "1.658",
						"yrTerm3Convertible.allUpfront": "1.487",
						"yrTerm3Convertible.noUpfront": "1.535",
						"yrTerm3Convertible.partialUpfront": "1.496",
						"yrTerm3Standard.allUpfront": "1.409",
						"yrTerm3Standard.noUpfront": "1.467",
						"yrTerm3Standard.partialUpfront": "1.434"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.936",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.635",
						"yrTerm1Standard.noUpfront": "0.680",
						"yrTerm1Standard.partialUpfront": "0.648",
						"yrTerm3Convertible.allUpfront": "0.487",
						"yrTerm3Convertible.noUpfront": "0.537",
						"yrTerm3Convertible.partialUpfront": "0.497",
						"yrTerm3Standard.allUpfront": "0.406",
						"yrTerm3Standard.noUpfront": "0.467",
						"yrTerm3Standard.partialUpfront": "0.432"
					}
				},
				"mswin": {
					"ondemand": "1.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.371",
						"yrTerm1Standard.noUpfront": "1.416",
						"yrTerm1Standard.partialUpfront": "1.384",
						"yrTerm3Convertible.allUpfront": "1.223",
						"yrTerm3Convertible.noUpfront": "1.273",
						"yrTerm3Convertible.partialUpfront": "1.233",
						"yrTerm3Standard.allUpfront": "1.141",
						"yrTerm3Standard.noUpfront": "1.203",
						"yrTerm3Standard.partialUpfront": "1.168"
					}
				},
				"mswinSQL": {
					"ondemand": "4.753",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.429",
						"yrTerm1Standard.noUpfront": "4.094",
						"yrTerm1Standard.partialUpfront": "3.500",
						"yrTerm3Convertible.allUpfront": "3.353",
						"yrTerm3Convertible.noUpfront": "4.003",
						"yrTerm3Convertible.partialUpfront": "3.422",
						"yrTerm3Standard.allUpfront": "3.046",
						"yrTerm3Standard.noUpfront": "3.240",
						"yrTerm3Standard.partialUpfront": "3.240"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.012",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.376",
						"yrTerm1Standard.noUpfront": "1.643",
						"yrTerm1Standard.partialUpfront": "1.404",
						"yrTerm3Convertible.allUpfront": "1.300",
						"yrTerm3Convertible.noUpfront": "1.552",
						"yrTerm3Convertible.partialUpfront": "1.327",
						"yrTerm3Standard.allUpfront": "1.064",
						"yrTerm3Standard.noUpfront": "1.132",
						"yrTerm3Standard.partialUpfront": "1.132"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.463",
						"yrTerm1Standard.noUpfront": "0.496",
						"yrTerm1Standard.partialUpfront": "0.472",
						"yrTerm3Convertible.allUpfront": "0.361",
						"yrTerm3Convertible.noUpfront": "0.397",
						"yrTerm3Convertible.partialUpfront": "0.368",
						"yrTerm3Standard.allUpfront": "0.301",
						"yrTerm3Standard.noUpfront": "0.346",
						"yrTerm3Standard.partialUpfront": "0.320"
					}
				},
				"mswin": {
					"ondemand": "1.536",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.199",
						"yrTerm1Standard.noUpfront": "1.232",
						"yrTerm1Standard.partialUpfront": "1.208",
						"yrTerm3Convertible.allUpfront": "1.097",
						"yrTerm3Convertible.noUpfront": "1.133",
						"yrTerm3Convertible.partialUpfront": "1.104",
						"yrTerm3Standard.allUpfront": "0.979",
						"yrTerm3Standard.noUpfront": "1.082",
						"yrTerm3Standard.partialUpfront": "1.042"
					}
				},
				"mswinSQL": {
					"ondemand": "4.594",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.221",
						"yrTerm1Standard.noUpfront": "3.845",
						"yrTerm1Standard.partialUpfront": "3.286",
						"yrTerm3Convertible.allUpfront": "3.166",
						"yrTerm3Convertible.noUpfront": "3.779",
						"yrTerm3Convertible.partialUpfront": "3.230",
						"yrTerm3Standard.allUpfront": "2.918",
						"yrTerm3Standard.noUpfront": "3.104",
						"yrTerm3Standard.partialUpfront": "3.104"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.844",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.156",
						"yrTerm1Standard.noUpfront": "1.381",
						"yrTerm1Standard.partialUpfront": "1.180",
						"yrTerm3Convertible.allUpfront": "1.101",
						"yrTerm3Convertible.noUpfront": "1.315",
						"yrTerm3Convertible.partialUpfront": "1.124",
						"yrTerm3Standard.allUpfront": "0.929",
						"yrTerm3Standard.noUpfront": "0.988",
						"yrTerm3Standard.partialUpfront": "0.988"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 124.5,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 32000,
		"ebs_max_bandwidth": 4000,
		"ebs_optimized": true,
		"ebs_throughput": 500,
		"enhanced_networking": true,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "m4.10xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 160,
		"network_performance": "10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "M4 Deca Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.58",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.627",
						"yrTerm1Standard.noUpfront": "1.743",
						"yrTerm1Standard.partialUpfront": "1.660",
						"yrTerm3Convertible.allUpfront": "1.330",
						"yrTerm3Convertible.noUpfront": "1.466",
						"yrTerm3Convertible.partialUpfront": "1.357",
						"yrTerm3Standard.allUpfront": "1.109",
						"yrTerm3Standard.noUpfront": "1.274",
						"yrTerm3Standard.partialUpfront": "1.180"
					}
				},
				"mswin": {
					"ondemand": "4.42",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.467",
						"yrTerm1Standard.noUpfront": "3.583",
						"yrTerm1Standard.partialUpfront": "3.500",
						"yrTerm3Convertible.allUpfront": "3.170",
						"yrTerm3Convertible.noUpfront": "3.306",
						"yrTerm3Convertible.partialUpfront": "3.197",
						"yrTerm3Standard.allUpfront": "2.838",
						"yrTerm3Standard.noUpfront": "3.114",
						"yrTerm3Standard.partialUpfront": "3.020"
					}
				},
				"mswinSQL": {
					"ondemand": "12.762",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.497",
						"yrTerm1Standard.noUpfront": "10.144",
						"yrTerm1Standard.partialUpfront": "8.670",
						"yrTerm3Convertible.allUpfront": "8.314",
						"yrTerm3Convertible.noUpfront": "9.926",
						"yrTerm3Convertible.partialUpfront": "8.484",
						"yrTerm3Standard.allUpfront": "7.668",
						"yrTerm3Standard.noUpfront": "8.158",
						"yrTerm3Standard.partialUpfront": "8.158"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.326",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.360",
						"yrTerm1Standard.noUpfront": "4.011",
						"yrTerm1Standard.partialUpfront": "3.428",
						"yrTerm3Convertible.allUpfront": "3.177",
						"yrTerm3Convertible.noUpfront": "3.793",
						"yrTerm3Convertible.partialUpfront": "3.242",
						"yrTerm3Standard.allUpfront": "2.715",
						"yrTerm3Standard.noUpfront": "2.888",
						"yrTerm3Standard.partialUpfront": "2.888"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.46",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.372",
						"yrTerm1Standard.noUpfront": "1.470",
						"yrTerm1Standard.partialUpfront": "1.400",
						"yrTerm3Convertible.allUpfront": "1.127",
						"yrTerm3Convertible.noUpfront": "1.242",
						"yrTerm3Convertible.partialUpfront": "1.150",
						"yrTerm3Standard.allUpfront": "0.940",
						"yrTerm3Standard.noUpfront": "1.080",
						"yrTerm3Standard.partialUpfront": "1.000"
					}
				},
				"mswin": {
					"ondemand": "4.3",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.212",
						"yrTerm1Standard.noUpfront": "3.310",
						"yrTerm1Standard.partialUpfront": "3.240",
						"yrTerm3Convertible.allUpfront": "2.967",
						"yrTerm3Convertible.noUpfront": "3.082",
						"yrTerm3Convertible.partialUpfront": "2.990",
						"yrTerm3Standard.allUpfront": "2.780",
						"yrTerm3Standard.noUpfront": "2.920",
						"yrTerm3Standard.partialUpfront": "2.840"
					}
				},
				"mswinSQL": {
					"ondemand": "12.223",
					"reserved": {
						"yrTerm1Standard.allUpfront": "10.654",
						"yrTerm1Standard.noUpfront": "10.990",
						"yrTerm1Standard.partialUpfront": "10.689",
						"yrTerm3Convertible.allUpfront": "10.480",
						"yrTerm3Convertible.noUpfront": "10.783",
						"yrTerm3Convertible.partialUpfront": "10.512",
						"yrTerm3Standard.allUpfront": "10.125",
						"yrTerm3Standard.noUpfront": "10.202",
						"yrTerm3Standard.partialUpfront": "10.202"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.004",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.916",
						"yrTerm1Standard.noUpfront": "4.014",
						"yrTerm1Standard.partialUpfront": "3.944",
						"yrTerm3Convertible.allUpfront": "3.671",
						"yrTerm3Convertible.noUpfront": "3.786",
						"yrTerm3Convertible.partialUpfront": "3.694",
						"yrTerm3Standard.allUpfront": "3.484",
						"yrTerm3Standard.noUpfront": "3.624",
						"yrTerm3Standard.partialUpfront": "3.544"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.46",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.431",
						"yrTerm1Standard.noUpfront": "1.533",
						"yrTerm1Standard.partialUpfront": "1.460",
						"yrTerm3Convertible.allUpfront": "1.082",
						"yrTerm3Convertible.noUpfront": "1.192",
						"yrTerm3Convertible.partialUpfront": "1.104",
						"yrTerm3Standard.allUpfront": "0.902",
						"yrTerm3Standard.noUpfront": "1.037",
						"yrTerm3Standard.partialUpfront": "0.960"
					}
				},
				"mswin": {
					"ondemand": "4.3",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.271",
						"yrTerm1Standard.noUpfront": "3.373",
						"yrTerm1Standard.partialUpfront": "3.300",
						"yrTerm3Convertible.allUpfront": "2.922",
						"yrTerm3Convertible.noUpfront": "3.032",
						"yrTerm3Convertible.partialUpfront": "2.944",
						"yrTerm3Standard.allUpfront": "2.742",
						"yrTerm3Standard.noUpfront": "2.877",
						"yrTerm3Standard.partialUpfront": "2.800"
					}
				},
				"mswinSQL": {
					"ondemand": "12.295",
					"reserved": {
						"yrTerm1Standard.allUpfront": "10.901",
						"yrTerm1Standard.noUpfront": "11.285",
						"yrTerm1Standard.partialUpfront": "10.941",
						"yrTerm3Convertible.allUpfront": "10.703",
						"yrTerm3Convertible.noUpfront": "11.049",
						"yrTerm3Convertible.partialUpfront": "10.739",
						"yrTerm3Standard.allUpfront": "10.175",
						"yrTerm3Standard.noUpfront": "10.256",
						"yrTerm3Standard.partialUpfront": "10.256"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.004",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.975",
						"yrTerm1Standard.noUpfront": "4.077",
						"yrTerm1Standard.partialUpfront": "4.004",
						"yrTerm3Convertible.allUpfront": "3.626",
						"yrTerm3Convertible.noUpfront": "3.736",
						"yrTerm3Convertible.partialUpfront": "3.648",
						"yrTerm3Standard.allUpfront": "3.446",
						"yrTerm3Standard.noUpfront": "3.581",
						"yrTerm3Standard.partialUpfront": "3.504"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.450",
						"yrTerm1Standard.noUpfront": "1.554",
						"yrTerm1Standard.partialUpfront": "1.480",
						"yrTerm3Convertible.allUpfront": "1.105",
						"yrTerm3Convertible.noUpfront": "1.217",
						"yrTerm3Convertible.partialUpfront": "1.127",
						"yrTerm3Standard.allUpfront": "0.921",
						"yrTerm3Standard.noUpfront": "1.058",
						"yrTerm3Standard.partialUpfront": "0.980"
					}
				},
				"mswin": {
					"ondemand": "4.34",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.290",
						"yrTerm1Standard.noUpfront": "3.394",
						"yrTerm1Standard.partialUpfront": "3.320",
						"yrTerm3Convertible.allUpfront": "2.945",
						"yrTerm3Convertible.noUpfront": "3.057",
						"yrTerm3Convertible.partialUpfront": "2.967",
						"yrTerm3Standard.allUpfront": "2.761",
						"yrTerm3Standard.noUpfront": "2.898",
						"yrTerm3Standard.partialUpfront": "2.820"
					}
				},
				"mswinSQL": {
					"ondemand": "12.838",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.757",
						"yrTerm1Standard.noUpfront": "10.455",
						"yrTerm1Standard.partialUpfront": "8.936",
						"yrTerm3Convertible.allUpfront": "8.549",
						"yrTerm3Convertible.noUpfront": "10.206",
						"yrTerm3Convertible.partialUpfront": "8.723",
						"yrTerm3Standard.allUpfront": "7.721",
						"yrTerm3Standard.noUpfront": "8.214",
						"yrTerm3Standard.partialUpfront": "8.214"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.044",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.634",
						"yrTerm1Standard.noUpfront": "4.098",
						"yrTerm1Standard.partialUpfront": "3.708",
						"yrTerm3Convertible.allUpfront": "3.425",
						"yrTerm3Convertible.noUpfront": "3.761",
						"yrTerm3Convertible.partialUpfront": "3.495",
						"yrTerm3Standard.allUpfront": "2.771",
						"yrTerm3Standard.noUpfront": "2.948",
						"yrTerm3Standard.partialUpfront": "2.948"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.568",
						"yrTerm1Standard.noUpfront": "1.680",
						"yrTerm1Standard.partialUpfront": "1.600",
						"yrTerm3Convertible.allUpfront": "1.262",
						"yrTerm3Convertible.noUpfront": "1.391",
						"yrTerm3Convertible.partialUpfront": "1.288",
						"yrTerm3Standard.allUpfront": "1.053",
						"yrTerm3Standard.noUpfront": "1.210",
						"yrTerm3Standard.partialUpfront": "1.120"
					}
				},
				"mswin": {
					"ondemand": "4.34",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.408",
						"yrTerm1Standard.noUpfront": "3.520",
						"yrTerm1Standard.partialUpfront": "3.440",
						"yrTerm3Convertible.allUpfront": "3.102",
						"yrTerm3Convertible.noUpfront": "3.231",
						"yrTerm3Convertible.partialUpfront": "3.128",
						"yrTerm3Standard.allUpfront": "2.798",
						"yrTerm3Standard.noUpfront": "3.050",
						"yrTerm3Standard.partialUpfront": "2.960"
					}
				},
				"mswinSQL": {
					"ondemand": "12.648",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.664",
						"yrTerm1Standard.noUpfront": "10.344",
						"yrTerm1Standard.partialUpfront": "8.841",
						"yrTerm3Convertible.allUpfront": "8.465",
						"yrTerm3Convertible.noUpfront": "10.106",
						"yrTerm3Convertible.partialUpfront": "8.638",
						"yrTerm3Standard.allUpfront": "7.721",
						"yrTerm3Standard.noUpfront": "8.214",
						"yrTerm3Standard.partialUpfront": "8.214"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.044",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.536",
						"yrTerm1Standard.noUpfront": "4.221",
						"yrTerm1Standard.partialUpfront": "3.608",
						"yrTerm3Convertible.allUpfront": "3.337",
						"yrTerm3Convertible.noUpfront": "3.935",
						"yrTerm3Convertible.partialUpfront": "3.405",
						"yrTerm3Standard.allUpfront": "2.771",
						"yrTerm3Standard.noUpfront": "2.948",
						"yrTerm3Standard.partialUpfront": "2.948"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.22",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.274",
						"yrTerm1Standard.noUpfront": "1.365",
						"yrTerm1Standard.partialUpfront": "1.300",
						"yrTerm3Convertible.allUpfront": "0.992",
						"yrTerm3Convertible.noUpfront": "1.093",
						"yrTerm3Convertible.partialUpfront": "1.012",
						"yrTerm3Standard.allUpfront": "0.827",
						"yrTerm3Standard.noUpfront": "0.950",
						"yrTerm3Standard.partialUpfront": "0.880"
					}
				},
				"mswin": {
					"ondemand": "4.06",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.114",
						"yrTerm1Standard.noUpfront": "3.205",
						"yrTerm1Standard.partialUpfront": "3.140",
						"yrTerm3Convertible.allUpfront": "2.832",
						"yrTerm3Convertible.noUpfront": "2.933",
						"yrTerm3Convertible.partialUpfront": "2.852",
						"yrTerm3Standard.allUpfront": "2.667",
						"yrTerm3Standard.noUpfront": "2.790",
						"yrTerm3Standard.partialUpfront": "2.720"
					}
				},
				"mswinSQL": {
					"ondemand": "15.324",
					"reserved": {
						"yrTerm1Standard.allUpfront": "14.378",
						"yrTerm1Standard.noUpfront": "14.469",
						"yrTerm1Standard.partialUpfront": "14.404",
						"yrTerm3Convertible.allUpfront": "14.096",
						"yrTerm3Convertible.noUpfront": "14.197",
						"yrTerm3Convertible.partialUpfront": "14.116",
						"yrTerm3Standard.allUpfront": "13.931",
						"yrTerm3Standard.noUpfront": "14.054",
						"yrTerm3Standard.partialUpfront": "13.984"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.764",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.818",
						"yrTerm1Standard.noUpfront": "3.909",
						"yrTerm1Standard.partialUpfront": "3.844",
						"yrTerm3Convertible.allUpfront": "3.536",
						"yrTerm3Convertible.noUpfront": "3.637",
						"yrTerm3Convertible.partialUpfront": "3.556",
						"yrTerm3Standard.allUpfront": "3.371",
						"yrTerm3Standard.noUpfront": "3.494",
						"yrTerm3Standard.partialUpfront": "3.424"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.529",
						"yrTerm1Standard.noUpfront": "1.638",
						"yrTerm1Standard.partialUpfront": "1.560",
						"yrTerm3Convertible.allUpfront": "1.262",
						"yrTerm3Convertible.noUpfront": "1.391",
						"yrTerm3Convertible.partialUpfront": "1.288",
						"yrTerm3Standard.allUpfront": "1.053",
						"yrTerm3Standard.noUpfront": "1.210",
						"yrTerm3Standard.partialUpfront": "1.120"
					}
				},
				"mswin": {
					"ondemand": "4.24",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.369",
						"yrTerm1Standard.noUpfront": "3.478",
						"yrTerm1Standard.partialUpfront": "3.400",
						"yrTerm3Convertible.allUpfront": "3.102",
						"yrTerm3Convertible.noUpfront": "3.231",
						"yrTerm3Convertible.partialUpfront": "3.128",
						"yrTerm3Standard.allUpfront": "2.823",
						"yrTerm3Standard.noUpfront": "3.050",
						"yrTerm3Standard.partialUpfront": "2.960"
					}
				},
				"mswinSQL": {
					"ondemand": "12.135",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.497",
						"yrTerm1Standard.noUpfront": "10.144",
						"yrTerm1Standard.partialUpfront": "8.670",
						"yrTerm3Convertible.allUpfront": "8.314",
						"yrTerm3Convertible.noUpfront": "9.926",
						"yrTerm3Convertible.partialUpfront": "8.484",
						"yrTerm3Standard.allUpfront": "7.650",
						"yrTerm3Standard.noUpfront": "8.138",
						"yrTerm3Standard.partialUpfront": "8.138"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.062",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.360",
						"yrTerm1Standard.noUpfront": "4.011",
						"yrTerm1Standard.partialUpfront": "3.428",
						"yrTerm3Convertible.allUpfront": "3.177",
						"yrTerm3Convertible.noUpfront": "3.793",
						"yrTerm3Convertible.partialUpfront": "3.242",
						"yrTerm3Standard.allUpfront": "2.696",
						"yrTerm3Standard.noUpfront": "2.868",
						"yrTerm3Standard.partialUpfront": "2.868"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.22",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.411",
						"yrTerm1Standard.noUpfront": "1.512",
						"yrTerm1Standard.partialUpfront": "1.440",
						"yrTerm3Convertible.allUpfront": "1.127",
						"yrTerm3Convertible.noUpfront": "1.242",
						"yrTerm3Convertible.partialUpfront": "1.150",
						"yrTerm3Standard.allUpfront": "0.940",
						"yrTerm3Standard.noUpfront": "1.080",
						"yrTerm3Standard.partialUpfront": "1.000"
					}
				},
				"mswin": {
					"ondemand": "4.06",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.251",
						"yrTerm1Standard.noUpfront": "3.352",
						"yrTerm1Standard.partialUpfront": "3.280",
						"yrTerm3Convertible.allUpfront": "2.967",
						"yrTerm3Convertible.noUpfront": "3.082",
						"yrTerm3Convertible.partialUpfront": "2.990",
						"yrTerm3Standard.allUpfront": "2.780",
						"yrTerm3Standard.noUpfront": "2.920",
						"yrTerm3Standard.partialUpfront": "2.840"
					}
				},
				"mswinSQL": {
					"ondemand": "11.926",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.348",
						"yrTerm1Standard.noUpfront": "9.966",
						"yrTerm1Standard.partialUpfront": "8.518",
						"yrTerm3Convertible.allUpfront": "8.180",
						"yrTerm3Convertible.noUpfront": "9.766",
						"yrTerm3Convertible.partialUpfront": "8.347",
						"yrTerm3Standard.allUpfront": "7.543",
						"yrTerm3Standard.noUpfront": "8.024",
						"yrTerm3Standard.partialUpfront": "8.024"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.842",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.203",
						"yrTerm1Standard.noUpfront": "3.824",
						"yrTerm1Standard.partialUpfront": "3.268",
						"yrTerm3Convertible.allUpfront": "3.035",
						"yrTerm3Convertible.noUpfront": "3.624",
						"yrTerm3Convertible.partialUpfront": "3.097",
						"yrTerm3Standard.allUpfront": "2.583",
						"yrTerm3Standard.noUpfront": "2.748",
						"yrTerm3Standard.partialUpfront": "2.748"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.32",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.470",
						"yrTerm1Standard.noUpfront": "1.575",
						"yrTerm1Standard.partialUpfront": "1.500",
						"yrTerm3Convertible.allUpfront": "1.195",
						"yrTerm3Convertible.noUpfront": "1.317",
						"yrTerm3Convertible.partialUpfront": "1.219",
						"yrTerm3Standard.allUpfront": "0.996",
						"yrTerm3Standard.noUpfront": "1.145",
						"yrTerm3Standard.partialUpfront": "1.060"
					}
				},
				"mswin": {
					"ondemand": "4.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.310",
						"yrTerm1Standard.noUpfront": "3.415",
						"yrTerm1Standard.partialUpfront": "3.340",
						"yrTerm3Convertible.allUpfront": "3.035",
						"yrTerm3Convertible.noUpfront": "3.157",
						"yrTerm3Convertible.partialUpfront": "3.059",
						"yrTerm3Standard.allUpfront": "2.836",
						"yrTerm3Standard.noUpfront": "2.985",
						"yrTerm3Standard.partialUpfront": "2.900"
					}
				},
				"mswinSQL": {
					"ondemand": "15.424",
					"reserved": {
						"yrTerm1Standard.allUpfront": "14.574",
						"yrTerm1Standard.noUpfront": "14.679",
						"yrTerm1Standard.partialUpfront": "14.604",
						"yrTerm3Convertible.allUpfront": "14.299",
						"yrTerm3Convertible.noUpfront": "14.421",
						"yrTerm3Convertible.partialUpfront": "14.323",
						"yrTerm3Standard.allUpfront": "14.100",
						"yrTerm3Standard.noUpfront": "14.249",
						"yrTerm3Standard.partialUpfront": "14.164"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.864",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.014",
						"yrTerm1Standard.noUpfront": "4.119",
						"yrTerm1Standard.partialUpfront": "4.044",
						"yrTerm3Convertible.allUpfront": "3.739",
						"yrTerm3Convertible.noUpfront": "3.861",
						"yrTerm3Convertible.partialUpfront": "3.763",
						"yrTerm3Standard.allUpfront": "3.540",
						"yrTerm3Standard.noUpfront": "3.689",
						"yrTerm3Standard.partialUpfront": "3.604"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.18",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.686",
						"yrTerm1Standard.noUpfront": "1.806",
						"yrTerm1Standard.partialUpfront": "1.720",
						"yrTerm3Convertible.allUpfront": "1.443",
						"yrTerm3Convertible.noUpfront": "1.590",
						"yrTerm3Convertible.partialUpfront": "1.472",
						"yrTerm3Standard.allUpfront": "1.203",
						"yrTerm3Standard.noUpfront": "1.382",
						"yrTerm3Standard.partialUpfront": "1.280"
					}
				},
				"mswin": {
					"ondemand": "5.02",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.526",
						"yrTerm1Standard.noUpfront": "3.646",
						"yrTerm1Standard.partialUpfront": "3.560",
						"yrTerm3Convertible.allUpfront": "3.283",
						"yrTerm3Convertible.noUpfront": "3.430",
						"yrTerm3Convertible.partialUpfront": "3.312",
						"yrTerm3Standard.allUpfront": "3.043",
						"yrTerm3Standard.noUpfront": "3.222",
						"yrTerm3Standard.partialUpfront": "3.120"
					}
				},
				"mswinSQL": {
					"ondemand": "12.345",
					"reserved": {
						"yrTerm1Standard.allUpfront": "10.748",
						"yrTerm1Standard.noUpfront": "11.102",
						"yrTerm1Standard.partialUpfront": "10.785",
						"yrTerm3Convertible.allUpfront": "10.565",
						"yrTerm3Convertible.noUpfront": "10.884",
						"yrTerm3Convertible.partialUpfront": "10.599",
						"yrTerm3Standard.allUpfront": "10.222",
						"yrTerm3Standard.noUpfront": "10.305",
						"yrTerm3Standard.partialUpfront": "10.305"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.724",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.230",
						"yrTerm1Standard.noUpfront": "4.350",
						"yrTerm1Standard.partialUpfront": "4.264",
						"yrTerm3Convertible.allUpfront": "3.987",
						"yrTerm3Convertible.noUpfront": "4.134",
						"yrTerm3Convertible.partialUpfront": "4.016",
						"yrTerm3Standard.allUpfront": "3.747",
						"yrTerm3Standard.noUpfront": "3.926",
						"yrTerm3Standard.partialUpfront": "3.824"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.156",
						"yrTerm1Standard.noUpfront": "1.239",
						"yrTerm1Standard.partialUpfront": "1.180",
						"yrTerm3Convertible.allUpfront": "0.902",
						"yrTerm3Convertible.noUpfront": "0.994",
						"yrTerm3Convertible.partialUpfront": "0.920",
						"yrTerm3Standard.allUpfront": "0.752",
						"yrTerm3Standard.noUpfront": "0.864",
						"yrTerm3Standard.partialUpfront": "0.800"
					}
				},
				"mswin": {
					"ondemand": "3.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.996",
						"yrTerm1Standard.noUpfront": "3.079",
						"yrTerm1Standard.partialUpfront": "3.020",
						"yrTerm3Convertible.allUpfront": "2.742",
						"yrTerm3Convertible.noUpfront": "2.834",
						"yrTerm3Convertible.partialUpfront": "2.760",
						"yrTerm3Standard.allUpfront": "2.447",
						"yrTerm3Standard.noUpfront": "2.704",
						"yrTerm3Standard.partialUpfront": "2.604"
					}
				},
				"mswinSQL": {
					"ondemand": "11.679",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.050",
						"yrTerm1Standard.noUpfront": "9.610",
						"yrTerm1Standard.partialUpfront": "8.214",
						"yrTerm3Convertible.allUpfront": "7.912",
						"yrTerm3Convertible.noUpfront": "9.446",
						"yrTerm3Convertible.partialUpfront": "8.073",
						"yrTerm3Standard.allUpfront": "7.293",
						"yrTerm3Standard.noUpfront": "7.758",
						"yrTerm3Standard.partialUpfront": "7.758"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.582",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.889",
						"yrTerm1Standard.noUpfront": "3.449",
						"yrTerm1Standard.partialUpfront": "2.948",
						"yrTerm3Convertible.allUpfront": "2.751",
						"yrTerm3Convertible.noUpfront": "3.285",
						"yrTerm3Convertible.partialUpfront": "2.807",
						"yrTerm3Standard.allUpfront": "2.320",
						"yrTerm3Standard.noUpfront": "2.468",
						"yrTerm3Standard.partialUpfront": "2.468"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.156",
						"yrTerm1Standard.noUpfront": "1.239",
						"yrTerm1Standard.partialUpfront": "1.180",
						"yrTerm3Convertible.allUpfront": "0.902",
						"yrTerm3Convertible.noUpfront": "0.994",
						"yrTerm3Convertible.partialUpfront": "0.920",
						"yrTerm3Standard.allUpfront": "0.752",
						"yrTerm3Standard.noUpfront": "0.864",
						"yrTerm3Standard.partialUpfront": "0.800"
					}
				},
				"mswin": {
					"ondemand": "3.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.996",
						"yrTerm1Standard.noUpfront": "3.079",
						"yrTerm1Standard.partialUpfront": "3.020",
						"yrTerm3Convertible.allUpfront": "2.742",
						"yrTerm3Convertible.noUpfront": "2.834",
						"yrTerm3Convertible.partialUpfront": "2.760",
						"yrTerm3Standard.allUpfront": "2.447",
						"yrTerm3Standard.noUpfront": "2.704",
						"yrTerm3Standard.partialUpfront": "2.604"
					}
				},
				"mswinSQL": {
					"ondemand": "11.679",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.050",
						"yrTerm1Standard.noUpfront": "9.610",
						"yrTerm1Standard.partialUpfront": "8.214",
						"yrTerm3Convertible.allUpfront": "7.912",
						"yrTerm3Convertible.noUpfront": "9.446",
						"yrTerm3Convertible.partialUpfront": "8.073",
						"yrTerm3Standard.allUpfront": "7.293",
						"yrTerm3Standard.noUpfront": "7.758",
						"yrTerm3Standard.partialUpfront": "7.758"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.582",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.889",
						"yrTerm1Standard.noUpfront": "3.449",
						"yrTerm1Standard.partialUpfront": "2.948",
						"yrTerm3Convertible.allUpfront": "2.751",
						"yrTerm3Convertible.noUpfront": "3.285",
						"yrTerm3Convertible.partialUpfront": "2.807",
						"yrTerm3Standard.allUpfront": "2.320",
						"yrTerm3Standard.noUpfront": "2.468",
						"yrTerm3Standard.partialUpfront": "2.468"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "2.52",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.568",
						"yrTerm1Standard.noUpfront": "1.680",
						"yrTerm1Standard.partialUpfront": "1.600",
						"yrTerm3Convertible.allUpfront": "1.172",
						"yrTerm3Convertible.noUpfront": "1.292",
						"yrTerm3Convertible.partialUpfront": "1.196",
						"yrTerm3Standard.allUpfront": "0.978",
						"yrTerm3Standard.noUpfront": "1.123",
						"yrTerm3Standard.partialUpfront": "1.040"
					}
				},
				"mswin": {
					"ondemand": "4.36",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.408",
						"yrTerm1Standard.noUpfront": "3.520",
						"yrTerm1Standard.partialUpfront": "3.440",
						"yrTerm3Convertible.allUpfront": "3.012",
						"yrTerm3Convertible.noUpfront": "3.132",
						"yrTerm3Convertible.partialUpfront": "3.036",
						"yrTerm3Standard.allUpfront": "2.818",
						"yrTerm3Standard.noUpfront": "2.963",
						"yrTerm3Standard.partialUpfront": "2.880"
					}
				},
				"mswinSQL": {
					"ondemand": "11.945",
					"reserved": {
						"yrTerm1Standard.allUpfront": "10.772",
						"yrTerm1Standard.noUpfront": "11.131",
						"yrTerm1Standard.partialUpfront": "10.810",
						"yrTerm3Convertible.allUpfront": "10.605",
						"yrTerm3Convertible.noUpfront": "10.932",
						"yrTerm3Convertible.partialUpfront": "10.640",
						"yrTerm3Standard.allUpfront": "10.081",
						"yrTerm3Standard.noUpfront": "10.155",
						"yrTerm3Standard.partialUpfront": "10.155"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.112",
						"yrTerm1Standard.noUpfront": "4.224",
						"yrTerm1Standard.partialUpfront": "4.144",
						"yrTerm3Convertible.allUpfront": "3.716",
						"yrTerm3Convertible.noUpfront": "3.836",
						"yrTerm3Convertible.partialUpfront": "3.740",
						"yrTerm3Standard.allUpfront": "3.522",
						"yrTerm3Standard.noUpfront": "3.667",
						"yrTerm3Standard.partialUpfront": "3.584"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.34",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.588",
						"yrTerm1Standard.noUpfront": "1.701",
						"yrTerm1Standard.partialUpfront": "1.620",
						"yrTerm3Convertible.allUpfront": "1.217",
						"yrTerm3Convertible.noUpfront": "1.341",
						"yrTerm3Convertible.partialUpfront": "1.242",
						"yrTerm3Standard.allUpfront": "1.015",
						"yrTerm3Standard.noUpfront": "1.166",
						"yrTerm3Standard.partialUpfront": "1.080"
					}
				},
				"mswin": {
					"ondemand": "4.18",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.428",
						"yrTerm1Standard.noUpfront": "3.541",
						"yrTerm1Standard.partialUpfront": "3.460",
						"yrTerm3Convertible.allUpfront": "3.057",
						"yrTerm3Convertible.noUpfront": "3.181",
						"yrTerm3Convertible.partialUpfront": "3.082",
						"yrTerm3Standard.allUpfront": "2.852",
						"yrTerm3Standard.noUpfront": "3.006",
						"yrTerm3Standard.partialUpfront": "2.920"
					}
				},
				"mswinSQL": {
					"ondemand": "12.078",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.571",
						"yrTerm1Standard.noUpfront": "10.233",
						"yrTerm1Standard.partialUpfront": "8.746",
						"yrTerm3Convertible.allUpfront": "8.381",
						"yrTerm3Convertible.noUpfront": "10.006",
						"yrTerm3Convertible.partialUpfront": "8.552",
						"yrTerm3Standard.allUpfront": "7.614",
						"yrTerm3Standard.noUpfront": "8.100",
						"yrTerm3Standard.partialUpfront": "8.100"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.002",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.438",
						"yrTerm1Standard.noUpfront": "4.104",
						"yrTerm1Standard.partialUpfront": "3.508",
						"yrTerm3Convertible.allUpfront": "3.248",
						"yrTerm3Convertible.noUpfront": "3.877",
						"yrTerm3Convertible.partialUpfront": "3.314",
						"yrTerm3Standard.allUpfront": "2.658",
						"yrTerm3Standard.noUpfront": "2.828",
						"yrTerm3Standard.partialUpfront": "2.828"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.156",
						"yrTerm1Standard.noUpfront": "1.239",
						"yrTerm1Standard.partialUpfront": "1.180",
						"yrTerm3Convertible.allUpfront": "0.902",
						"yrTerm3Convertible.noUpfront": "0.994",
						"yrTerm3Convertible.partialUpfront": "0.920",
						"yrTerm3Standard.allUpfront": "0.752",
						"yrTerm3Standard.noUpfront": "0.864",
						"yrTerm3Standard.partialUpfront": "0.800"
					}
				},
				"mswin": {
					"ondemand": "3.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.996",
						"yrTerm1Standard.noUpfront": "3.079",
						"yrTerm1Standard.partialUpfront": "3.020",
						"yrTerm3Convertible.allUpfront": "2.742",
						"yrTerm3Convertible.noUpfront": "2.834",
						"yrTerm3Convertible.partialUpfront": "2.760",
						"yrTerm3Standard.allUpfront": "2.447",
						"yrTerm3Standard.noUpfront": "2.704",
						"yrTerm3Standard.partialUpfront": "2.604"
					}
				},
				"mswinSQL": {
					"ondemand": "11.679",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.050",
						"yrTerm1Standard.noUpfront": "9.610",
						"yrTerm1Standard.partialUpfront": "8.214",
						"yrTerm3Convertible.allUpfront": "7.912",
						"yrTerm3Convertible.noUpfront": "9.446",
						"yrTerm3Convertible.partialUpfront": "8.073",
						"yrTerm3Standard.allUpfront": "7.293",
						"yrTerm3Standard.noUpfront": "7.758",
						"yrTerm3Standard.partialUpfront": "7.758"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.582",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.889",
						"yrTerm1Standard.noUpfront": "3.449",
						"yrTerm1Standard.partialUpfront": "2.948",
						"yrTerm3Convertible.allUpfront": "2.751",
						"yrTerm3Convertible.noUpfront": "3.285",
						"yrTerm3Convertible.partialUpfront": "2.807",
						"yrTerm3Standard.allUpfront": "2.320",
						"yrTerm3Standard.noUpfront": "2.468",
						"yrTerm3Standard.partialUpfront": "2.468"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 40,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 188,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 65000,
		"ebs_max_bandwidth": 10000,
		"ebs_optimized": true,
		"ebs_throughput": 1250,
		"enhanced_networking": true,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "m4.16xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 256,
		"network_performance": "20 Gigabit",
		"placement_group_support": true,
		"pretty_name": "M4 16xlarge",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "4.128",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.603",
						"yrTerm1Standard.noUpfront": "2.789",
						"yrTerm1Standard.partialUpfront": "2.656",
						"yrTerm3Convertible.allUpfront": "2.128",
						"yrTerm3Convertible.noUpfront": "2.345",
						"yrTerm3Convertible.partialUpfront": "2.171",
						"yrTerm3Standard.allUpfront": "1.775",
						"yrTerm3Standard.noUpfront": "2.039",
						"yrTerm3Standard.partialUpfront": "1.888"
					}
				},
				"mswin": {
					"ondemand": "7.072",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.547",
						"yrTerm1Standard.noUpfront": "5.733",
						"yrTerm1Standard.partialUpfront": "5.600",
						"yrTerm3Convertible.allUpfront": "5.072",
						"yrTerm3Convertible.noUpfront": "5.289",
						"yrTerm3Convertible.partialUpfront": "5.115",
						"yrTerm3Standard.allUpfront": "4.541",
						"yrTerm3Standard.noUpfront": "4.983",
						"yrTerm3Standard.partialUpfront": "4.832"
					}
				},
				"mswinSQL": {
					"ondemand": "20.419",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.595",
						"yrTerm1Standard.noUpfront": "16.230",
						"yrTerm1Standard.partialUpfront": "13.872",
						"yrTerm3Convertible.allUpfront": "13.303",
						"yrTerm3Convertible.noUpfront": "15.882",
						"yrTerm3Convertible.partialUpfront": "13.574",
						"yrTerm3Standard.allUpfront": "12.268",
						"yrTerm3Standard.noUpfront": "13.052",
						"yrTerm3Standard.partialUpfront": "13.052"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.521",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.375",
						"yrTerm1Standard.noUpfront": "6.418",
						"yrTerm1Standard.partialUpfront": "5.485",
						"yrTerm3Convertible.allUpfront": "5.083",
						"yrTerm3Convertible.noUpfront": "6.070",
						"yrTerm3Convertible.partialUpfront": "5.187",
						"yrTerm3Standard.allUpfront": "4.344",
						"yrTerm3Standard.noUpfront": "4.621",
						"yrTerm3Standard.partialUpfront": "4.621"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "3.936",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.195",
						"yrTerm1Standard.noUpfront": "2.352",
						"yrTerm1Standard.partialUpfront": "2.240",
						"yrTerm3Convertible.allUpfront": "1.803",
						"yrTerm3Convertible.noUpfront": "1.987",
						"yrTerm3Convertible.partialUpfront": "1.840",
						"yrTerm3Standard.allUpfront": "1.504",
						"yrTerm3Standard.noUpfront": "1.728",
						"yrTerm3Standard.partialUpfront": "1.600"
					}
				},
				"mswin": {
					"ondemand": "6.88",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.139",
						"yrTerm1Standard.noUpfront": "5.296",
						"yrTerm1Standard.partialUpfront": "5.184",
						"yrTerm3Convertible.allUpfront": "4.747",
						"yrTerm3Convertible.noUpfront": "4.931",
						"yrTerm3Convertible.partialUpfront": "4.784",
						"yrTerm3Standard.allUpfront": "4.448",
						"yrTerm3Standard.noUpfront": "4.672",
						"yrTerm3Standard.partialUpfront": "4.544"
					}
				},
				"mswinSQL": {
					"ondemand": "19.557",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.046",
						"yrTerm1Standard.noUpfront": "17.583",
						"yrTerm1Standard.partialUpfront": "17.102",
						"yrTerm3Convertible.allUpfront": "16.769",
						"yrTerm3Convertible.noUpfront": "17.252",
						"yrTerm3Convertible.partialUpfront": "16.819",
						"yrTerm3Standard.allUpfront": "16.200",
						"yrTerm3Standard.noUpfront": "16.323",
						"yrTerm3Standard.partialUpfront": "16.323"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.007",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.266",
						"yrTerm1Standard.noUpfront": "6.423",
						"yrTerm1Standard.partialUpfront": "6.311",
						"yrTerm3Convertible.allUpfront": "5.874",
						"yrTerm3Convertible.noUpfront": "6.058",
						"yrTerm3Convertible.partialUpfront": "5.911",
						"yrTerm3Standard.allUpfront": "5.575",
						"yrTerm3Standard.noUpfront": "5.799",
						"yrTerm3Standard.partialUpfront": "5.671"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "3.936",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.289",
						"yrTerm1Standard.noUpfront": "2.453",
						"yrTerm1Standard.partialUpfront": "2.336",
						"yrTerm3Convertible.allUpfront": "1.731",
						"yrTerm3Convertible.noUpfront": "1.908",
						"yrTerm3Convertible.partialUpfront": "1.766",
						"yrTerm3Standard.allUpfront": "1.444",
						"yrTerm3Standard.noUpfront": "1.659",
						"yrTerm3Standard.partialUpfront": "1.536"
					}
				},
				"mswin": {
					"ondemand": "6.88",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.233",
						"yrTerm1Standard.noUpfront": "5.397",
						"yrTerm1Standard.partialUpfront": "5.280",
						"yrTerm3Convertible.allUpfront": "4.675",
						"yrTerm3Convertible.noUpfront": "4.852",
						"yrTerm3Convertible.partialUpfront": "4.710",
						"yrTerm3Standard.allUpfront": "4.388",
						"yrTerm3Standard.noUpfront": "4.603",
						"yrTerm3Standard.partialUpfront": "4.480"
					}
				},
				"mswinSQL": {
					"ondemand": "19.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.442",
						"yrTerm1Standard.noUpfront": "18.056",
						"yrTerm1Standard.partialUpfront": "17.506",
						"yrTerm3Convertible.allUpfront": "17.125",
						"yrTerm3Convertible.noUpfront": "17.678",
						"yrTerm3Convertible.partialUpfront": "17.183",
						"yrTerm3Standard.allUpfront": "16.280",
						"yrTerm3Standard.noUpfront": "16.410",
						"yrTerm3Standard.partialUpfront": "16.410"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.007",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.360",
						"yrTerm1Standard.noUpfront": "6.524",
						"yrTerm1Standard.partialUpfront": "6.407",
						"yrTerm3Convertible.allUpfront": "5.802",
						"yrTerm3Convertible.noUpfront": "5.979",
						"yrTerm3Convertible.partialUpfront": "5.837",
						"yrTerm3Standard.allUpfront": "5.515",
						"yrTerm3Standard.noUpfront": "5.730",
						"yrTerm3Standard.partialUpfront": "5.607"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.321",
						"yrTerm1Standard.noUpfront": "2.486",
						"yrTerm1Standard.partialUpfront": "2.368",
						"yrTerm3Convertible.allUpfront": "1.767",
						"yrTerm3Convertible.noUpfront": "1.948",
						"yrTerm3Convertible.partialUpfront": "1.803",
						"yrTerm3Standard.allUpfront": "1.474",
						"yrTerm3Standard.noUpfront": "1.693",
						"yrTerm3Standard.partialUpfront": "1.568"
					}
				},
				"mswin": {
					"ondemand": "6.944",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.265",
						"yrTerm1Standard.noUpfront": "5.430",
						"yrTerm1Standard.partialUpfront": "5.312",
						"yrTerm3Convertible.allUpfront": "4.711",
						"yrTerm3Convertible.noUpfront": "4.892",
						"yrTerm3Convertible.partialUpfront": "4.747",
						"yrTerm3Standard.allUpfront": "4.418",
						"yrTerm3Standard.noUpfront": "4.637",
						"yrTerm3Standard.partialUpfront": "4.512"
					}
				},
				"mswinSQL": {
					"ondemand": "20.541",
					"reserved": {
						"yrTerm1Standard.allUpfront": "14.012",
						"yrTerm1Standard.noUpfront": "16.728",
						"yrTerm1Standard.partialUpfront": "14.297",
						"yrTerm3Convertible.allUpfront": "13.678",
						"yrTerm3Convertible.noUpfront": "16.330",
						"yrTerm3Convertible.partialUpfront": "13.957",
						"yrTerm3Standard.allUpfront": "12.354",
						"yrTerm3Standard.noUpfront": "13.142",
						"yrTerm3Standard.partialUpfront": "13.142"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.071",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.814",
						"yrTerm1Standard.noUpfront": "6.557",
						"yrTerm1Standard.partialUpfront": "5.933",
						"yrTerm3Convertible.allUpfront": "5.480",
						"yrTerm3Convertible.noUpfront": "6.019",
						"yrTerm3Convertible.partialUpfront": "5.593",
						"yrTerm3Standard.allUpfront": "4.434",
						"yrTerm3Standard.noUpfront": "4.717",
						"yrTerm3Standard.partialUpfront": "4.717"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.509",
						"yrTerm1Standard.noUpfront": "2.688",
						"yrTerm1Standard.partialUpfront": "2.560",
						"yrTerm3Convertible.allUpfront": "2.020",
						"yrTerm3Convertible.noUpfront": "2.226",
						"yrTerm3Convertible.partialUpfront": "2.061",
						"yrTerm3Standard.allUpfront": "1.685",
						"yrTerm3Standard.noUpfront": "1.935",
						"yrTerm3Standard.partialUpfront": "1.792"
					}
				},
				"mswin": {
					"ondemand": "6.944",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.453",
						"yrTerm1Standard.noUpfront": "5.632",
						"yrTerm1Standard.partialUpfront": "5.504",
						"yrTerm3Convertible.allUpfront": "4.964",
						"yrTerm3Convertible.noUpfront": "5.170",
						"yrTerm3Convertible.partialUpfront": "5.005",
						"yrTerm3Standard.allUpfront": "4.477",
						"yrTerm3Standard.noUpfront": "4.879",
						"yrTerm3Standard.partialUpfront": "4.736"
					}
				},
				"mswinSQL": {
					"ondemand": "20.237",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.863",
						"yrTerm1Standard.noUpfront": "16.550",
						"yrTerm1Standard.partialUpfront": "14.146",
						"yrTerm3Convertible.allUpfront": "13.544",
						"yrTerm3Convertible.noUpfront": "16.169",
						"yrTerm3Convertible.partialUpfront": "13.821",
						"yrTerm3Standard.allUpfront": "12.354",
						"yrTerm3Standard.noUpfront": "13.142",
						"yrTerm3Standard.partialUpfront": "13.142"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.071",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.657",
						"yrTerm1Standard.noUpfront": "6.754",
						"yrTerm1Standard.partialUpfront": "5.773",
						"yrTerm3Convertible.allUpfront": "5.338",
						"yrTerm3Convertible.noUpfront": "6.297",
						"yrTerm3Convertible.partialUpfront": "5.448",
						"yrTerm3Standard.allUpfront": "4.434",
						"yrTerm3Standard.noUpfront": "4.717",
						"yrTerm3Standard.partialUpfront": "4.717"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.552",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.038",
						"yrTerm1Standard.noUpfront": "2.184",
						"yrTerm1Standard.partialUpfront": "2.080",
						"yrTerm3Convertible.allUpfront": "1.587",
						"yrTerm3Convertible.noUpfront": "1.749",
						"yrTerm3Convertible.partialUpfront": "1.619",
						"yrTerm3Standard.allUpfront": "1.324",
						"yrTerm3Standard.noUpfront": "1.521",
						"yrTerm3Standard.partialUpfront": "1.408"
					}
				},
				"mswin": {
					"ondemand": "6.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.982",
						"yrTerm1Standard.noUpfront": "5.128",
						"yrTerm1Standard.partialUpfront": "5.024",
						"yrTerm3Convertible.allUpfront": "4.531",
						"yrTerm3Convertible.noUpfront": "4.693",
						"yrTerm3Convertible.partialUpfront": "4.563",
						"yrTerm3Standard.allUpfront": "4.268",
						"yrTerm3Standard.noUpfront": "4.465",
						"yrTerm3Standard.partialUpfront": "4.352"
					}
				},
				"mswinSQL": {
					"ondemand": "24.518",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.004",
						"yrTerm1Standard.noUpfront": "23.150",
						"yrTerm1Standard.partialUpfront": "23.046",
						"yrTerm3Convertible.allUpfront": "22.553",
						"yrTerm3Convertible.noUpfront": "22.715",
						"yrTerm3Convertible.partialUpfront": "22.585",
						"yrTerm3Standard.allUpfront": "22.290",
						"yrTerm3Standard.noUpfront": "22.487",
						"yrTerm3Standard.partialUpfront": "22.374"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.623",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.109",
						"yrTerm1Standard.noUpfront": "6.255",
						"yrTerm1Standard.partialUpfront": "6.151",
						"yrTerm3Convertible.allUpfront": "5.658",
						"yrTerm3Convertible.noUpfront": "5.820",
						"yrTerm3Convertible.partialUpfront": "5.690",
						"yrTerm3Standard.allUpfront": "5.395",
						"yrTerm3Standard.noUpfront": "5.592",
						"yrTerm3Standard.partialUpfront": "5.479"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "3.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.446",
						"yrTerm1Standard.noUpfront": "2.621",
						"yrTerm1Standard.partialUpfront": "2.496",
						"yrTerm3Convertible.allUpfront": "2.020",
						"yrTerm3Convertible.noUpfront": "2.226",
						"yrTerm3Convertible.partialUpfront": "2.061",
						"yrTerm3Standard.allUpfront": "1.685",
						"yrTerm3Standard.noUpfront": "1.935",
						"yrTerm3Standard.partialUpfront": "1.792"
					}
				},
				"mswin": {
					"ondemand": "6.784",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.390",
						"yrTerm1Standard.noUpfront": "5.565",
						"yrTerm1Standard.partialUpfront": "5.440",
						"yrTerm3Convertible.allUpfront": "4.964",
						"yrTerm3Convertible.noUpfront": "5.170",
						"yrTerm3Convertible.partialUpfront": "5.005",
						"yrTerm3Standard.allUpfront": "4.517",
						"yrTerm3Standard.noUpfront": "4.879",
						"yrTerm3Standard.partialUpfront": "4.736"
					}
				},
				"mswinSQL": {
					"ondemand": "19.416",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.595",
						"yrTerm1Standard.noUpfront": "16.230",
						"yrTerm1Standard.partialUpfront": "13.872",
						"yrTerm3Convertible.allUpfront": "13.303",
						"yrTerm3Convertible.noUpfront": "15.882",
						"yrTerm3Convertible.partialUpfront": "13.574",
						"yrTerm3Standard.allUpfront": "12.240",
						"yrTerm3Standard.noUpfront": "13.021",
						"yrTerm3Standard.partialUpfront": "13.021"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.099",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.375",
						"yrTerm1Standard.noUpfront": "6.418",
						"yrTerm1Standard.partialUpfront": "5.485",
						"yrTerm3Convertible.allUpfront": "5.083",
						"yrTerm3Convertible.noUpfront": "6.070",
						"yrTerm3Convertible.partialUpfront": "5.187",
						"yrTerm3Standard.allUpfront": "4.313",
						"yrTerm3Standard.noUpfront": "4.589",
						"yrTerm3Standard.partialUpfront": "4.589"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "3.552",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.258",
						"yrTerm1Standard.noUpfront": "2.419",
						"yrTerm1Standard.partialUpfront": "2.304",
						"yrTerm3Convertible.allUpfront": "1.803",
						"yrTerm3Convertible.noUpfront": "1.987",
						"yrTerm3Convertible.partialUpfront": "1.840",
						"yrTerm3Standard.allUpfront": "1.504",
						"yrTerm3Standard.noUpfront": "1.728",
						"yrTerm3Standard.partialUpfront": "1.600"
					}
				},
				"mswin": {
					"ondemand": "6.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.202",
						"yrTerm1Standard.noUpfront": "5.363",
						"yrTerm1Standard.partialUpfront": "5.248",
						"yrTerm3Convertible.allUpfront": "4.747",
						"yrTerm3Convertible.noUpfront": "4.931",
						"yrTerm3Convertible.partialUpfront": "4.784",
						"yrTerm3Standard.allUpfront": "4.448",
						"yrTerm3Standard.noUpfront": "4.672",
						"yrTerm3Standard.partialUpfront": "4.544"
					}
				},
				"mswinSQL": {
					"ondemand": "19.082",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.356",
						"yrTerm1Standard.noUpfront": "15.946",
						"yrTerm1Standard.partialUpfront": "13.629",
						"yrTerm3Convertible.allUpfront": "13.088",
						"yrTerm3Convertible.noUpfront": "15.626",
						"yrTerm3Convertible.partialUpfront": "13.355",
						"yrTerm3Standard.allUpfront": "12.068",
						"yrTerm3Standard.noUpfront": "12.838",
						"yrTerm3Standard.partialUpfront": "12.838"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.747",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.124",
						"yrTerm1Standard.noUpfront": "6.118",
						"yrTerm1Standard.partialUpfront": "5.229",
						"yrTerm3Convertible.allUpfront": "4.856",
						"yrTerm3Convertible.noUpfront": "5.798",
						"yrTerm3Convertible.partialUpfront": "4.955",
						"yrTerm3Standard.allUpfront": "4.133",
						"yrTerm3Standard.noUpfront": "4.397",
						"yrTerm3Standard.partialUpfront": "4.397"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.712",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.352",
						"yrTerm1Standard.noUpfront": "2.520",
						"yrTerm1Standard.partialUpfront": "2.400",
						"yrTerm3Convertible.allUpfront": "1.911",
						"yrTerm3Convertible.noUpfront": "2.106",
						"yrTerm3Convertible.partialUpfront": "1.950",
						"yrTerm3Standard.allUpfront": "1.594",
						"yrTerm3Standard.noUpfront": "1.832",
						"yrTerm3Standard.partialUpfront": "1.696"
					}
				},
				"mswin": {
					"ondemand": "6.656",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.296",
						"yrTerm1Standard.noUpfront": "5.464",
						"yrTerm1Standard.partialUpfront": "5.344",
						"yrTerm3Convertible.allUpfront": "4.855",
						"yrTerm3Convertible.noUpfront": "5.050",
						"yrTerm3Convertible.partialUpfront": "4.894",
						"yrTerm3Standard.allUpfront": "4.538",
						"yrTerm3Standard.noUpfront": "4.776",
						"yrTerm3Standard.partialUpfront": "4.640"
					}
				},
				"mswinSQL": {
					"ondemand": "24.678",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.318",
						"yrTerm1Standard.noUpfront": "23.486",
						"yrTerm1Standard.partialUpfront": "23.366",
						"yrTerm3Convertible.allUpfront": "22.877",
						"yrTerm3Convertible.noUpfront": "23.072",
						"yrTerm3Convertible.partialUpfront": "22.916",
						"yrTerm3Standard.allUpfront": "22.560",
						"yrTerm3Standard.noUpfront": "22.798",
						"yrTerm3Standard.partialUpfront": "22.662"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.783",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.423",
						"yrTerm1Standard.noUpfront": "6.591",
						"yrTerm1Standard.partialUpfront": "6.471",
						"yrTerm3Convertible.allUpfront": "5.982",
						"yrTerm3Convertible.noUpfront": "6.177",
						"yrTerm3Convertible.partialUpfront": "6.021",
						"yrTerm3Standard.allUpfront": "5.665",
						"yrTerm3Standard.noUpfront": "5.903",
						"yrTerm3Standard.partialUpfront": "5.767"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "5.088",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.697",
						"yrTerm1Standard.noUpfront": "2.890",
						"yrTerm1Standard.partialUpfront": "2.752",
						"yrTerm3Convertible.allUpfront": "2.308",
						"yrTerm3Convertible.noUpfront": "2.544",
						"yrTerm3Convertible.partialUpfront": "2.355",
						"yrTerm3Standard.allUpfront": "1.925",
						"yrTerm3Standard.noUpfront": "2.212",
						"yrTerm3Standard.partialUpfront": "2.048"
					}
				},
				"mswin": {
					"ondemand": "8.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.641",
						"yrTerm1Standard.noUpfront": "5.834",
						"yrTerm1Standard.partialUpfront": "5.696",
						"yrTerm3Convertible.allUpfront": "5.252",
						"yrTerm3Convertible.noUpfront": "5.488",
						"yrTerm3Convertible.partialUpfront": "5.299",
						"yrTerm3Standard.allUpfront": "4.869",
						"yrTerm3Standard.noUpfront": "5.156",
						"yrTerm3Standard.partialUpfront": "4.992"
					}
				},
				"mswinSQL": {
					"ondemand": "19.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.197",
						"yrTerm1Standard.noUpfront": "17.763",
						"yrTerm1Standard.partialUpfront": "17.256",
						"yrTerm3Convertible.allUpfront": "16.905",
						"yrTerm3Convertible.noUpfront": "17.414",
						"yrTerm3Convertible.partialUpfront": "16.958",
						"yrTerm3Standard.allUpfront": "16.355",
						"yrTerm3Standard.noUpfront": "16.488",
						"yrTerm3Standard.partialUpfront": "16.488"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.159",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.768",
						"yrTerm1Standard.noUpfront": "6.961",
						"yrTerm1Standard.partialUpfront": "6.823",
						"yrTerm3Convertible.allUpfront": "6.379",
						"yrTerm3Convertible.noUpfront": "6.615",
						"yrTerm3Convertible.partialUpfront": "6.426",
						"yrTerm3Standard.allUpfront": "5.996",
						"yrTerm3Standard.noUpfront": "6.283",
						"yrTerm3Standard.partialUpfront": "6.119"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "3.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.850",
						"yrTerm1Standard.noUpfront": "1.982",
						"yrTerm1Standard.partialUpfront": "1.888",
						"yrTerm3Convertible.allUpfront": "1.443",
						"yrTerm3Convertible.noUpfront": "1.590",
						"yrTerm3Convertible.partialUpfront": "1.472",
						"yrTerm3Standard.allUpfront": "1.203",
						"yrTerm3Standard.noUpfront": "1.382",
						"yrTerm3Standard.partialUpfront": "1.280"
					}
				},
				"mswin": {
					"ondemand": "6.144",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.794",
						"yrTerm1Standard.noUpfront": "4.926",
						"yrTerm1Standard.partialUpfront": "4.832",
						"yrTerm3Convertible.allUpfront": "4.387",
						"yrTerm3Convertible.noUpfront": "4.534",
						"yrTerm3Convertible.partialUpfront": "4.416",
						"yrTerm3Standard.allUpfront": "3.916",
						"yrTerm3Standard.noUpfront": "4.326",
						"yrTerm3Standard.partialUpfront": "4.166"
					}
				},
				"mswinSQL": {
					"ondemand": "18.686",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.880",
						"yrTerm1Standard.noUpfront": "15.376",
						"yrTerm1Standard.partialUpfront": "13.142",
						"yrTerm3Convertible.allUpfront": "12.660",
						"yrTerm3Convertible.noUpfront": "15.113",
						"yrTerm3Convertible.partialUpfront": "12.917",
						"yrTerm3Standard.allUpfront": "11.668",
						"yrTerm3Standard.noUpfront": "12.413",
						"yrTerm3Standard.partialUpfront": "12.413"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.331",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.622",
						"yrTerm1Standard.noUpfront": "5.518",
						"yrTerm1Standard.partialUpfront": "4.717",
						"yrTerm3Convertible.allUpfront": "4.402",
						"yrTerm3Convertible.noUpfront": "5.255",
						"yrTerm3Convertible.partialUpfront": "4.492",
						"yrTerm3Standard.allUpfront": "3.712",
						"yrTerm3Standard.noUpfront": "3.949",
						"yrTerm3Standard.partialUpfront": "3.949"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.850",
						"yrTerm1Standard.noUpfront": "1.982",
						"yrTerm1Standard.partialUpfront": "1.888",
						"yrTerm3Convertible.allUpfront": "1.443",
						"yrTerm3Convertible.noUpfront": "1.590",
						"yrTerm3Convertible.partialUpfront": "1.472",
						"yrTerm3Standard.allUpfront": "1.203",
						"yrTerm3Standard.noUpfront": "1.382",
						"yrTerm3Standard.partialUpfront": "1.280"
					}
				},
				"mswin": {
					"ondemand": "6.144",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.794",
						"yrTerm1Standard.noUpfront": "4.926",
						"yrTerm1Standard.partialUpfront": "4.832",
						"yrTerm3Convertible.allUpfront": "4.387",
						"yrTerm3Convertible.noUpfront": "4.534",
						"yrTerm3Convertible.partialUpfront": "4.416",
						"yrTerm3Standard.allUpfront": "3.916",
						"yrTerm3Standard.noUpfront": "4.326",
						"yrTerm3Standard.partialUpfront": "4.166"
					}
				},
				"mswinSQL": {
					"ondemand": "18.686",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.880",
						"yrTerm1Standard.noUpfront": "15.376",
						"yrTerm1Standard.partialUpfront": "13.142",
						"yrTerm3Convertible.allUpfront": "12.660",
						"yrTerm3Convertible.noUpfront": "15.113",
						"yrTerm3Convertible.partialUpfront": "12.917",
						"yrTerm3Standard.allUpfront": "11.668",
						"yrTerm3Standard.noUpfront": "12.413",
						"yrTerm3Standard.partialUpfront": "12.413"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.331",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.622",
						"yrTerm1Standard.noUpfront": "5.518",
						"yrTerm1Standard.partialUpfront": "4.717",
						"yrTerm3Convertible.allUpfront": "4.402",
						"yrTerm3Convertible.noUpfront": "5.255",
						"yrTerm3Convertible.partialUpfront": "4.492",
						"yrTerm3Standard.allUpfront": "3.712",
						"yrTerm3Standard.noUpfront": "3.949",
						"yrTerm3Standard.partialUpfront": "3.949"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "4.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.509",
						"yrTerm1Standard.noUpfront": "2.688",
						"yrTerm1Standard.partialUpfront": "2.560",
						"yrTerm3Convertible.allUpfront": "1.875",
						"yrTerm3Convertible.noUpfront": "2.067",
						"yrTerm3Convertible.partialUpfront": "1.914",
						"yrTerm3Standard.allUpfront": "1.564",
						"yrTerm3Standard.noUpfront": "1.797",
						"yrTerm3Standard.partialUpfront": "1.664"
					}
				},
				"mswin": {
					"ondemand": "6.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.453",
						"yrTerm1Standard.noUpfront": "5.632",
						"yrTerm1Standard.partialUpfront": "5.504",
						"yrTerm3Convertible.allUpfront": "4.819",
						"yrTerm3Convertible.noUpfront": "5.011",
						"yrTerm3Convertible.partialUpfront": "4.858",
						"yrTerm3Standard.allUpfront": "4.508",
						"yrTerm3Standard.noUpfront": "4.741",
						"yrTerm3Standard.partialUpfront": "4.608"
					}
				},
				"mswinSQL": {
					"ondemand": "19.112",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.235",
						"yrTerm1Standard.noUpfront": "17.810",
						"yrTerm1Standard.partialUpfront": "17.296",
						"yrTerm3Convertible.allUpfront": "16.968",
						"yrTerm3Convertible.noUpfront": "17.492",
						"yrTerm3Convertible.partialUpfront": "17.024",
						"yrTerm3Standard.allUpfront": "16.130",
						"yrTerm3Standard.noUpfront": "16.248",
						"yrTerm3Standard.partialUpfront": "16.248"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.103",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.580",
						"yrTerm1Standard.noUpfront": "6.759",
						"yrTerm1Standard.partialUpfront": "6.631",
						"yrTerm3Convertible.allUpfront": "5.946",
						"yrTerm3Convertible.noUpfront": "6.138",
						"yrTerm3Convertible.partialUpfront": "5.985",
						"yrTerm3Standard.allUpfront": "5.635",
						"yrTerm3Standard.noUpfront": "5.868",
						"yrTerm3Standard.partialUpfront": "5.735"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "3.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.540",
						"yrTerm1Standard.noUpfront": "2.722",
						"yrTerm1Standard.partialUpfront": "2.592",
						"yrTerm3Convertible.allUpfront": "1.948",
						"yrTerm3Convertible.noUpfront": "2.146",
						"yrTerm3Convertible.partialUpfront": "1.987",
						"yrTerm3Standard.allUpfront": "1.624",
						"yrTerm3Standard.noUpfront": "1.866",
						"yrTerm3Standard.partialUpfront": "1.728"
					}
				},
				"mswin": {
					"ondemand": "6.688",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.484",
						"yrTerm1Standard.noUpfront": "5.666",
						"yrTerm1Standard.partialUpfront": "5.536",
						"yrTerm3Convertible.allUpfront": "4.892",
						"yrTerm3Convertible.noUpfront": "5.090",
						"yrTerm3Convertible.partialUpfront": "4.931",
						"yrTerm3Standard.allUpfront": "4.562",
						"yrTerm3Standard.noUpfront": "4.810",
						"yrTerm3Standard.partialUpfront": "4.672"
					}
				},
				"mswinSQL": {
					"ondemand": "19.325",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.714",
						"yrTerm1Standard.noUpfront": "16.373",
						"yrTerm1Standard.partialUpfront": "13.993",
						"yrTerm3Convertible.allUpfront": "13.410",
						"yrTerm3Convertible.noUpfront": "16.010",
						"yrTerm3Convertible.partialUpfront": "13.683",
						"yrTerm3Standard.allUpfront": "12.182",
						"yrTerm3Standard.noUpfront": "12.960",
						"yrTerm3Standard.partialUpfront": "12.960"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.003",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.500",
						"yrTerm1Standard.noUpfront": "6.566",
						"yrTerm1Standard.partialUpfront": "5.613",
						"yrTerm3Convertible.allUpfront": "5.196",
						"yrTerm3Convertible.noUpfront": "6.203",
						"yrTerm3Convertible.partialUpfront": "5.303",
						"yrTerm3Standard.allUpfront": "4.253",
						"yrTerm3Standard.noUpfront": "4.525",
						"yrTerm3Standard.partialUpfront": "4.525"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "3.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.850",
						"yrTerm1Standard.noUpfront": "1.982",
						"yrTerm1Standard.partialUpfront": "1.888",
						"yrTerm3Convertible.allUpfront": "1.443",
						"yrTerm3Convertible.noUpfront": "1.590",
						"yrTerm3Convertible.partialUpfront": "1.472",
						"yrTerm3Standard.allUpfront": "1.203",
						"yrTerm3Standard.noUpfront": "1.382",
						"yrTerm3Standard.partialUpfront": "1.280"
					}
				},
				"mswin": {
					"ondemand": "6.144",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.794",
						"yrTerm1Standard.noUpfront": "4.926",
						"yrTerm1Standard.partialUpfront": "4.832",
						"yrTerm3Convertible.allUpfront": "4.387",
						"yrTerm3Convertible.noUpfront": "4.534",
						"yrTerm3Convertible.partialUpfront": "4.416",
						"yrTerm3Standard.allUpfront": "3.916",
						"yrTerm3Standard.noUpfront": "4.326",
						"yrTerm3Standard.partialUpfront": "4.166"
					}
				},
				"mswinSQL": {
					"ondemand": "18.686",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.880",
						"yrTerm1Standard.noUpfront": "15.376",
						"yrTerm1Standard.partialUpfront": "13.142",
						"yrTerm3Convertible.allUpfront": "12.660",
						"yrTerm3Convertible.noUpfront": "15.113",
						"yrTerm3Convertible.partialUpfront": "12.917",
						"yrTerm3Standard.allUpfront": "11.668",
						"yrTerm3Standard.noUpfront": "12.413",
						"yrTerm3Standard.partialUpfront": "12.413"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.331",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.622",
						"yrTerm1Standard.noUpfront": "5.518",
						"yrTerm1Standard.partialUpfront": "4.717",
						"yrTerm3Convertible.allUpfront": "4.402",
						"yrTerm3Convertible.noUpfront": "5.255",
						"yrTerm3Convertible.partialUpfront": "4.492",
						"yrTerm3Standard.allUpfront": "3.712",
						"yrTerm3Standard.noUpfront": "3.949",
						"yrTerm3Standard.partialUpfront": "3.949"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 64,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 3,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "m3.medium",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 3.75,
		"network_performance": "Moderate",
		"placement_group_support": false,
		"pretty_name": "M3 General Purpose Medium",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.096",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.054",
						"yrTerm1Standard.noUpfront": "0.064",
						"yrTerm1Standard.partialUpfront": "0.055",
						"yrTerm3Convertible.allUpfront": "0.048",
						"yrTerm3Convertible.noUpfront": "0.058",
						"yrTerm3Convertible.partialUpfront": "0.049",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.039"
					}
				},
				"mswin": {
					"ondemand": "0.146",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.095",
						"yrTerm1Standard.noUpfront": "0.114",
						"yrTerm1Standard.partialUpfront": "0.097",
						"yrTerm3Convertible.allUpfront": "0.090",
						"yrTerm3Convertible.noUpfront": "0.108",
						"yrTerm3Convertible.partialUpfront": "0.092",
						"yrTerm3Standard.allUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.081"
					}
				},
				"mswinSQL": {
					"ondemand": "0.353",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.211",
						"yrTerm1Standard.noUpfront": "0.253",
						"yrTerm1Standard.partialUpfront": "0.215",
						"yrTerm3Convertible.allUpfront": "0.206",
						"yrTerm3Convertible.noUpfront": "0.247",
						"yrTerm3Convertible.partialUpfront": "0.210",
						"yrTerm3Standard.allUpfront": "0.177",
						"yrTerm3Standard.partialUpfront": "0.189"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.182",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.124",
						"yrTerm1Standard.noUpfront": "0.149",
						"yrTerm1Standard.partialUpfront": "0.127",
						"yrTerm3Convertible.allUpfront": "0.119",
						"yrTerm3Convertible.noUpfront": "0.143",
						"yrTerm3Convertible.partialUpfront": "0.121",
						"yrTerm3Standard.allUpfront": "0.094",
						"yrTerm3Standard.partialUpfront": "0.100"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.098",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.058",
						"yrTerm1Standard.noUpfront": "0.068",
						"yrTerm1Standard.partialUpfront": "0.059",
						"yrTerm3Convertible.allUpfront": "0.052",
						"yrTerm3Convertible.noUpfront": "0.061",
						"yrTerm3Convertible.partialUpfront": "0.053",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.039"
					}
				},
				"mswin": {
					"ondemand": "0.161",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.097",
						"yrTerm1Standard.noUpfront": "0.116",
						"yrTerm1Standard.partialUpfront": "0.099",
						"yrTerm3Convertible.allUpfront": "0.092",
						"yrTerm3Convertible.noUpfront": "0.109",
						"yrTerm3Convertible.partialUpfront": "0.093",
						"yrTerm3Standard.allUpfront": "0.073",
						"yrTerm3Standard.partialUpfront": "0.077"
					}
				},
				"mswinSQL": {
					"ondemand": "0.356",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.204",
						"yrTerm1Standard.noUpfront": "0.243",
						"yrTerm1Standard.partialUpfront": "0.208",
						"yrTerm3Convertible.allUpfront": "0.198",
						"yrTerm3Convertible.noUpfront": "0.236",
						"yrTerm3Convertible.partialUpfront": "0.202",
						"yrTerm3Standard.allUpfront": "0.167",
						"yrTerm3Standard.partialUpfront": "0.178"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.187",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.124",
						"yrTerm1Standard.noUpfront": "0.148",
						"yrTerm1Standard.partialUpfront": "0.127",
						"yrTerm3Convertible.allUpfront": "0.118",
						"yrTerm3Convertible.noUpfront": "0.141",
						"yrTerm3Convertible.partialUpfront": "0.121",
						"yrTerm3Standard.allUpfront": "0.091",
						"yrTerm3Standard.partialUpfront": "0.097"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.093",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.055",
						"yrTerm1Standard.noUpfront": "0.065",
						"yrTerm1Standard.partialUpfront": "0.056",
						"yrTerm3Convertible.allUpfront": "0.050",
						"yrTerm3Convertible.noUpfront": "0.059",
						"yrTerm3Convertible.partialUpfront": "0.050",
						"yrTerm3Standard.allUpfront": "0.037",
						"yrTerm3Standard.partialUpfront": "0.039"
					}
				},
				"mswin": {
					"ondemand": "0.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.094",
						"yrTerm1Standard.noUpfront": "0.113",
						"yrTerm1Standard.partialUpfront": "0.096",
						"yrTerm3Convertible.allUpfront": "0.089",
						"yrTerm3Convertible.noUpfront": "0.107",
						"yrTerm3Convertible.partialUpfront": "0.091",
						"yrTerm3Standard.allUpfront": "0.073",
						"yrTerm3Standard.partialUpfront": "0.077"
					}
				},
				"mswinSQL": {
					"ondemand": "0.351",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.201",
						"yrTerm1Standard.noUpfront": "0.240",
						"yrTerm1Standard.partialUpfront": "0.205",
						"yrTerm3Convertible.allUpfront": "0.196",
						"yrTerm3Convertible.noUpfront": "0.234",
						"yrTerm3Convertible.partialUpfront": "0.199",
						"yrTerm3Standard.allUpfront": "0.167",
						"yrTerm3Standard.partialUpfront": "0.178"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.182",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.121",
						"yrTerm1Standard.noUpfront": "0.145",
						"yrTerm1Standard.partialUpfront": "0.125",
						"yrTerm3Convertible.allUpfront": "0.116",
						"yrTerm3Convertible.noUpfront": "0.139",
						"yrTerm3Convertible.partialUpfront": "0.119",
						"yrTerm3Standard.allUpfront": "0.091",
						"yrTerm3Standard.partialUpfront": "0.097"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.079",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.054",
						"yrTerm1Standard.noUpfront": "0.060",
						"yrTerm1Standard.partialUpfront": "0.055",
						"yrTerm3Convertible.allUpfront": "0.048",
						"yrTerm3Convertible.noUpfront": "0.054",
						"yrTerm3Convertible.partialUpfront": "0.050",
						"yrTerm3Standard.allUpfront": "0.036",
						"yrTerm3Standard.partialUpfront": "0.039"
					}
				},
				"mswin": {
					"ondemand": "0.142",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.097",
						"yrTerm1Standard.noUpfront": "0.116",
						"yrTerm1Standard.partialUpfront": "0.099",
						"yrTerm3Convertible.allUpfront": "0.092",
						"yrTerm3Convertible.noUpfront": "0.110",
						"yrTerm3Convertible.partialUpfront": "0.093",
						"yrTerm3Standard.allUpfront": "0.074",
						"yrTerm3Standard.partialUpfront": "0.079"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.243",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.119",
						"yrTerm1Standard.noUpfront": "0.143",
						"yrTerm1Standard.partialUpfront": "0.122",
						"yrTerm3Convertible.allUpfront": "0.114",
						"yrTerm3Convertible.noUpfront": "0.137",
						"yrTerm3Convertible.partialUpfront": "0.116",
						"yrTerm3Standard.allUpfront": "0.088",
						"yrTerm3Standard.partialUpfront": "0.094"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.073",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.050",
						"yrTerm1Standard.noUpfront": "0.055",
						"yrTerm1Standard.partialUpfront": "0.051",
						"yrTerm3Convertible.allUpfront": "0.045",
						"yrTerm3Convertible.noUpfront": "0.050",
						"yrTerm3Convertible.partialUpfront": "0.046",
						"yrTerm3Standard.allUpfront": "0.034",
						"yrTerm3Standard.partialUpfront": "0.036"
					}
				},
				"mswin": {
					"ondemand": "0.129",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.096",
						"yrTerm1Standard.noUpfront": "0.114",
						"yrTerm1Standard.partialUpfront": "0.097",
						"yrTerm3Convertible.allUpfront": "0.091",
						"yrTerm3Convertible.noUpfront": "0.109",
						"yrTerm3Convertible.partialUpfront": "0.092",
						"yrTerm3Standard.allUpfront": "0.074",
						"yrTerm3Standard.partialUpfront": "0.078"
					}
				},
				"mswinSQL": {
					"ondemand": "0.352",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.184",
						"yrTerm1Standard.noUpfront": "0.220",
						"yrTerm1Standard.partialUpfront": "0.187",
						"yrTerm3Convertible.allUpfront": "0.179",
						"yrTerm3Convertible.noUpfront": "0.215",
						"yrTerm3Convertible.partialUpfront": "0.182",
						"yrTerm3Standard.allUpfront": "0.155",
						"yrTerm3Standard.partialUpfront": "0.165"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.183",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.114",
						"yrTerm1Standard.noUpfront": "0.137",
						"yrTerm1Standard.partialUpfront": "0.118",
						"yrTerm3Convertible.allUpfront": "0.109",
						"yrTerm3Convertible.noUpfront": "0.132",
						"yrTerm3Convertible.partialUpfront": "0.113",
						"yrTerm3Standard.allUpfront": "0.086",
						"yrTerm3Standard.partialUpfront": "0.091"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.095",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.051",
						"yrTerm1Standard.noUpfront": "0.060",
						"yrTerm1Standard.partialUpfront": "0.052",
						"yrTerm3Convertible.allUpfront": "0.046",
						"yrTerm3Convertible.noUpfront": "0.054",
						"yrTerm3Convertible.partialUpfront": "0.047",
						"yrTerm3Standard.allUpfront": "0.036",
						"yrTerm3Standard.partialUpfront": "0.038"
					}
				},
				"mswin": {
					"ondemand": "0.158",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.141",
						"yrTerm1Standard.noUpfront": "0.149",
						"yrTerm1Standard.partialUpfront": "0.144",
						"yrTerm3Convertible.allUpfront": "0.136",
						"yrTerm3Convertible.noUpfront": "0.143",
						"yrTerm3Convertible.partialUpfront": "0.139",
						"yrTerm3Standard.allUpfront": "0.083",
						"yrTerm3Standard.partialUpfront": "0.088"
					}
				},
				"mswinSQL": {
					"ondemand": "0.419",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.245",
						"yrTerm1Standard.noUpfront": "0.293",
						"yrTerm1Standard.partialUpfront": "0.250",
						"yrTerm3Convertible.allUpfront": "0.240",
						"yrTerm3Convertible.noUpfront": "0.287",
						"yrTerm3Convertible.partialUpfront": "0.245",
						"yrTerm3Standard.allUpfront": "0.188",
						"yrTerm3Standard.partialUpfront": "0.200"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.235",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.159",
						"yrTerm1Standard.noUpfront": "0.189",
						"yrTerm1Standard.partialUpfront": "0.162",
						"yrTerm3Convertible.allUpfront": "0.154",
						"yrTerm3Convertible.noUpfront": "0.183",
						"yrTerm3Convertible.partialUpfront": "0.157",
						"yrTerm3Standard.allUpfront": "0.106",
						"yrTerm3Standard.partialUpfront": "0.112"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.067",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.040",
						"yrTerm1Standard.noUpfront": "0.048",
						"yrTerm1Standard.partialUpfront": "0.041",
						"yrTerm3Convertible.allUpfront": "0.036",
						"yrTerm3Convertible.noUpfront": "0.043",
						"yrTerm3Convertible.partialUpfront": "0.037",
						"yrTerm3Standard.allUpfront": "0.026",
						"yrTerm3Standard.partialUpfront": "0.028"
					}
				},
				"mswin": {
					"ondemand": "0.13",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.084",
						"yrTerm1Standard.noUpfront": "0.100",
						"yrTerm1Standard.partialUpfront": "0.084",
						"yrTerm3Convertible.allUpfront": "0.080",
						"yrTerm3Convertible.noUpfront": "0.095",
						"yrTerm3Convertible.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.064",
						"yrTerm3Standard.partialUpfront": "0.068"
					}
				},
				"mswinSQL": {
					"ondemand": "0.353",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.184",
						"yrTerm1Standard.noUpfront": "0.221",
						"yrTerm1Standard.partialUpfront": "0.188",
						"yrTerm3Convertible.allUpfront": "0.180",
						"yrTerm3Convertible.noUpfront": "0.216",
						"yrTerm3Convertible.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.155",
						"yrTerm3Standard.partialUpfront": "0.165"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.184",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.106",
						"yrTerm1Standard.noUpfront": "0.127",
						"yrTerm1Standard.partialUpfront": "0.108",
						"yrTerm3Convertible.allUpfront": "0.102",
						"yrTerm3Convertible.noUpfront": "0.122",
						"yrTerm3Convertible.partialUpfront": "0.104",
						"yrTerm3Standard.allUpfront": "0.079",
						"yrTerm3Standard.partialUpfront": "0.084"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.050",
						"yrTerm1Standard.noUpfront": "0.061",
						"yrTerm1Standard.partialUpfront": "0.053",
						"yrTerm3Convertible.allUpfront": "0.045",
						"yrTerm3Convertible.noUpfront": "0.055",
						"yrTerm3Convertible.partialUpfront": "0.047",
						"yrTerm3Standard.allUpfront": "0.032",
						"yrTerm3Standard.partialUpfront": "0.035"
					}
				},
				"mswin": {
					"ondemand": "0.147",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.086",
						"yrTerm1Standard.noUpfront": "0.110",
						"yrTerm1Standard.partialUpfront": "0.094",
						"yrTerm3Convertible.allUpfront": "0.081",
						"yrTerm3Convertible.noUpfront": "0.104",
						"yrTerm3Convertible.partialUpfront": "0.089",
						"yrTerm3Standard.allUpfront": "0.068",
						"yrTerm3Standard.partialUpfront": "0.077"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.222",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.140",
						"yrTerm1Standard.noUpfront": "0.179",
						"yrTerm1Standard.partialUpfront": "0.153",
						"yrTerm3Convertible.allUpfront": "0.135",
						"yrTerm3Convertible.noUpfront": "0.173",
						"yrTerm3Convertible.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.110",
						"yrTerm3Standard.partialUpfront": "0.120"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.077",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.053",
						"yrTerm1Standard.noUpfront": "0.058",
						"yrTerm1Standard.partialUpfront": "0.054",
						"yrTerm3Convertible.allUpfront": "0.048",
						"yrTerm3Convertible.noUpfront": "0.052",
						"yrTerm3Convertible.partialUpfront": "0.049",
						"yrTerm3Standard.allUpfront": "0.034",
						"yrTerm3Standard.partialUpfront": "0.036"
					}
				},
				"mswin": {
					"ondemand": "0.14",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.098",
						"yrTerm1Standard.noUpfront": "0.117",
						"yrTerm1Standard.partialUpfront": "0.100",
						"yrTerm3Convertible.allUpfront": "0.093",
						"yrTerm3Convertible.noUpfront": "0.111",
						"yrTerm3Convertible.partialUpfront": "0.095",
						"yrTerm3Standard.allUpfront": "0.074",
						"yrTerm3Standard.partialUpfront": "0.078"
					}
				},
				"mswinSQL": {
					"ondemand": "0.374",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.204",
						"yrTerm1Standard.noUpfront": "0.243",
						"yrTerm1Standard.partialUpfront": "0.208",
						"yrTerm3Convertible.allUpfront": "0.198",
						"yrTerm3Convertible.noUpfront": "0.237",
						"yrTerm3Convertible.partialUpfront": "0.202",
						"yrTerm3Standard.allUpfront": "0.167",
						"yrTerm3Standard.partialUpfront": "0.178"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.201",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.124",
						"yrTerm1Standard.noUpfront": "0.148",
						"yrTerm1Standard.partialUpfront": "0.127",
						"yrTerm3Convertible.allUpfront": "0.119",
						"yrTerm3Convertible.noUpfront": "0.142",
						"yrTerm3Convertible.partialUpfront": "0.121",
						"yrTerm3Standard.allUpfront": "0.091",
						"yrTerm3Standard.partialUpfront": "0.097"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.067",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.040",
						"yrTerm1Standard.noUpfront": "0.048",
						"yrTerm1Standard.partialUpfront": "0.041",
						"yrTerm3Convertible.allUpfront": "0.036",
						"yrTerm3Convertible.noUpfront": "0.043",
						"yrTerm3Convertible.partialUpfront": "0.037",
						"yrTerm3Standard.allUpfront": "0.026",
						"yrTerm3Standard.partialUpfront": "0.028"
					}
				},
				"mswin": {
					"ondemand": "0.13",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.084",
						"yrTerm1Standard.noUpfront": "0.100",
						"yrTerm1Standard.partialUpfront": "0.084",
						"yrTerm3Convertible.allUpfront": "0.080",
						"yrTerm3Convertible.noUpfront": "0.095",
						"yrTerm3Convertible.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.064",
						"yrTerm3Standard.partialUpfront": "0.068"
					}
				},
				"mswinSQL": {
					"ondemand": "0.353",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.184",
						"yrTerm1Standard.noUpfront": "0.221",
						"yrTerm1Standard.partialUpfront": "0.188",
						"yrTerm3Convertible.allUpfront": "0.180",
						"yrTerm3Convertible.noUpfront": "0.216",
						"yrTerm3Convertible.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.155",
						"yrTerm3Standard.partialUpfront": "0.165"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.184",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.106",
						"yrTerm1Standard.noUpfront": "0.127",
						"yrTerm1Standard.partialUpfront": "0.108",
						"yrTerm3Convertible.allUpfront": "0.102",
						"yrTerm3Convertible.noUpfront": "0.122",
						"yrTerm3Convertible.partialUpfront": "0.104",
						"yrTerm3Standard.allUpfront": "0.079",
						"yrTerm3Standard.partialUpfront": "0.084"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 4,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 1,
		"vpc": {
			"ips_per_eni": 6,
			"max_enis": 2
		},
		"vpc_only": false
	},
	{
		"ECU": 6.5,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "m3.large",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 7.5,
		"network_performance": "Moderate",
		"placement_group_support": false,
		"pretty_name": "M3 General Purpose Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.193",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.109",
						"yrTerm1Standard.noUpfront": "0.127",
						"yrTerm1Standard.partialUpfront": "0.111",
						"yrTerm3Convertible.allUpfront": "0.098",
						"yrTerm3Convertible.noUpfront": "0.114",
						"yrTerm3Convertible.partialUpfront": "0.100",
						"yrTerm3Standard.allUpfront": "0.074",
						"yrTerm3Standard.partialUpfront": "0.079"
					}
				},
				"mswin": {
					"ondemand": "0.292",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.191",
						"yrTerm1Standard.noUpfront": "0.228",
						"yrTerm1Standard.partialUpfront": "0.195",
						"yrTerm3Convertible.allUpfront": "0.181",
						"yrTerm3Convertible.noUpfront": "0.215",
						"yrTerm3Convertible.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.partialUpfront": "0.159"
					}
				},
				"mswinSQL": {
					"ondemand": "0.706",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.422",
						"yrTerm1Standard.noUpfront": "0.504",
						"yrTerm1Standard.partialUpfront": "0.432",
						"yrTerm3Convertible.allUpfront": "0.411",
						"yrTerm3Convertible.noUpfront": "0.491",
						"yrTerm3Convertible.partialUpfront": "0.420",
						"yrTerm3Standard.allUpfront": "0.356",
						"yrTerm3Standard.partialUpfront": "0.378"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.364",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.237",
						"yrTerm1Standard.noUpfront": "0.283",
						"yrTerm1Standard.partialUpfront": "0.243",
						"yrTerm3Convertible.allUpfront": "0.227",
						"yrTerm3Convertible.noUpfront": "0.270",
						"yrTerm3Convertible.partialUpfront": "0.232",
						"yrTerm3Standard.allUpfront": "0.180",
						"yrTerm3Standard.partialUpfront": "0.192"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.196",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.116",
						"yrTerm1Standard.noUpfront": "0.136",
						"yrTerm1Standard.partialUpfront": "0.118",
						"yrTerm3Convertible.allUpfront": "0.104",
						"yrTerm3Convertible.noUpfront": "0.122",
						"yrTerm3Convertible.partialUpfront": "0.106",
						"yrTerm3Standard.allUpfront": "0.074",
						"yrTerm3Standard.partialUpfront": "0.078"
					}
				},
				"mswin": {
					"ondemand": "0.322",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.193",
						"yrTerm1Standard.noUpfront": "0.230",
						"yrTerm1Standard.partialUpfront": "0.197",
						"yrTerm3Convertible.allUpfront": "0.181",
						"yrTerm3Convertible.noUpfront": "0.216",
						"yrTerm3Convertible.partialUpfront": "0.185",
						"yrTerm3Standard.allUpfront": "0.144",
						"yrTerm3Standard.partialUpfront": "0.153"
					}
				},
				"mswinSQL": {
					"ondemand": "0.711",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.407",
						"yrTerm1Standard.noUpfront": "0.485",
						"yrTerm1Standard.partialUpfront": "0.415",
						"yrTerm3Convertible.allUpfront": "0.395",
						"yrTerm3Convertible.noUpfront": "0.471",
						"yrTerm3Convertible.partialUpfront": "0.403",
						"yrTerm3Standard.allUpfront": "0.335",
						"yrTerm3Standard.partialUpfront": "0.356"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.374",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.235",
						"yrTerm1Standard.noUpfront": "0.281",
						"yrTerm1Standard.partialUpfront": "0.240",
						"yrTerm3Convertible.allUpfront": "0.224",
						"yrTerm3Convertible.noUpfront": "0.267",
						"yrTerm3Convertible.partialUpfront": "0.228",
						"yrTerm3Standard.allUpfront": "0.173",
						"yrTerm3Standard.partialUpfront": "0.185"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.186",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.110",
						"yrTerm1Standard.noUpfront": "0.129",
						"yrTerm1Standard.partialUpfront": "0.112",
						"yrTerm3Convertible.allUpfront": "0.099",
						"yrTerm3Convertible.noUpfront": "0.116",
						"yrTerm3Convertible.partialUpfront": "0.101",
						"yrTerm3Standard.allUpfront": "0.074",
						"yrTerm3Standard.partialUpfront": "0.078"
					}
				},
				"mswin": {
					"ondemand": "0.312",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.187",
						"yrTerm1Standard.noUpfront": "0.223",
						"yrTerm1Standard.partialUpfront": "0.191",
						"yrTerm3Convertible.allUpfront": "0.176",
						"yrTerm3Convertible.noUpfront": "0.210",
						"yrTerm3Convertible.partialUpfront": "0.180",
						"yrTerm3Standard.allUpfront": "0.144",
						"yrTerm3Standard.partialUpfront": "0.153"
					}
				},
				"mswinSQL": {
					"ondemand": "0.701",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.401",
						"yrTerm1Standard.noUpfront": "0.478",
						"yrTerm1Standard.partialUpfront": "0.410",
						"yrTerm3Convertible.allUpfront": "0.390",
						"yrTerm3Convertible.noUpfront": "0.465",
						"yrTerm3Convertible.partialUpfront": "0.398",
						"yrTerm3Standard.allUpfront": "0.335",
						"yrTerm3Standard.partialUpfront": "0.356"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.364",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.229",
						"yrTerm1Standard.noUpfront": "0.274",
						"yrTerm1Standard.partialUpfront": "0.234",
						"yrTerm3Convertible.allUpfront": "0.218",
						"yrTerm3Convertible.noUpfront": "0.261",
						"yrTerm3Convertible.partialUpfront": "0.223",
						"yrTerm3Standard.allUpfront": "0.173",
						"yrTerm3Standard.partialUpfront": "0.185"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.158",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.108",
						"yrTerm1Standard.noUpfront": "0.120",
						"yrTerm1Standard.partialUpfront": "0.110",
						"yrTerm3Convertible.allUpfront": "0.097",
						"yrTerm3Convertible.noUpfront": "0.108",
						"yrTerm3Convertible.partialUpfront": "0.099",
						"yrTerm3Standard.allUpfront": "0.073",
						"yrTerm3Standard.partialUpfront": "0.077"
					}
				},
				"mswin": {
					"ondemand": "0.284",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.193",
						"yrTerm1Standard.noUpfront": "0.231",
						"yrTerm1Standard.partialUpfront": "0.198",
						"yrTerm3Convertible.allUpfront": "0.183",
						"yrTerm3Convertible.noUpfront": "0.219",
						"yrTerm3Convertible.partialUpfront": "0.187",
						"yrTerm3Standard.allUpfront": "0.148",
						"yrTerm3Standard.partialUpfront": "0.157"
					}
				},
				"mswinSQL": {
					"ondemand": "1.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.717",
						"yrTerm1Standard.noUpfront": "0.858",
						"yrTerm1Standard.partialUpfront": "0.732",
						"yrTerm3Convertible.allUpfront": "0.707",
						"yrTerm3Convertible.noUpfront": "0.846",
						"yrTerm3Convertible.partialUpfront": "0.721",
						"yrTerm3Standard.allUpfront": "0.612",
						"yrTerm3Standard.partialUpfront": "0.652"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.466",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.226",
						"yrTerm1Standard.noUpfront": "0.271",
						"yrTerm1Standard.partialUpfront": "0.231",
						"yrTerm3Convertible.allUpfront": "0.216",
						"yrTerm3Convertible.noUpfront": "0.259",
						"yrTerm3Convertible.partialUpfront": "0.220",
						"yrTerm3Standard.allUpfront": "0.171",
						"yrTerm3Standard.partialUpfront": "0.181"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.146",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.100",
						"yrTerm1Standard.noUpfront": "0.110",
						"yrTerm1Standard.partialUpfront": "0.102",
						"yrTerm3Convertible.allUpfront": "0.090",
						"yrTerm3Convertible.noUpfront": "0.099",
						"yrTerm3Convertible.partialUpfront": "0.092",
						"yrTerm3Standard.allUpfront": "0.067",
						"yrTerm3Standard.partialUpfront": "0.072"
					}
				},
				"mswin": {
					"ondemand": "0.258",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.192",
						"yrTerm1Standard.noUpfront": "0.229",
						"yrTerm1Standard.partialUpfront": "0.196",
						"yrTerm3Convertible.allUpfront": "0.182",
						"yrTerm3Convertible.noUpfront": "0.218",
						"yrTerm3Convertible.partialUpfront": "0.186",
						"yrTerm3Standard.allUpfront": "0.147",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswinSQL": {
					"ondemand": "0.703",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.369",
						"yrTerm1Standard.noUpfront": "0.441",
						"yrTerm1Standard.partialUpfront": "0.377",
						"yrTerm3Convertible.allUpfront": "0.359",
						"yrTerm3Convertible.noUpfront": "0.430",
						"yrTerm3Convertible.partialUpfront": "0.366",
						"yrTerm3Standard.allUpfront": "0.310",
						"yrTerm3Standard.partialUpfront": "0.330"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.366",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.217",
						"yrTerm1Standard.noUpfront": "0.259",
						"yrTerm1Standard.partialUpfront": "0.220",
						"yrTerm3Convertible.allUpfront": "0.207",
						"yrTerm3Convertible.noUpfront": "0.248",
						"yrTerm3Convertible.partialUpfront": "0.210",
						"yrTerm3Standard.allUpfront": "0.164",
						"yrTerm3Standard.partialUpfront": "0.174"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.19",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.101",
						"yrTerm1Standard.noUpfront": "0.120",
						"yrTerm1Standard.partialUpfront": "0.103",
						"yrTerm3Convertible.allUpfront": "0.091",
						"yrTerm3Convertible.noUpfront": "0.108",
						"yrTerm3Convertible.partialUpfront": "0.093",
						"yrTerm3Standard.allUpfront": "0.073",
						"yrTerm3Standard.partialUpfront": "0.078"
					}
				},
				"mswin": {
					"ondemand": "0.316",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.280",
						"yrTerm1Standard.noUpfront": "0.296",
						"yrTerm1Standard.partialUpfront": "0.286",
						"yrTerm3Convertible.allUpfront": "0.270",
						"yrTerm3Convertible.noUpfront": "0.284",
						"yrTerm3Convertible.partialUpfront": "0.275",
						"yrTerm3Standard.allUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.178"
					}
				},
				"mswinSQL": {
					"ondemand": "0.837",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.490",
						"yrTerm1Standard.noUpfront": "0.585",
						"yrTerm1Standard.partialUpfront": "0.500",
						"yrTerm3Convertible.allUpfront": "0.480",
						"yrTerm3Convertible.noUpfront": "0.573",
						"yrTerm3Convertible.partialUpfront": "0.490",
						"yrTerm3Standard.allUpfront": "0.375",
						"yrTerm3Standard.partialUpfront": "0.398"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.469",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.300",
						"yrTerm1Standard.noUpfront": "0.358",
						"yrTerm1Standard.partialUpfront": "0.306",
						"yrTerm3Convertible.allUpfront": "0.290",
						"yrTerm3Convertible.noUpfront": "0.346",
						"yrTerm3Convertible.partialUpfront": "0.296",
						"yrTerm3Standard.allUpfront": "0.201",
						"yrTerm3Standard.partialUpfront": "0.214"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.133",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.081",
						"yrTerm1Standard.noUpfront": "0.095",
						"yrTerm1Standard.partialUpfront": "0.083",
						"yrTerm3Convertible.allUpfront": "0.073",
						"yrTerm3Convertible.noUpfront": "0.086",
						"yrTerm3Convertible.partialUpfront": "0.075",
						"yrTerm3Standard.allUpfront": "0.052",
						"yrTerm3Standard.partialUpfront": "0.056"
					}
				},
				"mswin": {
					"ondemand": "0.259",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.167",
						"yrTerm1Standard.noUpfront": "0.199",
						"yrTerm1Standard.partialUpfront": "0.170",
						"yrTerm3Convertible.allUpfront": "0.159",
						"yrTerm3Convertible.noUpfront": "0.190",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.127",
						"yrTerm3Standard.partialUpfront": "0.135"
					}
				},
				"mswinSQL": {
					"ondemand": "0.704",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.370",
						"yrTerm1Standard.noUpfront": "0.442",
						"yrTerm1Standard.partialUpfront": "0.378",
						"yrTerm3Convertible.allUpfront": "0.362",
						"yrTerm3Convertible.noUpfront": "0.433",
						"yrTerm3Convertible.partialUpfront": "0.370",
						"yrTerm3Standard.allUpfront": "0.310",
						"yrTerm3Standard.partialUpfront": "0.330"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.367",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.200",
						"yrTerm1Standard.noUpfront": "0.239",
						"yrTerm1Standard.partialUpfront": "0.205",
						"yrTerm3Convertible.allUpfront": "0.192",
						"yrTerm3Convertible.noUpfront": "0.230",
						"yrTerm3Convertible.partialUpfront": "0.197",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.partialUpfront": "0.160"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.168",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.100",
						"yrTerm1Standard.noUpfront": "0.122",
						"yrTerm1Standard.partialUpfront": "0.105",
						"yrTerm3Convertible.allUpfront": "0.090",
						"yrTerm3Convertible.noUpfront": "0.110",
						"yrTerm3Convertible.partialUpfront": "0.095",
						"yrTerm3Standard.allUpfront": "0.064",
						"yrTerm3Standard.partialUpfront": "0.069"
					}
				},
				"mswin": {
					"ondemand": "0.294",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.173",
						"yrTerm1Standard.noUpfront": "0.221",
						"yrTerm1Standard.partialUpfront": "0.189",
						"yrTerm3Convertible.allUpfront": "0.163",
						"yrTerm3Convertible.noUpfront": "0.209",
						"yrTerm3Convertible.partialUpfront": "0.178",
						"yrTerm3Standard.allUpfront": "0.136",
						"yrTerm3Standard.partialUpfront": "0.152"
					}
				},
				"mswinSQL": {
					"ondemand": "0.798",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.578",
						"yrTerm1Standard.noUpfront": "0.753",
						"yrTerm1Standard.partialUpfront": "0.644",
						"yrTerm3Convertible.allUpfront": "0.568",
						"yrTerm3Convertible.noUpfront": "0.741",
						"yrTerm3Convertible.partialUpfront": "0.633",
						"yrTerm3Standard.allUpfront": "0.499",
						"yrTerm3Standard.partialUpfront": "0.556"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.444",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.278",
						"yrTerm1Standard.noUpfront": "0.358",
						"yrTerm1Standard.partialUpfront": "0.306",
						"yrTerm3Convertible.allUpfront": "0.268",
						"yrTerm3Convertible.noUpfront": "0.346",
						"yrTerm3Convertible.partialUpfront": "0.295",
						"yrTerm3Standard.allUpfront": "0.219",
						"yrTerm3Standard.partialUpfront": "0.241"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.154",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.105",
						"yrTerm1Standard.noUpfront": "0.116",
						"yrTerm1Standard.partialUpfront": "0.108",
						"yrTerm3Convertible.allUpfront": "0.095",
						"yrTerm3Convertible.noUpfront": "0.104",
						"yrTerm3Convertible.partialUpfront": "0.097",
						"yrTerm3Standard.allUpfront": "0.067",
						"yrTerm3Standard.partialUpfront": "0.072"
					}
				},
				"mswin": {
					"ondemand": "0.28",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.197",
						"yrTerm1Standard.noUpfront": "0.235",
						"yrTerm1Standard.partialUpfront": "0.201",
						"yrTerm3Convertible.allUpfront": "0.186",
						"yrTerm3Convertible.noUpfront": "0.223",
						"yrTerm3Convertible.partialUpfront": "0.190",
						"yrTerm3Standard.allUpfront": "0.146",
						"yrTerm3Standard.partialUpfront": "0.155"
					}
				},
				"mswinSQL": {
					"ondemand": "0.747",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.407",
						"yrTerm1Standard.noUpfront": "0.485",
						"yrTerm1Standard.partialUpfront": "0.415",
						"yrTerm3Convertible.allUpfront": "0.396",
						"yrTerm3Convertible.noUpfront": "0.473",
						"yrTerm3Convertible.partialUpfront": "0.404",
						"yrTerm3Standard.allUpfront": "0.335",
						"yrTerm3Standard.partialUpfront": "0.356"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.401",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.235",
						"yrTerm1Standard.noUpfront": "0.281",
						"yrTerm1Standard.partialUpfront": "0.240",
						"yrTerm3Convertible.allUpfront": "0.225",
						"yrTerm3Convertible.noUpfront": "0.269",
						"yrTerm3Convertible.partialUpfront": "0.229",
						"yrTerm3Standard.allUpfront": "0.173",
						"yrTerm3Standard.partialUpfront": "0.185"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.133",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.081",
						"yrTerm1Standard.noUpfront": "0.095",
						"yrTerm1Standard.partialUpfront": "0.083",
						"yrTerm3Convertible.allUpfront": "0.073",
						"yrTerm3Convertible.noUpfront": "0.086",
						"yrTerm3Convertible.partialUpfront": "0.075",
						"yrTerm3Standard.allUpfront": "0.052",
						"yrTerm3Standard.partialUpfront": "0.056"
					}
				},
				"mswin": {
					"ondemand": "0.259",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.167",
						"yrTerm1Standard.noUpfront": "0.199",
						"yrTerm1Standard.partialUpfront": "0.170",
						"yrTerm3Convertible.allUpfront": "0.159",
						"yrTerm3Convertible.noUpfront": "0.190",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.127",
						"yrTerm3Standard.partialUpfront": "0.135"
					}
				},
				"mswinSQL": {
					"ondemand": "0.704",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.370",
						"yrTerm1Standard.noUpfront": "0.442",
						"yrTerm1Standard.partialUpfront": "0.378",
						"yrTerm3Convertible.allUpfront": "0.362",
						"yrTerm3Convertible.noUpfront": "0.433",
						"yrTerm3Convertible.partialUpfront": "0.370",
						"yrTerm3Standard.allUpfront": "0.310",
						"yrTerm3Standard.partialUpfront": "0.330"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.367",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.200",
						"yrTerm1Standard.noUpfront": "0.239",
						"yrTerm1Standard.partialUpfront": "0.205",
						"yrTerm3Convertible.allUpfront": "0.192",
						"yrTerm3Convertible.noUpfront": "0.230",
						"yrTerm3Convertible.partialUpfront": "0.197",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.partialUpfront": "0.160"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 32,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 10,
			"max_enis": 3
		},
		"vpc_only": false
	},
	{
		"ECU": 13,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 4000,
		"ebs_max_bandwidth": 500,
		"ebs_optimized": true,
		"ebs_throughput": 62.5,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "m3.xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 15,
		"network_performance": "High",
		"placement_group_support": false,
		"pretty_name": "M3 General Purpose Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.385",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.218",
						"yrTerm1Standard.noUpfront": "0.255",
						"yrTerm1Standard.partialUpfront": "0.223",
						"yrTerm3Convertible.allUpfront": "0.196",
						"yrTerm3Convertible.noUpfront": "0.230",
						"yrTerm3Convertible.partialUpfront": "0.200",
						"yrTerm3Standard.allUpfront": "0.147",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswin": {
					"ondemand": "0.583",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.382",
						"yrTerm1Standard.noUpfront": "0.457",
						"yrTerm1Standard.partialUpfront": "0.390",
						"yrTerm3Convertible.allUpfront": "0.360",
						"yrTerm3Convertible.noUpfront": "0.432",
						"yrTerm3Convertible.partialUpfront": "0.367",
						"yrTerm3Standard.allUpfront": "0.298",
						"yrTerm3Standard.partialUpfront": "0.317"
					}
				},
				"mswinSQL": {
					"ondemand": "1.333",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.845",
						"yrTerm1Standard.noUpfront": "1.009",
						"yrTerm1Standard.partialUpfront": "0.862",
						"yrTerm3Convertible.allUpfront": "0.823",
						"yrTerm3Convertible.noUpfront": "0.984",
						"yrTerm3Convertible.partialUpfront": "0.840",
						"yrTerm3Standard.allUpfront": "0.710",
						"yrTerm3Standard.partialUpfront": "0.756"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.728",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.473",
						"yrTerm1Standard.noUpfront": "0.564",
						"yrTerm1Standard.partialUpfront": "0.482",
						"yrTerm3Convertible.allUpfront": "0.451",
						"yrTerm3Convertible.noUpfront": "0.539",
						"yrTerm3Convertible.partialUpfront": "0.459",
						"yrTerm3Standard.allUpfront": "0.359",
						"yrTerm3Standard.partialUpfront": "0.382"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.025"
			},
			"ap-southeast-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.392",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.231",
						"yrTerm1Standard.noUpfront": "0.272",
						"yrTerm1Standard.partialUpfront": "0.236",
						"yrTerm3Convertible.allUpfront": "0.208",
						"yrTerm3Convertible.noUpfront": "0.245",
						"yrTerm3Convertible.partialUpfront": "0.212",
						"yrTerm3Standard.allUpfront": "0.147",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswin": {
					"ondemand": "0.644",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.385",
						"yrTerm1Standard.noUpfront": "0.460",
						"yrTerm1Standard.partialUpfront": "0.393",
						"yrTerm3Convertible.allUpfront": "0.362",
						"yrTerm3Convertible.noUpfront": "0.433",
						"yrTerm3Convertible.partialUpfront": "0.369",
						"yrTerm3Standard.allUpfront": "0.288",
						"yrTerm3Standard.partialUpfront": "0.307"
					}
				},
				"mswinSQL": {
					"ondemand": "1.28",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.813",
						"yrTerm1Standard.noUpfront": "0.971",
						"yrTerm1Standard.partialUpfront": "0.830",
						"yrTerm3Convertible.allUpfront": "0.790",
						"yrTerm3Convertible.noUpfront": "0.944",
						"yrTerm3Convertible.partialUpfront": "0.806",
						"yrTerm3Standard.allUpfront": "0.668",
						"yrTerm3Standard.partialUpfront": "0.711"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.748",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.472",
						"yrTerm1Standard.noUpfront": "0.563",
						"yrTerm1Standard.partialUpfront": "0.481",
						"yrTerm3Convertible.allUpfront": "0.448",
						"yrTerm3Convertible.noUpfront": "0.536",
						"yrTerm3Convertible.partialUpfront": "0.458",
						"yrTerm3Standard.allUpfront": "0.346",
						"yrTerm3Standard.partialUpfront": "0.368"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.372",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.220",
						"yrTerm1Standard.noUpfront": "0.258",
						"yrTerm1Standard.partialUpfront": "0.224",
						"yrTerm3Convertible.allUpfront": "0.198",
						"yrTerm3Convertible.noUpfront": "0.232",
						"yrTerm3Convertible.partialUpfront": "0.202",
						"yrTerm3Standard.allUpfront": "0.147",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswin": {
					"ondemand": "0.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.374",
						"yrTerm1Standard.noUpfront": "0.446",
						"yrTerm1Standard.partialUpfront": "0.381",
						"yrTerm3Convertible.allUpfront": "0.352",
						"yrTerm3Convertible.noUpfront": "0.420",
						"yrTerm3Convertible.partialUpfront": "0.358",
						"yrTerm3Standard.allUpfront": "0.288",
						"yrTerm3Standard.partialUpfront": "0.307"
					}
				},
				"mswinSQL": {
					"ondemand": "1.26",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.802",
						"yrTerm1Standard.noUpfront": "0.957",
						"yrTerm1Standard.partialUpfront": "0.818",
						"yrTerm3Convertible.allUpfront": "0.780",
						"yrTerm3Convertible.noUpfront": "0.931",
						"yrTerm3Convertible.partialUpfront": "0.796",
						"yrTerm3Standard.allUpfront": "0.668",
						"yrTerm3Standard.partialUpfront": "0.711"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.728",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.460",
						"yrTerm1Standard.noUpfront": "0.549",
						"yrTerm1Standard.partialUpfront": "0.469",
						"yrTerm3Convertible.allUpfront": "0.438",
						"yrTerm3Convertible.noUpfront": "0.523",
						"yrTerm3Convertible.partialUpfront": "0.447",
						"yrTerm3Standard.allUpfront": "0.346",
						"yrTerm3Standard.partialUpfront": "0.368"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.315",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.215",
						"yrTerm1Standard.noUpfront": "0.239",
						"yrTerm1Standard.partialUpfront": "0.219",
						"yrTerm3Convertible.allUpfront": "0.194",
						"yrTerm3Convertible.noUpfront": "0.215",
						"yrTerm3Convertible.partialUpfront": "0.197",
						"yrTerm3Standard.allUpfront": "0.144",
						"yrTerm3Standard.partialUpfront": "0.154"
					}
				},
				"mswin": {
					"ondemand": "0.567",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.385",
						"yrTerm1Standard.noUpfront": "0.460",
						"yrTerm1Standard.partialUpfront": "0.393",
						"yrTerm3Convertible.allUpfront": "0.363",
						"yrTerm3Convertible.noUpfront": "0.436",
						"yrTerm3Convertible.partialUpfront": "0.371",
						"yrTerm3Standard.allUpfront": "0.295",
						"yrTerm3Standard.partialUpfront": "0.314"
					}
				},
				"mswinSQL": {
					"ondemand": "1.778",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.055",
						"yrTerm1Standard.noUpfront": "1.259",
						"yrTerm1Standard.partialUpfront": "1.076",
						"yrTerm3Convertible.allUpfront": "1.033",
						"yrTerm3Convertible.noUpfront": "1.235",
						"yrTerm3Convertible.partialUpfront": "1.054",
						"yrTerm3Standard.allUpfront": "0.900",
						"yrTerm3Standard.partialUpfront": "0.957"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.882",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.454",
						"yrTerm1Standard.noUpfront": "0.542",
						"yrTerm1Standard.partialUpfront": "0.463",
						"yrTerm3Convertible.allUpfront": "0.432",
						"yrTerm3Convertible.noUpfront": "0.518",
						"yrTerm3Convertible.partialUpfront": "0.441",
						"yrTerm3Standard.allUpfront": "0.339",
						"yrTerm3Standard.partialUpfront": "0.361"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.293",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.199",
						"yrTerm1Standard.noUpfront": "0.220",
						"yrTerm1Standard.partialUpfront": "0.203",
						"yrTerm3Convertible.allUpfront": "0.179",
						"yrTerm3Convertible.noUpfront": "0.198",
						"yrTerm3Convertible.partialUpfront": "0.183",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				},
				"mswin": {
					"ondemand": "0.517",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.381",
						"yrTerm1Standard.noUpfront": "0.455",
						"yrTerm1Standard.partialUpfront": "0.388",
						"yrTerm3Convertible.allUpfront": "0.361",
						"yrTerm3Convertible.noUpfront": "0.433",
						"yrTerm3Convertible.partialUpfront": "0.368",
						"yrTerm3Standard.allUpfront": "0.293",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswinSQL": {
					"ondemand": "1.265",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.737",
						"yrTerm1Standard.noUpfront": "0.880",
						"yrTerm1Standard.partialUpfront": "0.751",
						"yrTerm3Convertible.allUpfront": "0.717",
						"yrTerm3Convertible.noUpfront": "0.858",
						"yrTerm3Convertible.partialUpfront": "0.730",
						"yrTerm3Standard.allUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.659"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.733",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.434",
						"yrTerm1Standard.noUpfront": "0.518",
						"yrTerm1Standard.partialUpfront": "0.443",
						"yrTerm3Convertible.allUpfront": "0.414",
						"yrTerm3Convertible.noUpfront": "0.496",
						"yrTerm3Convertible.partialUpfront": "0.422",
						"yrTerm3Standard.allUpfront": "0.326",
						"yrTerm3Standard.partialUpfront": "0.346"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.381",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.203",
						"yrTerm1Standard.noUpfront": "0.240",
						"yrTerm1Standard.partialUpfront": "0.207",
						"yrTerm3Convertible.allUpfront": "0.183",
						"yrTerm3Convertible.noUpfront": "0.216",
						"yrTerm3Convertible.partialUpfront": "0.187",
						"yrTerm3Standard.allUpfront": "0.145",
						"yrTerm3Standard.partialUpfront": "0.154"
					}
				},
				"mswin": {
					"ondemand": "0.633",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.561",
						"yrTerm1Standard.noUpfront": "0.593",
						"yrTerm1Standard.partialUpfront": "0.572",
						"yrTerm3Convertible.allUpfront": "0.541",
						"yrTerm3Convertible.noUpfront": "0.569",
						"yrTerm3Convertible.partialUpfront": "0.552",
						"yrTerm3Standard.allUpfront": "0.333",
						"yrTerm3Standard.partialUpfront": "0.355"
					}
				},
				"mswinSQL": {
					"ondemand": "1.507",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.980",
						"yrTerm1Standard.noUpfront": "1.170",
						"yrTerm1Standard.partialUpfront": "1.000",
						"yrTerm3Convertible.allUpfront": "0.960",
						"yrTerm3Convertible.noUpfront": "1.146",
						"yrTerm3Convertible.partialUpfront": "0.980",
						"yrTerm3Standard.allUpfront": "0.749",
						"yrTerm3Standard.partialUpfront": "0.797"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.939",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.599",
						"yrTerm1Standard.noUpfront": "0.715",
						"yrTerm1Standard.partialUpfront": "0.612",
						"yrTerm3Convertible.allUpfront": "0.579",
						"yrTerm3Convertible.noUpfront": "0.691",
						"yrTerm3Convertible.partialUpfront": "0.591",
						"yrTerm3Standard.allUpfront": "0.401",
						"yrTerm3Standard.partialUpfront": "0.427"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.163",
						"yrTerm1Standard.noUpfront": "0.190",
						"yrTerm1Standard.partialUpfront": "0.166",
						"yrTerm3Convertible.allUpfront": "0.147",
						"yrTerm3Convertible.noUpfront": "0.171",
						"yrTerm3Convertible.partialUpfront": "0.150",
						"yrTerm3Standard.allUpfront": "0.105",
						"yrTerm3Standard.partialUpfront": "0.111"
					}
				},
				"mswin": {
					"ondemand": "0.518",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.333",
						"yrTerm1Standard.noUpfront": "0.397",
						"yrTerm1Standard.partialUpfront": "0.340",
						"yrTerm3Convertible.allUpfront": "0.316",
						"yrTerm3Convertible.noUpfront": "0.378",
						"yrTerm3Convertible.partialUpfront": "0.323",
						"yrTerm3Standard.allUpfront": "0.255",
						"yrTerm3Standard.partialUpfront": "0.272"
					}
				},
				"mswinSQL": {
					"ondemand": "1.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.739",
						"yrTerm1Standard.noUpfront": "0.882",
						"yrTerm1Standard.partialUpfront": "0.754",
						"yrTerm3Convertible.allUpfront": "0.722",
						"yrTerm3Convertible.noUpfront": "0.863",
						"yrTerm3Convertible.partialUpfront": "0.737",
						"yrTerm3Standard.allUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.659"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.734",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.401",
						"yrTerm1Standard.noUpfront": "0.479",
						"yrTerm1Standard.partialUpfront": "0.410",
						"yrTerm3Convertible.allUpfront": "0.385",
						"yrTerm3Convertible.noUpfront": "0.460",
						"yrTerm3Convertible.partialUpfront": "0.393",
						"yrTerm3Standard.allUpfront": "0.300",
						"yrTerm3Standard.partialUpfront": "0.319"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.336",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.199",
						"yrTerm1Standard.noUpfront": "0.244",
						"yrTerm1Standard.partialUpfront": "0.210",
						"yrTerm3Convertible.allUpfront": "0.179",
						"yrTerm3Convertible.noUpfront": "0.220",
						"yrTerm3Convertible.partialUpfront": "0.189",
						"yrTerm3Standard.allUpfront": "0.128",
						"yrTerm3Standard.partialUpfront": "0.138"
					}
				},
				"mswin": {
					"ondemand": "0.588",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.345",
						"yrTerm1Standard.noUpfront": "0.441",
						"yrTerm1Standard.partialUpfront": "0.377",
						"yrTerm3Convertible.allUpfront": "0.325",
						"yrTerm3Convertible.noUpfront": "0.417",
						"yrTerm3Convertible.partialUpfront": "0.356",
						"yrTerm3Standard.allUpfront": "0.270",
						"yrTerm3Standard.partialUpfront": "0.303"
					}
				},
				"mswinSQL": {
					"ondemand": "1.436",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.723",
						"yrTerm1Standard.noUpfront": "0.942",
						"yrTerm1Standard.partialUpfront": "0.805",
						"yrTerm3Convertible.allUpfront": "0.703",
						"yrTerm3Convertible.noUpfront": "0.918",
						"yrTerm3Convertible.partialUpfront": "0.784",
						"yrTerm3Standard.allUpfront": "0.624",
						"yrTerm3Standard.partialUpfront": "0.695"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.887",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.398",
						"yrTerm1Standard.noUpfront": "0.511",
						"yrTerm1Standard.partialUpfront": "0.437",
						"yrTerm3Convertible.allUpfront": "0.378",
						"yrTerm3Convertible.noUpfront": "0.487",
						"yrTerm3Convertible.partialUpfront": "0.416",
						"yrTerm3Standard.allUpfront": "0.313",
						"yrTerm3Standard.partialUpfront": "0.344"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.308",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.210",
						"yrTerm1Standard.noUpfront": "0.232",
						"yrTerm1Standard.partialUpfront": "0.214",
						"yrTerm3Convertible.allUpfront": "0.189",
						"yrTerm3Convertible.noUpfront": "0.209",
						"yrTerm3Convertible.partialUpfront": "0.193",
						"yrTerm3Standard.allUpfront": "0.135",
						"yrTerm3Standard.partialUpfront": "0.143"
					}
				},
				"mswin": {
					"ondemand": "0.56",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.391",
						"yrTerm1Standard.noUpfront": "0.467",
						"yrTerm1Standard.partialUpfront": "0.399",
						"yrTerm3Convertible.allUpfront": "0.370",
						"yrTerm3Convertible.noUpfront": "0.444",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.293",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswinSQL": {
					"ondemand": "1.345",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.813",
						"yrTerm1Standard.noUpfront": "0.971",
						"yrTerm1Standard.partialUpfront": "0.830",
						"yrTerm3Convertible.allUpfront": "0.792",
						"yrTerm3Convertible.noUpfront": "0.948",
						"yrTerm3Convertible.partialUpfront": "0.808",
						"yrTerm3Standard.allUpfront": "0.668",
						"yrTerm3Standard.partialUpfront": "0.711"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.803",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.472",
						"yrTerm1Standard.noUpfront": "0.563",
						"yrTerm1Standard.partialUpfront": "0.481",
						"yrTerm3Convertible.allUpfront": "0.451",
						"yrTerm3Convertible.noUpfront": "0.540",
						"yrTerm3Convertible.partialUpfront": "0.460",
						"yrTerm3Standard.allUpfront": "0.346",
						"yrTerm3Standard.partialUpfront": "0.368"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.025",
				"linux": {
					"ondemand": "0.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.163",
						"yrTerm1Standard.noUpfront": "0.190",
						"yrTerm1Standard.partialUpfront": "0.166",
						"yrTerm3Convertible.allUpfront": "0.147",
						"yrTerm3Convertible.noUpfront": "0.171",
						"yrTerm3Convertible.partialUpfront": "0.150",
						"yrTerm3Standard.allUpfront": "0.105",
						"yrTerm3Standard.partialUpfront": "0.111"
					}
				},
				"mswin": {
					"ondemand": "0.518",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.333",
						"yrTerm1Standard.noUpfront": "0.397",
						"yrTerm1Standard.partialUpfront": "0.340",
						"yrTerm3Convertible.allUpfront": "0.316",
						"yrTerm3Convertible.noUpfront": "0.378",
						"yrTerm3Convertible.partialUpfront": "0.323",
						"yrTerm3Standard.allUpfront": "0.255",
						"yrTerm3Standard.partialUpfront": "0.272"
					}
				},
				"mswinSQL": {
					"ondemand": "1.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.739",
						"yrTerm1Standard.noUpfront": "0.882",
						"yrTerm1Standard.partialUpfront": "0.754",
						"yrTerm3Convertible.allUpfront": "0.722",
						"yrTerm3Convertible.noUpfront": "0.863",
						"yrTerm3Convertible.partialUpfront": "0.737",
						"yrTerm3Standard.allUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.659"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.734",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.401",
						"yrTerm1Standard.noUpfront": "0.479",
						"yrTerm1Standard.partialUpfront": "0.410",
						"yrTerm3Convertible.allUpfront": "0.385",
						"yrTerm3Convertible.noUpfront": "0.460",
						"yrTerm3Convertible.partialUpfront": "0.393",
						"yrTerm3Standard.allUpfront": "0.300",
						"yrTerm3Standard.partialUpfront": "0.319"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 40,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 26,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": false,
		"family": "General purpose",
		"generation": "current",
		"instance_type": "m3.2xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 30,
		"network_performance": "High",
		"placement_group_support": false,
		"pretty_name": "M3 General Purpose Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.77",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.436",
						"yrTerm1Standard.noUpfront": "0.509",
						"yrTerm1Standard.partialUpfront": "0.445",
						"yrTerm3Convertible.allUpfront": "0.392",
						"yrTerm3Convertible.noUpfront": "0.458",
						"yrTerm3Convertible.partialUpfront": "0.401",
						"yrTerm3Standard.allUpfront": "0.294",
						"yrTerm3Standard.partialUpfront": "0.313"
					}
				},
				"mswin": {
					"ondemand": "1.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.762",
						"yrTerm1Standard.noUpfront": "0.910",
						"yrTerm1Standard.partialUpfront": "0.778",
						"yrTerm3Convertible.allUpfront": "0.719",
						"yrTerm3Convertible.noUpfront": "0.859",
						"yrTerm3Convertible.partialUpfront": "0.733",
						"yrTerm3Standard.allUpfront": "0.595",
						"yrTerm3Standard.partialUpfront": "0.633"
					}
				},
				"mswinSQL": {
					"ondemand": "2.665",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.553",
						"yrTerm1Standard.noUpfront": "1.854",
						"yrTerm1Standard.partialUpfront": "1.585",
						"yrTerm3Convertible.allUpfront": "1.510",
						"yrTerm3Convertible.noUpfront": "1.803",
						"yrTerm3Convertible.partialUpfront": "1.540",
						"yrTerm3Standard.allUpfront": "1.308",
						"yrTerm3Standard.partialUpfront": "1.391"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.456",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.945",
						"yrTerm1Standard.noUpfront": "1.128",
						"yrTerm1Standard.partialUpfront": "0.964",
						"yrTerm3Convertible.allUpfront": "0.902",
						"yrTerm3Convertible.noUpfront": "1.077",
						"yrTerm3Convertible.partialUpfront": "0.919",
						"yrTerm3Standard.allUpfront": "0.719",
						"yrTerm3Standard.partialUpfront": "0.765"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.05"
			},
			"ap-southeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.784",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.462",
						"yrTerm1Standard.noUpfront": "0.544",
						"yrTerm1Standard.partialUpfront": "0.472",
						"yrTerm3Convertible.allUpfront": "0.416",
						"yrTerm3Convertible.noUpfront": "0.490",
						"yrTerm3Convertible.partialUpfront": "0.425",
						"yrTerm3Standard.allUpfront": "0.294",
						"yrTerm3Standard.partialUpfront": "0.313"
					}
				},
				"mswin": {
					"ondemand": "1.288",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.771",
						"yrTerm1Standard.noUpfront": "0.921",
						"yrTerm1Standard.partialUpfront": "0.787",
						"yrTerm3Convertible.allUpfront": "0.725",
						"yrTerm3Convertible.noUpfront": "0.867",
						"yrTerm3Convertible.partialUpfront": "0.740",
						"yrTerm3Standard.allUpfront": "0.575",
						"yrTerm3Standard.partialUpfront": "0.612"
					}
				},
				"mswinSQL": {
					"ondemand": "2.56",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.495",
						"yrTerm1Standard.noUpfront": "1.785",
						"yrTerm1Standard.partialUpfront": "1.526",
						"yrTerm3Convertible.allUpfront": "1.449",
						"yrTerm3Convertible.noUpfront": "1.731",
						"yrTerm3Convertible.partialUpfront": "1.479",
						"yrTerm3Standard.allUpfront": "1.230",
						"yrTerm3Standard.partialUpfront": "1.308"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.944",
						"yrTerm1Standard.noUpfront": "1.127",
						"yrTerm1Standard.partialUpfront": "0.963",
						"yrTerm3Convertible.allUpfront": "0.898",
						"yrTerm3Convertible.noUpfront": "1.073",
						"yrTerm3Convertible.partialUpfront": "0.916",
						"yrTerm3Standard.allUpfront": "0.693",
						"yrTerm3Standard.partialUpfront": "0.737"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.745",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.439",
						"yrTerm1Standard.noUpfront": "0.517",
						"yrTerm1Standard.partialUpfront": "0.449",
						"yrTerm3Convertible.allUpfront": "0.395",
						"yrTerm3Convertible.noUpfront": "0.465",
						"yrTerm3Convertible.partialUpfront": "0.404",
						"yrTerm3Standard.allUpfront": "0.294",
						"yrTerm3Standard.partialUpfront": "0.313"
					}
				},
				"mswin": {
					"ondemand": "1.249",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.748",
						"yrTerm1Standard.noUpfront": "0.894",
						"yrTerm1Standard.partialUpfront": "0.764",
						"yrTerm3Convertible.allUpfront": "0.704",
						"yrTerm3Convertible.noUpfront": "0.842",
						"yrTerm3Convertible.partialUpfront": "0.719",
						"yrTerm3Standard.allUpfront": "0.575",
						"yrTerm3Standard.partialUpfront": "0.612"
					}
				},
				"mswinSQL": {
					"ondemand": "2.521",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.472",
						"yrTerm1Standard.noUpfront": "1.758",
						"yrTerm1Standard.partialUpfront": "1.503",
						"yrTerm3Convertible.allUpfront": "1.428",
						"yrTerm3Convertible.noUpfront": "1.706",
						"yrTerm3Convertible.partialUpfront": "1.458",
						"yrTerm3Standard.allUpfront": "1.230",
						"yrTerm3Standard.partialUpfront": "1.308"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.457",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.921",
						"yrTerm1Standard.noUpfront": "1.100",
						"yrTerm1Standard.partialUpfront": "0.940",
						"yrTerm3Convertible.allUpfront": "0.877",
						"yrTerm3Convertible.noUpfront": "1.048",
						"yrTerm3Convertible.partialUpfront": "0.895",
						"yrTerm3Standard.allUpfront": "0.693",
						"yrTerm3Standard.partialUpfront": "0.737"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.632",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.430",
						"yrTerm1Standard.noUpfront": "0.479",
						"yrTerm1Standard.partialUpfront": "0.439",
						"yrTerm3Convertible.allUpfront": "0.387",
						"yrTerm3Convertible.noUpfront": "0.431",
						"yrTerm3Convertible.partialUpfront": "0.395",
						"yrTerm3Standard.allUpfront": "0.289",
						"yrTerm3Standard.partialUpfront": "0.307"
					}
				},
				"mswin": {
					"ondemand": "1.136",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.770",
						"yrTerm1Standard.noUpfront": "0.921",
						"yrTerm1Standard.partialUpfront": "0.785",
						"yrTerm3Convertible.allUpfront": "0.727",
						"yrTerm3Convertible.noUpfront": "0.873",
						"yrTerm3Convertible.partialUpfront": "0.741",
						"yrTerm3Standard.allUpfront": "0.590",
						"yrTerm3Standard.partialUpfront": "0.628"
					}
				},
				"mswinSQL": {
					"ondemand": "3.537",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.097",
						"yrTerm1Standard.noUpfront": "2.506",
						"yrTerm1Standard.partialUpfront": "2.140",
						"yrTerm3Convertible.allUpfront": "2.054",
						"yrTerm3Convertible.noUpfront": "2.458",
						"yrTerm3Convertible.partialUpfront": "2.096",
						"yrTerm3Standard.allUpfront": "1.791",
						"yrTerm3Standard.partialUpfront": "1.905"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.829",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.908",
						"yrTerm1Standard.noUpfront": "1.085",
						"yrTerm1Standard.partialUpfront": "0.926",
						"yrTerm3Convertible.allUpfront": "0.865",
						"yrTerm3Convertible.noUpfront": "1.037",
						"yrTerm3Convertible.partialUpfront": "0.882",
						"yrTerm3Standard.allUpfront": "0.680",
						"yrTerm3Standard.partialUpfront": "0.723"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.585",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.398",
						"yrTerm1Standard.noUpfront": "0.441",
						"yrTerm1Standard.partialUpfront": "0.406",
						"yrTerm3Convertible.allUpfront": "0.358",
						"yrTerm3Convertible.noUpfront": "0.397",
						"yrTerm3Convertible.partialUpfront": "0.366",
						"yrTerm3Standard.allUpfront": "0.267",
						"yrTerm3Standard.partialUpfront": "0.284"
					}
				},
				"mswin": {
					"ondemand": "1.033",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.762",
						"yrTerm1Standard.noUpfront": "0.912",
						"yrTerm1Standard.partialUpfront": "0.778",
						"yrTerm3Convertible.allUpfront": "0.722",
						"yrTerm3Convertible.noUpfront": "0.868",
						"yrTerm3Convertible.partialUpfront": "0.737",
						"yrTerm3Standard.allUpfront": "0.584",
						"yrTerm3Standard.partialUpfront": "0.621"
					}
				},
				"mswinSQL": {
					"ondemand": "2.529",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.387",
						"yrTerm1Standard.noUpfront": "1.658",
						"yrTerm1Standard.partialUpfront": "1.416",
						"yrTerm3Convertible.allUpfront": "1.347",
						"yrTerm3Convertible.noUpfront": "1.614",
						"yrTerm3Convertible.partialUpfront": "1.375",
						"yrTerm3Standard.allUpfront": "1.157",
						"yrTerm3Standard.partialUpfront": "1.230"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.465",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.866",
						"yrTerm1Standard.noUpfront": "1.037",
						"yrTerm1Standard.partialUpfront": "0.884",
						"yrTerm3Convertible.allUpfront": "0.826",
						"yrTerm3Convertible.noUpfront": "0.993",
						"yrTerm3Convertible.partialUpfront": "0.844",
						"yrTerm3Standard.allUpfront": "0.652",
						"yrTerm3Standard.partialUpfront": "0.693"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.761",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.406",
						"yrTerm1Standard.noUpfront": "0.480",
						"yrTerm1Standard.partialUpfront": "0.415",
						"yrTerm3Convertible.allUpfront": "0.366",
						"yrTerm3Convertible.noUpfront": "0.432",
						"yrTerm3Convertible.partialUpfront": "0.373",
						"yrTerm3Standard.allUpfront": "0.289",
						"yrTerm3Standard.partialUpfront": "0.307"
					}
				},
				"mswin": {
					"ondemand": "1.265",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.121",
						"yrTerm1Standard.noUpfront": "1.184",
						"yrTerm1Standard.partialUpfront": "1.143",
						"yrTerm3Convertible.allUpfront": "1.080",
						"yrTerm3Convertible.noUpfront": "1.136",
						"yrTerm3Convertible.partialUpfront": "1.102",
						"yrTerm3Standard.allUpfront": "0.668",
						"yrTerm3Standard.partialUpfront": "0.711"
					}
				},
				"mswinSQL": {
					"ondemand": "3.013",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.961",
						"yrTerm1Standard.noUpfront": "2.341",
						"yrTerm1Standard.partialUpfront": "2.001",
						"yrTerm3Convertible.allUpfront": "1.920",
						"yrTerm3Convertible.noUpfront": "2.293",
						"yrTerm3Convertible.partialUpfront": "1.959",
						"yrTerm3Standard.allUpfront": "1.497",
						"yrTerm3Standard.partialUpfront": "1.593"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.877",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.199",
						"yrTerm1Standard.noUpfront": "1.431",
						"yrTerm1Standard.partialUpfront": "1.223",
						"yrTerm3Convertible.allUpfront": "1.158",
						"yrTerm3Convertible.noUpfront": "1.383",
						"yrTerm3Convertible.partialUpfront": "1.182",
						"yrTerm3Standard.allUpfront": "0.804",
						"yrTerm3Standard.partialUpfront": "0.855"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.324",
						"yrTerm1Standard.noUpfront": "0.380",
						"yrTerm1Standard.partialUpfront": "0.331",
						"yrTerm3Convertible.allUpfront": "0.292",
						"yrTerm3Convertible.noUpfront": "0.342",
						"yrTerm3Convertible.partialUpfront": "0.298",
						"yrTerm3Standard.allUpfront": "0.209",
						"yrTerm3Standard.partialUpfront": "0.222"
					}
				},
				"mswin": {
					"ondemand": "1.036",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.664",
						"yrTerm1Standard.noUpfront": "0.793",
						"yrTerm1Standard.partialUpfront": "0.678",
						"yrTerm3Convertible.allUpfront": "0.632",
						"yrTerm3Convertible.noUpfront": "0.755",
						"yrTerm3Convertible.partialUpfront": "0.645",
						"yrTerm3Standard.allUpfront": "0.511",
						"yrTerm3Standard.partialUpfront": "0.543"
					}
				},
				"mswinSQL": {
					"ondemand": "2.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.391",
						"yrTerm1Standard.noUpfront": "1.661",
						"yrTerm1Standard.partialUpfront": "1.420",
						"yrTerm3Convertible.allUpfront": "1.359",
						"yrTerm3Convertible.noUpfront": "1.623",
						"yrTerm3Convertible.partialUpfront": "1.387",
						"yrTerm3Standard.allUpfront": "1.157",
						"yrTerm3Standard.partialUpfront": "1.230"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.468",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.802",
						"yrTerm1Standard.noUpfront": "0.957",
						"yrTerm1Standard.partialUpfront": "0.817",
						"yrTerm3Convertible.allUpfront": "0.770",
						"yrTerm3Convertible.noUpfront": "0.919",
						"yrTerm3Convertible.partialUpfront": "0.784",
						"yrTerm3Standard.allUpfront": "0.600",
						"yrTerm3Standard.partialUpfront": "0.638"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.399",
						"yrTerm1Standard.noUpfront": "0.488",
						"yrTerm1Standard.partialUpfront": "0.420",
						"yrTerm3Convertible.allUpfront": "0.359",
						"yrTerm3Convertible.noUpfront": "0.439",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.255",
						"yrTerm3Standard.partialUpfront": "0.275"
					}
				},
				"mswin": {
					"ondemand": "1.176",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.690",
						"yrTerm1Standard.noUpfront": "0.883",
						"yrTerm1Standard.partialUpfront": "0.755",
						"yrTerm3Convertible.allUpfront": "0.650",
						"yrTerm3Convertible.noUpfront": "0.834",
						"yrTerm3Convertible.partialUpfront": "0.713",
						"yrTerm3Standard.allUpfront": "0.542",
						"yrTerm3Standard.partialUpfront": "0.607"
					}
				},
				"mswinSQL": {
					"ondemand": "2.871",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.330",
						"yrTerm1Standard.noUpfront": "1.733",
						"yrTerm1Standard.partialUpfront": "1.481",
						"yrTerm3Convertible.allUpfront": "1.290",
						"yrTerm3Convertible.noUpfront": "1.684",
						"yrTerm3Convertible.partialUpfront": "1.439",
						"yrTerm3Standard.allUpfront": "1.149",
						"yrTerm3Standard.partialUpfront": "1.280"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.774",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.796",
						"yrTerm1Standard.noUpfront": "1.023",
						"yrTerm1Standard.partialUpfront": "0.874",
						"yrTerm3Convertible.allUpfront": "0.756",
						"yrTerm3Convertible.noUpfront": "0.974",
						"yrTerm3Convertible.partialUpfront": "0.832",
						"yrTerm3Standard.allUpfront": "0.627",
						"yrTerm3Standard.partialUpfront": "0.690"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.616",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.422",
						"yrTerm1Standard.noUpfront": "0.464",
						"yrTerm1Standard.partialUpfront": "0.430",
						"yrTerm3Convertible.allUpfront": "0.379",
						"yrTerm3Convertible.noUpfront": "0.418",
						"yrTerm3Convertible.partialUpfront": "0.387",
						"yrTerm3Standard.allUpfront": "0.268",
						"yrTerm3Standard.partialUpfront": "0.285"
					}
				},
				"mswin": {
					"ondemand": "1.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.783",
						"yrTerm1Standard.noUpfront": "0.935",
						"yrTerm1Standard.partialUpfront": "0.799",
						"yrTerm3Convertible.allUpfront": "0.741",
						"yrTerm3Convertible.noUpfront": "0.889",
						"yrTerm3Convertible.partialUpfront": "0.756",
						"yrTerm3Standard.allUpfront": "0.583",
						"yrTerm3Standard.partialUpfront": "0.620"
					}
				},
				"mswinSQL": {
					"ondemand": "2.689",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.495",
						"yrTerm1Standard.noUpfront": "1.785",
						"yrTerm1Standard.partialUpfront": "1.526",
						"yrTerm3Convertible.allUpfront": "1.453",
						"yrTerm3Convertible.noUpfront": "1.739",
						"yrTerm3Convertible.partialUpfront": "1.483",
						"yrTerm3Standard.allUpfront": "1.230",
						"yrTerm3Standard.partialUpfront": "1.308"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.606",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.944",
						"yrTerm1Standard.noUpfront": "1.127",
						"yrTerm1Standard.partialUpfront": "0.963",
						"yrTerm3Convertible.allUpfront": "0.902",
						"yrTerm3Convertible.noUpfront": "1.081",
						"yrTerm3Convertible.partialUpfront": "0.920",
						"yrTerm3Standard.allUpfront": "0.693",
						"yrTerm3Standard.partialUpfront": "0.737"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.324",
						"yrTerm1Standard.noUpfront": "0.380",
						"yrTerm1Standard.partialUpfront": "0.331",
						"yrTerm3Convertible.allUpfront": "0.292",
						"yrTerm3Convertible.noUpfront": "0.342",
						"yrTerm3Convertible.partialUpfront": "0.298",
						"yrTerm3Standard.allUpfront": "0.209",
						"yrTerm3Standard.partialUpfront": "0.222"
					}
				},
				"mswin": {
					"ondemand": "1.036",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.664",
						"yrTerm1Standard.noUpfront": "0.793",
						"yrTerm1Standard.partialUpfront": "0.678",
						"yrTerm3Convertible.allUpfront": "0.632",
						"yrTerm3Convertible.noUpfront": "0.755",
						"yrTerm3Convertible.partialUpfront": "0.645",
						"yrTerm3Standard.allUpfront": "0.511",
						"yrTerm3Standard.partialUpfront": "0.543"
					}
				},
				"mswinSQL": {
					"ondemand": "2.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.391",
						"yrTerm1Standard.noUpfront": "1.661",
						"yrTerm1Standard.partialUpfront": "1.420",
						"yrTerm3Convertible.allUpfront": "1.359",
						"yrTerm3Convertible.noUpfront": "1.623",
						"yrTerm3Convertible.partialUpfront": "1.387",
						"yrTerm3Standard.allUpfront": "1.157",
						"yrTerm3Standard.partialUpfront": "1.230"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.468",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.802",
						"yrTerm1Standard.noUpfront": "0.957",
						"yrTerm1Standard.partialUpfront": "0.817",
						"yrTerm3Convertible.allUpfront": "0.770",
						"yrTerm3Convertible.noUpfront": "0.919",
						"yrTerm3Convertible.partialUpfront": "0.784",
						"yrTerm3Standard.allUpfront": "0.600",
						"yrTerm3Standard.partialUpfront": "0.638"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 80,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 8,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 4000,
		"ebs_max_bandwidth": 500,
		"ebs_optimized": true,
		"ebs_throughput": 62.5,
		"enhanced_networking": true,
		"family": "Compute optimized",
		"generation": "current",
		"instance_type": "c4.large",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 3.75,
		"network_performance": "Moderate",
		"placement_group_support": true,
		"pretty_name": "C4 High-CPU Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.126",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.084",
						"yrTerm1Standard.noUpfront": "0.090",
						"yrTerm1Standard.partialUpfront": "0.086",
						"yrTerm3Convertible.allUpfront": "0.072",
						"yrTerm3Convertible.noUpfront": "0.079",
						"yrTerm3Convertible.partialUpfront": "0.074",
						"yrTerm3Standard.allUpfront": "0.060",
						"yrTerm3Standard.noUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.218",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.169",
						"yrTerm1Standard.noUpfront": "0.182",
						"yrTerm1Standard.partialUpfront": "0.173",
						"yrTerm3Convertible.allUpfront": "0.160",
						"yrTerm3Convertible.noUpfront": "0.171",
						"yrTerm3Convertible.partialUpfront": "0.164",
						"yrTerm3Standard.allUpfront": "0.137",
						"yrTerm3Standard.noUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.146"
					}
				},
				"mswinSQL": {
					"ondemand": "1.345",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.917",
						"yrTerm1Standard.noUpfront": "1.095",
						"yrTerm1Standard.partialUpfront": "0.937",
						"yrTerm3Convertible.allUpfront": "0.909",
						"yrTerm3Convertible.noUpfront": "1.085",
						"yrTerm3Convertible.partialUpfront": "0.928",
						"yrTerm3Standard.allUpfront": "0.675",
						"yrTerm3Standard.noUpfront": "1.288",
						"yrTerm3Standard.partialUpfront": "0.718"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.357",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.247",
						"yrTerm1Standard.noUpfront": "0.253",
						"yrTerm1Standard.partialUpfront": "0.249",
						"yrTerm3Convertible.allUpfront": "0.235",
						"yrTerm3Convertible.noUpfront": "0.242",
						"yrTerm3Convertible.partialUpfront": "0.236",
						"yrTerm3Standard.allUpfront": "0.209",
						"yrTerm3Standard.noUpfront": "0.232",
						"yrTerm3Standard.partialUpfront": "0.222"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.114",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.072",
						"yrTerm1Standard.noUpfront": "0.077",
						"yrTerm1Standard.partialUpfront": "0.073",
						"yrTerm3Convertible.allUpfront": "0.062",
						"yrTerm3Convertible.noUpfront": "0.068",
						"yrTerm3Convertible.partialUpfront": "0.064",
						"yrTerm3Standard.allUpfront": "0.052",
						"yrTerm3Standard.noUpfront": "0.059",
						"yrTerm3Standard.partialUpfront": "0.055"
					}
				},
				"mswin": {
					"ondemand": "0.206",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.164",
						"yrTerm1Standard.noUpfront": "0.169",
						"yrTerm1Standard.partialUpfront": "0.165",
						"yrTerm3Convertible.allUpfront": "0.154",
						"yrTerm3Convertible.noUpfront": "0.160",
						"yrTerm3Convertible.partialUpfront": "0.156",
						"yrTerm3Standard.allUpfront": "0.144",
						"yrTerm3Standard.noUpfront": "0.151",
						"yrTerm3Standard.partialUpfront": "0.147"
					}
				},
				"mswinSQL": {
					"ondemand": "0.949",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.908",
						"yrTerm1Standard.noUpfront": "0.924",
						"yrTerm1Standard.partialUpfront": "0.910",
						"yrTerm3Convertible.allUpfront": "0.900",
						"yrTerm3Convertible.noUpfront": "0.914",
						"yrTerm3Convertible.partialUpfront": "0.902",
						"yrTerm3Standard.allUpfront": "0.887",
						"yrTerm3Standard.noUpfront": "0.890",
						"yrTerm3Standard.partialUpfront": "0.890"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.277",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.235",
						"yrTerm1Standard.noUpfront": "0.240",
						"yrTerm1Standard.partialUpfront": "0.236",
						"yrTerm3Convertible.allUpfront": "0.225",
						"yrTerm3Convertible.noUpfront": "0.231",
						"yrTerm3Convertible.partialUpfront": "0.226",
						"yrTerm3Standard.allUpfront": "0.215",
						"yrTerm3Standard.noUpfront": "0.222",
						"yrTerm3Standard.partialUpfront": "0.218"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.11",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.070",
						"yrTerm1Standard.noUpfront": "0.075",
						"yrTerm1Standard.partialUpfront": "0.071",
						"yrTerm3Convertible.allUpfront": "0.055",
						"yrTerm3Convertible.noUpfront": "0.061",
						"yrTerm3Convertible.partialUpfront": "0.056",
						"yrTerm3Standard.allUpfront": "0.046",
						"yrTerm3Standard.noUpfront": "0.053",
						"yrTerm3Standard.partialUpfront": "0.049"
					}
				},
				"mswin": {
					"ondemand": "0.202",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.162",
						"yrTerm1Standard.noUpfront": "0.167",
						"yrTerm1Standard.partialUpfront": "0.163",
						"yrTerm3Convertible.allUpfront": "0.147",
						"yrTerm3Convertible.noUpfront": "0.153",
						"yrTerm3Convertible.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.138",
						"yrTerm3Standard.noUpfront": "0.145",
						"yrTerm3Standard.partialUpfront": "0.141"
					}
				},
				"mswinSQL": {
					"ondemand": "0.966",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.916",
						"yrTerm1Standard.noUpfront": "0.933",
						"yrTerm1Standard.partialUpfront": "0.918",
						"yrTerm3Convertible.allUpfront": "0.907",
						"yrTerm3Convertible.noUpfront": "0.923",
						"yrTerm3Convertible.partialUpfront": "0.909",
						"yrTerm3Standard.allUpfront": "0.887",
						"yrTerm3Standard.noUpfront": "0.890",
						"yrTerm3Standard.partialUpfront": "0.890"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.273",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.233",
						"yrTerm1Standard.noUpfront": "0.238",
						"yrTerm1Standard.partialUpfront": "0.234",
						"yrTerm3Convertible.allUpfront": "0.218",
						"yrTerm3Convertible.noUpfront": "0.224",
						"yrTerm3Convertible.partialUpfront": "0.220",
						"yrTerm3Standard.allUpfront": "0.209",
						"yrTerm3Standard.noUpfront": "0.216",
						"yrTerm3Standard.partialUpfront": "0.212"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.115",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.074",
						"yrTerm1Standard.noUpfront": "0.079",
						"yrTerm1Standard.partialUpfront": "0.075",
						"yrTerm3Convertible.allUpfront": "0.059",
						"yrTerm3Convertible.noUpfront": "0.065",
						"yrTerm3Convertible.partialUpfront": "0.060",
						"yrTerm3Standard.allUpfront": "0.049",
						"yrTerm3Standard.noUpfront": "0.056",
						"yrTerm3Standard.partialUpfront": "0.052"
					}
				},
				"mswin": {
					"ondemand": "0.207",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.165",
						"yrTerm1Standard.noUpfront": "0.171",
						"yrTerm1Standard.partialUpfront": "0.167",
						"yrTerm3Convertible.allUpfront": "0.151",
						"yrTerm3Convertible.noUpfront": "0.157",
						"yrTerm3Convertible.partialUpfront": "0.152",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.noUpfront": "0.148",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				},
				"mswinSQL": {
					"ondemand": "1.334",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.919",
						"yrTerm1Standard.noUpfront": "1.097",
						"yrTerm1Standard.partialUpfront": "0.938",
						"yrTerm3Convertible.allUpfront": "0.910",
						"yrTerm3Convertible.noUpfront": "1.086",
						"yrTerm3Convertible.partialUpfront": "0.929",
						"yrTerm3Standard.allUpfront": "0.672",
						"yrTerm3Standard.noUpfront": "1.275",
						"yrTerm3Standard.partialUpfront": "0.714"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.346",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.236",
						"yrTerm1Standard.noUpfront": "0.242",
						"yrTerm1Standard.partialUpfront": "0.238",
						"yrTerm3Convertible.allUpfront": "0.222",
						"yrTerm3Convertible.noUpfront": "0.228",
						"yrTerm3Convertible.partialUpfront": "0.222",
						"yrTerm3Standard.allUpfront": "0.206",
						"yrTerm3Standard.noUpfront": "0.219",
						"yrTerm3Standard.partialUpfront": "0.215"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.13",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.084",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Convertible.allUpfront": "0.065",
						"yrTerm3Convertible.noUpfront": "0.072",
						"yrTerm3Convertible.partialUpfront": "0.066",
						"yrTerm3Standard.allUpfront": "0.055",
						"yrTerm3Standard.noUpfront": "0.063",
						"yrTerm3Standard.partialUpfront": "0.058"
					}
				},
				"mswin": {
					"ondemand": "0.222",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.167",
						"yrTerm1Standard.noUpfront": "0.176",
						"yrTerm1Standard.partialUpfront": "0.171",
						"yrTerm3Convertible.allUpfront": "0.157",
						"yrTerm3Convertible.noUpfront": "0.164",
						"yrTerm3Convertible.partialUpfront": "0.158",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.noUpfront": "0.155",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				},
				"mswinSQL": {
					"ondemand": "1.349",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.915",
						"yrTerm1Standard.noUpfront": "1.092",
						"yrTerm1Standard.partialUpfront": "0.932",
						"yrTerm3Convertible.allUpfront": "0.906",
						"yrTerm3Convertible.noUpfront": "1.082",
						"yrTerm3Convertible.partialUpfront": "0.924",
						"yrTerm3Standard.allUpfront": "0.672",
						"yrTerm3Standard.noUpfront": "1.282",
						"yrTerm3Standard.partialUpfront": "0.714"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.361",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.241",
						"yrTerm1Standard.noUpfront": "0.247",
						"yrTerm1Standard.partialUpfront": "0.243",
						"yrTerm3Convertible.allUpfront": "0.228",
						"yrTerm3Convertible.noUpfront": "0.235",
						"yrTerm3Convertible.partialUpfront": "0.230",
						"yrTerm3Standard.allUpfront": "0.206",
						"yrTerm3Standard.noUpfront": "0.226",
						"yrTerm3Standard.partialUpfront": "0.218"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.11",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.068",
						"yrTerm1Standard.noUpfront": "0.074",
						"yrTerm1Standard.partialUpfront": "0.070",
						"yrTerm3Convertible.allUpfront": "0.052",
						"yrTerm3Convertible.noUpfront": "0.057",
						"yrTerm3Convertible.partialUpfront": "0.052",
						"yrTerm3Standard.allUpfront": "0.043",
						"yrTerm3Standard.noUpfront": "0.050",
						"yrTerm3Standard.partialUpfront": "0.046"
					}
				},
				"mswin": {
					"ondemand": "0.202",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.160",
						"yrTerm1Standard.noUpfront": "0.166",
						"yrTerm1Standard.partialUpfront": "0.162",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.149",
						"yrTerm3Convertible.partialUpfront": "0.144",
						"yrTerm3Standard.allUpfront": "0.135",
						"yrTerm3Standard.noUpfront": "0.142",
						"yrTerm3Standard.partialUpfront": "0.138"
					}
				},
				"mswinSQL": {
					"ondemand": "1.329",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.287",
						"yrTerm1Standard.noUpfront": "1.293",
						"yrTerm1Standard.partialUpfront": "1.289",
						"yrTerm3Convertible.allUpfront": "1.271",
						"yrTerm3Convertible.noUpfront": "1.276",
						"yrTerm3Convertible.partialUpfront": "1.272",
						"yrTerm3Standard.allUpfront": "1.262",
						"yrTerm3Standard.noUpfront": "1.269",
						"yrTerm3Standard.partialUpfront": "1.264"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.273",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.231",
						"yrTerm1Standard.noUpfront": "0.237",
						"yrTerm1Standard.partialUpfront": "0.233",
						"yrTerm3Convertible.allUpfront": "0.215",
						"yrTerm3Convertible.noUpfront": "0.220",
						"yrTerm3Convertible.partialUpfront": "0.216",
						"yrTerm3Standard.allUpfront": "0.206",
						"yrTerm3Standard.noUpfront": "0.213",
						"yrTerm3Standard.partialUpfront": "0.209"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.114",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.074",
						"yrTerm1Standard.noUpfront": "0.079",
						"yrTerm1Standard.partialUpfront": "0.075",
						"yrTerm3Convertible.allUpfront": "0.063",
						"yrTerm3Convertible.noUpfront": "0.070",
						"yrTerm3Convertible.partialUpfront": "0.064",
						"yrTerm3Standard.allUpfront": "0.053",
						"yrTerm3Standard.noUpfront": "0.060",
						"yrTerm3Standard.partialUpfront": "0.056"
					}
				},
				"mswin": {
					"ondemand": "0.206",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.165",
						"yrTerm1Standard.noUpfront": "0.171",
						"yrTerm1Standard.partialUpfront": "0.167",
						"yrTerm3Convertible.allUpfront": "0.155",
						"yrTerm3Convertible.noUpfront": "0.162",
						"yrTerm3Convertible.partialUpfront": "0.156",
						"yrTerm3Standard.allUpfront": "0.135",
						"yrTerm3Standard.noUpfront": "0.152",
						"yrTerm3Standard.partialUpfront": "0.144"
					}
				},
				"mswinSQL": {
					"ondemand": "1.333",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.914",
						"yrTerm1Standard.noUpfront": "1.091",
						"yrTerm1Standard.partialUpfront": "0.932",
						"yrTerm3Convertible.allUpfront": "0.905",
						"yrTerm3Convertible.noUpfront": "1.081",
						"yrTerm3Convertible.partialUpfront": "0.924",
						"yrTerm3Standard.allUpfront": "0.673",
						"yrTerm3Standard.noUpfront": "1.279",
						"yrTerm3Standard.partialUpfront": "0.716"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.345",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.236",
						"yrTerm1Standard.noUpfront": "0.242",
						"yrTerm1Standard.partialUpfront": "0.238",
						"yrTerm3Convertible.allUpfront": "0.226",
						"yrTerm3Convertible.noUpfront": "0.233",
						"yrTerm3Convertible.partialUpfront": "0.228",
						"yrTerm3Standard.allUpfront": "0.207",
						"yrTerm3Standard.noUpfront": "0.223",
						"yrTerm3Standard.partialUpfront": "0.219"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.113",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.073",
						"yrTerm1Standard.noUpfront": "0.078",
						"yrTerm1Standard.partialUpfront": "0.074",
						"yrTerm3Convertible.allUpfront": "0.062",
						"yrTerm3Convertible.noUpfront": "0.068",
						"yrTerm3Convertible.partialUpfront": "0.064",
						"yrTerm3Standard.allUpfront": "0.052",
						"yrTerm3Standard.noUpfront": "0.059",
						"yrTerm3Standard.partialUpfront": "0.055"
					}
				},
				"mswin": {
					"ondemand": "0.205",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.157",
						"yrTerm1Standard.noUpfront": "0.170",
						"yrTerm1Standard.partialUpfront": "0.160",
						"yrTerm3Convertible.allUpfront": "0.149",
						"yrTerm3Convertible.noUpfront": "0.160",
						"yrTerm3Convertible.partialUpfront": "0.152",
						"yrTerm3Standard.allUpfront": "0.126",
						"yrTerm3Standard.noUpfront": "0.151",
						"yrTerm3Standard.partialUpfront": "0.134"
					}
				},
				"mswinSQL": {
					"ondemand": "1.332",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.905",
						"yrTerm1Standard.noUpfront": "1.080",
						"yrTerm1Standard.partialUpfront": "0.924",
						"yrTerm3Convertible.allUpfront": "0.897",
						"yrTerm3Convertible.noUpfront": "1.071",
						"yrTerm3Convertible.partialUpfront": "0.916",
						"yrTerm3Standard.allUpfront": "0.665",
						"yrTerm3Standard.noUpfront": "1.278",
						"yrTerm3Standard.partialUpfront": "0.708"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.344",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.236",
						"yrTerm1Standard.noUpfront": "0.241",
						"yrTerm1Standard.partialUpfront": "0.237",
						"yrTerm3Convertible.allUpfront": "0.225",
						"yrTerm3Convertible.noUpfront": "0.231",
						"yrTerm3Convertible.partialUpfront": "0.226",
						"yrTerm3Standard.allUpfront": "0.199",
						"yrTerm3Standard.noUpfront": "0.222",
						"yrTerm3Standard.partialUpfront": "0.212"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.119",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.076",
						"yrTerm1Standard.noUpfront": "0.082",
						"yrTerm1Standard.partialUpfront": "0.078",
						"yrTerm3Convertible.allUpfront": "0.065",
						"yrTerm3Convertible.noUpfront": "0.072",
						"yrTerm3Convertible.partialUpfront": "0.066",
						"yrTerm3Standard.allUpfront": "0.054",
						"yrTerm3Standard.noUpfront": "0.063",
						"yrTerm3Standard.partialUpfront": "0.058"
					}
				},
				"mswin": {
					"ondemand": "0.211",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.168",
						"yrTerm1Standard.noUpfront": "0.174",
						"yrTerm1Standard.partialUpfront": "0.170",
						"yrTerm3Convertible.allUpfront": "0.157",
						"yrTerm3Convertible.noUpfront": "0.164",
						"yrTerm3Convertible.partialUpfront": "0.158",
						"yrTerm3Standard.allUpfront": "0.146",
						"yrTerm3Standard.noUpfront": "0.155",
						"yrTerm3Standard.partialUpfront": "0.150"
					}
				},
				"mswinSQL": {
					"ondemand": "1.338",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.295",
						"yrTerm1Standard.noUpfront": "1.301",
						"yrTerm1Standard.partialUpfront": "1.297",
						"yrTerm3Convertible.allUpfront": "1.284",
						"yrTerm3Convertible.noUpfront": "1.291",
						"yrTerm3Convertible.partialUpfront": "1.286",
						"yrTerm3Standard.allUpfront": "1.273",
						"yrTerm3Standard.noUpfront": "1.282",
						"yrTerm3Standard.partialUpfront": "1.277"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.282",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.239",
						"yrTerm1Standard.noUpfront": "0.245",
						"yrTerm1Standard.partialUpfront": "0.241",
						"yrTerm3Convertible.allUpfront": "0.228",
						"yrTerm3Convertible.noUpfront": "0.235",
						"yrTerm3Convertible.partialUpfront": "0.230",
						"yrTerm3Standard.allUpfront": "0.217",
						"yrTerm3Standard.noUpfront": "0.226",
						"yrTerm3Standard.partialUpfront": "0.221"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.155",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.103",
						"yrTerm1Standard.noUpfront": "0.110",
						"yrTerm1Standard.partialUpfront": "0.105",
						"yrTerm3Convertible.allUpfront": "0.081",
						"yrTerm3Convertible.noUpfront": "0.089",
						"yrTerm3Convertible.partialUpfront": "0.082",
						"yrTerm3Standard.allUpfront": "0.068",
						"yrTerm3Standard.noUpfront": "0.078",
						"yrTerm3Standard.partialUpfront": "0.072"
					}
				},
				"mswin": {
					"ondemand": "0.247",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.195",
						"yrTerm1Standard.noUpfront": "0.202",
						"yrTerm1Standard.partialUpfront": "0.197",
						"yrTerm3Convertible.allUpfront": "0.173",
						"yrTerm3Convertible.noUpfront": "0.181",
						"yrTerm3Convertible.partialUpfront": "0.174",
						"yrTerm3Standard.allUpfront": "0.160",
						"yrTerm3Standard.noUpfront": "0.170",
						"yrTerm3Standard.partialUpfront": "0.164"
					}
				},
				"mswinSQL": {
					"ondemand": "0.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.937",
						"yrTerm1Standard.noUpfront": "0.958",
						"yrTerm1Standard.partialUpfront": "0.939",
						"yrTerm3Convertible.allUpfront": "0.926",
						"yrTerm3Convertible.noUpfront": "0.945",
						"yrTerm3Convertible.partialUpfront": "0.928",
						"yrTerm3Standard.allUpfront": "0.900",
						"yrTerm3Standard.noUpfront": "0.905",
						"yrTerm3Standard.partialUpfront": "0.905"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.318",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.266",
						"yrTerm1Standard.noUpfront": "0.273",
						"yrTerm1Standard.partialUpfront": "0.268",
						"yrTerm3Convertible.allUpfront": "0.244",
						"yrTerm3Convertible.noUpfront": "0.252",
						"yrTerm3Convertible.partialUpfront": "0.246",
						"yrTerm3Standard.allUpfront": "0.231",
						"yrTerm3Standard.noUpfront": "0.241",
						"yrTerm3Standard.partialUpfront": "0.235"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.059",
						"yrTerm1Standard.noUpfront": "0.063",
						"yrTerm1Standard.partialUpfront": "0.060",
						"yrTerm3Convertible.allUpfront": "0.046",
						"yrTerm3Convertible.noUpfront": "0.051",
						"yrTerm3Convertible.partialUpfront": "0.048",
						"yrTerm3Standard.allUpfront": "0.039",
						"yrTerm3Standard.noUpfront": "0.044",
						"yrTerm3Standard.partialUpfront": "0.041"
					}
				},
				"mswin": {
					"ondemand": "0.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.145",
						"yrTerm1Standard.noUpfront": "0.155",
						"yrTerm1Standard.partialUpfront": "0.148",
						"yrTerm3Convertible.allUpfront": "0.138",
						"yrTerm3Convertible.noUpfront": "0.143",
						"yrTerm3Convertible.partialUpfront": "0.140",
						"yrTerm3Standard.allUpfront": "0.113",
						"yrTerm3Standard.noUpfront": "0.136",
						"yrTerm3Standard.partialUpfront": "0.120"
					}
				},
				"mswinSQL": {
					"ondemand": "1.319",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.894",
						"yrTerm1Standard.noUpfront": "1.068",
						"yrTerm1Standard.partialUpfront": "0.912",
						"yrTerm3Convertible.allUpfront": "0.887",
						"yrTerm3Convertible.noUpfront": "1.060",
						"yrTerm3Convertible.partialUpfront": "0.906",
						"yrTerm3Standard.allUpfront": "0.652",
						"yrTerm3Standard.noUpfront": "1.263",
						"yrTerm3Standard.partialUpfront": "0.694"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.331",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.222",
						"yrTerm1Standard.noUpfront": "0.226",
						"yrTerm1Standard.partialUpfront": "0.223",
						"yrTerm3Convertible.allUpfront": "0.209",
						"yrTerm3Convertible.noUpfront": "0.214",
						"yrTerm3Convertible.partialUpfront": "0.210",
						"yrTerm3Standard.allUpfront": "0.186",
						"yrTerm3Standard.noUpfront": "0.207",
						"yrTerm3Standard.partialUpfront": "0.198"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.059",
						"yrTerm1Standard.noUpfront": "0.063",
						"yrTerm1Standard.partialUpfront": "0.060",
						"yrTerm3Convertible.allUpfront": "0.046",
						"yrTerm3Convertible.noUpfront": "0.051",
						"yrTerm3Convertible.partialUpfront": "0.048",
						"yrTerm3Standard.allUpfront": "0.039",
						"yrTerm3Standard.noUpfront": "0.044",
						"yrTerm3Standard.partialUpfront": "0.041"
					}
				},
				"mswin": {
					"ondemand": "0.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.145",
						"yrTerm1Standard.noUpfront": "0.155",
						"yrTerm1Standard.partialUpfront": "0.148",
						"yrTerm3Convertible.allUpfront": "0.138",
						"yrTerm3Convertible.noUpfront": "0.143",
						"yrTerm3Convertible.partialUpfront": "0.140",
						"yrTerm3Standard.allUpfront": "0.113",
						"yrTerm3Standard.noUpfront": "0.136",
						"yrTerm3Standard.partialUpfront": "0.120"
					}
				},
				"mswinSQL": {
					"ondemand": "1.319",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.894",
						"yrTerm1Standard.noUpfront": "1.068",
						"yrTerm1Standard.partialUpfront": "0.912",
						"yrTerm3Convertible.allUpfront": "0.887",
						"yrTerm3Convertible.noUpfront": "1.060",
						"yrTerm3Convertible.partialUpfront": "0.906",
						"yrTerm3Standard.allUpfront": "0.652",
						"yrTerm3Standard.noUpfront": "1.263",
						"yrTerm3Standard.partialUpfront": "0.694"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.331",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.222",
						"yrTerm1Standard.noUpfront": "0.226",
						"yrTerm1Standard.partialUpfront": "0.223",
						"yrTerm3Convertible.allUpfront": "0.209",
						"yrTerm3Convertible.noUpfront": "0.214",
						"yrTerm3Convertible.partialUpfront": "0.210",
						"yrTerm3Standard.allUpfront": "0.186",
						"yrTerm3Standard.noUpfront": "0.207",
						"yrTerm3Standard.partialUpfront": "0.198"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.071",
						"yrTerm1Standard.noUpfront": "0.076",
						"yrTerm1Standard.partialUpfront": "0.072",
						"yrTerm3Convertible.allUpfront": "0.054",
						"yrTerm3Convertible.noUpfront": "0.060",
						"yrTerm3Convertible.partialUpfront": "0.056",
						"yrTerm3Standard.allUpfront": "0.045",
						"yrTerm3Standard.noUpfront": "0.052",
						"yrTerm3Standard.partialUpfront": "0.048"
					}
				},
				"mswin": {
					"ondemand": "0.212",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.163",
						"yrTerm1Standard.noUpfront": "0.168",
						"yrTerm1Standard.partialUpfront": "0.164",
						"yrTerm3Convertible.allUpfront": "0.146",
						"yrTerm3Convertible.noUpfront": "0.152",
						"yrTerm3Convertible.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.137",
						"yrTerm3Standard.noUpfront": "0.144",
						"yrTerm3Standard.partialUpfront": "0.140"
					}
				},
				"mswinSQL": {
					"ondemand": "0.955",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.903",
						"yrTerm1Standard.noUpfront": "0.918",
						"yrTerm1Standard.partialUpfront": "0.905",
						"yrTerm3Convertible.allUpfront": "0.896",
						"yrTerm3Convertible.noUpfront": "0.910",
						"yrTerm3Convertible.partialUpfront": "0.898",
						"yrTerm3Standard.allUpfront": "0.876",
						"yrTerm3Standard.noUpfront": "0.879",
						"yrTerm3Standard.partialUpfront": "0.879"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.283",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.234",
						"yrTerm1Standard.noUpfront": "0.239",
						"yrTerm1Standard.partialUpfront": "0.235",
						"yrTerm3Convertible.allUpfront": "0.217",
						"yrTerm3Convertible.noUpfront": "0.223",
						"yrTerm3Convertible.partialUpfront": "0.218",
						"yrTerm3Standard.allUpfront": "0.208",
						"yrTerm3Standard.noUpfront": "0.215",
						"yrTerm3Standard.partialUpfront": "0.211"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.124",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.079",
						"yrTerm1Standard.noUpfront": "0.085",
						"yrTerm1Standard.partialUpfront": "0.081",
						"yrTerm3Convertible.allUpfront": "0.064",
						"yrTerm3Convertible.noUpfront": "0.071",
						"yrTerm3Convertible.partialUpfront": "0.066",
						"yrTerm3Standard.allUpfront": "0.054",
						"yrTerm3Standard.noUpfront": "0.062",
						"yrTerm3Standard.partialUpfront": "0.057"
					}
				},
				"mswin": {
					"ondemand": "0.216",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.164",
						"yrTerm1Standard.noUpfront": "0.177",
						"yrTerm1Standard.partialUpfront": "0.168",
						"yrTerm3Convertible.allUpfront": "0.156",
						"yrTerm3Convertible.noUpfront": "0.163",
						"yrTerm3Convertible.partialUpfront": "0.158",
						"yrTerm3Standard.allUpfront": "0.130",
						"yrTerm3Standard.noUpfront": "0.154",
						"yrTerm3Standard.partialUpfront": "0.138"
					}
				},
				"mswinSQL": {
					"ondemand": "1.343",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.912",
						"yrTerm1Standard.noUpfront": "1.089",
						"yrTerm1Standard.partialUpfront": "0.931",
						"yrTerm3Convertible.allUpfront": "0.904",
						"yrTerm3Convertible.noUpfront": "1.079",
						"yrTerm3Convertible.partialUpfront": "0.923",
						"yrTerm3Standard.allUpfront": "0.668",
						"yrTerm3Standard.noUpfront": "1.281",
						"yrTerm3Standard.partialUpfront": "0.710"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.355",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.242",
						"yrTerm1Standard.noUpfront": "0.248",
						"yrTerm1Standard.partialUpfront": "0.244",
						"yrTerm3Convertible.allUpfront": "0.227",
						"yrTerm3Convertible.noUpfront": "0.234",
						"yrTerm3Convertible.partialUpfront": "0.228",
						"yrTerm3Standard.allUpfront": "0.202",
						"yrTerm3Standard.noUpfront": "0.225",
						"yrTerm3Standard.partialUpfront": "0.214"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.059",
						"yrTerm1Standard.noUpfront": "0.063",
						"yrTerm1Standard.partialUpfront": "0.060",
						"yrTerm3Convertible.allUpfront": "0.046",
						"yrTerm3Convertible.noUpfront": "0.051",
						"yrTerm3Convertible.partialUpfront": "0.048",
						"yrTerm3Standard.allUpfront": "0.039",
						"yrTerm3Standard.noUpfront": "0.044",
						"yrTerm3Standard.partialUpfront": "0.041"
					}
				},
				"mswin": {
					"ondemand": "0.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.145",
						"yrTerm1Standard.noUpfront": "0.155",
						"yrTerm1Standard.partialUpfront": "0.148",
						"yrTerm3Convertible.allUpfront": "0.138",
						"yrTerm3Convertible.noUpfront": "0.143",
						"yrTerm3Convertible.partialUpfront": "0.140",
						"yrTerm3Standard.allUpfront": "0.113",
						"yrTerm3Standard.noUpfront": "0.136",
						"yrTerm3Standard.partialUpfront": "0.120"
					}
				},
				"mswinSQL": {
					"ondemand": "1.319",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.894",
						"yrTerm1Standard.noUpfront": "1.068",
						"yrTerm1Standard.partialUpfront": "0.912",
						"yrTerm3Convertible.allUpfront": "0.887",
						"yrTerm3Convertible.noUpfront": "1.060",
						"yrTerm3Convertible.partialUpfront": "0.906",
						"yrTerm3Standard.allUpfront": "0.652",
						"yrTerm3Standard.noUpfront": "1.263",
						"yrTerm3Standard.partialUpfront": "0.694"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.331",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.222",
						"yrTerm1Standard.noUpfront": "0.226",
						"yrTerm1Standard.partialUpfront": "0.223",
						"yrTerm3Convertible.allUpfront": "0.209",
						"yrTerm3Convertible.noUpfront": "0.214",
						"yrTerm3Convertible.partialUpfront": "0.210",
						"yrTerm3Standard.allUpfront": "0.186",
						"yrTerm3Standard.noUpfront": "0.207",
						"yrTerm3Standard.partialUpfront": "0.198"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 10,
			"max_enis": 3
		},
		"vpc_only": true
	},
	{
		"ECU": 16,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 6000,
		"ebs_max_bandwidth": 750,
		"ebs_optimized": true,
		"ebs_throughput": 93.75,
		"enhanced_networking": true,
		"family": "Compute optimized",
		"generation": "current",
		"instance_type": "c4.xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 7.5,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "C4 High-CPU Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.169",
						"yrTerm1Standard.noUpfront": "0.181",
						"yrTerm1Standard.partialUpfront": "0.172",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.121",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.129"
					}
				},
				"mswin": {
					"ondemand": "0.436",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.337",
						"yrTerm1Standard.noUpfront": "0.365",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.319",
						"yrTerm3Convertible.noUpfront": "0.343",
						"yrTerm3Convertible.partialUpfront": "0.326",
						"yrTerm3Standard.allUpfront": "0.275",
						"yrTerm3Standard.noUpfront": "0.322",
						"yrTerm3Standard.partialUpfront": "0.292"
					}
				},
				"mswinSQL": {
					"ondemand": "1.563",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.110",
						"yrTerm1Standard.noUpfront": "1.326",
						"yrTerm1Standard.partialUpfront": "1.132",
						"yrTerm3Convertible.allUpfront": "1.092",
						"yrTerm3Convertible.noUpfront": "1.306",
						"yrTerm3Convertible.partialUpfront": "1.114",
						"yrTerm3Standard.allUpfront": "0.816",
						"yrTerm3Standard.noUpfront": "1.449",
						"yrTerm3Standard.partialUpfront": "0.868"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.677",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.441",
						"yrTerm1Standard.noUpfront": "0.436",
						"yrTerm1Standard.partialUpfront": "0.449",
						"yrTerm3Convertible.allUpfront": "0.399",
						"yrTerm3Convertible.noUpfront": "0.414",
						"yrTerm3Convertible.partialUpfront": "0.402",
						"yrTerm3Standard.allUpfront": "0.376",
						"yrTerm3Standard.noUpfront": "0.393",
						"yrTerm3Standard.partialUpfront": "0.384"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.227",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.144",
						"yrTerm1Standard.noUpfront": "0.153",
						"yrTerm1Standard.partialUpfront": "0.147",
						"yrTerm3Convertible.allUpfront": "0.124",
						"yrTerm3Convertible.noUpfront": "0.137",
						"yrTerm3Convertible.partialUpfront": "0.126",
						"yrTerm3Standard.allUpfront": "0.103",
						"yrTerm3Standard.noUpfront": "0.119",
						"yrTerm3Standard.partialUpfront": "0.110"
					}
				},
				"mswin": {
					"ondemand": "0.411",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.328",
						"yrTerm1Standard.noUpfront": "0.337",
						"yrTerm1Standard.partialUpfront": "0.331",
						"yrTerm3Convertible.allUpfront": "0.308",
						"yrTerm3Convertible.noUpfront": "0.321",
						"yrTerm3Convertible.partialUpfront": "0.310",
						"yrTerm3Standard.allUpfront": "0.287",
						"yrTerm3Standard.noUpfront": "0.303",
						"yrTerm3Standard.partialUpfront": "0.294"
					}
				},
				"mswinSQL": {
					"ondemand": "1.131",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.052",
						"yrTerm1Standard.noUpfront": "1.083",
						"yrTerm1Standard.partialUpfront": "1.055",
						"yrTerm3Convertible.allUpfront": "1.036",
						"yrTerm3Convertible.noUpfront": "1.064",
						"yrTerm3Convertible.partialUpfront": "1.039",
						"yrTerm3Standard.allUpfront": "1.007",
						"yrTerm3Standard.noUpfront": "1.014",
						"yrTerm3Standard.partialUpfront": "1.014"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.482",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.399",
						"yrTerm1Standard.noUpfront": "0.408",
						"yrTerm1Standard.partialUpfront": "0.402",
						"yrTerm3Convertible.allUpfront": "0.379",
						"yrTerm3Convertible.noUpfront": "0.392",
						"yrTerm3Convertible.partialUpfront": "0.382",
						"yrTerm3Standard.allUpfront": "0.358",
						"yrTerm3Standard.noUpfront": "0.374",
						"yrTerm3Standard.partialUpfront": "0.365"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.22",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.138",
						"yrTerm1Standard.noUpfront": "0.149",
						"yrTerm1Standard.partialUpfront": "0.141",
						"yrTerm3Convertible.allUpfront": "0.110",
						"yrTerm3Convertible.noUpfront": "0.122",
						"yrTerm3Convertible.partialUpfront": "0.112",
						"yrTerm3Standard.allUpfront": "0.093",
						"yrTerm3Standard.noUpfront": "0.106",
						"yrTerm3Standard.partialUpfront": "0.099"
					}
				},
				"mswin": {
					"ondemand": "0.404",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.322",
						"yrTerm1Standard.noUpfront": "0.333",
						"yrTerm1Standard.partialUpfront": "0.325",
						"yrTerm3Convertible.allUpfront": "0.294",
						"yrTerm3Convertible.noUpfront": "0.306",
						"yrTerm3Convertible.partialUpfront": "0.296",
						"yrTerm3Standard.allUpfront": "0.277",
						"yrTerm3Standard.noUpfront": "0.290",
						"yrTerm3Standard.partialUpfront": "0.283"
					}
				},
				"mswinSQL": {
					"ondemand": "1.167",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.065",
						"yrTerm1Standard.noUpfront": "1.098",
						"yrTerm1Standard.partialUpfront": "1.068",
						"yrTerm3Convertible.allUpfront": "1.048",
						"yrTerm3Convertible.noUpfront": "1.077",
						"yrTerm3Convertible.partialUpfront": "1.050",
						"yrTerm3Standard.allUpfront": "1.008",
						"yrTerm3Standard.noUpfront": "1.016",
						"yrTerm3Standard.partialUpfront": "1.016"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.475",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.393",
						"yrTerm1Standard.noUpfront": "0.404",
						"yrTerm1Standard.partialUpfront": "0.396",
						"yrTerm3Convertible.allUpfront": "0.365",
						"yrTerm3Convertible.noUpfront": "0.377",
						"yrTerm3Convertible.partialUpfront": "0.368",
						"yrTerm3Standard.allUpfront": "0.348",
						"yrTerm3Standard.noUpfront": "0.361",
						"yrTerm3Standard.partialUpfront": "0.354"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.231",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.145",
						"yrTerm1Standard.noUpfront": "0.158",
						"yrTerm1Standard.partialUpfront": "0.148",
						"yrTerm3Convertible.allUpfront": "0.117",
						"yrTerm3Convertible.noUpfront": "0.129",
						"yrTerm3Convertible.partialUpfront": "0.120",
						"yrTerm3Standard.allUpfront": "0.098",
						"yrTerm3Standard.noUpfront": "0.112",
						"yrTerm3Standard.partialUpfront": "0.104"
					}
				},
				"mswin": {
					"ondemand": "0.415",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.329",
						"yrTerm1Standard.noUpfront": "0.342",
						"yrTerm1Standard.partialUpfront": "0.332",
						"yrTerm3Convertible.allUpfront": "0.301",
						"yrTerm3Convertible.noUpfront": "0.313",
						"yrTerm3Convertible.partialUpfront": "0.304",
						"yrTerm3Standard.allUpfront": "0.269",
						"yrTerm3Standard.noUpfront": "0.296",
						"yrTerm3Standard.partialUpfront": "0.286"
					}
				},
				"mswinSQL": {
					"ondemand": "1.542",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.114",
						"yrTerm1Standard.noUpfront": "1.330",
						"yrTerm1Standard.partialUpfront": "1.137",
						"yrTerm3Convertible.allUpfront": "1.096",
						"yrTerm3Convertible.noUpfront": "1.309",
						"yrTerm3Convertible.partialUpfront": "1.118",
						"yrTerm3Standard.allUpfront": "0.810",
						"yrTerm3Standard.noUpfront": "1.423",
						"yrTerm3Standard.partialUpfront": "0.862"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.656",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.416",
						"yrTerm1Standard.noUpfront": "0.413",
						"yrTerm1Standard.partialUpfront": "0.425",
						"yrTerm3Convertible.allUpfront": "0.372",
						"yrTerm3Convertible.noUpfront": "0.384",
						"yrTerm3Convertible.partialUpfront": "0.374",
						"yrTerm3Standard.allUpfront": "0.353",
						"yrTerm3Standard.noUpfront": "0.367",
						"yrTerm3Standard.partialUpfront": "0.359"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.261",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.155",
						"yrTerm1Standard.noUpfront": "0.168",
						"yrTerm1Standard.partialUpfront": "0.158",
						"yrTerm3Convertible.allUpfront": "0.131",
						"yrTerm3Convertible.noUpfront": "0.144",
						"yrTerm3Convertible.partialUpfront": "0.134",
						"yrTerm3Standard.allUpfront": "0.110",
						"yrTerm3Standard.noUpfront": "0.125",
						"yrTerm3Standard.partialUpfront": "0.117"
					}
				},
				"mswin": {
					"ondemand": "0.445",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.331",
						"yrTerm1Standard.noUpfront": "0.352",
						"yrTerm1Standard.partialUpfront": "0.338",
						"yrTerm3Convertible.allUpfront": "0.314",
						"yrTerm3Convertible.noUpfront": "0.328",
						"yrTerm3Convertible.partialUpfront": "0.318",
						"yrTerm3Standard.allUpfront": "0.269",
						"yrTerm3Standard.noUpfront": "0.309",
						"yrTerm3Standard.partialUpfront": "0.286"
					}
				},
				"mswinSQL": {
					"ondemand": "1.572",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.105",
						"yrTerm1Standard.noUpfront": "1.319",
						"yrTerm1Standard.partialUpfront": "1.127",
						"yrTerm3Convertible.allUpfront": "1.088",
						"yrTerm3Convertible.noUpfront": "1.299",
						"yrTerm3Convertible.partialUpfront": "1.109",
						"yrTerm3Standard.allUpfront": "0.810",
						"yrTerm3Standard.noUpfront": "1.436",
						"yrTerm3Standard.partialUpfront": "0.862"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.686",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.426",
						"yrTerm1Standard.noUpfront": "0.423",
						"yrTerm1Standard.partialUpfront": "0.435",
						"yrTerm3Convertible.allUpfront": "0.386",
						"yrTerm3Convertible.noUpfront": "0.399",
						"yrTerm3Convertible.partialUpfront": "0.388",
						"yrTerm3Standard.allUpfront": "0.365",
						"yrTerm3Standard.noUpfront": "0.380",
						"yrTerm3Standard.partialUpfront": "0.372"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.218",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.137",
						"yrTerm1Standard.noUpfront": "0.147",
						"yrTerm1Standard.partialUpfront": "0.140",
						"yrTerm3Convertible.allUpfront": "0.104",
						"yrTerm3Convertible.noUpfront": "0.114",
						"yrTerm3Convertible.partialUpfront": "0.106",
						"yrTerm3Standard.allUpfront": "0.085",
						"yrTerm3Standard.noUpfront": "0.099",
						"yrTerm3Standard.partialUpfront": "0.091"
					}
				},
				"mswin": {
					"ondemand": "0.402",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.321",
						"yrTerm1Standard.noUpfront": "0.331",
						"yrTerm1Standard.partialUpfront": "0.324",
						"yrTerm3Convertible.allUpfront": "0.288",
						"yrTerm3Convertible.noUpfront": "0.298",
						"yrTerm3Convertible.partialUpfront": "0.290",
						"yrTerm3Standard.allUpfront": "0.269",
						"yrTerm3Standard.noUpfront": "0.283",
						"yrTerm3Standard.partialUpfront": "0.275"
					}
				},
				"mswinSQL": {
					"ondemand": "1.529",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.448",
						"yrTerm1Standard.noUpfront": "1.458",
						"yrTerm1Standard.partialUpfront": "1.451",
						"yrTerm3Convertible.allUpfront": "1.415",
						"yrTerm3Convertible.noUpfront": "1.425",
						"yrTerm3Convertible.partialUpfront": "1.416",
						"yrTerm3Standard.allUpfront": "1.396",
						"yrTerm3Standard.noUpfront": "1.410",
						"yrTerm3Standard.partialUpfront": "1.402"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.473",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.392",
						"yrTerm1Standard.noUpfront": "0.402",
						"yrTerm1Standard.partialUpfront": "0.395",
						"yrTerm3Convertible.allUpfront": "0.359",
						"yrTerm3Convertible.noUpfront": "0.369",
						"yrTerm3Convertible.partialUpfront": "0.360",
						"yrTerm3Standard.allUpfront": "0.340",
						"yrTerm3Standard.noUpfront": "0.354",
						"yrTerm3Standard.partialUpfront": "0.346"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.227",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.146",
						"yrTerm1Standard.noUpfront": "0.158",
						"yrTerm1Standard.partialUpfront": "0.149",
						"yrTerm3Convertible.allUpfront": "0.126",
						"yrTerm3Convertible.noUpfront": "0.139",
						"yrTerm3Convertible.partialUpfront": "0.128",
						"yrTerm3Standard.allUpfront": "0.106",
						"yrTerm3Standard.noUpfront": "0.121",
						"yrTerm3Standard.partialUpfront": "0.113"
					}
				},
				"mswin": {
					"ondemand": "0.411",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.330",
						"yrTerm1Standard.noUpfront": "0.342",
						"yrTerm1Standard.partialUpfront": "0.333",
						"yrTerm3Convertible.allUpfront": "0.310",
						"yrTerm3Convertible.noUpfront": "0.323",
						"yrTerm3Convertible.partialUpfront": "0.312",
						"yrTerm3Standard.allUpfront": "0.271",
						"yrTerm3Standard.noUpfront": "0.305",
						"yrTerm3Standard.partialUpfront": "0.288"
					}
				},
				"mswinSQL": {
					"ondemand": "1.538",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.105",
						"yrTerm1Standard.noUpfront": "1.319",
						"yrTerm1Standard.partialUpfront": "1.127",
						"yrTerm3Convertible.allUpfront": "1.087",
						"yrTerm3Convertible.noUpfront": "1.299",
						"yrTerm3Convertible.partialUpfront": "1.109",
						"yrTerm3Standard.allUpfront": "0.881",
						"yrTerm3Standard.noUpfront": "1.432",
						"yrTerm3Standard.partialUpfront": "0.938"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.652",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.418",
						"yrTerm1Standard.noUpfront": "0.413",
						"yrTerm1Standard.partialUpfront": "0.426",
						"yrTerm3Convertible.allUpfront": "0.381",
						"yrTerm3Convertible.noUpfront": "0.394",
						"yrTerm3Convertible.partialUpfront": "0.384",
						"yrTerm3Standard.allUpfront": "0.361",
						"yrTerm3Standard.noUpfront": "0.376",
						"yrTerm3Standard.partialUpfront": "0.368"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.226",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.145",
						"yrTerm1Standard.noUpfront": "0.155",
						"yrTerm1Standard.partialUpfront": "0.148",
						"yrTerm3Convertible.allUpfront": "0.124",
						"yrTerm3Convertible.noUpfront": "0.137",
						"yrTerm3Convertible.partialUpfront": "0.126",
						"yrTerm3Standard.allUpfront": "0.102",
						"yrTerm3Standard.noUpfront": "0.119",
						"yrTerm3Standard.partialUpfront": "0.109"
					}
				},
				"mswin": {
					"ondemand": "0.41",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.311",
						"yrTerm1Standard.noUpfront": "0.339",
						"yrTerm1Standard.partialUpfront": "0.318",
						"yrTerm3Convertible.allUpfront": "0.295",
						"yrTerm3Convertible.noUpfront": "0.321",
						"yrTerm3Convertible.partialUpfront": "0.302",
						"yrTerm3Standard.allUpfront": "0.254",
						"yrTerm3Standard.noUpfront": "0.303",
						"yrTerm3Standard.partialUpfront": "0.270"
					}
				},
				"mswinSQL": {
					"ondemand": "1.537",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.085",
						"yrTerm1Standard.noUpfront": "1.296",
						"yrTerm1Standard.partialUpfront": "1.108",
						"yrTerm3Convertible.allUpfront": "1.069",
						"yrTerm3Convertible.noUpfront": "1.278",
						"yrTerm3Convertible.partialUpfront": "1.092",
						"yrTerm3Standard.allUpfront": "0.796",
						"yrTerm3Standard.noUpfront": "1.430",
						"yrTerm3Standard.partialUpfront": "0.846"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.651",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.417",
						"yrTerm1Standard.noUpfront": "0.410",
						"yrTerm1Standard.partialUpfront": "0.425",
						"yrTerm3Convertible.allUpfront": "0.379",
						"yrTerm3Convertible.noUpfront": "0.392",
						"yrTerm3Convertible.partialUpfront": "0.382",
						"yrTerm3Standard.allUpfront": "0.357",
						"yrTerm3Standard.noUpfront": "0.374",
						"yrTerm3Standard.partialUpfront": "0.364"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.237",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.152",
						"yrTerm1Standard.noUpfront": "0.164",
						"yrTerm1Standard.partialUpfront": "0.155",
						"yrTerm3Convertible.allUpfront": "0.131",
						"yrTerm3Convertible.noUpfront": "0.144",
						"yrTerm3Convertible.partialUpfront": "0.134",
						"yrTerm3Standard.allUpfront": "0.108",
						"yrTerm3Standard.noUpfront": "0.125",
						"yrTerm3Standard.partialUpfront": "0.115"
					}
				},
				"mswin": {
					"ondemand": "0.421",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.336",
						"yrTerm1Standard.noUpfront": "0.348",
						"yrTerm1Standard.partialUpfront": "0.339",
						"yrTerm3Convertible.allUpfront": "0.315",
						"yrTerm3Convertible.noUpfront": "0.328",
						"yrTerm3Convertible.partialUpfront": "0.318",
						"yrTerm3Standard.allUpfront": "0.292",
						"yrTerm3Standard.noUpfront": "0.309",
						"yrTerm3Standard.partialUpfront": "0.299"
					}
				},
				"mswinSQL": {
					"ondemand": "1.548",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.463",
						"yrTerm1Standard.noUpfront": "1.475",
						"yrTerm1Standard.partialUpfront": "1.466",
						"yrTerm3Convertible.allUpfront": "1.442",
						"yrTerm3Convertible.noUpfront": "1.455",
						"yrTerm3Convertible.partialUpfront": "1.444",
						"yrTerm3Standard.allUpfront": "1.419",
						"yrTerm3Standard.noUpfront": "1.436",
						"yrTerm3Standard.partialUpfront": "1.426"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.492",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.407",
						"yrTerm1Standard.noUpfront": "0.419",
						"yrTerm1Standard.partialUpfront": "0.410",
						"yrTerm3Convertible.allUpfront": "0.386",
						"yrTerm3Convertible.noUpfront": "0.399",
						"yrTerm3Convertible.partialUpfront": "0.388",
						"yrTerm3Standard.allUpfront": "0.363",
						"yrTerm3Standard.noUpfront": "0.380",
						"yrTerm3Standard.partialUpfront": "0.370"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.309",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.206",
						"yrTerm1Standard.noUpfront": "0.220",
						"yrTerm1Standard.partialUpfront": "0.210",
						"yrTerm3Convertible.allUpfront": "0.162",
						"yrTerm3Convertible.noUpfront": "0.179",
						"yrTerm3Convertible.partialUpfront": "0.166",
						"yrTerm3Standard.allUpfront": "0.134",
						"yrTerm3Standard.noUpfront": "0.156",
						"yrTerm3Standard.partialUpfront": "0.143"
					}
				},
				"mswin": {
					"ondemand": "0.493",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.390",
						"yrTerm1Standard.noUpfront": "0.404",
						"yrTerm1Standard.partialUpfront": "0.394",
						"yrTerm3Convertible.allUpfront": "0.346",
						"yrTerm3Convertible.noUpfront": "0.363",
						"yrTerm3Convertible.partialUpfront": "0.350",
						"yrTerm3Standard.allUpfront": "0.318",
						"yrTerm3Standard.noUpfront": "0.340",
						"yrTerm3Standard.partialUpfront": "0.327"
					}
				},
				"mswinSQL": {
					"ondemand": "1.217",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.109",
						"yrTerm1Standard.noUpfront": "1.151",
						"yrTerm1Standard.partialUpfront": "1.113",
						"yrTerm3Convertible.allUpfront": "1.087",
						"yrTerm3Convertible.noUpfront": "1.125",
						"yrTerm3Convertible.partialUpfront": "1.091",
						"yrTerm3Standard.allUpfront": "1.034",
						"yrTerm3Standard.noUpfront": "1.043",
						"yrTerm3Standard.partialUpfront": "1.043"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.564",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.461",
						"yrTerm1Standard.noUpfront": "0.475",
						"yrTerm1Standard.partialUpfront": "0.465",
						"yrTerm3Convertible.allUpfront": "0.417",
						"yrTerm3Convertible.noUpfront": "0.434",
						"yrTerm3Convertible.partialUpfront": "0.420",
						"yrTerm3Standard.allUpfront": "0.389",
						"yrTerm3Standard.noUpfront": "0.411",
						"yrTerm3Standard.partialUpfront": "0.398"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.199",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.119",
						"yrTerm1Standard.noUpfront": "0.126",
						"yrTerm1Standard.partialUpfront": "0.121",
						"yrTerm3Convertible.allUpfront": "0.092",
						"yrTerm3Convertible.noUpfront": "0.102",
						"yrTerm3Convertible.partialUpfront": "0.094",
						"yrTerm3Standard.allUpfront": "0.078",
						"yrTerm3Standard.noUpfront": "0.089",
						"yrTerm3Standard.partialUpfront": "0.083"
					}
				},
				"mswin": {
					"ondemand": "0.383",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.289",
						"yrTerm1Standard.noUpfront": "0.310",
						"yrTerm1Standard.partialUpfront": "0.294",
						"yrTerm3Convertible.allUpfront": "0.276",
						"yrTerm3Convertible.noUpfront": "0.286",
						"yrTerm3Convertible.partialUpfront": "0.278",
						"yrTerm3Standard.allUpfront": "0.226",
						"yrTerm3Standard.noUpfront": "0.273",
						"yrTerm3Standard.partialUpfront": "0.240"
					}
				},
				"mswinSQL": {
					"ondemand": "1.51",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.064",
						"yrTerm1Standard.noUpfront": "1.270",
						"yrTerm1Standard.partialUpfront": "1.086",
						"yrTerm3Convertible.allUpfront": "1.051",
						"yrTerm3Convertible.noUpfront": "1.255",
						"yrTerm3Convertible.partialUpfront": "1.072",
						"yrTerm3Standard.allUpfront": "0.770",
						"yrTerm3Standard.noUpfront": "1.400",
						"yrTerm3Standard.partialUpfront": "0.819"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.391",
						"yrTerm1Standard.noUpfront": "0.381",
						"yrTerm1Standard.partialUpfront": "0.398",
						"yrTerm3Convertible.allUpfront": "0.347",
						"yrTerm3Convertible.noUpfront": "0.357",
						"yrTerm3Convertible.partialUpfront": "0.350",
						"yrTerm3Standard.allUpfront": "0.333",
						"yrTerm3Standard.noUpfront": "0.344",
						"yrTerm3Standard.partialUpfront": "0.338"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.199",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.119",
						"yrTerm1Standard.noUpfront": "0.126",
						"yrTerm1Standard.partialUpfront": "0.121",
						"yrTerm3Convertible.allUpfront": "0.092",
						"yrTerm3Convertible.noUpfront": "0.102",
						"yrTerm3Convertible.partialUpfront": "0.094",
						"yrTerm3Standard.allUpfront": "0.078",
						"yrTerm3Standard.noUpfront": "0.089",
						"yrTerm3Standard.partialUpfront": "0.083"
					}
				},
				"mswin": {
					"ondemand": "0.383",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.289",
						"yrTerm1Standard.noUpfront": "0.310",
						"yrTerm1Standard.partialUpfront": "0.294",
						"yrTerm3Convertible.allUpfront": "0.276",
						"yrTerm3Convertible.noUpfront": "0.286",
						"yrTerm3Convertible.partialUpfront": "0.278",
						"yrTerm3Standard.allUpfront": "0.226",
						"yrTerm3Standard.noUpfront": "0.273",
						"yrTerm3Standard.partialUpfront": "0.240"
					}
				},
				"mswinSQL": {
					"ondemand": "1.51",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.064",
						"yrTerm1Standard.noUpfront": "1.270",
						"yrTerm1Standard.partialUpfront": "1.086",
						"yrTerm3Convertible.allUpfront": "1.051",
						"yrTerm3Convertible.noUpfront": "1.255",
						"yrTerm3Convertible.partialUpfront": "1.072",
						"yrTerm3Standard.allUpfront": "0.770",
						"yrTerm3Standard.noUpfront": "1.400",
						"yrTerm3Standard.partialUpfront": "0.819"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.391",
						"yrTerm1Standard.noUpfront": "0.381",
						"yrTerm1Standard.partialUpfront": "0.398",
						"yrTerm3Convertible.allUpfront": "0.347",
						"yrTerm3Convertible.noUpfront": "0.357",
						"yrTerm3Convertible.partialUpfront": "0.350",
						"yrTerm3Standard.allUpfront": "0.333",
						"yrTerm3Standard.noUpfront": "0.344",
						"yrTerm3Standard.partialUpfront": "0.338"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.239",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.141",
						"yrTerm1Standard.noUpfront": "0.151",
						"yrTerm1Standard.partialUpfront": "0.144",
						"yrTerm3Convertible.allUpfront": "0.108",
						"yrTerm3Convertible.noUpfront": "0.119",
						"yrTerm3Convertible.partialUpfront": "0.110",
						"yrTerm3Standard.allUpfront": "0.089",
						"yrTerm3Standard.noUpfront": "0.104",
						"yrTerm3Standard.partialUpfront": "0.095"
					}
				},
				"mswin": {
					"ondemand": "0.423",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.325",
						"yrTerm1Standard.noUpfront": "0.335",
						"yrTerm1Standard.partialUpfront": "0.328",
						"yrTerm3Convertible.allUpfront": "0.292",
						"yrTerm3Convertible.noUpfront": "0.303",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.273",
						"yrTerm3Standard.noUpfront": "0.288",
						"yrTerm3Standard.partialUpfront": "0.279"
					}
				},
				"mswinSQL": {
					"ondemand": "1.144",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.041",
						"yrTerm1Standard.noUpfront": "1.070",
						"yrTerm1Standard.partialUpfront": "1.044",
						"yrTerm3Convertible.allUpfront": "1.027",
						"yrTerm3Convertible.noUpfront": "1.053",
						"yrTerm3Convertible.partialUpfront": "1.030",
						"yrTerm3Standard.allUpfront": "0.986",
						"yrTerm3Standard.noUpfront": "0.992",
						"yrTerm3Standard.partialUpfront": "0.992"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.494",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.396",
						"yrTerm1Standard.noUpfront": "0.406",
						"yrTerm1Standard.partialUpfront": "0.399",
						"yrTerm3Convertible.allUpfront": "0.363",
						"yrTerm3Convertible.noUpfront": "0.374",
						"yrTerm3Convertible.partialUpfront": "0.366",
						"yrTerm3Standard.allUpfront": "0.344",
						"yrTerm3Standard.noUpfront": "0.359",
						"yrTerm3Standard.partialUpfront": "0.350"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.249",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.160",
						"yrTerm1Standard.noUpfront": "0.170",
						"yrTerm1Standard.partialUpfront": "0.163",
						"yrTerm3Convertible.allUpfront": "0.128",
						"yrTerm3Convertible.noUpfront": "0.142",
						"yrTerm3Convertible.partialUpfront": "0.132",
						"yrTerm3Standard.allUpfront": "0.108",
						"yrTerm3Standard.noUpfront": "0.123",
						"yrTerm3Standard.partialUpfront": "0.115"
					}
				},
				"mswin": {
					"ondemand": "0.433",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.327",
						"yrTerm1Standard.noUpfront": "0.354",
						"yrTerm1Standard.partialUpfront": "0.334",
						"yrTerm3Convertible.allUpfront": "0.310",
						"yrTerm3Convertible.noUpfront": "0.326",
						"yrTerm3Convertible.partialUpfront": "0.316",
						"yrTerm3Standard.allUpfront": "0.261",
						"yrTerm3Standard.noUpfront": "0.307",
						"yrTerm3Standard.partialUpfront": "0.278"
					}
				},
				"mswinSQL": {
					"ondemand": "1.56",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.100",
						"yrTerm1Standard.noUpfront": "1.314",
						"yrTerm1Standard.partialUpfront": "1.123",
						"yrTerm3Convertible.allUpfront": "1.084",
						"yrTerm3Convertible.noUpfront": "1.294",
						"yrTerm3Convertible.partialUpfront": "1.106",
						"yrTerm3Standard.allUpfront": "0.802",
						"yrTerm3Standard.noUpfront": "1.434",
						"yrTerm3Standard.partialUpfront": "0.854"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.674",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.432",
						"yrTerm1Standard.noUpfront": "0.425",
						"yrTerm1Standard.partialUpfront": "0.440",
						"yrTerm3Convertible.allUpfront": "0.383",
						"yrTerm3Convertible.noUpfront": "0.397",
						"yrTerm3Convertible.partialUpfront": "0.386",
						"yrTerm3Standard.allUpfront": "0.363",
						"yrTerm3Standard.noUpfront": "0.378",
						"yrTerm3Standard.partialUpfront": "0.370"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.199",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.119",
						"yrTerm1Standard.noUpfront": "0.126",
						"yrTerm1Standard.partialUpfront": "0.121",
						"yrTerm3Convertible.allUpfront": "0.092",
						"yrTerm3Convertible.noUpfront": "0.102",
						"yrTerm3Convertible.partialUpfront": "0.094",
						"yrTerm3Standard.allUpfront": "0.078",
						"yrTerm3Standard.noUpfront": "0.089",
						"yrTerm3Standard.partialUpfront": "0.083"
					}
				},
				"mswin": {
					"ondemand": "0.383",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.289",
						"yrTerm1Standard.noUpfront": "0.310",
						"yrTerm1Standard.partialUpfront": "0.294",
						"yrTerm3Convertible.allUpfront": "0.276",
						"yrTerm3Convertible.noUpfront": "0.286",
						"yrTerm3Convertible.partialUpfront": "0.278",
						"yrTerm3Standard.allUpfront": "0.226",
						"yrTerm3Standard.noUpfront": "0.273",
						"yrTerm3Standard.partialUpfront": "0.240"
					}
				},
				"mswinSQL": {
					"ondemand": "1.51",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.064",
						"yrTerm1Standard.noUpfront": "1.270",
						"yrTerm1Standard.partialUpfront": "1.086",
						"yrTerm3Convertible.allUpfront": "1.051",
						"yrTerm3Convertible.noUpfront": "1.255",
						"yrTerm3Convertible.partialUpfront": "1.072",
						"yrTerm3Standard.allUpfront": "0.770",
						"yrTerm3Standard.noUpfront": "1.400",
						"yrTerm3Standard.partialUpfront": "0.819"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.391",
						"yrTerm1Standard.noUpfront": "0.381",
						"yrTerm1Standard.partialUpfront": "0.398",
						"yrTerm3Convertible.allUpfront": "0.347",
						"yrTerm3Convertible.noUpfront": "0.357",
						"yrTerm3Convertible.partialUpfront": "0.350",
						"yrTerm3Standard.allUpfront": "0.333",
						"yrTerm3Standard.noUpfront": "0.344",
						"yrTerm3Standard.partialUpfront": "0.338"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": true
	},
	{
		"ECU": 31,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": true,
		"family": "Compute optimized",
		"generation": "current",
		"instance_type": "c4.2xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 15,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "C4 High-CPU Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.338",
						"yrTerm1Standard.noUpfront": "0.361",
						"yrTerm1Standard.partialUpfront": "0.345",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.243",
						"yrTerm3Standard.noUpfront": "0.276",
						"yrTerm3Standard.partialUpfront": "0.259"
					}
				},
				"mswin": {
					"ondemand": "0.872",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.676",
						"yrTerm1Standard.noUpfront": "0.729",
						"yrTerm1Standard.partialUpfront": "0.690",
						"yrTerm3Convertible.allUpfront": "0.641",
						"yrTerm3Convertible.noUpfront": "0.686",
						"yrTerm3Convertible.partialUpfront": "0.654",
						"yrTerm3Standard.allUpfront": "0.549",
						"yrTerm3Standard.noUpfront": "0.644",
						"yrTerm3Standard.partialUpfront": "0.584"
					}
				},
				"mswinSQL": {
					"ondemand": "3.125",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.207",
						"yrTerm1Standard.noUpfront": "2.637",
						"yrTerm1Standard.partialUpfront": "2.252",
						"yrTerm3Convertible.allUpfront": "2.171",
						"yrTerm3Convertible.noUpfront": "2.597",
						"yrTerm3Convertible.partialUpfront": "2.215",
						"yrTerm3Standard.allUpfront": "1.622",
						"yrTerm3Standard.noUpfront": "2.897",
						"yrTerm3Standard.partialUpfront": "1.726"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.402",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.910",
						"yrTerm1Standard.noUpfront": "0.870",
						"yrTerm1Standard.partialUpfront": "0.929",
						"yrTerm3Convertible.allUpfront": "0.798",
						"yrTerm3Convertible.noUpfront": "0.827",
						"yrTerm3Convertible.partialUpfront": "0.804",
						"yrTerm3Standard.allUpfront": "0.752",
						"yrTerm3Standard.noUpfront": "0.785",
						"yrTerm3Standard.partialUpfront": "0.768"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.454",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.288",
						"yrTerm1Standard.noUpfront": "0.307",
						"yrTerm1Standard.partialUpfront": "0.294",
						"yrTerm3Convertible.allUpfront": "0.248",
						"yrTerm3Convertible.noUpfront": "0.273",
						"yrTerm3Convertible.partialUpfront": "0.254",
						"yrTerm3Standard.allUpfront": "0.207",
						"yrTerm3Standard.noUpfront": "0.238",
						"yrTerm3Standard.partialUpfront": "0.220"
					}
				},
				"mswin": {
					"ondemand": "0.822",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.656",
						"yrTerm1Standard.noUpfront": "0.675",
						"yrTerm1Standard.partialUpfront": "0.662",
						"yrTerm3Convertible.allUpfront": "0.616",
						"yrTerm3Convertible.noUpfront": "0.641",
						"yrTerm3Convertible.partialUpfront": "0.622",
						"yrTerm3Standard.allUpfront": "0.575",
						"yrTerm3Standard.noUpfront": "0.606",
						"yrTerm3Standard.partialUpfront": "0.588"
					}
				},
				"mswinSQL": {
					"ondemand": "2.262",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.104",
						"yrTerm1Standard.noUpfront": "2.166",
						"yrTerm1Standard.partialUpfront": "2.111",
						"yrTerm3Convertible.allUpfront": "2.072",
						"yrTerm3Convertible.noUpfront": "2.128",
						"yrTerm3Convertible.partialUpfront": "2.078",
						"yrTerm3Standard.allUpfront": "2.014",
						"yrTerm3Standard.noUpfront": "2.029",
						"yrTerm3Standard.partialUpfront": "2.029"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.963",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.797",
						"yrTerm1Standard.noUpfront": "0.816",
						"yrTerm1Standard.partialUpfront": "0.803",
						"yrTerm3Convertible.allUpfront": "0.757",
						"yrTerm3Convertible.noUpfront": "0.782",
						"yrTerm3Convertible.partialUpfront": "0.762",
						"yrTerm3Standard.allUpfront": "0.716",
						"yrTerm3Standard.noUpfront": "0.747",
						"yrTerm3Standard.partialUpfront": "0.729"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.439",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.276",
						"yrTerm1Standard.noUpfront": "0.298",
						"yrTerm1Standard.partialUpfront": "0.282",
						"yrTerm3Convertible.allUpfront": "0.221",
						"yrTerm3Convertible.noUpfront": "0.243",
						"yrTerm3Convertible.partialUpfront": "0.226",
						"yrTerm3Standard.allUpfront": "0.185",
						"yrTerm3Standard.noUpfront": "0.212",
						"yrTerm3Standard.partialUpfront": "0.197"
					}
				},
				"mswin": {
					"ondemand": "0.807",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.644",
						"yrTerm1Standard.noUpfront": "0.666",
						"yrTerm1Standard.partialUpfront": "0.650",
						"yrTerm3Convertible.allUpfront": "0.589",
						"yrTerm3Convertible.noUpfront": "0.611",
						"yrTerm3Convertible.partialUpfront": "0.594",
						"yrTerm3Standard.allUpfront": "0.553",
						"yrTerm3Standard.noUpfront": "0.580",
						"yrTerm3Standard.partialUpfront": "0.565"
					}
				},
				"mswinSQL": {
					"ondemand": "2.333",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.129",
						"yrTerm1Standard.noUpfront": "2.196",
						"yrTerm1Standard.partialUpfront": "2.136",
						"yrTerm3Convertible.allUpfront": "2.095",
						"yrTerm3Convertible.noUpfront": "2.155",
						"yrTerm3Convertible.partialUpfront": "2.101",
						"yrTerm3Standard.allUpfront": "2.015",
						"yrTerm3Standard.noUpfront": "2.030",
						"yrTerm3Standard.partialUpfront": "2.030"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.948",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.785",
						"yrTerm1Standard.noUpfront": "0.807",
						"yrTerm1Standard.partialUpfront": "0.791",
						"yrTerm3Convertible.allUpfront": "0.730",
						"yrTerm3Convertible.noUpfront": "0.752",
						"yrTerm3Convertible.partialUpfront": "0.734",
						"yrTerm3Standard.allUpfront": "0.694",
						"yrTerm3Standard.noUpfront": "0.721",
						"yrTerm3Standard.partialUpfront": "0.706"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.462",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.291",
						"yrTerm1Standard.noUpfront": "0.315",
						"yrTerm1Standard.partialUpfront": "0.297",
						"yrTerm3Convertible.allUpfront": "0.234",
						"yrTerm3Convertible.noUpfront": "0.258",
						"yrTerm3Convertible.partialUpfront": "0.240",
						"yrTerm3Standard.allUpfront": "0.195",
						"yrTerm3Standard.noUpfront": "0.225",
						"yrTerm3Standard.partialUpfront": "0.207"
					}
				},
				"mswin": {
					"ondemand": "0.83",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.659",
						"yrTerm1Standard.noUpfront": "0.683",
						"yrTerm1Standard.partialUpfront": "0.665",
						"yrTerm3Convertible.allUpfront": "0.602",
						"yrTerm3Convertible.noUpfront": "0.626",
						"yrTerm3Convertible.partialUpfront": "0.608",
						"yrTerm3Standard.allUpfront": "0.536",
						"yrTerm3Standard.noUpfront": "0.593",
						"yrTerm3Standard.partialUpfront": "0.570"
					}
				},
				"mswinSQL": {
					"ondemand": "3.083",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.215",
						"yrTerm1Standard.noUpfront": "2.644",
						"yrTerm1Standard.partialUpfront": "2.260",
						"yrTerm3Convertible.allUpfront": "2.179",
						"yrTerm3Convertible.noUpfront": "2.601",
						"yrTerm3Convertible.partialUpfront": "2.223",
						"yrTerm3Standard.allUpfront": "1.610",
						"yrTerm3Standard.noUpfront": "2.846",
						"yrTerm3Standard.partialUpfront": "1.712"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.36",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.864",
						"yrTerm1Standard.noUpfront": "0.824",
						"yrTerm1Standard.partialUpfront": "0.881",
						"yrTerm3Convertible.allUpfront": "0.743",
						"yrTerm3Convertible.noUpfront": "0.767",
						"yrTerm3Convertible.partialUpfront": "0.748",
						"yrTerm3Standard.allUpfront": "0.704",
						"yrTerm3Standard.noUpfront": "0.734",
						"yrTerm3Standard.partialUpfront": "0.716"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.522",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.311",
						"yrTerm1Standard.noUpfront": "0.336",
						"yrTerm1Standard.partialUpfront": "0.317",
						"yrTerm3Convertible.allUpfront": "0.261",
						"yrTerm3Convertible.noUpfront": "0.288",
						"yrTerm3Convertible.partialUpfront": "0.266",
						"yrTerm3Standard.allUpfront": "0.219",
						"yrTerm3Standard.noUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.233"
					}
				},
				"mswin": {
					"ondemand": "0.89",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.667",
						"yrTerm1Standard.noUpfront": "0.704",
						"yrTerm1Standard.partialUpfront": "0.680",
						"yrTerm3Convertible.allUpfront": "0.629",
						"yrTerm3Convertible.noUpfront": "0.656",
						"yrTerm3Convertible.partialUpfront": "0.634",
						"yrTerm3Standard.allUpfront": "0.536",
						"yrTerm3Standard.noUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.570"
					}
				},
				"mswinSQL": {
					"ondemand": "3.143",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.197",
						"yrTerm1Standard.noUpfront": "2.623",
						"yrTerm1Standard.partialUpfront": "2.242",
						"yrTerm3Convertible.allUpfront": "2.162",
						"yrTerm3Convertible.noUpfront": "2.582",
						"yrTerm3Convertible.partialUpfront": "2.207",
						"yrTerm3Standard.allUpfront": "1.610",
						"yrTerm3Standard.noUpfront": "2.872",
						"yrTerm3Standard.partialUpfront": "1.712"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.42",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.884",
						"yrTerm1Standard.noUpfront": "0.845",
						"yrTerm1Standard.partialUpfront": "0.901",
						"yrTerm3Convertible.allUpfront": "0.770",
						"yrTerm3Convertible.noUpfront": "0.797",
						"yrTerm3Convertible.partialUpfront": "0.776",
						"yrTerm3Standard.allUpfront": "0.728",
						"yrTerm3Standard.noUpfront": "0.760",
						"yrTerm3Standard.partialUpfront": "0.742"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.438",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.275",
						"yrTerm1Standard.noUpfront": "0.294",
						"yrTerm1Standard.partialUpfront": "0.281",
						"yrTerm3Convertible.allUpfront": "0.207",
						"yrTerm3Convertible.noUpfront": "0.229",
						"yrTerm3Convertible.partialUpfront": "0.212",
						"yrTerm3Standard.allUpfront": "0.170",
						"yrTerm3Standard.noUpfront": "0.199",
						"yrTerm3Standard.partialUpfront": "0.181"
					}
				},
				"mswin": {
					"ondemand": "0.806",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.643",
						"yrTerm1Standard.noUpfront": "0.662",
						"yrTerm1Standard.partialUpfront": "0.649",
						"yrTerm3Convertible.allUpfront": "0.575",
						"yrTerm3Convertible.noUpfront": "0.597",
						"yrTerm3Convertible.partialUpfront": "0.580",
						"yrTerm3Standard.allUpfront": "0.538",
						"yrTerm3Standard.noUpfront": "0.567",
						"yrTerm3Standard.partialUpfront": "0.549"
					}
				},
				"mswinSQL": {
					"ondemand": "3.059",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.896",
						"yrTerm1Standard.noUpfront": "2.915",
						"yrTerm1Standard.partialUpfront": "2.902",
						"yrTerm3Convertible.allUpfront": "2.828",
						"yrTerm3Convertible.noUpfront": "2.850",
						"yrTerm3Convertible.partialUpfront": "2.832",
						"yrTerm3Standard.allUpfront": "2.791",
						"yrTerm3Standard.noUpfront": "2.820",
						"yrTerm3Standard.partialUpfront": "2.802"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.947",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.784",
						"yrTerm1Standard.noUpfront": "0.803",
						"yrTerm1Standard.partialUpfront": "0.790",
						"yrTerm3Convertible.allUpfront": "0.716",
						"yrTerm3Convertible.noUpfront": "0.738",
						"yrTerm3Convertible.partialUpfront": "0.720",
						"yrTerm3Standard.allUpfront": "0.679",
						"yrTerm3Standard.noUpfront": "0.708",
						"yrTerm3Standard.partialUpfront": "0.690"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.454",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.293",
						"yrTerm1Standard.noUpfront": "0.315",
						"yrTerm1Standard.partialUpfront": "0.299",
						"yrTerm3Convertible.allUpfront": "0.252",
						"yrTerm3Convertible.noUpfront": "0.278",
						"yrTerm3Convertible.partialUpfront": "0.258",
						"yrTerm3Standard.allUpfront": "0.212",
						"yrTerm3Standard.noUpfront": "0.242",
						"yrTerm3Standard.partialUpfront": "0.225"
					}
				},
				"mswin": {
					"ondemand": "0.822",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.661",
						"yrTerm1Standard.noUpfront": "0.683",
						"yrTerm1Standard.partialUpfront": "0.667",
						"yrTerm3Convertible.allUpfront": "0.620",
						"yrTerm3Convertible.noUpfront": "0.646",
						"yrTerm3Convertible.partialUpfront": "0.626",
						"yrTerm3Standard.allUpfront": "0.541",
						"yrTerm3Standard.noUpfront": "0.610",
						"yrTerm3Standard.partialUpfront": "0.576"
					}
				},
				"mswinSQL": {
					"ondemand": "3.075",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.196",
						"yrTerm1Standard.noUpfront": "2.623",
						"yrTerm1Standard.partialUpfront": "2.240",
						"yrTerm3Convertible.allUpfront": "2.161",
						"yrTerm3Convertible.noUpfront": "2.583",
						"yrTerm3Convertible.partialUpfront": "2.205",
						"yrTerm3Standard.allUpfront": "1.751",
						"yrTerm3Standard.noUpfront": "2.863",
						"yrTerm3Standard.partialUpfront": "1.862"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.352",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.865",
						"yrTerm1Standard.noUpfront": "0.824",
						"yrTerm1Standard.partialUpfront": "0.883",
						"yrTerm3Convertible.allUpfront": "0.761",
						"yrTerm3Convertible.noUpfront": "0.787",
						"yrTerm3Convertible.partialUpfront": "0.766",
						"yrTerm3Standard.allUpfront": "0.720",
						"yrTerm3Standard.noUpfront": "0.751",
						"yrTerm3Standard.partialUpfront": "0.734"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.453",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.289",
						"yrTerm1Standard.noUpfront": "0.311",
						"yrTerm1Standard.partialUpfront": "0.295",
						"yrTerm3Convertible.allUpfront": "0.248",
						"yrTerm3Convertible.noUpfront": "0.273",
						"yrTerm3Convertible.partialUpfront": "0.254",
						"yrTerm3Standard.allUpfront": "0.205",
						"yrTerm3Standard.noUpfront": "0.238",
						"yrTerm3Standard.partialUpfront": "0.218"
					}
				},
				"mswin": {
					"ondemand": "0.821",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.624",
						"yrTerm1Standard.noUpfront": "0.679",
						"yrTerm1Standard.partialUpfront": "0.637",
						"yrTerm3Convertible.allUpfront": "0.594",
						"yrTerm3Convertible.noUpfront": "0.641",
						"yrTerm3Convertible.partialUpfront": "0.606",
						"yrTerm3Standard.allUpfront": "0.507",
						"yrTerm3Standard.noUpfront": "0.606",
						"yrTerm3Standard.partialUpfront": "0.540"
					}
				},
				"mswinSQL": {
					"ondemand": "3.074",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.155",
						"yrTerm1Standard.noUpfront": "2.573",
						"yrTerm1Standard.partialUpfront": "2.200",
						"yrTerm3Convertible.allUpfront": "2.125",
						"yrTerm3Convertible.noUpfront": "2.537",
						"yrTerm3Convertible.partialUpfront": "2.169",
						"yrTerm3Standard.allUpfront": "1.581",
						"yrTerm3Standard.noUpfront": "2.859",
						"yrTerm3Standard.partialUpfront": "1.682"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.351",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.861",
						"yrTerm1Standard.noUpfront": "0.820",
						"yrTerm1Standard.partialUpfront": "0.879",
						"yrTerm3Convertible.allUpfront": "0.757",
						"yrTerm3Convertible.noUpfront": "0.782",
						"yrTerm3Convertible.partialUpfront": "0.762",
						"yrTerm3Standard.allUpfront": "0.714",
						"yrTerm3Standard.noUpfront": "0.747",
						"yrTerm3Standard.partialUpfront": "0.727"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.476",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.303",
						"yrTerm1Standard.noUpfront": "0.328",
						"yrTerm1Standard.partialUpfront": "0.310",
						"yrTerm3Convertible.allUpfront": "0.261",
						"yrTerm3Convertible.noUpfront": "0.288",
						"yrTerm3Convertible.partialUpfront": "0.266",
						"yrTerm3Standard.allUpfront": "0.215",
						"yrTerm3Standard.noUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.229"
					}
				},
				"mswin": {
					"ondemand": "0.844",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.671",
						"yrTerm1Standard.noUpfront": "0.696",
						"yrTerm1Standard.partialUpfront": "0.678",
						"yrTerm3Convertible.allUpfront": "0.629",
						"yrTerm3Convertible.noUpfront": "0.656",
						"yrTerm3Convertible.partialUpfront": "0.634",
						"yrTerm3Standard.allUpfront": "0.583",
						"yrTerm3Standard.noUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.597"
					}
				},
				"mswinSQL": {
					"ondemand": "3.097",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.924",
						"yrTerm1Standard.noUpfront": "2.949",
						"yrTerm1Standard.partialUpfront": "2.931",
						"yrTerm3Convertible.allUpfront": "2.882",
						"yrTerm3Convertible.noUpfront": "2.909",
						"yrTerm3Convertible.partialUpfront": "2.888",
						"yrTerm3Standard.allUpfront": "2.836",
						"yrTerm3Standard.noUpfront": "2.872",
						"yrTerm3Standard.partialUpfront": "2.850"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.985",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.812",
						"yrTerm1Standard.noUpfront": "0.837",
						"yrTerm1Standard.partialUpfront": "0.819",
						"yrTerm3Convertible.allUpfront": "0.770",
						"yrTerm3Convertible.noUpfront": "0.797",
						"yrTerm3Convertible.partialUpfront": "0.776",
						"yrTerm3Standard.allUpfront": "0.724",
						"yrTerm3Standard.noUpfront": "0.760",
						"yrTerm3Standard.partialUpfront": "0.738"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.618",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.411",
						"yrTerm1Standard.noUpfront": "0.441",
						"yrTerm1Standard.partialUpfront": "0.419",
						"yrTerm3Convertible.allUpfront": "0.325",
						"yrTerm3Convertible.noUpfront": "0.358",
						"yrTerm3Convertible.partialUpfront": "0.332",
						"yrTerm3Standard.allUpfront": "0.271",
						"yrTerm3Standard.noUpfront": "0.311",
						"yrTerm3Standard.partialUpfront": "0.288"
					}
				},
				"mswin": {
					"ondemand": "0.986",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.779",
						"yrTerm1Standard.noUpfront": "0.809",
						"yrTerm1Standard.partialUpfront": "0.787",
						"yrTerm3Convertible.allUpfront": "0.693",
						"yrTerm3Convertible.noUpfront": "0.726",
						"yrTerm3Convertible.partialUpfront": "0.700",
						"yrTerm3Standard.allUpfront": "0.639",
						"yrTerm3Standard.noUpfront": "0.679",
						"yrTerm3Standard.partialUpfront": "0.656"
					}
				},
				"mswinSQL": {
					"ondemand": "2.434",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.216",
						"yrTerm1Standard.noUpfront": "2.300",
						"yrTerm1Standard.partialUpfront": "2.225",
						"yrTerm3Convertible.allUpfront": "2.173",
						"yrTerm3Convertible.noUpfront": "2.248",
						"yrTerm3Convertible.partialUpfront": "2.181",
						"yrTerm3Standard.allUpfront": "2.069",
						"yrTerm3Standard.noUpfront": "2.087",
						"yrTerm3Standard.partialUpfront": "2.087"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.127",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.920",
						"yrTerm1Standard.noUpfront": "0.950",
						"yrTerm1Standard.partialUpfront": "0.928",
						"yrTerm3Convertible.allUpfront": "0.834",
						"yrTerm3Convertible.noUpfront": "0.867",
						"yrTerm3Convertible.partialUpfront": "0.840",
						"yrTerm3Standard.allUpfront": "0.780",
						"yrTerm3Standard.noUpfront": "0.820",
						"yrTerm3Standard.partialUpfront": "0.797"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.398",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.237",
						"yrTerm1Standard.noUpfront": "0.252",
						"yrTerm1Standard.partialUpfront": "0.242",
						"yrTerm3Convertible.allUpfront": "0.185",
						"yrTerm3Convertible.noUpfront": "0.204",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.155",
						"yrTerm3Standard.noUpfront": "0.177",
						"yrTerm3Standard.partialUpfront": "0.165"
					}
				},
				"mswin": {
					"ondemand": "0.766",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.580",
						"yrTerm1Standard.noUpfront": "0.620",
						"yrTerm1Standard.partialUpfront": "0.591",
						"yrTerm3Convertible.allUpfront": "0.553",
						"yrTerm3Convertible.noUpfront": "0.572",
						"yrTerm3Convertible.partialUpfront": "0.556",
						"yrTerm3Standard.allUpfront": "0.451",
						"yrTerm3Standard.noUpfront": "0.545",
						"yrTerm3Standard.partialUpfront": "0.480"
					}
				},
				"mswinSQL": {
					"ondemand": "3.019",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.114",
						"yrTerm1Standard.noUpfront": "2.525",
						"yrTerm1Standard.partialUpfront": "2.158",
						"yrTerm3Convertible.allUpfront": "2.087",
						"yrTerm3Convertible.noUpfront": "2.494",
						"yrTerm3Convertible.partialUpfront": "2.131",
						"yrTerm3Standard.allUpfront": "1.529",
						"yrTerm3Standard.noUpfront": "2.798",
						"yrTerm3Standard.partialUpfront": "1.626"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.296",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.809",
						"yrTerm1Standard.noUpfront": "0.761",
						"yrTerm1Standard.partialUpfront": "0.826",
						"yrTerm3Convertible.allUpfront": "0.694",
						"yrTerm3Convertible.noUpfront": "0.713",
						"yrTerm3Convertible.partialUpfront": "0.698",
						"yrTerm3Standard.allUpfront": "0.664",
						"yrTerm3Standard.noUpfront": "0.686",
						"yrTerm3Standard.partialUpfront": "0.674"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.398",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.237",
						"yrTerm1Standard.noUpfront": "0.252",
						"yrTerm1Standard.partialUpfront": "0.242",
						"yrTerm3Convertible.allUpfront": "0.185",
						"yrTerm3Convertible.noUpfront": "0.204",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.155",
						"yrTerm3Standard.noUpfront": "0.177",
						"yrTerm3Standard.partialUpfront": "0.165"
					}
				},
				"mswin": {
					"ondemand": "0.766",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.580",
						"yrTerm1Standard.noUpfront": "0.620",
						"yrTerm1Standard.partialUpfront": "0.591",
						"yrTerm3Convertible.allUpfront": "0.553",
						"yrTerm3Convertible.noUpfront": "0.572",
						"yrTerm3Convertible.partialUpfront": "0.556",
						"yrTerm3Standard.allUpfront": "0.451",
						"yrTerm3Standard.noUpfront": "0.545",
						"yrTerm3Standard.partialUpfront": "0.480"
					}
				},
				"mswinSQL": {
					"ondemand": "3.019",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.114",
						"yrTerm1Standard.noUpfront": "2.525",
						"yrTerm1Standard.partialUpfront": "2.158",
						"yrTerm3Convertible.allUpfront": "2.087",
						"yrTerm3Convertible.noUpfront": "2.494",
						"yrTerm3Convertible.partialUpfront": "2.131",
						"yrTerm3Standard.allUpfront": "1.529",
						"yrTerm3Standard.noUpfront": "2.798",
						"yrTerm3Standard.partialUpfront": "1.626"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.296",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.809",
						"yrTerm1Standard.noUpfront": "0.761",
						"yrTerm1Standard.partialUpfront": "0.826",
						"yrTerm3Convertible.allUpfront": "0.694",
						"yrTerm3Convertible.noUpfront": "0.713",
						"yrTerm3Convertible.partialUpfront": "0.698",
						"yrTerm3Standard.allUpfront": "0.664",
						"yrTerm3Standard.noUpfront": "0.686",
						"yrTerm3Standard.partialUpfront": "0.674"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.479",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.283",
						"yrTerm1Standard.noUpfront": "0.302",
						"yrTerm1Standard.partialUpfront": "0.289",
						"yrTerm3Convertible.allUpfront": "0.216",
						"yrTerm3Convertible.noUpfront": "0.238",
						"yrTerm3Convertible.partialUpfront": "0.220",
						"yrTerm3Standard.allUpfront": "0.179",
						"yrTerm3Standard.noUpfront": "0.207",
						"yrTerm3Standard.partialUpfront": "0.190"
					}
				},
				"mswin": {
					"ondemand": "0.847",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.651",
						"yrTerm1Standard.noUpfront": "0.670",
						"yrTerm1Standard.partialUpfront": "0.657",
						"yrTerm3Convertible.allUpfront": "0.584",
						"yrTerm3Convertible.noUpfront": "0.606",
						"yrTerm3Convertible.partialUpfront": "0.588",
						"yrTerm3Standard.allUpfront": "0.547",
						"yrTerm3Standard.noUpfront": "0.575",
						"yrTerm3Standard.partialUpfront": "0.558"
					}
				},
				"mswinSQL": {
					"ondemand": "2.288",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.082",
						"yrTerm1Standard.noUpfront": "2.140",
						"yrTerm1Standard.partialUpfront": "2.088",
						"yrTerm3Convertible.allUpfront": "2.054",
						"yrTerm3Convertible.noUpfront": "2.106",
						"yrTerm3Convertible.partialUpfront": "2.059",
						"yrTerm3Standard.allUpfront": "1.972",
						"yrTerm3Standard.noUpfront": "1.984",
						"yrTerm3Standard.partialUpfront": "1.984"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.988",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.792",
						"yrTerm1Standard.noUpfront": "0.811",
						"yrTerm1Standard.partialUpfront": "0.798",
						"yrTerm3Convertible.allUpfront": "0.725",
						"yrTerm3Convertible.noUpfront": "0.747",
						"yrTerm3Convertible.partialUpfront": "0.730",
						"yrTerm3Standard.allUpfront": "0.688",
						"yrTerm3Standard.noUpfront": "0.716",
						"yrTerm3Standard.partialUpfront": "0.699"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.498",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.318",
						"yrTerm1Standard.noUpfront": "0.340",
						"yrTerm1Standard.partialUpfront": "0.325",
						"yrTerm3Convertible.allUpfront": "0.257",
						"yrTerm3Convertible.noUpfront": "0.283",
						"yrTerm3Convertible.partialUpfront": "0.262",
						"yrTerm3Standard.allUpfront": "0.217",
						"yrTerm3Standard.noUpfront": "0.246",
						"yrTerm3Standard.partialUpfront": "0.231"
					}
				},
				"mswin": {
					"ondemand": "0.866",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.656",
						"yrTerm1Standard.noUpfront": "0.708",
						"yrTerm1Standard.partialUpfront": "0.670",
						"yrTerm3Convertible.allUpfront": "0.623",
						"yrTerm3Convertible.noUpfront": "0.651",
						"yrTerm3Convertible.partialUpfront": "0.630",
						"yrTerm3Standard.allUpfront": "0.519",
						"yrTerm3Standard.noUpfront": "0.614",
						"yrTerm3Standard.partialUpfront": "0.552"
					}
				},
				"mswinSQL": {
					"ondemand": "3.119",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.186",
						"yrTerm1Standard.noUpfront": "2.610",
						"yrTerm1Standard.partialUpfront": "2.230",
						"yrTerm3Convertible.allUpfront": "2.152",
						"yrTerm3Convertible.noUpfront": "2.571",
						"yrTerm3Convertible.partialUpfront": "2.196",
						"yrTerm3Standard.allUpfront": "1.594",
						"yrTerm3Standard.noUpfront": "2.867",
						"yrTerm3Standard.partialUpfront": "1.696"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.396",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.890",
						"yrTerm1Standard.noUpfront": "0.849",
						"yrTerm1Standard.partialUpfront": "0.909",
						"yrTerm3Convertible.allUpfront": "0.766",
						"yrTerm3Convertible.noUpfront": "0.792",
						"yrTerm3Convertible.partialUpfront": "0.772",
						"yrTerm3Standard.allUpfront": "0.726",
						"yrTerm3Standard.noUpfront": "0.755",
						"yrTerm3Standard.partialUpfront": "0.740"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.398",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.237",
						"yrTerm1Standard.noUpfront": "0.252",
						"yrTerm1Standard.partialUpfront": "0.242",
						"yrTerm3Convertible.allUpfront": "0.185",
						"yrTerm3Convertible.noUpfront": "0.204",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.155",
						"yrTerm3Standard.noUpfront": "0.177",
						"yrTerm3Standard.partialUpfront": "0.165"
					}
				},
				"mswin": {
					"ondemand": "0.766",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.580",
						"yrTerm1Standard.noUpfront": "0.620",
						"yrTerm1Standard.partialUpfront": "0.591",
						"yrTerm3Convertible.allUpfront": "0.553",
						"yrTerm3Convertible.noUpfront": "0.572",
						"yrTerm3Convertible.partialUpfront": "0.556",
						"yrTerm3Standard.allUpfront": "0.451",
						"yrTerm3Standard.noUpfront": "0.545",
						"yrTerm3Standard.partialUpfront": "0.480"
					}
				},
				"mswinSQL": {
					"ondemand": "3.019",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.114",
						"yrTerm1Standard.noUpfront": "2.525",
						"yrTerm1Standard.partialUpfront": "2.158",
						"yrTerm3Convertible.allUpfront": "2.087",
						"yrTerm3Convertible.noUpfront": "2.494",
						"yrTerm3Convertible.partialUpfront": "2.131",
						"yrTerm3Standard.allUpfront": "1.529",
						"yrTerm3Standard.noUpfront": "2.798",
						"yrTerm3Standard.partialUpfront": "1.626"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.296",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.809",
						"yrTerm1Standard.noUpfront": "0.761",
						"yrTerm1Standard.partialUpfront": "0.826",
						"yrTerm3Convertible.allUpfront": "0.694",
						"yrTerm3Convertible.noUpfront": "0.713",
						"yrTerm3Convertible.partialUpfront": "0.698",
						"yrTerm3Standard.allUpfront": "0.664",
						"yrTerm3Standard.noUpfront": "0.686",
						"yrTerm3Standard.partialUpfront": "0.674"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": true
	},
	{
		"ECU": 62,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 16000,
		"ebs_max_bandwidth": 2000,
		"ebs_optimized": true,
		"ebs_throughput": 250,
		"enhanced_networking": true,
		"family": "Compute optimized",
		"generation": "current",
		"instance_type": "c4.4xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 30,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "C4 High-CPU Quadruple Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.675",
						"yrTerm1Standard.noUpfront": "0.722",
						"yrTerm1Standard.partialUpfront": "0.689",
						"yrTerm3Convertible.allUpfront": "0.577",
						"yrTerm3Convertible.noUpfront": "0.636",
						"yrTerm3Convertible.partialUpfront": "0.588",
						"yrTerm3Standard.allUpfront": "0.486",
						"yrTerm3Standard.noUpfront": "0.553",
						"yrTerm3Standard.partialUpfront": "0.517"
					}
				},
				"mswin": {
					"ondemand": "1.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.355",
						"yrTerm1Standard.noUpfront": "1.458",
						"yrTerm1Standard.partialUpfront": "1.382",
						"yrTerm3Convertible.allUpfront": "1.284",
						"yrTerm3Convertible.noUpfront": "1.372",
						"yrTerm3Convertible.partialUpfront": "1.310",
						"yrTerm3Standard.allUpfront": "1.098",
						"yrTerm3Standard.noUpfront": "1.289",
						"yrTerm3Standard.partialUpfront": "1.168"
					}
				},
				"mswinSQL": {
					"ondemand": "5.761",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.704",
						"yrTerm1Standard.noUpfront": "4.426",
						"yrTerm1Standard.partialUpfront": "3.780",
						"yrTerm3Convertible.allUpfront": "3.633",
						"yrTerm3Convertible.noUpfront": "4.345",
						"yrTerm3Convertible.partialUpfront": "3.707",
						"yrTerm3Standard.allUpfront": "2.720",
						"yrTerm3Standard.noUpfront": "2.894",
						"yrTerm3Standard.partialUpfront": "2.894"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.026",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.572",
						"yrTerm1Standard.noUpfront": "1.740",
						"yrTerm1Standard.partialUpfront": "1.604",
						"yrTerm3Convertible.allUpfront": "1.501",
						"yrTerm3Convertible.noUpfront": "1.654",
						"yrTerm3Convertible.partialUpfront": "1.531",
						"yrTerm3Standard.allUpfront": "1.202",
						"yrTerm3Standard.noUpfront": "1.571",
						"yrTerm3Standard.partialUpfront": "1.280"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.907",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.575",
						"yrTerm1Standard.noUpfront": "0.613",
						"yrTerm1Standard.partialUpfront": "0.587",
						"yrTerm3Convertible.allUpfront": "0.496",
						"yrTerm3Convertible.noUpfront": "0.546",
						"yrTerm3Convertible.partialUpfront": "0.506",
						"yrTerm3Standard.allUpfront": "0.415",
						"yrTerm3Standard.noUpfront": "0.475",
						"yrTerm3Standard.partialUpfront": "0.441"
					}
				},
				"mswin": {
					"ondemand": "1.643",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.311",
						"yrTerm1Standard.noUpfront": "1.349",
						"yrTerm1Standard.partialUpfront": "1.323",
						"yrTerm3Convertible.allUpfront": "1.232",
						"yrTerm3Convertible.noUpfront": "1.282",
						"yrTerm3Convertible.partialUpfront": "1.242",
						"yrTerm3Standard.allUpfront": "1.151",
						"yrTerm3Standard.noUpfront": "1.211",
						"yrTerm3Standard.partialUpfront": "1.177"
					}
				},
				"mswinSQL": {
					"ondemand": "4.523",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.208",
						"yrTerm1Standard.noUpfront": "4.331",
						"yrTerm1Standard.partialUpfront": "4.221",
						"yrTerm3Convertible.allUpfront": "4.144",
						"yrTerm3Convertible.noUpfront": "4.255",
						"yrTerm3Convertible.partialUpfront": "4.155",
						"yrTerm3Standard.allUpfront": "4.028",
						"yrTerm3Standard.noUpfront": "4.058",
						"yrTerm3Standard.partialUpfront": "4.058"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.925",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.593",
						"yrTerm1Standard.noUpfront": "1.631",
						"yrTerm1Standard.partialUpfront": "1.605",
						"yrTerm3Convertible.allUpfront": "1.514",
						"yrTerm3Convertible.noUpfront": "1.564",
						"yrTerm3Convertible.partialUpfront": "1.524",
						"yrTerm3Standard.allUpfront": "1.433",
						"yrTerm3Standard.noUpfront": "1.493",
						"yrTerm3Standard.partialUpfront": "1.459"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.878",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.552",
						"yrTerm1Standard.noUpfront": "0.596",
						"yrTerm1Standard.partialUpfront": "0.563",
						"yrTerm3Convertible.allUpfront": "0.442",
						"yrTerm3Convertible.noUpfront": "0.487",
						"yrTerm3Convertible.partialUpfront": "0.450",
						"yrTerm3Standard.allUpfront": "0.370",
						"yrTerm3Standard.noUpfront": "0.423",
						"yrTerm3Standard.partialUpfront": "0.394"
					}
				},
				"mswin": {
					"ondemand": "1.614",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.288",
						"yrTerm1Standard.noUpfront": "1.332",
						"yrTerm1Standard.partialUpfront": "1.299",
						"yrTerm3Convertible.allUpfront": "1.178",
						"yrTerm3Convertible.noUpfront": "1.223",
						"yrTerm3Convertible.partialUpfront": "1.186",
						"yrTerm3Standard.allUpfront": "1.106",
						"yrTerm3Standard.noUpfront": "1.159",
						"yrTerm3Standard.partialUpfront": "1.130"
					}
				},
				"mswinSQL": {
					"ondemand": "4.665",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.258",
						"yrTerm1Standard.noUpfront": "4.392",
						"yrTerm1Standard.partialUpfront": "4.272",
						"yrTerm3Convertible.allUpfront": "4.189",
						"yrTerm3Convertible.noUpfront": "4.310",
						"yrTerm3Convertible.partialUpfront": "4.202",
						"yrTerm3Standard.allUpfront": "4.030",
						"yrTerm3Standard.noUpfront": "4.060",
						"yrTerm3Standard.partialUpfront": "4.060"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.896",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.570",
						"yrTerm1Standard.noUpfront": "1.614",
						"yrTerm1Standard.partialUpfront": "1.581",
						"yrTerm3Convertible.allUpfront": "1.460",
						"yrTerm3Convertible.noUpfront": "1.505",
						"yrTerm3Convertible.partialUpfront": "1.468",
						"yrTerm3Standard.allUpfront": "1.388",
						"yrTerm3Standard.noUpfront": "1.441",
						"yrTerm3Standard.partialUpfront": "1.412"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.924",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.581",
						"yrTerm1Standard.noUpfront": "0.630",
						"yrTerm1Standard.partialUpfront": "0.593",
						"yrTerm3Convertible.allUpfront": "0.469",
						"yrTerm3Convertible.noUpfront": "0.517",
						"yrTerm3Convertible.partialUpfront": "0.478",
						"yrTerm3Standard.allUpfront": "0.389",
						"yrTerm3Standard.noUpfront": "0.449",
						"yrTerm3Standard.partialUpfront": "0.414"
					}
				},
				"mswin": {
					"ondemand": "1.66",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.317",
						"yrTerm1Standard.noUpfront": "1.366",
						"yrTerm1Standard.partialUpfront": "1.329",
						"yrTerm3Convertible.allUpfront": "1.205",
						"yrTerm3Convertible.noUpfront": "1.253",
						"yrTerm3Convertible.partialUpfront": "1.214",
						"yrTerm3Standard.allUpfront": "1.072",
						"yrTerm3Standard.noUpfront": "1.185",
						"yrTerm3Standard.partialUpfront": "1.140"
					}
				},
				"mswinSQL": {
					"ondemand": "5.855",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.721",
						"yrTerm1Standard.noUpfront": "4.443",
						"yrTerm1Standard.partialUpfront": "3.797",
						"yrTerm3Convertible.allUpfront": "3.648",
						"yrTerm3Convertible.noUpfront": "4.357",
						"yrTerm3Convertible.partialUpfront": "3.722",
						"yrTerm3Standard.allUpfront": "2.696",
						"yrTerm3Standard.noUpfront": "5.691",
						"yrTerm3Standard.partialUpfront": "2.868"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.942",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.589",
						"yrTerm1Standard.noUpfront": "1.648",
						"yrTerm1Standard.partialUpfront": "1.611",
						"yrTerm3Convertible.allUpfront": "1.487",
						"yrTerm3Convertible.noUpfront": "1.535",
						"yrTerm3Convertible.partialUpfront": "1.496",
						"yrTerm3Standard.allUpfront": "1.178",
						"yrTerm3Standard.noUpfront": "1.467",
						"yrTerm3Standard.partialUpfront": "1.253"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.042",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.621",
						"yrTerm1Standard.noUpfront": "0.672",
						"yrTerm1Standard.partialUpfront": "0.634",
						"yrTerm3Convertible.allUpfront": "0.523",
						"yrTerm3Convertible.noUpfront": "0.576",
						"yrTerm3Convertible.partialUpfront": "0.534",
						"yrTerm3Standard.allUpfront": "0.438",
						"yrTerm3Standard.noUpfront": "0.501",
						"yrTerm3Standard.partialUpfront": "0.466"
					}
				},
				"mswin": {
					"ondemand": "1.778",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.334",
						"yrTerm1Standard.noUpfront": "1.408",
						"yrTerm1Standard.partialUpfront": "1.361",
						"yrTerm3Convertible.allUpfront": "1.259",
						"yrTerm3Convertible.noUpfront": "1.312",
						"yrTerm3Convertible.partialUpfront": "1.270",
						"yrTerm3Standard.allUpfront": "1.072",
						"yrTerm3Standard.noUpfront": "1.237",
						"yrTerm3Standard.partialUpfront": "1.140"
					}
				},
				"mswinSQL": {
					"ondemand": "5.797",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.685",
						"yrTerm1Standard.noUpfront": "4.400",
						"yrTerm1Standard.partialUpfront": "3.759",
						"yrTerm3Convertible.allUpfront": "3.615",
						"yrTerm3Convertible.noUpfront": "4.318",
						"yrTerm3Convertible.partialUpfront": "3.689",
						"yrTerm3Standard.allUpfront": "2.696",
						"yrTerm3Standard.noUpfront": "5.743",
						"yrTerm3Standard.partialUpfront": "2.868"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.06",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.552",
						"yrTerm1Standard.noUpfront": "1.690",
						"yrTerm1Standard.partialUpfront": "1.584",
						"yrTerm3Convertible.allUpfront": "1.483",
						"yrTerm3Convertible.noUpfront": "1.594",
						"yrTerm3Convertible.partialUpfront": "1.513",
						"yrTerm3Standard.allUpfront": "1.178",
						"yrTerm3Standard.noUpfront": "1.519",
						"yrTerm3Standard.partialUpfront": "1.253"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.876",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.549",
						"yrTerm1Standard.noUpfront": "0.588",
						"yrTerm1Standard.partialUpfront": "0.561",
						"yrTerm3Convertible.allUpfront": "0.415",
						"yrTerm3Convertible.noUpfront": "0.457",
						"yrTerm3Convertible.partialUpfront": "0.424",
						"yrTerm3Standard.allUpfront": "0.341",
						"yrTerm3Standard.noUpfront": "0.397",
						"yrTerm3Standard.partialUpfront": "0.363"
					}
				},
				"mswin": {
					"ondemand": "1.612",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.285",
						"yrTerm1Standard.noUpfront": "1.324",
						"yrTerm1Standard.partialUpfront": "1.297",
						"yrTerm3Convertible.allUpfront": "1.151",
						"yrTerm3Convertible.noUpfront": "1.193",
						"yrTerm3Convertible.partialUpfront": "1.160",
						"yrTerm3Standard.allUpfront": "1.077",
						"yrTerm3Standard.noUpfront": "1.133",
						"yrTerm3Standard.partialUpfront": "1.099"
					}
				},
				"mswinSQL": {
					"ondemand": "6.118",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.791",
						"yrTerm1Standard.noUpfront": "5.830",
						"yrTerm1Standard.partialUpfront": "5.803",
						"yrTerm3Convertible.allUpfront": "5.657",
						"yrTerm3Convertible.noUpfront": "5.699",
						"yrTerm3Convertible.partialUpfront": "5.666",
						"yrTerm3Standard.allUpfront": "5.583",
						"yrTerm3Standard.noUpfront": "5.639",
						"yrTerm3Standard.partialUpfront": "5.605"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.894",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.567",
						"yrTerm1Standard.noUpfront": "1.606",
						"yrTerm1Standard.partialUpfront": "1.579",
						"yrTerm3Convertible.allUpfront": "1.433",
						"yrTerm3Convertible.noUpfront": "1.475",
						"yrTerm3Convertible.partialUpfront": "1.442",
						"yrTerm3Standard.allUpfront": "1.359",
						"yrTerm3Standard.noUpfront": "1.415",
						"yrTerm3Standard.partialUpfront": "1.381"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.909",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.586",
						"yrTerm1Standard.noUpfront": "0.630",
						"yrTerm1Standard.partialUpfront": "0.598",
						"yrTerm3Convertible.allUpfront": "0.505",
						"yrTerm3Convertible.noUpfront": "0.556",
						"yrTerm3Convertible.partialUpfront": "0.516",
						"yrTerm3Standard.allUpfront": "0.422",
						"yrTerm3Standard.noUpfront": "0.484",
						"yrTerm3Standard.partialUpfront": "0.449"
					}
				},
				"mswin": {
					"ondemand": "1.645",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.322",
						"yrTerm1Standard.noUpfront": "1.366",
						"yrTerm1Standard.partialUpfront": "1.334",
						"yrTerm3Convertible.allUpfront": "1.241",
						"yrTerm3Convertible.noUpfront": "1.292",
						"yrTerm3Convertible.partialUpfront": "1.252",
						"yrTerm3Standard.allUpfront": "1.083",
						"yrTerm3Standard.noUpfront": "1.220",
						"yrTerm3Standard.partialUpfront": "1.152"
					}
				},
				"mswinSQL": {
					"ondemand": "5.769",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.685",
						"yrTerm1Standard.noUpfront": "4.402",
						"yrTerm1Standard.partialUpfront": "3.760",
						"yrTerm3Convertible.allUpfront": "3.616",
						"yrTerm3Convertible.noUpfront": "4.322",
						"yrTerm3Convertible.partialUpfront": "3.690",
						"yrTerm3Standard.allUpfront": "2.939",
						"yrTerm3Standard.noUpfront": "5.726",
						"yrTerm3Standard.partialUpfront": "3.126"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.927",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.551",
						"yrTerm1Standard.noUpfront": "1.648",
						"yrTerm1Standard.partialUpfront": "1.581",
						"yrTerm3Convertible.allUpfront": "1.482",
						"yrTerm3Convertible.noUpfront": "1.574",
						"yrTerm3Convertible.partialUpfront": "1.511",
						"yrTerm3Standard.allUpfront": "1.188",
						"yrTerm3Standard.noUpfront": "1.502",
						"yrTerm3Standard.partialUpfront": "1.264"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.905",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.579",
						"yrTerm1Standard.noUpfront": "0.622",
						"yrTerm1Standard.partialUpfront": "0.591",
						"yrTerm3Convertible.allUpfront": "0.496",
						"yrTerm3Convertible.noUpfront": "0.546",
						"yrTerm3Convertible.partialUpfront": "0.506",
						"yrTerm3Standard.allUpfront": "0.410",
						"yrTerm3Standard.noUpfront": "0.475",
						"yrTerm3Standard.partialUpfront": "0.436"
					}
				},
				"mswin": {
					"ondemand": "1.641",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.247",
						"yrTerm1Standard.noUpfront": "1.358",
						"yrTerm1Standard.partialUpfront": "1.274",
						"yrTerm3Convertible.allUpfront": "1.186",
						"yrTerm3Convertible.noUpfront": "1.282",
						"yrTerm3Convertible.partialUpfront": "1.211",
						"yrTerm3Standard.allUpfront": "1.014",
						"yrTerm3Standard.noUpfront": "1.211",
						"yrTerm3Standard.partialUpfront": "1.078"
					}
				},
				"mswinSQL": {
					"ondemand": "5.653",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.603",
						"yrTerm1Standard.noUpfront": "4.302",
						"yrTerm1Standard.partialUpfront": "3.677",
						"yrTerm3Convertible.allUpfront": "3.542",
						"yrTerm3Convertible.noUpfront": "4.231",
						"yrTerm3Convertible.partialUpfront": "3.615",
						"yrTerm3Standard.allUpfront": "2.641",
						"yrTerm3Standard.noUpfront": "2.810",
						"yrTerm3Standard.partialUpfront": "2.810"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.923",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.470",
						"yrTerm1Standard.noUpfront": "1.640",
						"yrTerm1Standard.partialUpfront": "1.501",
						"yrTerm3Convertible.allUpfront": "1.409",
						"yrTerm3Convertible.noUpfront": "1.564",
						"yrTerm3Convertible.partialUpfront": "1.439",
						"yrTerm3Standard.allUpfront": "1.123",
						"yrTerm3Standard.noUpfront": "1.493",
						"yrTerm3Standard.partialUpfront": "1.194"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.95",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.608",
						"yrTerm1Standard.noUpfront": "0.655",
						"yrTerm1Standard.partialUpfront": "0.620",
						"yrTerm3Convertible.allUpfront": "0.523",
						"yrTerm3Convertible.noUpfront": "0.576",
						"yrTerm3Convertible.partialUpfront": "0.534",
						"yrTerm3Standard.allUpfront": "0.431",
						"yrTerm3Standard.noUpfront": "0.501",
						"yrTerm3Standard.partialUpfront": "0.458"
					}
				},
				"mswin": {
					"ondemand": "1.686",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.344",
						"yrTerm1Standard.noUpfront": "1.391",
						"yrTerm1Standard.partialUpfront": "1.356",
						"yrTerm3Convertible.allUpfront": "1.259",
						"yrTerm3Convertible.noUpfront": "1.312",
						"yrTerm3Convertible.partialUpfront": "1.270",
						"yrTerm3Standard.allUpfront": "1.167",
						"yrTerm3Standard.noUpfront": "1.237",
						"yrTerm3Standard.partialUpfront": "1.194"
					}
				},
				"mswinSQL": {
					"ondemand": "6.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.850",
						"yrTerm1Standard.noUpfront": "5.897",
						"yrTerm1Standard.partialUpfront": "5.862",
						"yrTerm3Convertible.allUpfront": "5.765",
						"yrTerm3Convertible.noUpfront": "5.818",
						"yrTerm3Convertible.partialUpfront": "5.776",
						"yrTerm3Standard.allUpfront": "5.673",
						"yrTerm3Standard.noUpfront": "5.743",
						"yrTerm3Standard.partialUpfront": "5.700"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.968",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.626",
						"yrTerm1Standard.noUpfront": "1.673",
						"yrTerm1Standard.partialUpfront": "1.638",
						"yrTerm3Convertible.allUpfront": "1.541",
						"yrTerm3Convertible.noUpfront": "1.594",
						"yrTerm3Convertible.partialUpfront": "1.552",
						"yrTerm3Standard.allUpfront": "1.449",
						"yrTerm3Standard.noUpfront": "1.519",
						"yrTerm3Standard.partialUpfront": "1.476"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.235",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.822",
						"yrTerm1Standard.noUpfront": "0.882",
						"yrTerm1Standard.partialUpfront": "0.839",
						"yrTerm3Convertible.allUpfront": "0.649",
						"yrTerm3Convertible.noUpfront": "0.715",
						"yrTerm3Convertible.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.540",
						"yrTerm3Standard.noUpfront": "0.622",
						"yrTerm3Standard.partialUpfront": "0.575"
					}
				},
				"mswin": {
					"ondemand": "1.971",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.558",
						"yrTerm1Standard.noUpfront": "1.618",
						"yrTerm1Standard.partialUpfront": "1.575",
						"yrTerm3Convertible.allUpfront": "1.385",
						"yrTerm3Convertible.noUpfront": "1.451",
						"yrTerm3Convertible.partialUpfront": "1.398",
						"yrTerm3Standard.allUpfront": "1.276",
						"yrTerm3Standard.noUpfront": "1.358",
						"yrTerm3Standard.partialUpfront": "1.311"
					}
				},
				"mswinSQL": {
					"ondemand": "4.868",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.433",
						"yrTerm1Standard.noUpfront": "4.601",
						"yrTerm1Standard.partialUpfront": "4.451",
						"yrTerm3Convertible.allUpfront": "4.347",
						"yrTerm3Convertible.noUpfront": "4.498",
						"yrTerm3Convertible.partialUpfront": "4.363",
						"yrTerm3Standard.allUpfront": "4.137",
						"yrTerm3Standard.noUpfront": "4.173",
						"yrTerm3Standard.partialUpfront": "4.173"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.253",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.840",
						"yrTerm1Standard.noUpfront": "1.900",
						"yrTerm1Standard.partialUpfront": "1.857",
						"yrTerm3Convertible.allUpfront": "1.667",
						"yrTerm3Convertible.noUpfront": "1.733",
						"yrTerm3Convertible.partialUpfront": "1.680",
						"yrTerm3Standard.allUpfront": "1.559",
						"yrTerm3Standard.noUpfront": "1.640",
						"yrTerm3Standard.partialUpfront": "1.593"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.796",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.473",
						"yrTerm1Standard.noUpfront": "0.504",
						"yrTerm1Standard.partialUpfront": "0.483",
						"yrTerm3Convertible.allUpfront": "0.370",
						"yrTerm3Convertible.noUpfront": "0.407",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.310",
						"yrTerm3Standard.noUpfront": "0.354",
						"yrTerm3Standard.partialUpfront": "0.330"
					}
				},
				"mswin": {
					"ondemand": "1.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.160",
						"yrTerm1Standard.noUpfront": "1.240",
						"yrTerm1Standard.partialUpfront": "1.184",
						"yrTerm3Convertible.allUpfront": "1.106",
						"yrTerm3Convertible.noUpfront": "1.143",
						"yrTerm3Convertible.partialUpfront": "1.114",
						"yrTerm3Standard.allUpfront": "0.903",
						"yrTerm3Standard.noUpfront": "1.090",
						"yrTerm3Standard.partialUpfront": "0.960"
					}
				},
				"mswinSQL": {
					"ondemand": "5.538",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.520",
						"yrTerm1Standard.noUpfront": "4.203",
						"yrTerm1Standard.partialUpfront": "3.592",
						"yrTerm3Convertible.allUpfront": "3.468",
						"yrTerm3Convertible.noUpfront": "4.141",
						"yrTerm3Convertible.partialUpfront": "3.538",
						"yrTerm3Standard.allUpfront": "2.536",
						"yrTerm3Standard.noUpfront": "2.698",
						"yrTerm3Standard.partialUpfront": "2.698"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.814",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.387",
						"yrTerm1Standard.noUpfront": "1.522",
						"yrTerm1Standard.partialUpfront": "1.416",
						"yrTerm3Convertible.allUpfront": "1.335",
						"yrTerm3Convertible.noUpfront": "1.425",
						"yrTerm3Convertible.partialUpfront": "1.362",
						"yrTerm3Standard.allUpfront": "1.017",
						"yrTerm3Standard.noUpfront": "1.372",
						"yrTerm3Standard.partialUpfront": "1.082"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.796",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.473",
						"yrTerm1Standard.noUpfront": "0.504",
						"yrTerm1Standard.partialUpfront": "0.483",
						"yrTerm3Convertible.allUpfront": "0.370",
						"yrTerm3Convertible.noUpfront": "0.407",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.310",
						"yrTerm3Standard.noUpfront": "0.354",
						"yrTerm3Standard.partialUpfront": "0.330"
					}
				},
				"mswin": {
					"ondemand": "1.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.160",
						"yrTerm1Standard.noUpfront": "1.240",
						"yrTerm1Standard.partialUpfront": "1.184",
						"yrTerm3Convertible.allUpfront": "1.106",
						"yrTerm3Convertible.noUpfront": "1.143",
						"yrTerm3Convertible.partialUpfront": "1.114",
						"yrTerm3Standard.allUpfront": "0.903",
						"yrTerm3Standard.noUpfront": "1.090",
						"yrTerm3Standard.partialUpfront": "0.960"
					}
				},
				"mswinSQL": {
					"ondemand": "5.538",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.520",
						"yrTerm1Standard.noUpfront": "4.203",
						"yrTerm1Standard.partialUpfront": "3.592",
						"yrTerm3Convertible.allUpfront": "3.468",
						"yrTerm3Convertible.noUpfront": "4.141",
						"yrTerm3Convertible.partialUpfront": "3.538",
						"yrTerm3Standard.allUpfront": "2.536",
						"yrTerm3Standard.noUpfront": "2.698",
						"yrTerm3Standard.partialUpfront": "2.698"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.814",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.387",
						"yrTerm1Standard.noUpfront": "1.522",
						"yrTerm1Standard.partialUpfront": "1.416",
						"yrTerm3Convertible.allUpfront": "1.335",
						"yrTerm3Convertible.noUpfront": "1.425",
						"yrTerm3Convertible.partialUpfront": "1.362",
						"yrTerm3Standard.allUpfront": "1.017",
						"yrTerm3Standard.noUpfront": "1.372",
						"yrTerm3Standard.partialUpfront": "1.082"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.958",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.566",
						"yrTerm1Standard.noUpfront": "0.605",
						"yrTerm1Standard.partialUpfront": "0.578",
						"yrTerm3Convertible.allUpfront": "0.433",
						"yrTerm3Convertible.noUpfront": "0.477",
						"yrTerm3Convertible.partialUpfront": "0.442",
						"yrTerm3Standard.allUpfront": "0.358",
						"yrTerm3Standard.noUpfront": "0.415",
						"yrTerm3Standard.partialUpfront": "0.381"
					}
				},
				"mswin": {
					"ondemand": "1.694",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.302",
						"yrTerm1Standard.noUpfront": "1.341",
						"yrTerm1Standard.partialUpfront": "1.314",
						"yrTerm3Convertible.allUpfront": "1.169",
						"yrTerm3Convertible.noUpfront": "1.213",
						"yrTerm3Convertible.partialUpfront": "1.178",
						"yrTerm3Standard.allUpfront": "1.094",
						"yrTerm3Standard.noUpfront": "1.151",
						"yrTerm3Standard.partialUpfront": "1.117"
					}
				},
				"mswinSQL": {
					"ondemand": "4.576",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.164",
						"yrTerm1Standard.noUpfront": "4.279",
						"yrTerm1Standard.partialUpfront": "4.176",
						"yrTerm3Convertible.allUpfront": "4.107",
						"yrTerm3Convertible.noUpfront": "4.211",
						"yrTerm3Convertible.partialUpfront": "4.118",
						"yrTerm3Standard.allUpfront": "3.945",
						"yrTerm3Standard.noUpfront": "3.969",
						"yrTerm3Standard.partialUpfront": "3.969"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.584",
						"yrTerm1Standard.noUpfront": "1.623",
						"yrTerm1Standard.partialUpfront": "1.596",
						"yrTerm3Convertible.allUpfront": "1.451",
						"yrTerm3Convertible.noUpfront": "1.495",
						"yrTerm3Convertible.partialUpfront": "1.460",
						"yrTerm3Standard.allUpfront": "1.376",
						"yrTerm3Standard.noUpfront": "1.433",
						"yrTerm3Standard.partialUpfront": "1.399"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.997",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.637",
						"yrTerm1Standard.noUpfront": "0.680",
						"yrTerm1Standard.partialUpfront": "0.650",
						"yrTerm3Convertible.allUpfront": "0.514",
						"yrTerm3Convertible.noUpfront": "0.566",
						"yrTerm3Convertible.partialUpfront": "0.524",
						"yrTerm3Standard.allUpfront": "0.433",
						"yrTerm3Standard.noUpfront": "0.492",
						"yrTerm3Standard.partialUpfront": "0.461"
					}
				},
				"mswin": {
					"ondemand": "1.733",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.312",
						"yrTerm1Standard.noUpfront": "1.416",
						"yrTerm1Standard.partialUpfront": "1.338",
						"yrTerm3Convertible.allUpfront": "1.245",
						"yrTerm3Convertible.noUpfront": "1.302",
						"yrTerm3Convertible.partialUpfront": "1.260",
						"yrTerm3Standard.allUpfront": "1.039",
						"yrTerm3Standard.noUpfront": "1.228",
						"yrTerm3Standard.partialUpfront": "1.106"
					}
				},
				"mswinSQL": {
					"ondemand": "5.749",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.664",
						"yrTerm1Standard.noUpfront": "4.375",
						"yrTerm1Standard.partialUpfront": "3.738",
						"yrTerm3Convertible.allUpfront": "3.597",
						"yrTerm3Convertible.noUpfront": "4.297",
						"yrTerm3Convertible.partialUpfront": "3.670",
						"yrTerm3Standard.allUpfront": "2.665",
						"yrTerm3Standard.noUpfront": "2.835",
						"yrTerm3Standard.partialUpfront": "2.835"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.015",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.531",
						"yrTerm1Standard.noUpfront": "1.698",
						"yrTerm1Standard.partialUpfront": "1.562",
						"yrTerm3Convertible.allUpfront": "1.464",
						"yrTerm3Convertible.noUpfront": "1.584",
						"yrTerm3Convertible.partialUpfront": "1.494",
						"yrTerm3Standard.allUpfront": "1.147",
						"yrTerm3Standard.noUpfront": "1.510",
						"yrTerm3Standard.partialUpfront": "1.220"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.796",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.473",
						"yrTerm1Standard.noUpfront": "0.504",
						"yrTerm1Standard.partialUpfront": "0.483",
						"yrTerm3Convertible.allUpfront": "0.370",
						"yrTerm3Convertible.noUpfront": "0.407",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.310",
						"yrTerm3Standard.noUpfront": "0.354",
						"yrTerm3Standard.partialUpfront": "0.330"
					}
				},
				"mswin": {
					"ondemand": "1.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.160",
						"yrTerm1Standard.noUpfront": "1.240",
						"yrTerm1Standard.partialUpfront": "1.184",
						"yrTerm3Convertible.allUpfront": "1.106",
						"yrTerm3Convertible.noUpfront": "1.143",
						"yrTerm3Convertible.partialUpfront": "1.114",
						"yrTerm3Standard.allUpfront": "0.903",
						"yrTerm3Standard.noUpfront": "1.090",
						"yrTerm3Standard.partialUpfront": "0.960"
					}
				},
				"mswinSQL": {
					"ondemand": "5.538",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.520",
						"yrTerm1Standard.noUpfront": "4.203",
						"yrTerm1Standard.partialUpfront": "3.592",
						"yrTerm3Convertible.allUpfront": "3.468",
						"yrTerm3Convertible.noUpfront": "4.141",
						"yrTerm3Convertible.partialUpfront": "3.538",
						"yrTerm3Standard.allUpfront": "2.536",
						"yrTerm3Standard.noUpfront": "2.698",
						"yrTerm3Standard.partialUpfront": "2.698"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.814",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.387",
						"yrTerm1Standard.noUpfront": "1.522",
						"yrTerm1Standard.partialUpfront": "1.416",
						"yrTerm3Convertible.allUpfront": "1.335",
						"yrTerm3Convertible.noUpfront": "1.425",
						"yrTerm3Convertible.partialUpfront": "1.362",
						"yrTerm3Standard.allUpfront": "1.017",
						"yrTerm3Standard.noUpfront": "1.372",
						"yrTerm3Standard.partialUpfront": "1.082"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 132,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 32000,
		"ebs_max_bandwidth": 4000,
		"ebs_optimized": true,
		"ebs_throughput": 500,
		"enhanced_networking": true,
		"family": "Compute optimized",
		"generation": "current",
		"instance_type": "c4.8xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 60,
		"network_performance": "10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "C4 High-CPU Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.350",
						"yrTerm1Standard.noUpfront": "1.445",
						"yrTerm1Standard.partialUpfront": "1.378",
						"yrTerm3Convertible.allUpfront": "1.154",
						"yrTerm3Convertible.noUpfront": "1.272",
						"yrTerm3Convertible.partialUpfront": "1.178",
						"yrTerm3Standard.allUpfront": "0.971",
						"yrTerm3Standard.noUpfront": "1.106",
						"yrTerm3Standard.partialUpfront": "1.033"
					}
				},
				"mswin": {
					"ondemand": "3.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.708",
						"yrTerm1Standard.noUpfront": "3.101",
						"yrTerm1Standard.partialUpfront": "2.764",
						"yrTerm3Convertible.allUpfront": "2.566",
						"yrTerm3Convertible.noUpfront": "2.928",
						"yrTerm3Convertible.partialUpfront": "2.619",
						"yrTerm3Standard.allUpfront": "2.194",
						"yrTerm3Standard.noUpfront": "2.762",
						"yrTerm3Standard.partialUpfront": "2.334"
					}
				},
				"mswinSQL": {
					"ondemand": "12.932",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.410",
						"yrTerm1Standard.noUpfront": "8.855",
						"yrTerm1Standard.partialUpfront": "7.561",
						"yrTerm3Convertible.allUpfront": "7.267",
						"yrTerm3Convertible.noUpfront": "8.693",
						"yrTerm3Convertible.partialUpfront": "7.416",
						"yrTerm3Standard.allUpfront": "6.103",
						"yrTerm3Standard.noUpfront": "6.493",
						"yrTerm3Standard.partialUpfront": "6.493"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.306",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.010",
						"yrTerm1Standard.noUpfront": "3.602",
						"yrTerm1Standard.partialUpfront": "3.072",
						"yrTerm3Convertible.allUpfront": "2.867",
						"yrTerm3Convertible.noUpfront": "3.440",
						"yrTerm3Convertible.partialUpfront": "2.926",
						"yrTerm3Standard.allUpfront": "2.405",
						"yrTerm3Standard.noUpfront": "3.396",
						"yrTerm3Standard.partialUpfront": "2.558"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.815",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.152",
						"yrTerm1Standard.noUpfront": "1.226",
						"yrTerm1Standard.partialUpfront": "1.175",
						"yrTerm3Convertible.allUpfront": "0.992",
						"yrTerm3Convertible.noUpfront": "1.093",
						"yrTerm3Convertible.partialUpfront": "1.012",
						"yrTerm3Standard.allUpfront": "0.828",
						"yrTerm3Standard.noUpfront": "0.950",
						"yrTerm3Standard.partialUpfront": "0.881"
					}
				},
				"mswin": {
					"ondemand": "3.471",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.807",
						"yrTerm1Standard.noUpfront": "2.882",
						"yrTerm1Standard.partialUpfront": "2.831",
						"yrTerm3Convertible.allUpfront": "2.648",
						"yrTerm3Convertible.noUpfront": "2.749",
						"yrTerm3Convertible.partialUpfront": "2.668",
						"yrTerm3Standard.allUpfront": "2.484",
						"yrTerm3Standard.noUpfront": "2.606",
						"yrTerm3Standard.partialUpfront": "2.537"
					}
				},
				"mswinSQL": {
					"ondemand": "9.938",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.308",
						"yrTerm1Standard.noUpfront": "9.556",
						"yrTerm1Standard.partialUpfront": "9.334",
						"yrTerm3Convertible.allUpfront": "9.180",
						"yrTerm3Convertible.noUpfront": "9.403",
						"yrTerm3Convertible.partialUpfront": "9.203",
						"yrTerm3Standard.allUpfront": "8.948",
						"yrTerm3Standard.noUpfront": "9.007",
						"yrTerm3Standard.partialUpfront": "9.007"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.105",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.442",
						"yrTerm1Standard.noUpfront": "3.516",
						"yrTerm1Standard.partialUpfront": "3.465",
						"yrTerm3Convertible.allUpfront": "3.282",
						"yrTerm3Convertible.noUpfront": "3.383",
						"yrTerm3Convertible.partialUpfront": "3.302",
						"yrTerm3Standard.allUpfront": "3.118",
						"yrTerm3Standard.noUpfront": "3.240",
						"yrTerm3Standard.partialUpfront": "3.171"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.756",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.105",
						"yrTerm1Standard.noUpfront": "1.193",
						"yrTerm1Standard.partialUpfront": "1.128",
						"yrTerm3Convertible.allUpfront": "0.884",
						"yrTerm3Convertible.noUpfront": "0.974",
						"yrTerm3Convertible.partialUpfront": "0.902",
						"yrTerm3Standard.allUpfront": "0.741",
						"yrTerm3Standard.noUpfront": "0.847",
						"yrTerm3Standard.partialUpfront": "0.788"
					}
				},
				"mswin": {
					"ondemand": "3.412",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.761",
						"yrTerm1Standard.noUpfront": "2.849",
						"yrTerm1Standard.partialUpfront": "2.784",
						"yrTerm3Convertible.allUpfront": "2.540",
						"yrTerm3Convertible.noUpfront": "2.630",
						"yrTerm3Convertible.partialUpfront": "2.558",
						"yrTerm3Standard.allUpfront": "2.397",
						"yrTerm3Standard.noUpfront": "2.503",
						"yrTerm3Standard.partialUpfront": "2.444"
					}
				},
				"mswinSQL": {
					"ondemand": "10.223",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.410",
						"yrTerm1Standard.noUpfront": "9.678",
						"yrTerm1Standard.partialUpfront": "9.438",
						"yrTerm3Convertible.allUpfront": "9.272",
						"yrTerm3Convertible.noUpfront": "9.513",
						"yrTerm3Convertible.partialUpfront": "9.297",
						"yrTerm3Standard.allUpfront": "8.954",
						"yrTerm3Standard.noUpfront": "9.013",
						"yrTerm3Standard.partialUpfront": "9.013"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.046",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.395",
						"yrTerm1Standard.noUpfront": "3.483",
						"yrTerm1Standard.partialUpfront": "3.418",
						"yrTerm3Convertible.allUpfront": "3.174",
						"yrTerm3Convertible.noUpfront": "3.264",
						"yrTerm3Convertible.partialUpfront": "3.192",
						"yrTerm3Standard.allUpfront": "3.031",
						"yrTerm3Standard.noUpfront": "3.137",
						"yrTerm3Standard.partialUpfront": "3.078"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.848",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.163",
						"yrTerm1Standard.noUpfront": "1.260",
						"yrTerm1Standard.partialUpfront": "1.187",
						"yrTerm3Convertible.allUpfront": "0.938",
						"yrTerm3Convertible.noUpfront": "1.033",
						"yrTerm3Convertible.partialUpfront": "0.956",
						"yrTerm3Standard.allUpfront": "0.780",
						"yrTerm3Standard.noUpfront": "0.899",
						"yrTerm3Standard.partialUpfront": "0.830"
					}
				},
				"mswin": {
					"ondemand": "3.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.742",
						"yrTerm1Standard.noUpfront": "2.916",
						"yrTerm1Standard.partialUpfront": "2.798",
						"yrTerm3Convertible.allUpfront": "2.594",
						"yrTerm3Convertible.noUpfront": "2.689",
						"yrTerm3Convertible.partialUpfront": "2.612",
						"yrTerm3Standard.allUpfront": "2.143",
						"yrTerm3Standard.noUpfront": "2.555",
						"yrTerm3Standard.partialUpfront": "2.280"
					}
				},
				"mswinSQL": {
					"ondemand": "13.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.442",
						"yrTerm1Standard.noUpfront": "8.886",
						"yrTerm1Standard.partialUpfront": "7.594",
						"yrTerm3Convertible.allUpfront": "7.297",
						"yrTerm3Convertible.noUpfront": "8.714",
						"yrTerm3Convertible.partialUpfront": "7.446",
						"yrTerm3Standard.allUpfront": "6.055",
						"yrTerm3Standard.noUpfront": "12.693",
						"yrTerm3Standard.partialUpfront": "6.442"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.138",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.042",
						"yrTerm1Standard.noUpfront": "3.550",
						"yrTerm1Standard.partialUpfront": "3.105",
						"yrTerm3Convertible.allUpfront": "2.897",
						"yrTerm3Convertible.noUpfront": "3.323",
						"yrTerm3Convertible.partialUpfront": "2.956",
						"yrTerm3Standard.allUpfront": "2.357",
						"yrTerm3Standard.noUpfront": "3.189",
						"yrTerm3Standard.partialUpfront": "2.507"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.085",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.244",
						"yrTerm1Standard.noUpfront": "1.344",
						"yrTerm1Standard.partialUpfront": "1.269",
						"yrTerm3Convertible.allUpfront": "1.046",
						"yrTerm3Convertible.noUpfront": "1.153",
						"yrTerm3Convertible.partialUpfront": "1.068",
						"yrTerm3Standard.allUpfront": "0.877",
						"yrTerm3Standard.noUpfront": "1.002",
						"yrTerm3Standard.partialUpfront": "0.933"
					}
				},
				"mswin": {
					"ondemand": "3.741",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.666",
						"yrTerm1Standard.noUpfront": "3.000",
						"yrTerm1Standard.partialUpfront": "2.720",
						"yrTerm3Convertible.allUpfront": "2.527",
						"yrTerm3Convertible.noUpfront": "2.809",
						"yrTerm3Convertible.partialUpfront": "2.579",
						"yrTerm3Standard.allUpfront": "2.143",
						"yrTerm3Standard.noUpfront": "2.658",
						"yrTerm3Standard.partialUpfront": "2.280"
					}
				},
				"mswinSQL": {
					"ondemand": "13.005",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.370",
						"yrTerm1Standard.noUpfront": "8.800",
						"yrTerm1Standard.partialUpfront": "7.520",
						"yrTerm3Convertible.allUpfront": "7.232",
						"yrTerm3Convertible.noUpfront": "8.637",
						"yrTerm3Convertible.partialUpfront": "7.379",
						"yrTerm3Standard.allUpfront": "6.055",
						"yrTerm3Standard.noUpfront": "12.796",
						"yrTerm3Standard.partialUpfront": "6.442"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.375",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.970",
						"yrTerm1Standard.noUpfront": "3.547",
						"yrTerm1Standard.partialUpfront": "3.030",
						"yrTerm3Convertible.allUpfront": "2.832",
						"yrTerm3Convertible.noUpfront": "3.384",
						"yrTerm3Convertible.partialUpfront": "2.889",
						"yrTerm3Standard.allUpfront": "2.357",
						"yrTerm3Standard.noUpfront": "3.292",
						"yrTerm3Standard.partialUpfront": "2.507"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.75",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.099",
						"yrTerm1Standard.noUpfront": "1.176",
						"yrTerm1Standard.partialUpfront": "1.121",
						"yrTerm3Convertible.allUpfront": "0.829",
						"yrTerm3Convertible.noUpfront": "0.914",
						"yrTerm3Convertible.partialUpfront": "0.846",
						"yrTerm3Standard.allUpfront": "0.683",
						"yrTerm3Standard.noUpfront": "0.795",
						"yrTerm3Standard.partialUpfront": "0.727"
					}
				},
				"mswin": {
					"ondemand": "3.406",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.755",
						"yrTerm1Standard.noUpfront": "2.832",
						"yrTerm1Standard.partialUpfront": "2.777",
						"yrTerm3Convertible.allUpfront": "2.485",
						"yrTerm3Convertible.noUpfront": "2.570",
						"yrTerm3Convertible.partialUpfront": "2.502",
						"yrTerm3Standard.allUpfront": "2.339",
						"yrTerm3Standard.noUpfront": "2.451",
						"yrTerm3Standard.partialUpfront": "2.383"
					}
				},
				"mswinSQL": {
					"ondemand": "13.544",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.893",
						"yrTerm1Standard.noUpfront": "12.970",
						"yrTerm1Standard.partialUpfront": "12.915",
						"yrTerm3Convertible.allUpfront": "12.623",
						"yrTerm3Convertible.noUpfront": "12.708",
						"yrTerm3Convertible.partialUpfront": "12.640",
						"yrTerm3Standard.allUpfront": "12.477",
						"yrTerm3Standard.noUpfront": "12.589",
						"yrTerm3Standard.partialUpfront": "12.521"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.04",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.389",
						"yrTerm1Standard.noUpfront": "3.466",
						"yrTerm1Standard.partialUpfront": "3.411",
						"yrTerm3Convertible.allUpfront": "3.119",
						"yrTerm3Convertible.noUpfront": "3.204",
						"yrTerm3Convertible.partialUpfront": "3.136",
						"yrTerm3Standard.allUpfront": "2.973",
						"yrTerm3Standard.noUpfront": "3.085",
						"yrTerm3Standard.partialUpfront": "3.017"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.817",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.173",
						"yrTerm1Standard.noUpfront": "1.260",
						"yrTerm1Standard.partialUpfront": "1.197",
						"yrTerm3Convertible.allUpfront": "1.010",
						"yrTerm3Convertible.noUpfront": "1.113",
						"yrTerm3Convertible.partialUpfront": "1.030",
						"yrTerm3Standard.allUpfront": "0.845",
						"yrTerm3Standard.noUpfront": "0.968",
						"yrTerm3Standard.partialUpfront": "0.899"
					}
				},
				"mswin": {
					"ondemand": "3.473",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.665",
						"yrTerm1Standard.noUpfront": "2.916",
						"yrTerm1Standard.partialUpfront": "2.718",
						"yrTerm3Convertible.allUpfront": "2.527",
						"yrTerm3Convertible.noUpfront": "2.769",
						"yrTerm3Convertible.partialUpfront": "2.577",
						"yrTerm3Standard.allUpfront": "2.164",
						"yrTerm3Standard.noUpfront": "2.624",
						"yrTerm3Standard.partialUpfront": "2.302"
					}
				},
				"mswinSQL": {
					"ondemand": "12.948",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.368",
						"yrTerm1Standard.noUpfront": "8.801",
						"yrTerm1Standard.partialUpfront": "7.518",
						"yrTerm3Convertible.allUpfront": "7.230",
						"yrTerm3Convertible.noUpfront": "8.641",
						"yrTerm3Convertible.partialUpfront": "7.377",
						"yrTerm3Standard.allUpfront": "6.075",
						"yrTerm3Standard.noUpfront": "12.762",
						"yrTerm3Standard.partialUpfront": "6.462"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.107",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.968",
						"yrTerm1Standard.noUpfront": "3.548",
						"yrTerm1Standard.partialUpfront": "3.029",
						"yrTerm3Convertible.allUpfront": "2.830",
						"yrTerm3Convertible.noUpfront": "3.388",
						"yrTerm3Convertible.partialUpfront": "2.888",
						"yrTerm3Standard.allUpfront": "2.375",
						"yrTerm3Standard.noUpfront": "3.258",
						"yrTerm3Standard.partialUpfront": "2.527"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.811",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.156",
						"yrTerm1Standard.noUpfront": "1.243",
						"yrTerm1Standard.partialUpfront": "1.180",
						"yrTerm3Convertible.allUpfront": "0.992",
						"yrTerm3Convertible.noUpfront": "1.093",
						"yrTerm3Convertible.partialUpfront": "1.012",
						"yrTerm3Standard.allUpfront": "0.821",
						"yrTerm3Standard.noUpfront": "0.950",
						"yrTerm3Standard.partialUpfront": "0.873"
					}
				},
				"mswin": {
					"ondemand": "3.334",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.494",
						"yrTerm1Standard.noUpfront": "2.899",
						"yrTerm1Standard.partialUpfront": "2.545",
						"yrTerm3Convertible.allUpfront": "2.372",
						"yrTerm3Convertible.noUpfront": "2.749",
						"yrTerm3Convertible.partialUpfront": "2.421",
						"yrTerm3Standard.allUpfront": "2.027",
						"yrTerm3Standard.noUpfront": "2.606",
						"yrTerm3Standard.partialUpfront": "2.156"
					}
				},
				"mswinSQL": {
					"ondemand": "12.716",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.205",
						"yrTerm1Standard.noUpfront": "8.605",
						"yrTerm1Standard.partialUpfront": "7.351",
						"yrTerm3Convertible.allUpfront": "7.084",
						"yrTerm3Convertible.noUpfront": "8.462",
						"yrTerm3Convertible.partialUpfront": "7.227",
						"yrTerm3Standard.allUpfront": "5.944",
						"yrTerm3Standard.noUpfront": "6.324",
						"yrTerm3Standard.partialUpfront": "6.324"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.101",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.806",
						"yrTerm1Standard.noUpfront": "3.353",
						"yrTerm1Standard.partialUpfront": "2.864",
						"yrTerm3Convertible.allUpfront": "2.685",
						"yrTerm3Convertible.noUpfront": "3.210",
						"yrTerm3Convertible.partialUpfront": "2.739",
						"yrTerm3Standard.allUpfront": "2.245",
						"yrTerm3Standard.noUpfront": "3.240",
						"yrTerm3Standard.partialUpfront": "2.388"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.902",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.215",
						"yrTerm1Standard.noUpfront": "1.310",
						"yrTerm1Standard.partialUpfront": "1.239",
						"yrTerm3Convertible.allUpfront": "1.046",
						"yrTerm3Convertible.noUpfront": "1.153",
						"yrTerm3Convertible.partialUpfront": "1.068",
						"yrTerm3Standard.allUpfront": "0.861",
						"yrTerm3Standard.noUpfront": "1.002",
						"yrTerm3Standard.partialUpfront": "0.916"
					}
				},
				"mswin": {
					"ondemand": "3.558",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.871",
						"yrTerm1Standard.noUpfront": "2.966",
						"yrTerm1Standard.partialUpfront": "2.895",
						"yrTerm3Convertible.allUpfront": "2.702",
						"yrTerm3Convertible.noUpfront": "2.809",
						"yrTerm3Convertible.partialUpfront": "2.724",
						"yrTerm3Standard.allUpfront": "2.517",
						"yrTerm3Standard.noUpfront": "2.658",
						"yrTerm3Standard.partialUpfront": "2.572"
					}
				},
				"mswinSQL": {
					"ondemand": "13.696",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.009",
						"yrTerm1Standard.noUpfront": "13.104",
						"yrTerm1Standard.partialUpfront": "13.033",
						"yrTerm3Convertible.allUpfront": "12.840",
						"yrTerm3Convertible.noUpfront": "12.947",
						"yrTerm3Convertible.partialUpfront": "12.862",
						"yrTerm3Standard.allUpfront": "12.655",
						"yrTerm3Standard.noUpfront": "12.796",
						"yrTerm3Standard.partialUpfront": "12.710"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.505",
						"yrTerm1Standard.noUpfront": "3.600",
						"yrTerm1Standard.partialUpfront": "3.529",
						"yrTerm3Convertible.allUpfront": "3.336",
						"yrTerm3Convertible.noUpfront": "3.443",
						"yrTerm3Convertible.partialUpfront": "3.358",
						"yrTerm3Standard.allUpfront": "3.151",
						"yrTerm3Standard.noUpfront": "3.292",
						"yrTerm3Standard.partialUpfront": "3.206"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.47",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.643",
						"yrTerm1Standard.noUpfront": "1.764",
						"yrTerm1Standard.partialUpfront": "1.677",
						"yrTerm3Convertible.allUpfront": "1.298",
						"yrTerm3Convertible.noUpfront": "1.431",
						"yrTerm3Convertible.partialUpfront": "1.324",
						"yrTerm3Standard.allUpfront": "1.081",
						"yrTerm3Standard.noUpfront": "1.244",
						"yrTerm3Standard.partialUpfront": "1.150"
					}
				},
				"mswin": {
					"ondemand": "4.126",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.299",
						"yrTerm1Standard.noUpfront": "3.420",
						"yrTerm1Standard.partialUpfront": "3.333",
						"yrTerm3Convertible.allUpfront": "2.954",
						"yrTerm3Convertible.noUpfront": "3.087",
						"yrTerm3Convertible.partialUpfront": "2.980",
						"yrTerm3Standard.allUpfront": "2.737",
						"yrTerm3Standard.noUpfront": "2.900",
						"yrTerm3Standard.partialUpfront": "2.806"
					}
				},
				"mswinSQL": {
					"ondemand": "10.628",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.758",
						"yrTerm1Standard.noUpfront": "10.093",
						"yrTerm1Standard.partialUpfront": "9.793",
						"yrTerm3Convertible.allUpfront": "9.585",
						"yrTerm3Convertible.noUpfront": "9.887",
						"yrTerm3Convertible.partialUpfront": "9.617",
						"yrTerm3Standard.allUpfront": "9.165",
						"yrTerm3Standard.noUpfront": "9.238",
						"yrTerm3Standard.partialUpfront": "9.238"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.76",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.933",
						"yrTerm1Standard.noUpfront": "4.054",
						"yrTerm1Standard.partialUpfront": "3.967",
						"yrTerm3Convertible.allUpfront": "3.588",
						"yrTerm3Convertible.noUpfront": "3.721",
						"yrTerm3Convertible.partialUpfront": "3.614",
						"yrTerm3Standard.allUpfront": "3.371",
						"yrTerm3Standard.noUpfront": "3.534",
						"yrTerm3Standard.partialUpfront": "3.440"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.591",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.947",
						"yrTerm1Standard.noUpfront": "1.008",
						"yrTerm1Standard.partialUpfront": "0.966",
						"yrTerm3Convertible.allUpfront": "0.739",
						"yrTerm3Convertible.noUpfront": "0.815",
						"yrTerm3Convertible.partialUpfront": "0.754",
						"yrTerm3Standard.allUpfront": "0.621",
						"yrTerm3Standard.noUpfront": "0.708",
						"yrTerm3Standard.partialUpfront": "0.661"
					}
				},
				"mswin": {
					"ondemand": "3.091",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.319",
						"yrTerm1Standard.noUpfront": "2.664",
						"yrTerm1Standard.partialUpfront": "2.366",
						"yrTerm3Convertible.allUpfront": "2.214",
						"yrTerm3Convertible.noUpfront": "2.471",
						"yrTerm3Convertible.partialUpfront": "2.259",
						"yrTerm3Standard.allUpfront": "1.805",
						"yrTerm3Standard.noUpfront": "2.364",
						"yrTerm3Standard.partialUpfront": "1.920"
					}
				},
				"mswinSQL": {
					"ondemand": "12.485",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.040",
						"yrTerm1Standard.noUpfront": "8.407",
						"yrTerm1Standard.partialUpfront": "7.184",
						"yrTerm3Convertible.allUpfront": "6.935",
						"yrTerm3Convertible.noUpfront": "8.283",
						"yrTerm3Convertible.partialUpfront": "7.077",
						"yrTerm3Standard.allUpfront": "5.734",
						"yrTerm3Standard.noUpfront": "6.100",
						"yrTerm3Standard.partialUpfront": "6.100"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.881",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.640",
						"yrTerm1Standard.noUpfront": "3.154",
						"yrTerm1Standard.partialUpfront": "2.694",
						"yrTerm3Convertible.allUpfront": "2.535",
						"yrTerm3Convertible.noUpfront": "3.030",
						"yrTerm3Convertible.partialUpfront": "2.587",
						"yrTerm3Standard.allUpfront": "2.035",
						"yrTerm3Standard.noUpfront": "2.998",
						"yrTerm3Standard.partialUpfront": "2.166"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.591",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.947",
						"yrTerm1Standard.noUpfront": "1.008",
						"yrTerm1Standard.partialUpfront": "0.966",
						"yrTerm3Convertible.allUpfront": "0.739",
						"yrTerm3Convertible.noUpfront": "0.815",
						"yrTerm3Convertible.partialUpfront": "0.754",
						"yrTerm3Standard.allUpfront": "0.621",
						"yrTerm3Standard.noUpfront": "0.708",
						"yrTerm3Standard.partialUpfront": "0.661"
					}
				},
				"mswin": {
					"ondemand": "3.091",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.319",
						"yrTerm1Standard.noUpfront": "2.664",
						"yrTerm1Standard.partialUpfront": "2.366",
						"yrTerm3Convertible.allUpfront": "2.214",
						"yrTerm3Convertible.noUpfront": "2.471",
						"yrTerm3Convertible.partialUpfront": "2.259",
						"yrTerm3Standard.allUpfront": "1.805",
						"yrTerm3Standard.noUpfront": "2.364",
						"yrTerm3Standard.partialUpfront": "1.920"
					}
				},
				"mswinSQL": {
					"ondemand": "12.485",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.040",
						"yrTerm1Standard.noUpfront": "8.407",
						"yrTerm1Standard.partialUpfront": "7.184",
						"yrTerm3Convertible.allUpfront": "6.935",
						"yrTerm3Convertible.noUpfront": "8.283",
						"yrTerm3Convertible.partialUpfront": "7.077",
						"yrTerm3Standard.allUpfront": "5.734",
						"yrTerm3Standard.noUpfront": "6.100",
						"yrTerm3Standard.partialUpfront": "6.100"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.881",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.640",
						"yrTerm1Standard.noUpfront": "3.154",
						"yrTerm1Standard.partialUpfront": "2.694",
						"yrTerm3Convertible.allUpfront": "2.535",
						"yrTerm3Convertible.noUpfront": "3.030",
						"yrTerm3Convertible.partialUpfront": "2.587",
						"yrTerm3Standard.allUpfront": "2.035",
						"yrTerm3Standard.noUpfront": "2.998",
						"yrTerm3Standard.partialUpfront": "2.166"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "1.915",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.131",
						"yrTerm1Standard.noUpfront": "1.210",
						"yrTerm1Standard.partialUpfront": "1.154",
						"yrTerm3Convertible.allUpfront": "0.866",
						"yrTerm3Convertible.noUpfront": "0.954",
						"yrTerm3Convertible.partialUpfront": "0.884",
						"yrTerm3Standard.allUpfront": "0.715",
						"yrTerm3Standard.noUpfront": "0.829",
						"yrTerm3Standard.partialUpfront": "0.761"
					}
				},
				"mswin": {
					"ondemand": "3.571",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.787",
						"yrTerm1Standard.noUpfront": "2.866",
						"yrTerm1Standard.partialUpfront": "2.810",
						"yrTerm3Convertible.allUpfront": "2.522",
						"yrTerm3Convertible.noUpfront": "2.610",
						"yrTerm3Convertible.partialUpfront": "2.540",
						"yrTerm3Standard.allUpfront": "2.371",
						"yrTerm3Standard.noUpfront": "2.485",
						"yrTerm3Standard.partialUpfront": "2.417"
					}
				},
				"mswinSQL": {
					"ondemand": "10.044",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.219",
						"yrTerm1Standard.noUpfront": "9.450",
						"yrTerm1Standard.partialUpfront": "9.243",
						"yrTerm3Convertible.allUpfront": "9.106",
						"yrTerm3Convertible.noUpfront": "9.315",
						"yrTerm3Convertible.partialUpfront": "9.128",
						"yrTerm3Standard.allUpfront": "8.781",
						"yrTerm3Standard.noUpfront": "8.829",
						"yrTerm3Standard.partialUpfront": "8.829"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.205",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.421",
						"yrTerm1Standard.noUpfront": "3.500",
						"yrTerm1Standard.partialUpfront": "3.444",
						"yrTerm3Convertible.allUpfront": "3.156",
						"yrTerm3Convertible.noUpfront": "3.244",
						"yrTerm3Convertible.partialUpfront": "3.174",
						"yrTerm3Standard.allUpfront": "3.005",
						"yrTerm3Standard.noUpfront": "3.119",
						"yrTerm3Standard.partialUpfront": "3.051"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.993",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.273",
						"yrTerm1Standard.noUpfront": "1.361",
						"yrTerm1Standard.partialUpfront": "1.299",
						"yrTerm3Convertible.allUpfront": "1.028",
						"yrTerm3Convertible.noUpfront": "1.133",
						"yrTerm3Convertible.partialUpfront": "1.048",
						"yrTerm3Standard.allUpfront": "0.866",
						"yrTerm3Standard.noUpfront": "0.985",
						"yrTerm3Standard.partialUpfront": "0.921"
					}
				},
				"mswin": {
					"ondemand": "3.536",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.623",
						"yrTerm1Standard.noUpfront": "3.017",
						"yrTerm1Standard.partialUpfront": "2.676",
						"yrTerm3Convertible.allUpfront": "2.489",
						"yrTerm3Convertible.noUpfront": "2.789",
						"yrTerm3Convertible.partialUpfront": "2.539",
						"yrTerm3Standard.allUpfront": "2.077",
						"yrTerm3Standard.noUpfront": "2.641",
						"yrTerm3Standard.partialUpfront": "2.210"
					}
				},
				"mswinSQL": {
					"ondemand": "12.908",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.328",
						"yrTerm1Standard.noUpfront": "8.751",
						"yrTerm1Standard.partialUpfront": "7.478",
						"yrTerm3Convertible.allUpfront": "7.194",
						"yrTerm3Convertible.noUpfront": "8.594",
						"yrTerm3Convertible.partialUpfront": "7.341",
						"yrTerm3Standard.allUpfront": "5.992",
						"yrTerm3Standard.noUpfront": "12.779",
						"yrTerm3Standard.partialUpfront": "6.375"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.283",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.928",
						"yrTerm1Standard.noUpfront": "3.498",
						"yrTerm1Standard.partialUpfront": "2.988",
						"yrTerm3Convertible.allUpfront": "2.794",
						"yrTerm3Convertible.noUpfront": "3.341",
						"yrTerm3Convertible.partialUpfront": "2.851",
						"yrTerm3Standard.allUpfront": "2.293",
						"yrTerm3Standard.noUpfront": "3.275",
						"yrTerm3Standard.partialUpfront": "2.439"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.591",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.947",
						"yrTerm1Standard.noUpfront": "1.008",
						"yrTerm1Standard.partialUpfront": "0.966",
						"yrTerm3Convertible.allUpfront": "0.739",
						"yrTerm3Convertible.noUpfront": "0.815",
						"yrTerm3Convertible.partialUpfront": "0.754",
						"yrTerm3Standard.allUpfront": "0.621",
						"yrTerm3Standard.noUpfront": "0.708",
						"yrTerm3Standard.partialUpfront": "0.661"
					}
				},
				"mswin": {
					"ondemand": "3.091",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.319",
						"yrTerm1Standard.noUpfront": "2.664",
						"yrTerm1Standard.partialUpfront": "2.366",
						"yrTerm3Convertible.allUpfront": "2.214",
						"yrTerm3Convertible.noUpfront": "2.471",
						"yrTerm3Convertible.partialUpfront": "2.259",
						"yrTerm3Standard.allUpfront": "1.805",
						"yrTerm3Standard.noUpfront": "2.364",
						"yrTerm3Standard.partialUpfront": "1.920"
					}
				},
				"mswinSQL": {
					"ondemand": "12.485",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.040",
						"yrTerm1Standard.noUpfront": "8.407",
						"yrTerm1Standard.partialUpfront": "7.184",
						"yrTerm3Convertible.allUpfront": "6.935",
						"yrTerm3Convertible.noUpfront": "8.283",
						"yrTerm3Convertible.partialUpfront": "7.077",
						"yrTerm3Standard.allUpfront": "5.734",
						"yrTerm3Standard.noUpfront": "6.100",
						"yrTerm3Standard.partialUpfront": "6.100"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.881",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.640",
						"yrTerm1Standard.noUpfront": "3.154",
						"yrTerm1Standard.partialUpfront": "2.694",
						"yrTerm3Convertible.allUpfront": "2.535",
						"yrTerm3Convertible.noUpfront": "3.030",
						"yrTerm3Convertible.partialUpfront": "2.587",
						"yrTerm3Standard.allUpfront": "2.035",
						"yrTerm3Standard.noUpfront": "2.998",
						"yrTerm3Standard.partialUpfront": "2.166"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 36,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 7,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64",
			"i386"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": true,
		"family": "Compute optimized",
		"generation": "current",
		"instance_type": "c3.large",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 3.75,
		"network_performance": "Moderate",
		"placement_group_support": true,
		"pretty_name": "C3 High-CPU Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.128",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.086",
						"yrTerm1Standard.noUpfront": "0.097",
						"yrTerm1Standard.partialUpfront": "0.088",
						"yrTerm3Convertible.allUpfront": "0.077",
						"yrTerm3Convertible.noUpfront": "0.087",
						"yrTerm3Convertible.partialUpfront": "0.079",
						"yrTerm3Standard.allUpfront": "0.058",
						"yrTerm3Standard.partialUpfront": "0.062"
					}
				},
				"mswin": {
					"ondemand": "0.231",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.156",
						"yrTerm1Standard.noUpfront": "0.187",
						"yrTerm1Standard.partialUpfront": "0.160",
						"yrTerm3Convertible.allUpfront": "0.148",
						"yrTerm3Convertible.noUpfront": "0.177",
						"yrTerm3Convertible.partialUpfront": "0.151",
						"yrTerm3Standard.allUpfront": "0.128",
						"yrTerm3Standard.partialUpfront": "0.136"
					}
				},
				"mswinSQL": {
					"ondemand": "0.572",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.384",
						"yrTerm1Standard.noUpfront": "0.459",
						"yrTerm1Standard.partialUpfront": "0.392",
						"yrTerm3Convertible.allUpfront": "0.376",
						"yrTerm3Convertible.noUpfront": "0.449",
						"yrTerm3Convertible.partialUpfront": "0.383",
						"yrTerm3Standard.allUpfront": "0.336",
						"yrTerm3Standard.partialUpfront": "0.357"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.271",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.188",
						"yrTerm1Standard.noUpfront": "0.224",
						"yrTerm1Standard.partialUpfront": "0.192",
						"yrTerm3Convertible.allUpfront": "0.179",
						"yrTerm3Convertible.noUpfront": "0.214",
						"yrTerm3Convertible.partialUpfront": "0.183",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.partialUpfront": "0.159"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.132",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.083",
						"yrTerm1Standard.noUpfront": "0.098",
						"yrTerm1Standard.partialUpfront": "0.085",
						"yrTerm3Convertible.allUpfront": "0.075",
						"yrTerm3Convertible.noUpfront": "0.088",
						"yrTerm3Convertible.partialUpfront": "0.076",
						"yrTerm3Standard.allUpfront": "0.056",
						"yrTerm3Standard.partialUpfront": "0.060"
					}
				},
				"mswin": {
					"ondemand": "0.238",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.154",
						"yrTerm1Standard.noUpfront": "0.183",
						"yrTerm1Standard.partialUpfront": "0.157",
						"yrTerm3Convertible.allUpfront": "0.145",
						"yrTerm3Convertible.noUpfront": "0.173",
						"yrTerm3Convertible.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.122",
						"yrTerm3Standard.partialUpfront": "0.129"
					}
				},
				"mswinSQL": {
					"ondemand": "0.561",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.363",
						"yrTerm1Standard.noUpfront": "0.433",
						"yrTerm1Standard.partialUpfront": "0.370",
						"yrTerm3Convertible.allUpfront": "0.354",
						"yrTerm3Convertible.noUpfront": "0.423",
						"yrTerm3Convertible.partialUpfront": "0.361",
						"yrTerm3Standard.allUpfront": "0.314",
						"yrTerm3Standard.partialUpfront": "0.334"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.271",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.182",
						"yrTerm1Standard.noUpfront": "0.217",
						"yrTerm1Standard.partialUpfront": "0.185",
						"yrTerm3Convertible.allUpfront": "0.173",
						"yrTerm3Convertible.noUpfront": "0.207",
						"yrTerm3Convertible.partialUpfront": "0.177",
						"yrTerm3Standard.allUpfront": "0.144",
						"yrTerm3Standard.partialUpfront": "0.153"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.132",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.083",
						"yrTerm1Standard.noUpfront": "0.098",
						"yrTerm1Standard.partialUpfront": "0.085",
						"yrTerm3Convertible.allUpfront": "0.075",
						"yrTerm3Convertible.noUpfront": "0.088",
						"yrTerm3Convertible.partialUpfront": "0.076",
						"yrTerm3Standard.allUpfront": "0.056",
						"yrTerm3Standard.partialUpfront": "0.060"
					}
				},
				"mswin": {
					"ondemand": "0.238",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.154",
						"yrTerm1Standard.noUpfront": "0.183",
						"yrTerm1Standard.partialUpfront": "0.157",
						"yrTerm3Convertible.allUpfront": "0.145",
						"yrTerm3Convertible.noUpfront": "0.173",
						"yrTerm3Convertible.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.122",
						"yrTerm3Standard.partialUpfront": "0.129"
					}
				},
				"mswinSQL": {
					"ondemand": "0.561",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.363",
						"yrTerm1Standard.noUpfront": "0.433",
						"yrTerm1Standard.partialUpfront": "0.370",
						"yrTerm3Convertible.allUpfront": "0.354",
						"yrTerm3Convertible.noUpfront": "0.423",
						"yrTerm3Convertible.partialUpfront": "0.361",
						"yrTerm3Standard.allUpfront": "0.314",
						"yrTerm3Standard.partialUpfront": "0.334"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.271",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.182",
						"yrTerm1Standard.noUpfront": "0.217",
						"yrTerm1Standard.partialUpfront": "0.185",
						"yrTerm3Convertible.allUpfront": "0.173",
						"yrTerm3Convertible.noUpfront": "0.207",
						"yrTerm3Convertible.partialUpfront": "0.177",
						"yrTerm3Standard.allUpfront": "0.144",
						"yrTerm3Standard.partialUpfront": "0.153"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.129",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.083",
						"yrTerm1Standard.noUpfront": "0.096",
						"yrTerm1Standard.partialUpfront": "0.084",
						"yrTerm3Convertible.allUpfront": "0.074",
						"yrTerm3Convertible.noUpfront": "0.086",
						"yrTerm3Convertible.partialUpfront": "0.076",
						"yrTerm3Standard.allUpfront": "0.056",
						"yrTerm3Standard.partialUpfront": "0.060"
					}
				},
				"mswin": {
					"ondemand": "0.212",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.159",
						"yrTerm1Standard.noUpfront": "0.190",
						"yrTerm1Standard.partialUpfront": "0.162",
						"yrTerm3Convertible.allUpfront": "0.151",
						"yrTerm3Convertible.noUpfront": "0.180",
						"yrTerm3Convertible.partialUpfront": "0.154",
						"yrTerm3Standard.allUpfront": "0.125",
						"yrTerm3Standard.partialUpfront": "0.133"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.437",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.182",
						"yrTerm1Standard.noUpfront": "0.217",
						"yrTerm1Standard.partialUpfront": "0.185",
						"yrTerm3Convertible.allUpfront": "0.173",
						"yrTerm3Convertible.noUpfront": "0.207",
						"yrTerm3Convertible.partialUpfront": "0.177",
						"yrTerm3Standard.allUpfront": "0.142",
						"yrTerm3Standard.partialUpfront": "0.152"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.077",
						"yrTerm1Standard.noUpfront": "0.090",
						"yrTerm1Standard.partialUpfront": "0.078",
						"yrTerm3Convertible.allUpfront": "0.069",
						"yrTerm3Convertible.noUpfront": "0.081",
						"yrTerm3Convertible.partialUpfront": "0.070",
						"yrTerm3Standard.allUpfront": "0.052",
						"yrTerm3Standard.partialUpfront": "0.055"
					}
				},
				"mswin": {
					"ondemand": "0.188",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.156",
						"yrTerm1Standard.noUpfront": "0.186",
						"yrTerm1Standard.partialUpfront": "0.159",
						"yrTerm3Convertible.allUpfront": "0.148",
						"yrTerm3Convertible.noUpfront": "0.177",
						"yrTerm3Convertible.partialUpfront": "0.151",
						"yrTerm3Standard.allUpfront": "0.123",
						"yrTerm3Standard.partialUpfront": "0.131"
					}
				},
				"mswinSQL": {
					"ondemand": "0.561",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.340",
						"yrTerm1Standard.noUpfront": "0.406",
						"yrTerm1Standard.partialUpfront": "0.347",
						"yrTerm3Convertible.allUpfront": "0.332",
						"yrTerm3Convertible.noUpfront": "0.397",
						"yrTerm3Convertible.partialUpfront": "0.339",
						"yrTerm3Standard.allUpfront": "0.294",
						"yrTerm3Standard.partialUpfront": "0.313"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.271",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.161",
						"yrTerm1Standard.noUpfront": "0.192",
						"yrTerm1Standard.partialUpfront": "0.164",
						"yrTerm3Convertible.allUpfront": "0.153",
						"yrTerm3Convertible.noUpfront": "0.183",
						"yrTerm3Convertible.partialUpfront": "0.156",
						"yrTerm3Standard.allUpfront": "0.126",
						"yrTerm3Standard.partialUpfront": "0.134"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.163",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.108",
						"yrTerm1Standard.noUpfront": "0.123",
						"yrTerm1Standard.partialUpfront": "0.110",
						"yrTerm3Convertible.allUpfront": "0.097",
						"yrTerm3Convertible.noUpfront": "0.111",
						"yrTerm3Convertible.partialUpfront": "0.099",
						"yrTerm3Standard.allUpfront": "0.070",
						"yrTerm3Standard.partialUpfront": "0.074"
					}
				},
				"mswin": {
					"ondemand": "0.246",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.216",
						"yrTerm1Standard.noUpfront": "0.229",
						"yrTerm1Standard.partialUpfront": "0.221",
						"yrTerm3Convertible.allUpfront": "0.205",
						"yrTerm3Convertible.noUpfront": "0.217",
						"yrTerm3Convertible.partialUpfront": "0.210",
						"yrTerm3Standard.allUpfront": "0.140",
						"yrTerm3Standard.partialUpfront": "0.148"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.329",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.243",
						"yrTerm1Standard.noUpfront": "0.290",
						"yrTerm1Standard.partialUpfront": "0.248",
						"yrTerm3Convertible.allUpfront": "0.232",
						"yrTerm3Convertible.noUpfront": "0.278",
						"yrTerm3Convertible.partialUpfront": "0.237",
						"yrTerm3Standard.allUpfront": "0.157",
						"yrTerm3Standard.partialUpfront": "0.166"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.105",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.062",
						"yrTerm1Standard.noUpfront": "0.073",
						"yrTerm1Standard.partialUpfront": "0.063",
						"yrTerm3Convertible.allUpfront": "0.056",
						"yrTerm3Convertible.noUpfront": "0.066",
						"yrTerm3Convertible.partialUpfront": "0.057",
						"yrTerm3Standard.allUpfront": "0.039",
						"yrTerm3Standard.partialUpfront": "0.041"
					}
				},
				"mswin": {
					"ondemand": "0.188",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.138",
						"yrTerm1Standard.noUpfront": "0.165",
						"yrTerm1Standard.partialUpfront": "0.141",
						"yrTerm3Convertible.allUpfront": "0.132",
						"yrTerm3Convertible.noUpfront": "0.158",
						"yrTerm3Convertible.partialUpfront": "0.134",
						"yrTerm3Standard.allUpfront": "0.108",
						"yrTerm3Standard.partialUpfront": "0.115"
					}
				},
				"mswinSQL": {
					"ondemand": "0.561",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.340",
						"yrTerm1Standard.noUpfront": "0.406",
						"yrTerm1Standard.partialUpfront": "0.347",
						"yrTerm3Convertible.allUpfront": "0.334",
						"yrTerm3Convertible.noUpfront": "0.399",
						"yrTerm3Convertible.partialUpfront": "0.340",
						"yrTerm3Standard.allUpfront": "0.294",
						"yrTerm3Standard.partialUpfront": "0.313"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.271",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.161",
						"yrTerm1Standard.noUpfront": "0.192",
						"yrTerm1Standard.partialUpfront": "0.164",
						"yrTerm3Convertible.allUpfront": "0.154",
						"yrTerm3Convertible.noUpfront": "0.185",
						"yrTerm3Convertible.partialUpfront": "0.157",
						"yrTerm3Standard.allUpfront": "0.126",
						"yrTerm3Standard.partialUpfront": "0.134"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.126",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.074",
						"yrTerm1Standard.noUpfront": "0.088",
						"yrTerm1Standard.partialUpfront": "0.076",
						"yrTerm3Convertible.allUpfront": "0.067",
						"yrTerm3Convertible.noUpfront": "0.079",
						"yrTerm3Convertible.partialUpfront": "0.068",
						"yrTerm3Standard.allUpfront": "0.047",
						"yrTerm3Standard.partialUpfront": "0.049"
					}
				},
				"mswin": {
					"ondemand": "0.209",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.151",
						"yrTerm1Standard.noUpfront": "0.180",
						"yrTerm1Standard.partialUpfront": "0.154",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.171",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.117",
						"yrTerm3Standard.partialUpfront": "0.124"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.292",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.173",
						"yrTerm1Standard.noUpfront": "0.207",
						"yrTerm1Standard.partialUpfront": "0.177",
						"yrTerm3Convertible.allUpfront": "0.166",
						"yrTerm3Convertible.noUpfront": "0.198",
						"yrTerm3Convertible.partialUpfront": "0.169",
						"yrTerm3Standard.allUpfront": "0.133",
						"yrTerm3Standard.partialUpfront": "0.142"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.077",
						"yrTerm1Standard.noUpfront": "0.090",
						"yrTerm1Standard.partialUpfront": "0.078",
						"yrTerm3Convertible.allUpfront": "0.069",
						"yrTerm3Convertible.noUpfront": "0.081",
						"yrTerm3Convertible.partialUpfront": "0.070",
						"yrTerm3Standard.allUpfront": "0.052",
						"yrTerm3Standard.partialUpfront": "0.055"
					}
				},
				"mswin": {
					"ondemand": "0.188",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.156",
						"yrTerm1Standard.noUpfront": "0.186",
						"yrTerm1Standard.partialUpfront": "0.159",
						"yrTerm3Convertible.allUpfront": "0.148",
						"yrTerm3Convertible.noUpfront": "0.177",
						"yrTerm3Convertible.partialUpfront": "0.151",
						"yrTerm3Standard.allUpfront": "0.123",
						"yrTerm3Standard.partialUpfront": "0.131"
					}
				},
				"mswinSQL": {
					"ondemand": "0.561",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.340",
						"yrTerm1Standard.noUpfront": "0.406",
						"yrTerm1Standard.partialUpfront": "0.347",
						"yrTerm3Convertible.allUpfront": "0.332",
						"yrTerm3Convertible.noUpfront": "0.397",
						"yrTerm3Convertible.partialUpfront": "0.339",
						"yrTerm3Standard.allUpfront": "0.294",
						"yrTerm3Standard.partialUpfront": "0.313"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.271",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.161",
						"yrTerm1Standard.noUpfront": "0.192",
						"yrTerm1Standard.partialUpfront": "0.164",
						"yrTerm3Convertible.allUpfront": "0.153",
						"yrTerm3Convertible.noUpfront": "0.183",
						"yrTerm3Convertible.partialUpfront": "0.156",
						"yrTerm3Standard.allUpfront": "0.126",
						"yrTerm3Standard.partialUpfront": "0.134"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.105",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.062",
						"yrTerm1Standard.noUpfront": "0.073",
						"yrTerm1Standard.partialUpfront": "0.063",
						"yrTerm3Convertible.allUpfront": "0.056",
						"yrTerm3Convertible.noUpfront": "0.066",
						"yrTerm3Convertible.partialUpfront": "0.057",
						"yrTerm3Standard.allUpfront": "0.039",
						"yrTerm3Standard.partialUpfront": "0.041"
					}
				},
				"mswin": {
					"ondemand": "0.188",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.138",
						"yrTerm1Standard.noUpfront": "0.165",
						"yrTerm1Standard.partialUpfront": "0.141",
						"yrTerm3Convertible.allUpfront": "0.132",
						"yrTerm3Convertible.noUpfront": "0.158",
						"yrTerm3Convertible.partialUpfront": "0.134",
						"yrTerm3Standard.allUpfront": "0.108",
						"yrTerm3Standard.partialUpfront": "0.115"
					}
				},
				"mswinSQL": {
					"ondemand": "0.561",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.340",
						"yrTerm1Standard.noUpfront": "0.406",
						"yrTerm1Standard.partialUpfront": "0.347",
						"yrTerm3Convertible.allUpfront": "0.334",
						"yrTerm3Convertible.noUpfront": "0.399",
						"yrTerm3Convertible.partialUpfront": "0.340",
						"yrTerm3Standard.allUpfront": "0.294",
						"yrTerm3Standard.partialUpfront": "0.313"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.271",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.161",
						"yrTerm1Standard.noUpfront": "0.192",
						"yrTerm1Standard.partialUpfront": "0.164",
						"yrTerm3Convertible.allUpfront": "0.154",
						"yrTerm3Convertible.noUpfront": "0.185",
						"yrTerm3Convertible.partialUpfront": "0.157",
						"yrTerm3Standard.allUpfront": "0.126",
						"yrTerm3Standard.partialUpfront": "0.134"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 16,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 10,
			"max_enis": 3
		},
		"vpc_only": false
	},
	{
		"ECU": 14,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 4000,
		"ebs_max_bandwidth": 500,
		"ebs_optimized": true,
		"ebs_throughput": 62.5,
		"enhanced_networking": true,
		"family": "Compute optimized",
		"generation": "current",
		"instance_type": "c3.xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 7.5,
		"network_performance": "Moderate",
		"placement_group_support": true,
		"pretty_name": "C3 High-CPU Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.255",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.172",
						"yrTerm1Standard.noUpfront": "0.194",
						"yrTerm1Standard.partialUpfront": "0.175",
						"yrTerm3Convertible.allUpfront": "0.155",
						"yrTerm3Convertible.noUpfront": "0.175",
						"yrTerm3Convertible.partialUpfront": "0.158",
						"yrTerm3Standard.allUpfront": "0.115",
						"yrTerm3Standard.partialUpfront": "0.123"
					}
				},
				"mswin": {
					"ondemand": "0.462",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.313",
						"yrTerm1Standard.noUpfront": "0.374",
						"yrTerm1Standard.partialUpfront": "0.320",
						"yrTerm3Convertible.allUpfront": "0.296",
						"yrTerm3Convertible.noUpfront": "0.355",
						"yrTerm3Convertible.partialUpfront": "0.302",
						"yrTerm3Standard.allUpfront": "0.254",
						"yrTerm3Standard.partialUpfront": "0.270"
					}
				},
				"mswinSQL": {
					"ondemand": "1.141",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.732",
						"yrTerm1Standard.noUpfront": "0.874",
						"yrTerm1Standard.partialUpfront": "0.747",
						"yrTerm3Convertible.allUpfront": "0.715",
						"yrTerm3Convertible.noUpfront": "0.855",
						"yrTerm3Convertible.partialUpfront": "0.729",
						"yrTerm3Standard.allUpfront": "0.639",
						"yrTerm3Standard.partialUpfront": "0.680"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.542",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.376",
						"yrTerm1Standard.noUpfront": "0.449",
						"yrTerm1Standard.partialUpfront": "0.384",
						"yrTerm3Convertible.allUpfront": "0.359",
						"yrTerm3Convertible.noUpfront": "0.430",
						"yrTerm3Convertible.partialUpfront": "0.366",
						"yrTerm3Standard.allUpfront": "0.300",
						"yrTerm3Standard.partialUpfront": "0.319"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.02"
			},
			"ap-southeast-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.265",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.166",
						"yrTerm1Standard.noUpfront": "0.196",
						"yrTerm1Standard.partialUpfront": "0.169",
						"yrTerm3Convertible.allUpfront": "0.149",
						"yrTerm3Convertible.noUpfront": "0.176",
						"yrTerm3Convertible.partialUpfront": "0.152",
						"yrTerm3Standard.allUpfront": "0.112",
						"yrTerm3Standard.partialUpfront": "0.119"
					}
				},
				"mswin": {
					"ondemand": "0.477",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.307",
						"yrTerm1Standard.noUpfront": "0.366",
						"yrTerm1Standard.partialUpfront": "0.313",
						"yrTerm3Convertible.allUpfront": "0.290",
						"yrTerm3Convertible.noUpfront": "0.346",
						"yrTerm3Convertible.partialUpfront": "0.296",
						"yrTerm3Standard.allUpfront": "0.244",
						"yrTerm3Standard.partialUpfront": "0.259"
					}
				},
				"mswinSQL": {
					"ondemand": "1.066",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.690",
						"yrTerm1Standard.noUpfront": "0.824",
						"yrTerm1Standard.partialUpfront": "0.704",
						"yrTerm3Convertible.allUpfront": "0.674",
						"yrTerm3Convertible.noUpfront": "0.804",
						"yrTerm3Convertible.partialUpfront": "0.687",
						"yrTerm3Standard.allUpfront": "0.597",
						"yrTerm3Standard.partialUpfront": "0.635"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.542",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.366",
						"yrTerm1Standard.noUpfront": "0.436",
						"yrTerm1Standard.partialUpfront": "0.373",
						"yrTerm3Convertible.allUpfront": "0.349",
						"yrTerm3Convertible.noUpfront": "0.416",
						"yrTerm3Convertible.partialUpfront": "0.356",
						"yrTerm3Standard.allUpfront": "0.287",
						"yrTerm3Standard.partialUpfront": "0.305"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.265",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.166",
						"yrTerm1Standard.noUpfront": "0.196",
						"yrTerm1Standard.partialUpfront": "0.169",
						"yrTerm3Convertible.allUpfront": "0.149",
						"yrTerm3Convertible.noUpfront": "0.176",
						"yrTerm3Convertible.partialUpfront": "0.152",
						"yrTerm3Standard.allUpfront": "0.112",
						"yrTerm3Standard.partialUpfront": "0.119"
					}
				},
				"mswin": {
					"ondemand": "0.477",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.307",
						"yrTerm1Standard.noUpfront": "0.366",
						"yrTerm1Standard.partialUpfront": "0.313",
						"yrTerm3Convertible.allUpfront": "0.290",
						"yrTerm3Convertible.noUpfront": "0.346",
						"yrTerm3Convertible.partialUpfront": "0.296",
						"yrTerm3Standard.allUpfront": "0.244",
						"yrTerm3Standard.partialUpfront": "0.259"
					}
				},
				"mswinSQL": {
					"ondemand": "1.066",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.690",
						"yrTerm1Standard.noUpfront": "0.824",
						"yrTerm1Standard.partialUpfront": "0.704",
						"yrTerm3Convertible.allUpfront": "0.674",
						"yrTerm3Convertible.noUpfront": "0.804",
						"yrTerm3Convertible.partialUpfront": "0.687",
						"yrTerm3Standard.allUpfront": "0.597",
						"yrTerm3Standard.partialUpfront": "0.635"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.542",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.366",
						"yrTerm1Standard.noUpfront": "0.436",
						"yrTerm1Standard.partialUpfront": "0.373",
						"yrTerm3Convertible.allUpfront": "0.349",
						"yrTerm3Convertible.noUpfront": "0.416",
						"yrTerm3Convertible.partialUpfront": "0.356",
						"yrTerm3Standard.allUpfront": "0.287",
						"yrTerm3Standard.partialUpfront": "0.305"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.258",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.167",
						"yrTerm1Standard.noUpfront": "0.192",
						"yrTerm1Standard.partialUpfront": "0.170",
						"yrTerm3Convertible.allUpfront": "0.150",
						"yrTerm3Convertible.noUpfront": "0.173",
						"yrTerm3Convertible.partialUpfront": "0.153",
						"yrTerm3Standard.allUpfront": "0.111",
						"yrTerm3Standard.partialUpfront": "0.118"
					}
				},
				"mswin": {
					"ondemand": "0.424",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.318",
						"yrTerm1Standard.noUpfront": "0.379",
						"yrTerm1Standard.partialUpfront": "0.324",
						"yrTerm3Convertible.allUpfront": "0.301",
						"yrTerm3Convertible.noUpfront": "0.360",
						"yrTerm3Convertible.partialUpfront": "0.307",
						"yrTerm3Standard.allUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.267"
					}
				},
				"mswinSQL": {
					"ondemand": "1.721",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.005",
						"yrTerm1Standard.noUpfront": "1.200",
						"yrTerm1Standard.partialUpfront": "1.026",
						"yrTerm3Convertible.allUpfront": "0.989",
						"yrTerm3Convertible.noUpfront": "1.181",
						"yrTerm3Convertible.partialUpfront": "1.009",
						"yrTerm3Standard.allUpfront": "0.867",
						"yrTerm3Standard.partialUpfront": "0.922"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.825",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.365",
						"yrTerm1Standard.noUpfront": "0.436",
						"yrTerm1Standard.partialUpfront": "0.373",
						"yrTerm3Convertible.allUpfront": "0.348",
						"yrTerm3Convertible.noUpfront": "0.417",
						"yrTerm3Convertible.partialUpfront": "0.356",
						"yrTerm3Standard.allUpfront": "0.283",
						"yrTerm3Standard.partialUpfront": "0.302"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.239",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.154",
						"yrTerm1Standard.noUpfront": "0.180",
						"yrTerm1Standard.partialUpfront": "0.157",
						"yrTerm3Convertible.allUpfront": "0.139",
						"yrTerm3Convertible.noUpfront": "0.162",
						"yrTerm3Convertible.partialUpfront": "0.142",
						"yrTerm3Standard.allUpfront": "0.103",
						"yrTerm3Standard.partialUpfront": "0.110"
					}
				},
				"mswin": {
					"ondemand": "0.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.311",
						"yrTerm1Standard.noUpfront": "0.371",
						"yrTerm1Standard.partialUpfront": "0.317",
						"yrTerm3Convertible.allUpfront": "0.295",
						"yrTerm3Convertible.noUpfront": "0.353",
						"yrTerm3Convertible.partialUpfront": "0.301",
						"yrTerm3Standard.allUpfront": "0.248",
						"yrTerm3Standard.partialUpfront": "0.264"
					}
				},
				"mswinSQL": {
					"ondemand": "1.066",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.646",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.659",
						"yrTerm3Convertible.allUpfront": "0.630",
						"yrTerm3Convertible.noUpfront": "0.753",
						"yrTerm3Convertible.partialUpfront": "0.643",
						"yrTerm3Standard.allUpfront": "0.559",
						"yrTerm3Standard.partialUpfront": "0.595"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.542",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.323",
						"yrTerm1Standard.noUpfront": "0.386",
						"yrTerm1Standard.partialUpfront": "0.330",
						"yrTerm3Convertible.allUpfront": "0.307",
						"yrTerm3Convertible.noUpfront": "0.368",
						"yrTerm3Convertible.partialUpfront": "0.314",
						"yrTerm3Standard.allUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.267"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.325",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.216",
						"yrTerm1Standard.noUpfront": "0.246",
						"yrTerm1Standard.partialUpfront": "0.221",
						"yrTerm3Convertible.allUpfront": "0.195",
						"yrTerm3Convertible.noUpfront": "0.221",
						"yrTerm3Convertible.partialUpfront": "0.199",
						"yrTerm3Standard.allUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.147"
					}
				},
				"mswin": {
					"ondemand": "0.491",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.436",
						"yrTerm1Standard.noUpfront": "0.460",
						"yrTerm1Standard.partialUpfront": "0.444",
						"yrTerm3Convertible.allUpfront": "0.414",
						"yrTerm3Convertible.noUpfront": "0.435",
						"yrTerm3Convertible.partialUpfront": "0.422",
						"yrTerm3Standard.allUpfront": "0.279",
						"yrTerm3Standard.partialUpfront": "0.296"
					}
				},
				"mswinSQL": {
					"ondemand": "1.294",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.055",
						"yrTerm1Standard.noUpfront": "1.259",
						"yrTerm1Standard.partialUpfront": "1.077",
						"yrTerm3Convertible.allUpfront": "1.033",
						"yrTerm3Convertible.noUpfront": "1.234",
						"yrTerm3Convertible.partialUpfront": "1.054",
						"yrTerm3Standard.allUpfront": "0.675",
						"yrTerm3Standard.partialUpfront": "0.718"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.657",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.485",
						"yrTerm1Standard.noUpfront": "0.579",
						"yrTerm1Standard.partialUpfront": "0.495",
						"yrTerm3Convertible.allUpfront": "0.464",
						"yrTerm3Convertible.noUpfront": "0.554",
						"yrTerm3Convertible.partialUpfront": "0.473",
						"yrTerm3Standard.allUpfront": "0.311",
						"yrTerm3Standard.partialUpfront": "0.331"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.21",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.125",
						"yrTerm1Standard.noUpfront": "0.146",
						"yrTerm1Standard.partialUpfront": "0.127",
						"yrTerm3Convertible.allUpfront": "0.112",
						"yrTerm3Convertible.noUpfront": "0.131",
						"yrTerm3Convertible.partialUpfront": "0.115",
						"yrTerm3Standard.allUpfront": "0.079",
						"yrTerm3Standard.partialUpfront": "0.084"
					}
				},
				"mswin": {
					"ondemand": "0.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.276",
						"yrTerm1Standard.noUpfront": "0.329",
						"yrTerm1Standard.partialUpfront": "0.281",
						"yrTerm3Convertible.allUpfront": "0.263",
						"yrTerm3Convertible.noUpfront": "0.314",
						"yrTerm3Convertible.partialUpfront": "0.268",
						"yrTerm3Standard.allUpfront": "0.219",
						"yrTerm3Standard.partialUpfront": "0.233"
					}
				},
				"mswinSQL": {
					"ondemand": "1.066",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.646",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.659",
						"yrTerm3Convertible.allUpfront": "0.633",
						"yrTerm3Convertible.noUpfront": "0.756",
						"yrTerm3Convertible.partialUpfront": "0.646",
						"yrTerm3Standard.allUpfront": "0.559",
						"yrTerm3Standard.partialUpfront": "0.595"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.542",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.323",
						"yrTerm1Standard.noUpfront": "0.386",
						"yrTerm1Standard.partialUpfront": "0.330",
						"yrTerm3Convertible.allUpfront": "0.310",
						"yrTerm3Convertible.noUpfront": "0.371",
						"yrTerm3Convertible.partialUpfront": "0.317",
						"yrTerm3Standard.allUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.267"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.150",
						"yrTerm1Standard.noUpfront": "0.176",
						"yrTerm1Standard.partialUpfront": "0.152",
						"yrTerm3Convertible.allUpfront": "0.135",
						"yrTerm3Convertible.noUpfront": "0.158",
						"yrTerm3Convertible.partialUpfront": "0.137",
						"yrTerm3Standard.allUpfront": "0.094",
						"yrTerm3Standard.partialUpfront": "0.100"
					}
				},
				"mswin": {
					"ondemand": "0.418",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.301",
						"yrTerm1Standard.noUpfront": "0.359",
						"yrTerm1Standard.partialUpfront": "0.307",
						"yrTerm3Convertible.allUpfront": "0.286",
						"yrTerm3Convertible.noUpfront": "0.341",
						"yrTerm3Convertible.partialUpfront": "0.292",
						"yrTerm3Standard.allUpfront": "0.235",
						"yrTerm3Standard.partialUpfront": "0.250"
					}
				},
				"mswinSQL": {
					"ondemand": "1.108",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.671",
						"yrTerm1Standard.noUpfront": "0.801",
						"yrTerm1Standard.partialUpfront": "0.685",
						"yrTerm3Convertible.allUpfront": "0.656",
						"yrTerm3Convertible.noUpfront": "0.783",
						"yrTerm3Convertible.partialUpfront": "0.670",
						"yrTerm3Standard.allUpfront": "0.576",
						"yrTerm3Standard.partialUpfront": "0.613"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.584",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.349",
						"yrTerm1Standard.noUpfront": "0.416",
						"yrTerm1Standard.partialUpfront": "0.356",
						"yrTerm3Convertible.allUpfront": "0.334",
						"yrTerm3Convertible.noUpfront": "0.398",
						"yrTerm3Convertible.partialUpfront": "0.340",
						"yrTerm3Standard.allUpfront": "0.267",
						"yrTerm3Standard.partialUpfront": "0.284"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.239",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.154",
						"yrTerm1Standard.noUpfront": "0.180",
						"yrTerm1Standard.partialUpfront": "0.157",
						"yrTerm3Convertible.allUpfront": "0.139",
						"yrTerm3Convertible.noUpfront": "0.162",
						"yrTerm3Convertible.partialUpfront": "0.142",
						"yrTerm3Standard.allUpfront": "0.103",
						"yrTerm3Standard.partialUpfront": "0.110"
					}
				},
				"mswin": {
					"ondemand": "0.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.311",
						"yrTerm1Standard.noUpfront": "0.371",
						"yrTerm1Standard.partialUpfront": "0.317",
						"yrTerm3Convertible.allUpfront": "0.295",
						"yrTerm3Convertible.noUpfront": "0.353",
						"yrTerm3Convertible.partialUpfront": "0.301",
						"yrTerm3Standard.allUpfront": "0.248",
						"yrTerm3Standard.partialUpfront": "0.264"
					}
				},
				"mswinSQL": {
					"ondemand": "1.066",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.646",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.659",
						"yrTerm3Convertible.allUpfront": "0.630",
						"yrTerm3Convertible.noUpfront": "0.753",
						"yrTerm3Convertible.partialUpfront": "0.643",
						"yrTerm3Standard.allUpfront": "0.559",
						"yrTerm3Standard.partialUpfront": "0.595"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.542",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.323",
						"yrTerm1Standard.noUpfront": "0.386",
						"yrTerm1Standard.partialUpfront": "0.330",
						"yrTerm3Convertible.allUpfront": "0.307",
						"yrTerm3Convertible.noUpfront": "0.368",
						"yrTerm3Convertible.partialUpfront": "0.314",
						"yrTerm3Standard.allUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.267"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.21",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.125",
						"yrTerm1Standard.noUpfront": "0.146",
						"yrTerm1Standard.partialUpfront": "0.127",
						"yrTerm3Convertible.allUpfront": "0.112",
						"yrTerm3Convertible.noUpfront": "0.131",
						"yrTerm3Convertible.partialUpfront": "0.115",
						"yrTerm3Standard.allUpfront": "0.079",
						"yrTerm3Standard.partialUpfront": "0.084"
					}
				},
				"mswin": {
					"ondemand": "0.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.276",
						"yrTerm1Standard.noUpfront": "0.329",
						"yrTerm1Standard.partialUpfront": "0.281",
						"yrTerm3Convertible.allUpfront": "0.263",
						"yrTerm3Convertible.noUpfront": "0.314",
						"yrTerm3Convertible.partialUpfront": "0.268",
						"yrTerm3Standard.allUpfront": "0.219",
						"yrTerm3Standard.partialUpfront": "0.233"
					}
				},
				"mswinSQL": {
					"ondemand": "1.066",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.646",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.659",
						"yrTerm3Convertible.allUpfront": "0.633",
						"yrTerm3Convertible.noUpfront": "0.756",
						"yrTerm3Convertible.partialUpfront": "0.646",
						"yrTerm3Standard.allUpfront": "0.559",
						"yrTerm3Standard.partialUpfront": "0.595"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.542",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.323",
						"yrTerm1Standard.noUpfront": "0.386",
						"yrTerm1Standard.partialUpfront": "0.330",
						"yrTerm3Convertible.allUpfront": "0.310",
						"yrTerm3Convertible.noUpfront": "0.371",
						"yrTerm3Convertible.partialUpfront": "0.317",
						"yrTerm3Standard.allUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.267"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 40,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 28,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": true,
		"family": "Compute optimized",
		"generation": "current",
		"instance_type": "c3.2xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 15,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "C3 High-CPU Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.511",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.344",
						"yrTerm1Standard.noUpfront": "0.388",
						"yrTerm1Standard.partialUpfront": "0.351",
						"yrTerm3Convertible.allUpfront": "0.309",
						"yrTerm3Convertible.noUpfront": "0.349",
						"yrTerm3Convertible.partialUpfront": "0.316",
						"yrTerm3Standard.allUpfront": "0.232",
						"yrTerm3Standard.partialUpfront": "0.247"
					}
				},
				"mswin": {
					"ondemand": "0.925",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.623",
						"yrTerm1Standard.noUpfront": "0.744",
						"yrTerm1Standard.partialUpfront": "0.636",
						"yrTerm3Convertible.allUpfront": "0.589",
						"yrTerm3Convertible.noUpfront": "0.705",
						"yrTerm3Convertible.partialUpfront": "0.601",
						"yrTerm3Standard.allUpfront": "0.510",
						"yrTerm3Standard.partialUpfront": "0.542"
					}
				},
				"mswinSQL": {
					"ondemand": "2.282",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.463",
						"yrTerm1Standard.noUpfront": "1.746",
						"yrTerm1Standard.partialUpfront": "1.493",
						"yrTerm3Convertible.allUpfront": "1.428",
						"yrTerm3Convertible.noUpfront": "1.707",
						"yrTerm3Convertible.partialUpfront": "1.458",
						"yrTerm3Standard.allUpfront": "1.277",
						"yrTerm3Standard.partialUpfront": "1.359"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.083",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.754",
						"yrTerm1Standard.noUpfront": "0.900",
						"yrTerm1Standard.partialUpfront": "0.769",
						"yrTerm3Convertible.allUpfront": "0.720",
						"yrTerm3Convertible.noUpfront": "0.861",
						"yrTerm3Convertible.partialUpfront": "0.734",
						"yrTerm3Standard.allUpfront": "0.602",
						"yrTerm3Standard.partialUpfront": "0.640"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.05"
			},
			"ap-southeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.529",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.333",
						"yrTerm1Standard.noUpfront": "0.392",
						"yrTerm1Standard.partialUpfront": "0.340",
						"yrTerm3Convertible.allUpfront": "0.300",
						"yrTerm3Convertible.noUpfront": "0.353",
						"yrTerm3Convertible.partialUpfront": "0.306",
						"yrTerm3Standard.allUpfront": "0.225",
						"yrTerm3Standard.partialUpfront": "0.239"
					}
				},
				"mswin": {
					"ondemand": "0.953",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.612",
						"yrTerm1Standard.noUpfront": "0.731",
						"yrTerm1Standard.partialUpfront": "0.625",
						"yrTerm3Convertible.allUpfront": "0.579",
						"yrTerm3Convertible.noUpfront": "0.692",
						"yrTerm3Convertible.partialUpfront": "0.591",
						"yrTerm3Standard.allUpfront": "0.490",
						"yrTerm3Standard.partialUpfront": "0.521"
					}
				},
				"mswinSQL": {
					"ondemand": "2.131",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.379",
						"yrTerm1Standard.noUpfront": "1.647",
						"yrTerm1Standard.partialUpfront": "1.407",
						"yrTerm3Convertible.allUpfront": "1.346",
						"yrTerm3Convertible.noUpfront": "1.608",
						"yrTerm3Convertible.partialUpfront": "1.373",
						"yrTerm3Standard.allUpfront": "1.192",
						"yrTerm3Standard.partialUpfront": "1.268"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.083",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.729",
						"yrTerm1Standard.noUpfront": "0.870",
						"yrTerm1Standard.partialUpfront": "0.744",
						"yrTerm3Convertible.allUpfront": "0.696",
						"yrTerm3Convertible.noUpfront": "0.831",
						"yrTerm3Convertible.partialUpfront": "0.710",
						"yrTerm3Standard.allUpfront": "0.574",
						"yrTerm3Standard.partialUpfront": "0.610"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.529",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.333",
						"yrTerm1Standard.noUpfront": "0.392",
						"yrTerm1Standard.partialUpfront": "0.340",
						"yrTerm3Convertible.allUpfront": "0.300",
						"yrTerm3Convertible.noUpfront": "0.353",
						"yrTerm3Convertible.partialUpfront": "0.306",
						"yrTerm3Standard.allUpfront": "0.225",
						"yrTerm3Standard.partialUpfront": "0.239"
					}
				},
				"mswin": {
					"ondemand": "0.953",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.612",
						"yrTerm1Standard.noUpfront": "0.731",
						"yrTerm1Standard.partialUpfront": "0.625",
						"yrTerm3Convertible.allUpfront": "0.579",
						"yrTerm3Convertible.noUpfront": "0.692",
						"yrTerm3Convertible.partialUpfront": "0.591",
						"yrTerm3Standard.allUpfront": "0.490",
						"yrTerm3Standard.partialUpfront": "0.521"
					}
				},
				"mswinSQL": {
					"ondemand": "2.131",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.379",
						"yrTerm1Standard.noUpfront": "1.647",
						"yrTerm1Standard.partialUpfront": "1.407",
						"yrTerm3Convertible.allUpfront": "1.346",
						"yrTerm3Convertible.noUpfront": "1.608",
						"yrTerm3Convertible.partialUpfront": "1.373",
						"yrTerm3Standard.allUpfront": "1.192",
						"yrTerm3Standard.partialUpfront": "1.268"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.083",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.729",
						"yrTerm1Standard.noUpfront": "0.870",
						"yrTerm1Standard.partialUpfront": "0.744",
						"yrTerm3Convertible.allUpfront": "0.696",
						"yrTerm3Convertible.noUpfront": "0.831",
						"yrTerm3Convertible.partialUpfront": "0.710",
						"yrTerm3Standard.allUpfront": "0.574",
						"yrTerm3Standard.partialUpfront": "0.610"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.516",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.332",
						"yrTerm1Standard.noUpfront": "0.384",
						"yrTerm1Standard.partialUpfront": "0.339",
						"yrTerm3Convertible.allUpfront": "0.299",
						"yrTerm3Convertible.noUpfront": "0.346",
						"yrTerm3Convertible.partialUpfront": "0.305",
						"yrTerm3Standard.allUpfront": "0.222",
						"yrTerm3Standard.partialUpfront": "0.236"
					}
				},
				"mswin": {
					"ondemand": "0.848",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.635",
						"yrTerm1Standard.noUpfront": "0.758",
						"yrTerm1Standard.partialUpfront": "0.648",
						"yrTerm3Convertible.allUpfront": "0.602",
						"yrTerm3Convertible.noUpfront": "0.720",
						"yrTerm3Convertible.partialUpfront": "0.614",
						"yrTerm3Standard.allUpfront": "0.502",
						"yrTerm3Standard.partialUpfront": "0.534"
					}
				},
				"mswinSQL": {
					"ondemand": "3.421",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.999",
						"yrTerm1Standard.noUpfront": "2.387",
						"yrTerm1Standard.partialUpfront": "2.040",
						"yrTerm3Convertible.allUpfront": "1.966",
						"yrTerm3Convertible.noUpfront": "2.349",
						"yrTerm3Convertible.partialUpfront": "2.006",
						"yrTerm3Standard.allUpfront": "1.724",
						"yrTerm3Standard.partialUpfront": "1.834"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.713",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.731",
						"yrTerm1Standard.noUpfront": "0.872",
						"yrTerm1Standard.partialUpfront": "0.746",
						"yrTerm3Convertible.allUpfront": "0.697",
						"yrTerm3Convertible.noUpfront": "0.834",
						"yrTerm3Convertible.partialUpfront": "0.712",
						"yrTerm3Standard.allUpfront": "0.567",
						"yrTerm3Standard.partialUpfront": "0.603"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.478",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.308",
						"yrTerm1Standard.noUpfront": "0.360",
						"yrTerm1Standard.partialUpfront": "0.314",
						"yrTerm3Convertible.allUpfront": "0.277",
						"yrTerm3Convertible.noUpfront": "0.324",
						"yrTerm3Convertible.partialUpfront": "0.283",
						"yrTerm3Standard.allUpfront": "0.206",
						"yrTerm3Standard.partialUpfront": "0.219"
					}
				},
				"mswin": {
					"ondemand": "0.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.620",
						"yrTerm1Standard.noUpfront": "0.741",
						"yrTerm1Standard.partialUpfront": "0.633",
						"yrTerm3Convertible.allUpfront": "0.590",
						"yrTerm3Convertible.noUpfront": "0.705",
						"yrTerm3Convertible.partialUpfront": "0.602",
						"yrTerm3Standard.allUpfront": "0.496",
						"yrTerm3Standard.partialUpfront": "0.528"
					}
				},
				"mswinSQL": {
					"ondemand": "2.131",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.291",
						"yrTerm1Standard.noUpfront": "1.542",
						"yrTerm1Standard.partialUpfront": "1.318",
						"yrTerm3Convertible.allUpfront": "1.261",
						"yrTerm3Convertible.noUpfront": "1.506",
						"yrTerm3Convertible.partialUpfront": "1.286",
						"yrTerm3Standard.allUpfront": "1.118",
						"yrTerm3Standard.partialUpfront": "1.189"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.083",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.646",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.659",
						"yrTerm3Convertible.allUpfront": "0.615",
						"yrTerm3Convertible.noUpfront": "0.735",
						"yrTerm3Convertible.partialUpfront": "0.628",
						"yrTerm3Standard.allUpfront": "0.503",
						"yrTerm3Standard.partialUpfront": "0.535"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.65",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.432",
						"yrTerm1Standard.noUpfront": "0.492",
						"yrTerm1Standard.partialUpfront": "0.441",
						"yrTerm3Convertible.allUpfront": "0.389",
						"yrTerm3Convertible.noUpfront": "0.443",
						"yrTerm3Convertible.partialUpfront": "0.397",
						"yrTerm3Standard.allUpfront": "0.277",
						"yrTerm3Standard.partialUpfront": "0.295"
					}
				},
				"mswin": {
					"ondemand": "0.982",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.871",
						"yrTerm1Standard.noUpfront": "0.920",
						"yrTerm1Standard.partialUpfront": "0.889",
						"yrTerm3Convertible.allUpfront": "0.828",
						"yrTerm3Convertible.noUpfront": "0.871",
						"yrTerm3Convertible.partialUpfront": "0.845",
						"yrTerm3Standard.allUpfront": "0.557",
						"yrTerm3Standard.partialUpfront": "0.593"
					}
				},
				"mswinSQL": {
					"ondemand": "2.587",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.110",
						"yrTerm1Standard.noUpfront": "2.519",
						"yrTerm1Standard.partialUpfront": "2.153",
						"yrTerm3Convertible.allUpfront": "2.067",
						"yrTerm3Convertible.noUpfront": "2.470",
						"yrTerm3Convertible.partialUpfront": "2.109",
						"yrTerm3Standard.allUpfront": "1.351",
						"yrTerm3Standard.partialUpfront": "1.437"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.313",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.974",
						"yrTerm1Standard.noUpfront": "1.162",
						"yrTerm1Standard.partialUpfront": "0.994",
						"yrTerm3Convertible.allUpfront": "0.930",
						"yrTerm3Convertible.noUpfront": "1.113",
						"yrTerm3Convertible.partialUpfront": "0.949",
						"yrTerm3Standard.allUpfront": "0.624",
						"yrTerm3Standard.partialUpfront": "0.664"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.42",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.248",
						"yrTerm1Standard.noUpfront": "0.292",
						"yrTerm1Standard.partialUpfront": "0.253",
						"yrTerm3Convertible.allUpfront": "0.223",
						"yrTerm3Convertible.noUpfront": "0.263",
						"yrTerm3Convertible.partialUpfront": "0.228",
						"yrTerm3Standard.allUpfront": "0.157",
						"yrTerm3Standard.partialUpfront": "0.167"
					}
				},
				"mswin": {
					"ondemand": "0.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.551",
						"yrTerm1Standard.noUpfront": "0.657",
						"yrTerm1Standard.partialUpfront": "0.562",
						"yrTerm3Convertible.allUpfront": "0.526",
						"yrTerm3Convertible.noUpfront": "0.628",
						"yrTerm3Convertible.partialUpfront": "0.537",
						"yrTerm3Standard.allUpfront": "0.437",
						"yrTerm3Standard.partialUpfront": "0.465"
					}
				},
				"mswinSQL": {
					"ondemand": "2.131",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.291",
						"yrTerm1Standard.noUpfront": "1.542",
						"yrTerm1Standard.partialUpfront": "1.318",
						"yrTerm3Convertible.allUpfront": "1.267",
						"yrTerm3Convertible.noUpfront": "1.513",
						"yrTerm3Convertible.partialUpfront": "1.292",
						"yrTerm3Standard.allUpfront": "1.118",
						"yrTerm3Standard.partialUpfront": "1.189"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.083",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.646",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.659",
						"yrTerm3Convertible.allUpfront": "0.621",
						"yrTerm3Convertible.noUpfront": "0.742",
						"yrTerm3Convertible.partialUpfront": "0.634",
						"yrTerm3Standard.allUpfront": "0.503",
						"yrTerm3Standard.partialUpfront": "0.535"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.297",
						"yrTerm1Standard.noUpfront": "0.352",
						"yrTerm1Standard.partialUpfront": "0.303",
						"yrTerm3Convertible.allUpfront": "0.268",
						"yrTerm3Convertible.noUpfront": "0.317",
						"yrTerm3Convertible.partialUpfront": "0.272",
						"yrTerm3Standard.allUpfront": "0.189",
						"yrTerm3Standard.partialUpfront": "0.201"
					}
				},
				"mswin": {
					"ondemand": "0.836",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.601",
						"yrTerm1Standard.noUpfront": "0.717",
						"yrTerm1Standard.partialUpfront": "0.613",
						"yrTerm3Convertible.allUpfront": "0.571",
						"yrTerm3Convertible.noUpfront": "0.682",
						"yrTerm3Convertible.partialUpfront": "0.583",
						"yrTerm3Standard.allUpfront": "0.469",
						"yrTerm3Standard.partialUpfront": "0.499"
					}
				},
				"mswinSQL": {
					"ondemand": "2.215",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.341",
						"yrTerm1Standard.noUpfront": "1.602",
						"yrTerm1Standard.partialUpfront": "1.369",
						"yrTerm3Convertible.allUpfront": "1.312",
						"yrTerm3Convertible.noUpfront": "1.567",
						"yrTerm3Convertible.partialUpfront": "1.339",
						"yrTerm3Standard.allUpfront": "1.150",
						"yrTerm3Standard.partialUpfront": "1.223"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.167",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.696",
						"yrTerm1Standard.noUpfront": "0.831",
						"yrTerm1Standard.partialUpfront": "0.710",
						"yrTerm3Convertible.allUpfront": "0.666",
						"yrTerm3Convertible.noUpfront": "0.796",
						"yrTerm3Convertible.partialUpfront": "0.680",
						"yrTerm3Standard.allUpfront": "0.534",
						"yrTerm3Standard.partialUpfront": "0.568"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.478",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.308",
						"yrTerm1Standard.noUpfront": "0.360",
						"yrTerm1Standard.partialUpfront": "0.314",
						"yrTerm3Convertible.allUpfront": "0.277",
						"yrTerm3Convertible.noUpfront": "0.324",
						"yrTerm3Convertible.partialUpfront": "0.283",
						"yrTerm3Standard.allUpfront": "0.206",
						"yrTerm3Standard.partialUpfront": "0.219"
					}
				},
				"mswin": {
					"ondemand": "0.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.620",
						"yrTerm1Standard.noUpfront": "0.741",
						"yrTerm1Standard.partialUpfront": "0.633",
						"yrTerm3Convertible.allUpfront": "0.590",
						"yrTerm3Convertible.noUpfront": "0.705",
						"yrTerm3Convertible.partialUpfront": "0.602",
						"yrTerm3Standard.allUpfront": "0.496",
						"yrTerm3Standard.partialUpfront": "0.528"
					}
				},
				"mswinSQL": {
					"ondemand": "2.131",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.291",
						"yrTerm1Standard.noUpfront": "1.542",
						"yrTerm1Standard.partialUpfront": "1.318",
						"yrTerm3Convertible.allUpfront": "1.261",
						"yrTerm3Convertible.noUpfront": "1.506",
						"yrTerm3Convertible.partialUpfront": "1.286",
						"yrTerm3Standard.allUpfront": "1.118",
						"yrTerm3Standard.partialUpfront": "1.189"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.083",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.646",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.659",
						"yrTerm3Convertible.allUpfront": "0.615",
						"yrTerm3Convertible.noUpfront": "0.735",
						"yrTerm3Convertible.partialUpfront": "0.628",
						"yrTerm3Standard.allUpfront": "0.503",
						"yrTerm3Standard.partialUpfront": "0.535"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.42",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.248",
						"yrTerm1Standard.noUpfront": "0.292",
						"yrTerm1Standard.partialUpfront": "0.253",
						"yrTerm3Convertible.allUpfront": "0.223",
						"yrTerm3Convertible.noUpfront": "0.263",
						"yrTerm3Convertible.partialUpfront": "0.228",
						"yrTerm3Standard.allUpfront": "0.157",
						"yrTerm3Standard.partialUpfront": "0.167"
					}
				},
				"mswin": {
					"ondemand": "0.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.551",
						"yrTerm1Standard.noUpfront": "0.657",
						"yrTerm1Standard.partialUpfront": "0.562",
						"yrTerm3Convertible.allUpfront": "0.526",
						"yrTerm3Convertible.noUpfront": "0.628",
						"yrTerm3Convertible.partialUpfront": "0.537",
						"yrTerm3Standard.allUpfront": "0.437",
						"yrTerm3Standard.partialUpfront": "0.465"
					}
				},
				"mswinSQL": {
					"ondemand": "2.131",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.291",
						"yrTerm1Standard.noUpfront": "1.542",
						"yrTerm1Standard.partialUpfront": "1.318",
						"yrTerm3Convertible.allUpfront": "1.267",
						"yrTerm3Convertible.noUpfront": "1.513",
						"yrTerm3Convertible.partialUpfront": "1.292",
						"yrTerm3Standard.allUpfront": "1.118",
						"yrTerm3Standard.partialUpfront": "1.189"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.083",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.646",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.659",
						"yrTerm3Convertible.allUpfront": "0.621",
						"yrTerm3Convertible.noUpfront": "0.742",
						"yrTerm3Convertible.partialUpfront": "0.634",
						"yrTerm3Standard.allUpfront": "0.503",
						"yrTerm3Standard.partialUpfront": "0.535"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 80,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 55,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 16000,
		"ebs_max_bandwidth": 2000,
		"ebs_optimized": true,
		"ebs_throughput": 250,
		"enhanced_networking": true,
		"family": "Compute optimized",
		"generation": "current",
		"instance_type": "c3.4xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 30,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "C3 High-CPU Quadruple Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.021",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.687",
						"yrTerm1Standard.noUpfront": "0.776",
						"yrTerm1Standard.partialUpfront": "0.701",
						"yrTerm3Convertible.allUpfront": "0.618",
						"yrTerm3Convertible.noUpfront": "0.698",
						"yrTerm3Convertible.partialUpfront": "0.631",
						"yrTerm3Standard.allUpfront": "0.463",
						"yrTerm3Standard.partialUpfront": "0.493"
					}
				},
				"mswin": {
					"ondemand": "1.849",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.247",
						"yrTerm1Standard.noUpfront": "1.489",
						"yrTerm1Standard.partialUpfront": "1.273",
						"yrTerm3Convertible.allUpfront": "1.179",
						"yrTerm3Convertible.noUpfront": "1.411",
						"yrTerm3Convertible.partialUpfront": "1.203",
						"yrTerm3Standard.allUpfront": "1.016",
						"yrTerm3Standard.partialUpfront": "1.081"
					}
				},
				"mswinSQL": {
					"ondemand": "4.564",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.925",
						"yrTerm1Standard.noUpfront": "3.493",
						"yrTerm1Standard.partialUpfront": "2.985",
						"yrTerm3Convertible.allUpfront": "2.857",
						"yrTerm3Convertible.noUpfront": "3.415",
						"yrTerm3Convertible.partialUpfront": "2.915",
						"yrTerm3Standard.allUpfront": "2.555",
						"yrTerm3Standard.partialUpfront": "2.719"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.508",
						"yrTerm1Standard.noUpfront": "1.801",
						"yrTerm1Standard.partialUpfront": "1.539",
						"yrTerm3Convertible.allUpfront": "1.440",
						"yrTerm3Convertible.noUpfront": "1.723",
						"yrTerm3Convertible.partialUpfront": "1.469",
						"yrTerm3Standard.allUpfront": "1.203",
						"yrTerm3Standard.partialUpfront": "1.280"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.10"
			},
			"ap-southeast-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.058",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.666",
						"yrTerm1Standard.noUpfront": "0.784",
						"yrTerm1Standard.partialUpfront": "0.680",
						"yrTerm3Convertible.allUpfront": "0.599",
						"yrTerm3Convertible.noUpfront": "0.706",
						"yrTerm3Convertible.partialUpfront": "0.612",
						"yrTerm3Standard.allUpfront": "0.448",
						"yrTerm3Standard.partialUpfront": "0.477"
					}
				},
				"mswin": {
					"ondemand": "1.906",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.228",
						"yrTerm1Standard.noUpfront": "1.466",
						"yrTerm1Standard.partialUpfront": "1.253",
						"yrTerm3Convertible.allUpfront": "1.161",
						"yrTerm3Convertible.noUpfront": "1.388",
						"yrTerm3Convertible.partialUpfront": "1.185",
						"yrTerm3Standard.allUpfront": "0.979",
						"yrTerm3Standard.partialUpfront": "1.042"
					}
				},
				"mswinSQL": {
					"ondemand": "4.262",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.757",
						"yrTerm1Standard.noUpfront": "3.292",
						"yrTerm1Standard.partialUpfront": "2.814",
						"yrTerm3Convertible.allUpfront": "2.691",
						"yrTerm3Convertible.noUpfront": "3.214",
						"yrTerm3Convertible.partialUpfront": "2.746",
						"yrTerm3Standard.allUpfront": "2.385",
						"yrTerm3Standard.partialUpfront": "2.537"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.459",
						"yrTerm1Standard.noUpfront": "1.742",
						"yrTerm1Standard.partialUpfront": "1.489",
						"yrTerm3Convertible.allUpfront": "1.392",
						"yrTerm3Convertible.noUpfront": "1.664",
						"yrTerm3Convertible.partialUpfront": "1.421",
						"yrTerm3Standard.allUpfront": "1.148",
						"yrTerm3Standard.partialUpfront": "1.221"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.058",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.666",
						"yrTerm1Standard.noUpfront": "0.784",
						"yrTerm1Standard.partialUpfront": "0.680",
						"yrTerm3Convertible.allUpfront": "0.599",
						"yrTerm3Convertible.noUpfront": "0.706",
						"yrTerm3Convertible.partialUpfront": "0.612",
						"yrTerm3Standard.allUpfront": "0.448",
						"yrTerm3Standard.partialUpfront": "0.477"
					}
				},
				"mswin": {
					"ondemand": "1.906",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.228",
						"yrTerm1Standard.noUpfront": "1.466",
						"yrTerm1Standard.partialUpfront": "1.253",
						"yrTerm3Convertible.allUpfront": "1.161",
						"yrTerm3Convertible.noUpfront": "1.388",
						"yrTerm3Convertible.partialUpfront": "1.185",
						"yrTerm3Standard.allUpfront": "0.979",
						"yrTerm3Standard.partialUpfront": "1.042"
					}
				},
				"mswinSQL": {
					"ondemand": "4.262",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.757",
						"yrTerm1Standard.noUpfront": "3.292",
						"yrTerm1Standard.partialUpfront": "2.814",
						"yrTerm3Convertible.allUpfront": "2.691",
						"yrTerm3Convertible.noUpfront": "3.214",
						"yrTerm3Convertible.partialUpfront": "2.746",
						"yrTerm3Standard.allUpfront": "2.385",
						"yrTerm3Standard.partialUpfront": "2.537"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.459",
						"yrTerm1Standard.noUpfront": "1.742",
						"yrTerm1Standard.partialUpfront": "1.489",
						"yrTerm3Convertible.allUpfront": "1.392",
						"yrTerm3Convertible.noUpfront": "1.664",
						"yrTerm3Convertible.partialUpfront": "1.421",
						"yrTerm3Standard.allUpfront": "1.148",
						"yrTerm3Standard.partialUpfront": "1.221"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.664",
						"yrTerm1Standard.noUpfront": "0.768",
						"yrTerm1Standard.partialUpfront": "0.678",
						"yrTerm3Convertible.allUpfront": "0.598",
						"yrTerm3Convertible.noUpfront": "0.691",
						"yrTerm3Convertible.partialUpfront": "0.610",
						"yrTerm3Standard.allUpfront": "0.445",
						"yrTerm3Standard.partialUpfront": "0.474"
					}
				},
				"mswin": {
					"ondemand": "1.696",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.271",
						"yrTerm1Standard.noUpfront": "1.517",
						"yrTerm1Standard.partialUpfront": "1.297",
						"yrTerm3Convertible.allUpfront": "1.204",
						"yrTerm3Convertible.noUpfront": "1.440",
						"yrTerm3Convertible.partialUpfront": "1.229",
						"yrTerm3Standard.allUpfront": "1.005",
						"yrTerm3Standard.partialUpfront": "1.069"
					}
				},
				"mswinSQL": {
					"ondemand": "5.589",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.343",
						"yrTerm1Standard.noUpfront": "3.991",
						"yrTerm1Standard.partialUpfront": "3.411",
						"yrTerm3Convertible.allUpfront": "3.277",
						"yrTerm3Convertible.noUpfront": "3.914",
						"yrTerm3Convertible.partialUpfront": "3.344",
						"yrTerm3Standard.allUpfront": "2.886",
						"yrTerm3Standard.partialUpfront": "3.070"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.383",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.458",
						"yrTerm1Standard.noUpfront": "1.740",
						"yrTerm1Standard.partialUpfront": "1.487",
						"yrTerm3Convertible.allUpfront": "1.391",
						"yrTerm3Convertible.noUpfront": "1.663",
						"yrTerm3Convertible.partialUpfront": "1.420",
						"yrTerm3Standard.allUpfront": "1.137",
						"yrTerm3Standard.partialUpfront": "1.209"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "0.956",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.615",
						"yrTerm1Standard.noUpfront": "0.720",
						"yrTerm1Standard.partialUpfront": "0.628",
						"yrTerm3Convertible.allUpfront": "0.554",
						"yrTerm3Convertible.noUpfront": "0.648",
						"yrTerm3Convertible.partialUpfront": "0.565",
						"yrTerm3Standard.allUpfront": "0.412",
						"yrTerm3Standard.partialUpfront": "0.439"
					}
				},
				"mswin": {
					"ondemand": "1.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.241",
						"yrTerm1Standard.noUpfront": "1.482",
						"yrTerm1Standard.partialUpfront": "1.267",
						"yrTerm3Convertible.allUpfront": "1.180",
						"yrTerm3Convertible.noUpfront": "1.410",
						"yrTerm3Convertible.partialUpfront": "1.204",
						"yrTerm3Standard.allUpfront": "0.991",
						"yrTerm3Standard.partialUpfront": "1.055"
					}
				},
				"mswinSQL": {
					"ondemand": "4.262",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.583",
						"yrTerm1Standard.noUpfront": "3.084",
						"yrTerm1Standard.partialUpfront": "2.636",
						"yrTerm3Convertible.allUpfront": "2.522",
						"yrTerm3Convertible.noUpfront": "3.012",
						"yrTerm3Convertible.partialUpfront": "2.573",
						"yrTerm3Standard.allUpfront": "2.237",
						"yrTerm3Standard.partialUpfront": "2.380"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.290",
						"yrTerm1Standard.noUpfront": "1.540",
						"yrTerm1Standard.partialUpfront": "1.316",
						"yrTerm3Convertible.allUpfront": "1.228",
						"yrTerm3Convertible.noUpfront": "1.468",
						"yrTerm3Convertible.partialUpfront": "1.253",
						"yrTerm3Standard.allUpfront": "1.005",
						"yrTerm3Standard.partialUpfront": "1.070"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.3",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.865",
						"yrTerm1Standard.noUpfront": "0.984",
						"yrTerm1Standard.partialUpfront": "0.883",
						"yrTerm3Convertible.allUpfront": "0.779",
						"yrTerm3Convertible.noUpfront": "0.886",
						"yrTerm3Convertible.partialUpfront": "0.794",
						"yrTerm3Standard.allUpfront": "0.554",
						"yrTerm3Standard.partialUpfront": "0.589"
					}
				},
				"mswin": {
					"ondemand": "1.964",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.740",
						"yrTerm1Standard.noUpfront": "1.839",
						"yrTerm1Standard.partialUpfront": "1.776",
						"yrTerm3Convertible.allUpfront": "1.654",
						"yrTerm3Convertible.noUpfront": "1.741",
						"yrTerm3Convertible.partialUpfront": "1.688",
						"yrTerm3Standard.allUpfront": "1.115",
						"yrTerm3Standard.partialUpfront": "1.186"
					}
				},
				"mswinSQL": {
					"ondemand": "5.174",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.223",
						"yrTerm1Standard.noUpfront": "5.042",
						"yrTerm1Standard.partialUpfront": "4.309",
						"yrTerm3Convertible.allUpfront": "4.136",
						"yrTerm3Convertible.noUpfront": "4.944",
						"yrTerm3Convertible.partialUpfront": "4.221",
						"yrTerm3Standard.allUpfront": "2.704",
						"yrTerm3Standard.partialUpfront": "2.876"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.626",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.946",
						"yrTerm1Standard.noUpfront": "2.324",
						"yrTerm1Standard.partialUpfront": "1.986",
						"yrTerm3Convertible.allUpfront": "1.860",
						"yrTerm3Convertible.noUpfront": "2.226",
						"yrTerm3Convertible.partialUpfront": "1.898",
						"yrTerm3Standard.allUpfront": "1.246",
						"yrTerm3Standard.partialUpfront": "1.326"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "0.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.497",
						"yrTerm1Standard.noUpfront": "0.584",
						"yrTerm1Standard.partialUpfront": "0.507",
						"yrTerm3Convertible.allUpfront": "0.447",
						"yrTerm3Convertible.noUpfront": "0.526",
						"yrTerm3Convertible.partialUpfront": "0.456",
						"yrTerm3Standard.allUpfront": "0.315",
						"yrTerm3Standard.partialUpfront": "0.335"
					}
				},
				"mswin": {
					"ondemand": "1.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.103",
						"yrTerm1Standard.noUpfront": "1.317",
						"yrTerm1Standard.partialUpfront": "1.126",
						"yrTerm3Convertible.allUpfront": "1.053",
						"yrTerm3Convertible.noUpfront": "1.259",
						"yrTerm3Convertible.partialUpfront": "1.075",
						"yrTerm3Standard.allUpfront": "0.874",
						"yrTerm3Standard.partialUpfront": "0.930"
					}
				},
				"mswinSQL": {
					"ondemand": "4.262",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.583",
						"yrTerm1Standard.noUpfront": "3.084",
						"yrTerm1Standard.partialUpfront": "2.636",
						"yrTerm3Convertible.allUpfront": "2.534",
						"yrTerm3Convertible.noUpfront": "3.026",
						"yrTerm3Convertible.partialUpfront": "2.585",
						"yrTerm3Standard.allUpfront": "2.237",
						"yrTerm3Standard.partialUpfront": "2.380"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.290",
						"yrTerm1Standard.noUpfront": "1.540",
						"yrTerm1Standard.partialUpfront": "1.316",
						"yrTerm3Convertible.allUpfront": "1.240",
						"yrTerm3Convertible.noUpfront": "1.482",
						"yrTerm3Convertible.partialUpfront": "1.265",
						"yrTerm3Standard.allUpfront": "1.005",
						"yrTerm3Standard.partialUpfront": "1.070"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.596",
						"yrTerm1Standard.noUpfront": "0.704",
						"yrTerm1Standard.partialUpfront": "0.607",
						"yrTerm3Convertible.allUpfront": "0.536",
						"yrTerm3Convertible.noUpfront": "0.634",
						"yrTerm3Convertible.partialUpfront": "0.546",
						"yrTerm3Standard.allUpfront": "0.377",
						"yrTerm3Standard.partialUpfront": "0.402"
					}
				},
				"mswin": {
					"ondemand": "1.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.203",
						"yrTerm1Standard.noUpfront": "1.436",
						"yrTerm1Standard.partialUpfront": "1.227",
						"yrTerm3Convertible.allUpfront": "1.143",
						"yrTerm3Convertible.noUpfront": "1.366",
						"yrTerm3Convertible.partialUpfront": "1.167",
						"yrTerm3Standard.allUpfront": "0.937",
						"yrTerm3Standard.partialUpfront": "0.997"
					}
				},
				"mswinSQL": {
					"ondemand": "4.43",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.683",
						"yrTerm1Standard.noUpfront": "3.203",
						"yrTerm1Standard.partialUpfront": "2.738",
						"yrTerm3Convertible.allUpfront": "2.623",
						"yrTerm3Convertible.noUpfront": "3.133",
						"yrTerm3Convertible.partialUpfront": "2.677",
						"yrTerm3Standard.allUpfront": "2.301",
						"yrTerm3Standard.partialUpfront": "2.448"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.334",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.389",
						"yrTerm1Standard.noUpfront": "1.659",
						"yrTerm1Standard.partialUpfront": "1.418",
						"yrTerm3Convertible.allUpfront": "1.330",
						"yrTerm3Convertible.noUpfront": "1.589",
						"yrTerm3Convertible.partialUpfront": "1.357",
						"yrTerm3Standard.allUpfront": "1.069",
						"yrTerm3Standard.partialUpfront": "1.137"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "0.956",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.615",
						"yrTerm1Standard.noUpfront": "0.720",
						"yrTerm1Standard.partialUpfront": "0.628",
						"yrTerm3Convertible.allUpfront": "0.554",
						"yrTerm3Convertible.noUpfront": "0.648",
						"yrTerm3Convertible.partialUpfront": "0.565",
						"yrTerm3Standard.allUpfront": "0.412",
						"yrTerm3Standard.partialUpfront": "0.439"
					}
				},
				"mswin": {
					"ondemand": "1.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.241",
						"yrTerm1Standard.noUpfront": "1.482",
						"yrTerm1Standard.partialUpfront": "1.267",
						"yrTerm3Convertible.allUpfront": "1.180",
						"yrTerm3Convertible.noUpfront": "1.410",
						"yrTerm3Convertible.partialUpfront": "1.204",
						"yrTerm3Standard.allUpfront": "0.991",
						"yrTerm3Standard.partialUpfront": "1.055"
					}
				},
				"mswinSQL": {
					"ondemand": "4.262",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.583",
						"yrTerm1Standard.noUpfront": "3.084",
						"yrTerm1Standard.partialUpfront": "2.636",
						"yrTerm3Convertible.allUpfront": "2.522",
						"yrTerm3Convertible.noUpfront": "3.012",
						"yrTerm3Convertible.partialUpfront": "2.573",
						"yrTerm3Standard.allUpfront": "2.237",
						"yrTerm3Standard.partialUpfront": "2.380"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.290",
						"yrTerm1Standard.noUpfront": "1.540",
						"yrTerm1Standard.partialUpfront": "1.316",
						"yrTerm3Convertible.allUpfront": "1.228",
						"yrTerm3Convertible.noUpfront": "1.468",
						"yrTerm3Convertible.partialUpfront": "1.253",
						"yrTerm3Standard.allUpfront": "1.005",
						"yrTerm3Standard.partialUpfront": "1.070"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "0.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.497",
						"yrTerm1Standard.noUpfront": "0.584",
						"yrTerm1Standard.partialUpfront": "0.507",
						"yrTerm3Convertible.allUpfront": "0.447",
						"yrTerm3Convertible.noUpfront": "0.526",
						"yrTerm3Convertible.partialUpfront": "0.456",
						"yrTerm3Standard.allUpfront": "0.315",
						"yrTerm3Standard.partialUpfront": "0.335"
					}
				},
				"mswin": {
					"ondemand": "1.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.103",
						"yrTerm1Standard.noUpfront": "1.317",
						"yrTerm1Standard.partialUpfront": "1.126",
						"yrTerm3Convertible.allUpfront": "1.053",
						"yrTerm3Convertible.noUpfront": "1.259",
						"yrTerm3Convertible.partialUpfront": "1.075",
						"yrTerm3Standard.allUpfront": "0.874",
						"yrTerm3Standard.partialUpfront": "0.930"
					}
				},
				"mswinSQL": {
					"ondemand": "4.262",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.583",
						"yrTerm1Standard.noUpfront": "3.084",
						"yrTerm1Standard.partialUpfront": "2.636",
						"yrTerm3Convertible.allUpfront": "2.534",
						"yrTerm3Convertible.noUpfront": "3.026",
						"yrTerm3Convertible.partialUpfront": "2.585",
						"yrTerm3Standard.allUpfront": "2.237",
						"yrTerm3Standard.partialUpfront": "2.380"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.290",
						"yrTerm1Standard.noUpfront": "1.540",
						"yrTerm1Standard.partialUpfront": "1.316",
						"yrTerm3Convertible.allUpfront": "1.240",
						"yrTerm3Convertible.noUpfront": "1.482",
						"yrTerm3Convertible.partialUpfront": "1.265",
						"yrTerm3Standard.allUpfront": "1.005",
						"yrTerm3Standard.partialUpfront": "1.070"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 160,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 108,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": true,
		"family": "Compute optimized",
		"generation": "current",
		"instance_type": "c3.8xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM",
			"PV"
		],
		"memory": 60,
		"network_performance": "10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "C3 High-CPU Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "2.043",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.374",
						"yrTerm1Standard.noUpfront": "1.552",
						"yrTerm1Standard.partialUpfront": "1.402",
						"yrTerm3Convertible.allUpfront": "1.236",
						"yrTerm3Convertible.noUpfront": "1.397",
						"yrTerm3Convertible.partialUpfront": "1.261",
						"yrTerm3Standard.allUpfront": "0.926",
						"yrTerm3Standard.partialUpfront": "0.985"
					}
				},
				"mswin": {
					"ondemand": "3.699",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.494",
						"yrTerm1Standard.noUpfront": "2.978",
						"yrTerm1Standard.partialUpfront": "2.545",
						"yrTerm3Convertible.allUpfront": "2.357",
						"yrTerm3Convertible.noUpfront": "2.823",
						"yrTerm3Convertible.partialUpfront": "2.405",
						"yrTerm3Standard.allUpfront": "2.034",
						"yrTerm3Standard.partialUpfront": "2.164"
					}
				},
				"mswinSQL": {
					"ondemand": "9.128",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.852",
						"yrTerm1Standard.noUpfront": "6.986",
						"yrTerm1Standard.partialUpfront": "5.971",
						"yrTerm3Convertible.allUpfront": "5.714",
						"yrTerm3Convertible.noUpfront": "6.831",
						"yrTerm3Convertible.partialUpfront": "5.831",
						"yrTerm3Standard.allUpfront": "5.112",
						"yrTerm3Standard.partialUpfront": "5.438"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.332",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.014",
						"yrTerm1Standard.noUpfront": "3.599",
						"yrTerm1Standard.partialUpfront": "3.076",
						"yrTerm3Convertible.allUpfront": "2.877",
						"yrTerm3Convertible.noUpfront": "3.444",
						"yrTerm3Convertible.partialUpfront": "2.936",
						"yrTerm3Standard.allUpfront": "2.405",
						"yrTerm3Standard.partialUpfront": "2.558"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "2.117",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.331",
						"yrTerm1Standard.noUpfront": "1.568",
						"yrTerm1Standard.partialUpfront": "1.358",
						"yrTerm3Convertible.allUpfront": "1.198",
						"yrTerm3Convertible.noUpfront": "1.411",
						"yrTerm3Convertible.partialUpfront": "1.222",
						"yrTerm3Standard.allUpfront": "0.897",
						"yrTerm3Standard.partialUpfront": "0.954"
					}
				},
				"mswin": {
					"ondemand": "3.813",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.451",
						"yrTerm1Standard.noUpfront": "2.926",
						"yrTerm1Standard.partialUpfront": "2.501",
						"yrTerm3Convertible.allUpfront": "2.318",
						"yrTerm3Convertible.noUpfront": "2.769",
						"yrTerm3Convertible.partialUpfront": "2.365",
						"yrTerm3Standard.allUpfront": "1.957",
						"yrTerm3Standard.partialUpfront": "2.082"
					}
				},
				"mswinSQL": {
					"ondemand": "8.523",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.515",
						"yrTerm1Standard.noUpfront": "6.584",
						"yrTerm1Standard.partialUpfront": "5.627",
						"yrTerm3Convertible.allUpfront": "5.382",
						"yrTerm3Convertible.noUpfront": "6.427",
						"yrTerm3Convertible.partialUpfront": "5.491",
						"yrTerm3Standard.allUpfront": "4.769",
						"yrTerm3Standard.partialUpfront": "5.073"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.332",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.919",
						"yrTerm1Standard.noUpfront": "3.485",
						"yrTerm1Standard.partialUpfront": "2.978",
						"yrTerm3Convertible.allUpfront": "2.786",
						"yrTerm3Convertible.noUpfront": "3.328",
						"yrTerm3Convertible.partialUpfront": "2.842",
						"yrTerm3Standard.allUpfront": "2.296",
						"yrTerm3Standard.partialUpfront": "2.443"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "2.117",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.331",
						"yrTerm1Standard.noUpfront": "1.568",
						"yrTerm1Standard.partialUpfront": "1.358",
						"yrTerm3Convertible.allUpfront": "1.198",
						"yrTerm3Convertible.noUpfront": "1.411",
						"yrTerm3Convertible.partialUpfront": "1.222",
						"yrTerm3Standard.allUpfront": "0.897",
						"yrTerm3Standard.partialUpfront": "0.954"
					}
				},
				"mswin": {
					"ondemand": "3.813",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.451",
						"yrTerm1Standard.noUpfront": "2.926",
						"yrTerm1Standard.partialUpfront": "2.501",
						"yrTerm3Convertible.allUpfront": "2.318",
						"yrTerm3Convertible.noUpfront": "2.769",
						"yrTerm3Convertible.partialUpfront": "2.365",
						"yrTerm3Standard.allUpfront": "1.957",
						"yrTerm3Standard.partialUpfront": "2.082"
					}
				},
				"mswinSQL": {
					"ondemand": "8.523",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.515",
						"yrTerm1Standard.noUpfront": "6.584",
						"yrTerm1Standard.partialUpfront": "5.627",
						"yrTerm3Convertible.allUpfront": "5.382",
						"yrTerm3Convertible.noUpfront": "6.427",
						"yrTerm3Convertible.partialUpfront": "5.491",
						"yrTerm3Standard.allUpfront": "4.769",
						"yrTerm3Standard.partialUpfront": "5.073"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.332",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.919",
						"yrTerm1Standard.noUpfront": "3.485",
						"yrTerm1Standard.partialUpfront": "2.978",
						"yrTerm3Convertible.allUpfront": "2.786",
						"yrTerm3Convertible.noUpfront": "3.328",
						"yrTerm3Convertible.partialUpfront": "2.842",
						"yrTerm3Standard.allUpfront": "2.296",
						"yrTerm3Standard.partialUpfront": "2.443"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "2.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.330",
						"yrTerm1Standard.noUpfront": "1.536",
						"yrTerm1Standard.partialUpfront": "1.357",
						"yrTerm3Convertible.allUpfront": "1.197",
						"yrTerm3Convertible.noUpfront": "1.382",
						"yrTerm3Convertible.partialUpfront": "1.221",
						"yrTerm3Standard.allUpfront": "0.891",
						"yrTerm3Standard.partialUpfront": "0.947"
					}
				},
				"mswin": {
					"ondemand": "3.392",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.541",
						"yrTerm1Standard.noUpfront": "3.034",
						"yrTerm1Standard.partialUpfront": "2.593",
						"yrTerm3Convertible.allUpfront": "2.408",
						"yrTerm3Convertible.noUpfront": "2.880",
						"yrTerm3Convertible.partialUpfront": "2.458",
						"yrTerm3Standard.allUpfront": "2.008",
						"yrTerm3Standard.partialUpfront": "2.136"
					}
				},
				"mswinSQL": {
					"ondemand": "10.401",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.279",
						"yrTerm1Standard.noUpfront": "7.496",
						"yrTerm1Standard.partialUpfront": "6.407",
						"yrTerm3Convertible.allUpfront": "6.146",
						"yrTerm3Convertible.noUpfront": "7.342",
						"yrTerm3Convertible.partialUpfront": "6.271",
						"yrTerm3Standard.allUpfront": "5.422",
						"yrTerm3Standard.partialUpfront": "5.768"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.716",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.918",
						"yrTerm1Standard.noUpfront": "3.484",
						"yrTerm1Standard.partialUpfront": "2.978",
						"yrTerm3Convertible.allUpfront": "2.785",
						"yrTerm3Convertible.noUpfront": "3.330",
						"yrTerm3Convertible.partialUpfront": "2.842",
						"yrTerm3Standard.allUpfront": "2.272",
						"yrTerm3Standard.partialUpfront": "2.417"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "1.912",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.231",
						"yrTerm1Standard.noUpfront": "1.440",
						"yrTerm1Standard.partialUpfront": "1.256",
						"yrTerm3Convertible.allUpfront": "1.108",
						"yrTerm3Convertible.noUpfront": "1.296",
						"yrTerm3Convertible.partialUpfront": "1.131",
						"yrTerm3Standard.allUpfront": "0.825",
						"yrTerm3Standard.partialUpfront": "0.877"
					}
				},
				"mswin": {
					"ondemand": "3.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.480",
						"yrTerm1Standard.noUpfront": "2.961",
						"yrTerm1Standard.partialUpfront": "2.531",
						"yrTerm3Convertible.allUpfront": "2.357",
						"yrTerm3Convertible.noUpfront": "2.817",
						"yrTerm3Convertible.partialUpfront": "2.405",
						"yrTerm3Standard.allUpfront": "1.982",
						"yrTerm3Standard.partialUpfront": "2.108"
					}
				},
				"mswinSQL": {
					"ondemand": "8.523",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.168",
						"yrTerm1Standard.noUpfront": "6.170",
						"yrTerm1Standard.partialUpfront": "5.273",
						"yrTerm3Convertible.allUpfront": "5.045",
						"yrTerm3Convertible.noUpfront": "6.026",
						"yrTerm3Convertible.partialUpfront": "5.148",
						"yrTerm3Standard.allUpfront": "4.474",
						"yrTerm3Standard.partialUpfront": "4.760"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.332",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.581",
						"yrTerm1Standard.noUpfront": "3.081",
						"yrTerm1Standard.partialUpfront": "2.633",
						"yrTerm3Convertible.allUpfront": "2.457",
						"yrTerm3Convertible.noUpfront": "2.937",
						"yrTerm3Convertible.partialUpfront": "2.508",
						"yrTerm3Standard.allUpfront": "2.010",
						"yrTerm3Standard.partialUpfront": "2.138"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "2.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.730",
						"yrTerm1Standard.noUpfront": "1.968",
						"yrTerm1Standard.partialUpfront": "1.765",
						"yrTerm3Convertible.allUpfront": "1.557",
						"yrTerm3Convertible.noUpfront": "1.771",
						"yrTerm3Convertible.partialUpfront": "1.589",
						"yrTerm3Standard.allUpfront": "1.108",
						"yrTerm3Standard.partialUpfront": "1.178"
					}
				},
				"mswin": {
					"ondemand": "3.928",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.480",
						"yrTerm1Standard.noUpfront": "3.676",
						"yrTerm1Standard.partialUpfront": "3.551",
						"yrTerm3Convertible.allUpfront": "3.307",
						"yrTerm3Convertible.noUpfront": "3.479",
						"yrTerm3Convertible.partialUpfront": "3.374",
						"yrTerm3Standard.allUpfront": "2.227",
						"yrTerm3Standard.partialUpfront": "2.370"
					}
				},
				"mswinSQL": {
					"ondemand": "10.347",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.448",
						"yrTerm1Standard.noUpfront": "10.085",
						"yrTerm1Standard.partialUpfront": "8.620",
						"yrTerm3Convertible.allUpfront": "8.275",
						"yrTerm3Convertible.noUpfront": "9.888",
						"yrTerm3Convertible.partialUpfront": "8.443",
						"yrTerm3Standard.allUpfront": "5.409",
						"yrTerm3Standard.partialUpfront": "5.754"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.893",
						"yrTerm1Standard.noUpfront": "4.648",
						"yrTerm1Standard.partialUpfront": "3.972",
						"yrTerm3Convertible.allUpfront": "3.720",
						"yrTerm3Convertible.noUpfront": "4.451",
						"yrTerm3Convertible.partialUpfront": "3.796",
						"yrTerm3Standard.allUpfront": "2.492",
						"yrTerm3Standard.partialUpfront": "2.652"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "1.68",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.992",
						"yrTerm1Standard.noUpfront": "1.168",
						"yrTerm1Standard.partialUpfront": "1.012",
						"yrTerm3Convertible.allUpfront": "0.893",
						"yrTerm3Convertible.noUpfront": "1.051",
						"yrTerm3Convertible.partialUpfront": "0.911",
						"yrTerm3Standard.allUpfront": "0.628",
						"yrTerm3Standard.partialUpfront": "0.668"
					}
				},
				"mswin": {
					"ondemand": "3.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.204",
						"yrTerm1Standard.noUpfront": "2.631",
						"yrTerm1Standard.partialUpfront": "2.249",
						"yrTerm3Convertible.allUpfront": "2.105",
						"yrTerm3Convertible.noUpfront": "2.514",
						"yrTerm3Convertible.partialUpfront": "2.148",
						"yrTerm3Standard.allUpfront": "1.746",
						"yrTerm3Standard.partialUpfront": "1.857"
					}
				},
				"mswinSQL": {
					"ondemand": "8.523",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.168",
						"yrTerm1Standard.noUpfront": "6.170",
						"yrTerm1Standard.partialUpfront": "5.273",
						"yrTerm3Convertible.allUpfront": "5.068",
						"yrTerm3Convertible.noUpfront": "6.053",
						"yrTerm3Convertible.partialUpfront": "5.172",
						"yrTerm3Standard.allUpfront": "4.474",
						"yrTerm3Standard.partialUpfront": "4.760"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.332",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.581",
						"yrTerm1Standard.noUpfront": "3.081",
						"yrTerm1Standard.partialUpfront": "2.633",
						"yrTerm3Convertible.allUpfront": "2.481",
						"yrTerm3Convertible.noUpfront": "2.964",
						"yrTerm3Convertible.partialUpfront": "2.532",
						"yrTerm3Standard.allUpfront": "2.010",
						"yrTerm3Standard.partialUpfront": "2.138"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "2.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.191",
						"yrTerm1Standard.noUpfront": "1.408",
						"yrTerm1Standard.partialUpfront": "1.215",
						"yrTerm3Convertible.allUpfront": "1.071",
						"yrTerm3Convertible.noUpfront": "1.267",
						"yrTerm3Convertible.partialUpfront": "1.093",
						"yrTerm3Standard.allUpfront": "0.754",
						"yrTerm3Standard.partialUpfront": "0.801"
					}
				},
				"mswin": {
					"ondemand": "3.344",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.403",
						"yrTerm1Standard.noUpfront": "2.869",
						"yrTerm1Standard.partialUpfront": "2.452",
						"yrTerm3Convertible.allUpfront": "2.284",
						"yrTerm3Convertible.noUpfront": "2.728",
						"yrTerm3Convertible.partialUpfront": "2.331",
						"yrTerm3Standard.allUpfront": "1.872",
						"yrTerm3Standard.partialUpfront": "1.991"
					}
				},
				"mswinSQL": {
					"ondemand": "8.859",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.367",
						"yrTerm1Standard.noUpfront": "6.407",
						"yrTerm1Standard.partialUpfront": "5.476",
						"yrTerm3Convertible.allUpfront": "5.248",
						"yrTerm3Convertible.noUpfront": "6.266",
						"yrTerm3Convertible.partialUpfront": "5.355",
						"yrTerm3Standard.allUpfront": "4.601",
						"yrTerm3Standard.partialUpfront": "4.894"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.668",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.779",
						"yrTerm1Standard.noUpfront": "3.318",
						"yrTerm1Standard.partialUpfront": "2.836",
						"yrTerm3Convertible.allUpfront": "2.660",
						"yrTerm3Convertible.noUpfront": "3.177",
						"yrTerm3Convertible.partialUpfront": "2.715",
						"yrTerm3Standard.allUpfront": "2.136",
						"yrTerm3Standard.partialUpfront": "2.273"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "1.912",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.231",
						"yrTerm1Standard.noUpfront": "1.440",
						"yrTerm1Standard.partialUpfront": "1.256",
						"yrTerm3Convertible.allUpfront": "1.108",
						"yrTerm3Convertible.noUpfront": "1.296",
						"yrTerm3Convertible.partialUpfront": "1.131",
						"yrTerm3Standard.allUpfront": "0.825",
						"yrTerm3Standard.partialUpfront": "0.877"
					}
				},
				"mswin": {
					"ondemand": "3.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.480",
						"yrTerm1Standard.noUpfront": "2.961",
						"yrTerm1Standard.partialUpfront": "2.531",
						"yrTerm3Convertible.allUpfront": "2.357",
						"yrTerm3Convertible.noUpfront": "2.817",
						"yrTerm3Convertible.partialUpfront": "2.405",
						"yrTerm3Standard.allUpfront": "1.982",
						"yrTerm3Standard.partialUpfront": "2.108"
					}
				},
				"mswinSQL": {
					"ondemand": "8.523",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.168",
						"yrTerm1Standard.noUpfront": "6.170",
						"yrTerm1Standard.partialUpfront": "5.273",
						"yrTerm3Convertible.allUpfront": "5.045",
						"yrTerm3Convertible.noUpfront": "6.026",
						"yrTerm3Convertible.partialUpfront": "5.148",
						"yrTerm3Standard.allUpfront": "4.474",
						"yrTerm3Standard.partialUpfront": "4.760"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.332",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.581",
						"yrTerm1Standard.noUpfront": "3.081",
						"yrTerm1Standard.partialUpfront": "2.633",
						"yrTerm3Convertible.allUpfront": "2.457",
						"yrTerm3Convertible.noUpfront": "2.937",
						"yrTerm3Convertible.partialUpfront": "2.508",
						"yrTerm3Standard.allUpfront": "2.010",
						"yrTerm3Standard.partialUpfront": "2.138"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "1.68",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.992",
						"yrTerm1Standard.noUpfront": "1.168",
						"yrTerm1Standard.partialUpfront": "1.012",
						"yrTerm3Convertible.allUpfront": "0.893",
						"yrTerm3Convertible.noUpfront": "1.051",
						"yrTerm3Convertible.partialUpfront": "0.911",
						"yrTerm3Standard.allUpfront": "0.628",
						"yrTerm3Standard.partialUpfront": "0.668"
					}
				},
				"mswin": {
					"ondemand": "3.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.204",
						"yrTerm1Standard.noUpfront": "2.631",
						"yrTerm1Standard.partialUpfront": "2.249",
						"yrTerm3Convertible.allUpfront": "2.105",
						"yrTerm3Convertible.noUpfront": "2.514",
						"yrTerm3Convertible.partialUpfront": "2.148",
						"yrTerm3Standard.allUpfront": "1.746",
						"yrTerm3Standard.partialUpfront": "1.857"
					}
				},
				"mswinSQL": {
					"ondemand": "8.523",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.168",
						"yrTerm1Standard.noUpfront": "6.170",
						"yrTerm1Standard.partialUpfront": "5.273",
						"yrTerm3Convertible.allUpfront": "5.068",
						"yrTerm3Convertible.noUpfront": "6.053",
						"yrTerm3Convertible.partialUpfront": "5.172",
						"yrTerm3Standard.allUpfront": "4.474",
						"yrTerm3Standard.partialUpfront": "4.760"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.332",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.581",
						"yrTerm1Standard.noUpfront": "3.081",
						"yrTerm1Standard.partialUpfront": "2.633",
						"yrTerm3Convertible.allUpfront": "2.481",
						"yrTerm3Convertible.noUpfront": "2.964",
						"yrTerm3Convertible.partialUpfront": "2.532",
						"yrTerm3Standard.allUpfront": "2.010",
						"yrTerm3Standard.partialUpfront": "2.138"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 320,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 32,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 12,
		"FPGA": 0,
		"GPU": "1",
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 6000,
		"ebs_max_bandwidth": 750,
		"ebs_optimized": true,
		"ebs_throughput": 93.75,
		"enhanced_networking": true,
		"family": "Accelerated computing",
		"generation": "current",
		"instance_type": "p2.xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 61,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "General Purpose GPU Extra Large",
		"pricing": {
			"ap-northeast-2": {
				"linux": {
					"ondemand": "1.465",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.958",
						"yrTerm1Standard.noUpfront": "1.027",
						"yrTerm1Standard.partialUpfront": "0.978",
						"yrTerm3Convertible.allUpfront": "0.814",
						"yrTerm3Convertible.noUpfront": "0.897",
						"yrTerm3Convertible.partialUpfront": "0.830",
						"yrTerm3Standard.allUpfront": "0.679",
						"yrTerm3Standard.noUpfront": "0.780",
						"yrTerm3Standard.partialUpfront": "0.722"
					}
				},
				"mswin": {
					"ondemand": "1.649",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.142",
						"yrTerm1Standard.noUpfront": "1.211",
						"yrTerm1Standard.partialUpfront": "1.162",
						"yrTerm3Convertible.allUpfront": "0.998",
						"yrTerm3Convertible.noUpfront": "1.081",
						"yrTerm3Convertible.partialUpfront": "1.014",
						"yrTerm3Standard.allUpfront": "0.863",
						"yrTerm3Standard.noUpfront": "0.964",
						"yrTerm3Standard.partialUpfront": "0.906"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.972",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.621",
						"yrTerm1Standard.noUpfront": "0.669",
						"yrTerm1Standard.partialUpfront": "0.634",
						"yrTerm3Convertible.allUpfront": "0.518",
						"yrTerm3Convertible.noUpfront": "0.571",
						"yrTerm3Convertible.partialUpfront": "0.530",
						"yrTerm3Standard.allUpfront": "0.432",
						"yrTerm3Standard.noUpfront": "0.497",
						"yrTerm3Standard.partialUpfront": "0.460"
					}
				},
				"mswin": {
					"ondemand": "1.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.805",
						"yrTerm1Standard.noUpfront": "0.853",
						"yrTerm1Standard.partialUpfront": "0.818",
						"yrTerm3Convertible.allUpfront": "0.702",
						"yrTerm3Convertible.noUpfront": "0.755",
						"yrTerm3Convertible.partialUpfront": "0.714",
						"yrTerm3Standard.allUpfront": "0.616",
						"yrTerm3Standard.noUpfront": "0.681",
						"yrTerm3Standard.partialUpfront": "0.644"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.573",
						"yrTerm1Standard.noUpfront": "0.614",
						"yrTerm1Standard.partialUpfront": "0.585",
						"yrTerm3Convertible.allUpfront": "0.479",
						"yrTerm3Convertible.noUpfront": "0.528",
						"yrTerm3Convertible.partialUpfront": "0.488",
						"yrTerm3Standard.allUpfront": "0.399",
						"yrTerm3Standard.noUpfront": "0.459",
						"yrTerm3Standard.partialUpfront": "0.425"
					}
				},
				"mswin": {
					"ondemand": "1.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.757",
						"yrTerm1Standard.noUpfront": "0.798",
						"yrTerm1Standard.partialUpfront": "0.769",
						"yrTerm3Convertible.allUpfront": "0.663",
						"yrTerm3Convertible.noUpfront": "0.712",
						"yrTerm3Convertible.partialUpfront": "0.672",
						"yrTerm3Standard.allUpfront": "0.584",
						"yrTerm3Standard.noUpfront": "0.643",
						"yrTerm3Standard.partialUpfront": "0.609"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.573",
						"yrTerm1Standard.noUpfront": "0.614",
						"yrTerm1Standard.partialUpfront": "0.585",
						"yrTerm3Convertible.allUpfront": "0.479",
						"yrTerm3Convertible.noUpfront": "0.528",
						"yrTerm3Convertible.partialUpfront": "0.488",
						"yrTerm3Standard.allUpfront": "0.399",
						"yrTerm3Standard.noUpfront": "0.459",
						"yrTerm3Standard.partialUpfront": "0.425"
					}
				},
				"mswin": {
					"ondemand": "1.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.757",
						"yrTerm1Standard.noUpfront": "0.798",
						"yrTerm1Standard.partialUpfront": "0.769",
						"yrTerm3Convertible.allUpfront": "0.663",
						"yrTerm3Convertible.noUpfront": "0.712",
						"yrTerm3Convertible.partialUpfront": "0.672",
						"yrTerm3Standard.allUpfront": "0.584",
						"yrTerm3Standard.noUpfront": "0.643",
						"yrTerm3Standard.partialUpfront": "0.609"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "1.08",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.688",
						"yrTerm1Standard.noUpfront": "0.737",
						"yrTerm1Standard.partialUpfront": "0.702",
						"yrTerm3Convertible.allUpfront": "0.575",
						"yrTerm3Convertible.noUpfront": "0.633",
						"yrTerm3Convertible.partialUpfront": "0.586",
						"yrTerm3Standard.allUpfront": "0.479",
						"yrTerm3Standard.noUpfront": "0.551",
						"yrTerm3Standard.partialUpfront": "0.510"
					}
				},
				"mswin": {
					"ondemand": "1.264",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.872",
						"yrTerm1Standard.noUpfront": "0.921",
						"yrTerm1Standard.partialUpfront": "0.886",
						"yrTerm3Convertible.allUpfront": "0.759",
						"yrTerm3Convertible.noUpfront": "0.817",
						"yrTerm3Convertible.partialUpfront": "0.770",
						"yrTerm3Standard.allUpfront": "0.663",
						"yrTerm3Standard.noUpfront": "0.735",
						"yrTerm3Standard.partialUpfront": "0.694"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.573",
						"yrTerm1Standard.noUpfront": "0.614",
						"yrTerm1Standard.partialUpfront": "0.585",
						"yrTerm3Convertible.allUpfront": "0.479",
						"yrTerm3Convertible.noUpfront": "0.528",
						"yrTerm3Convertible.partialUpfront": "0.488",
						"yrTerm3Standard.allUpfront": "0.399",
						"yrTerm3Standard.noUpfront": "0.459",
						"yrTerm3Standard.partialUpfront": "0.425"
					}
				},
				"mswin": {
					"ondemand": "1.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.757",
						"yrTerm1Standard.noUpfront": "0.798",
						"yrTerm1Standard.partialUpfront": "0.769",
						"yrTerm3Convertible.allUpfront": "0.663",
						"yrTerm3Convertible.noUpfront": "0.712",
						"yrTerm3Convertible.partialUpfront": "0.672",
						"yrTerm3Standard.allUpfront": "0.584",
						"yrTerm3Standard.noUpfront": "0.643",
						"yrTerm3Standard.partialUpfront": "0.609"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": true
	},
	{
		"ECU": 94,
		"FPGA": 0,
		"GPU": "8",
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 32500,
		"ebs_max_bandwidth": 5000,
		"ebs_optimized": true,
		"ebs_throughput": 625,
		"enhanced_networking": true,
		"family": "Accelerated computing",
		"generation": "current",
		"instance_type": "p2.8xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 488,
		"network_performance": "10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "General Purpose GPU Eight Extra Large",
		"pricing": {
			"ap-northeast-2": {
				"linux": {
					"ondemand": "11.72",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.662",
						"yrTerm1Standard.noUpfront": "8.215",
						"yrTerm1Standard.partialUpfront": "7.818",
						"yrTerm3Convertible.allUpfront": "6.510",
						"yrTerm3Convertible.noUpfront": "7.174",
						"yrTerm3Convertible.partialUpfront": "6.642",
						"yrTerm3Standard.allUpfront": "5.435",
						"yrTerm3Standard.noUpfront": "6.238",
						"yrTerm3Standard.partialUpfront": "5.782"
					}
				},
				"mswin": {
					"ondemand": "13.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.134",
						"yrTerm1Standard.noUpfront": "9.687",
						"yrTerm1Standard.partialUpfront": "9.290",
						"yrTerm3Convertible.allUpfront": "7.982",
						"yrTerm3Convertible.noUpfront": "8.646",
						"yrTerm3Convertible.partialUpfront": "8.114",
						"yrTerm3Standard.allUpfront": "6.907",
						"yrTerm3Standard.noUpfront": "7.710",
						"yrTerm3Standard.partialUpfront": "7.254"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "7.776",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.971",
						"yrTerm1Standard.noUpfront": "5.350",
						"yrTerm1Standard.partialUpfront": "5.072",
						"yrTerm3Convertible.allUpfront": "4.147",
						"yrTerm3Convertible.noUpfront": "4.571",
						"yrTerm3Convertible.partialUpfront": "4.232",
						"yrTerm3Standard.allUpfront": "3.459",
						"yrTerm3Standard.noUpfront": "3.974",
						"yrTerm3Standard.partialUpfront": "3.680"
					}
				},
				"mswin": {
					"ondemand": "9.248",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.443",
						"yrTerm1Standard.noUpfront": "6.822",
						"yrTerm1Standard.partialUpfront": "6.544",
						"yrTerm3Convertible.allUpfront": "5.619",
						"yrTerm3Convertible.noUpfront": "6.043",
						"yrTerm3Convertible.partialUpfront": "5.704",
						"yrTerm3Standard.allUpfront": "4.931",
						"yrTerm3Standard.noUpfront": "5.446",
						"yrTerm3Standard.partialUpfront": "5.152"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "7.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.586",
						"yrTerm1Standard.noUpfront": "4.914",
						"yrTerm1Standard.partialUpfront": "4.680",
						"yrTerm3Convertible.allUpfront": "3.832",
						"yrTerm3Convertible.noUpfront": "4.223",
						"yrTerm3Convertible.partialUpfront": "3.910",
						"yrTerm3Standard.allUpfront": "3.196",
						"yrTerm3Standard.noUpfront": "3.672",
						"yrTerm3Standard.partialUpfront": "3.400"
					}
				},
				"mswin": {
					"ondemand": "8.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.058",
						"yrTerm1Standard.noUpfront": "6.386",
						"yrTerm1Standard.partialUpfront": "6.152",
						"yrTerm3Convertible.allUpfront": "5.304",
						"yrTerm3Convertible.noUpfront": "5.695",
						"yrTerm3Convertible.partialUpfront": "5.382",
						"yrTerm3Standard.allUpfront": "4.668",
						"yrTerm3Standard.noUpfront": "5.144",
						"yrTerm3Standard.partialUpfront": "4.872"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "7.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.586",
						"yrTerm1Standard.noUpfront": "4.914",
						"yrTerm1Standard.partialUpfront": "4.680",
						"yrTerm3Convertible.allUpfront": "3.832",
						"yrTerm3Convertible.noUpfront": "4.223",
						"yrTerm3Convertible.partialUpfront": "3.910",
						"yrTerm3Standard.allUpfront": "3.196",
						"yrTerm3Standard.noUpfront": "3.672",
						"yrTerm3Standard.partialUpfront": "3.400"
					}
				},
				"mswin": {
					"ondemand": "8.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.058",
						"yrTerm1Standard.noUpfront": "6.386",
						"yrTerm1Standard.partialUpfront": "6.152",
						"yrTerm3Convertible.allUpfront": "5.304",
						"yrTerm3Convertible.noUpfront": "5.695",
						"yrTerm3Convertible.partialUpfront": "5.382",
						"yrTerm3Standard.allUpfront": "4.668",
						"yrTerm3Standard.noUpfront": "5.144",
						"yrTerm3Standard.partialUpfront": "4.872"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "8.64",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.504",
						"yrTerm1Standard.noUpfront": "5.897",
						"yrTerm1Standard.partialUpfront": "5.616",
						"yrTerm3Convertible.allUpfront": "4.598",
						"yrTerm3Convertible.noUpfront": "5.067",
						"yrTerm3Convertible.partialUpfront": "4.692",
						"yrTerm3Standard.allUpfront": "3.835",
						"yrTerm3Standard.noUpfront": "4.406",
						"yrTerm3Standard.partialUpfront": "4.080"
					}
				},
				"mswin": {
					"ondemand": "10.112",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.976",
						"yrTerm1Standard.noUpfront": "7.369",
						"yrTerm1Standard.partialUpfront": "7.088",
						"yrTerm3Convertible.allUpfront": "6.070",
						"yrTerm3Convertible.noUpfront": "6.539",
						"yrTerm3Convertible.partialUpfront": "6.164",
						"yrTerm3Standard.allUpfront": "5.307",
						"yrTerm3Standard.noUpfront": "5.878",
						"yrTerm3Standard.partialUpfront": "5.552"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "7.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.586",
						"yrTerm1Standard.noUpfront": "4.914",
						"yrTerm1Standard.partialUpfront": "4.680",
						"yrTerm3Convertible.allUpfront": "3.832",
						"yrTerm3Convertible.noUpfront": "4.223",
						"yrTerm3Convertible.partialUpfront": "3.910",
						"yrTerm3Standard.allUpfront": "3.196",
						"yrTerm3Standard.noUpfront": "3.672",
						"yrTerm3Standard.partialUpfront": "3.400"
					}
				},
				"mswin": {
					"ondemand": "8.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.058",
						"yrTerm1Standard.noUpfront": "6.386",
						"yrTerm1Standard.partialUpfront": "6.152",
						"yrTerm3Convertible.allUpfront": "5.304",
						"yrTerm3Convertible.noUpfront": "5.695",
						"yrTerm3Convertible.partialUpfront": "5.382",
						"yrTerm3Standard.allUpfront": "4.668",
						"yrTerm3Standard.noUpfront": "5.144",
						"yrTerm3Standard.partialUpfront": "4.872"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 32,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 188,
		"FPGA": 0,
		"GPU": "16",
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 65000,
		"ebs_max_bandwidth": 10000,
		"ebs_optimized": true,
		"ebs_throughput": 1250,
		"enhanced_networking": true,
		"family": "Accelerated computing",
		"generation": "current",
		"instance_type": "p2.16xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 732,
		"network_performance": "20 Gigabit",
		"placement_group_support": true,
		"pretty_name": "General Purpose GPU 16xlarge",
		"pricing": {
			"ap-northeast-2": {
				"linux": {
					"ondemand": "23.44",
					"reserved": {
						"yrTerm1Standard.allUpfront": "15.324",
						"yrTerm1Standard.noUpfront": "16.430",
						"yrTerm1Standard.partialUpfront": "15.636",
						"yrTerm3Convertible.allUpfront": "13.019",
						"yrTerm3Convertible.noUpfront": "14.348",
						"yrTerm3Convertible.partialUpfront": "13.284",
						"yrTerm3Standard.allUpfront": "10.871",
						"yrTerm3Standard.noUpfront": "12.476",
						"yrTerm3Standard.partialUpfront": "11.564"
					}
				},
				"mswin": {
					"ondemand": "26.384",
					"reserved": {
						"yrTerm1Standard.allUpfront": "18.268",
						"yrTerm1Standard.noUpfront": "19.374",
						"yrTerm1Standard.partialUpfront": "18.580",
						"yrTerm3Convertible.allUpfront": "15.963",
						"yrTerm3Convertible.noUpfront": "17.292",
						"yrTerm3Convertible.partialUpfront": "16.228",
						"yrTerm3Standard.allUpfront": "13.815",
						"yrTerm3Standard.noUpfront": "15.420",
						"yrTerm3Standard.partialUpfront": "14.508"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "15.552",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.941",
						"yrTerm1Standard.noUpfront": "10.700",
						"yrTerm1Standard.partialUpfront": "10.144",
						"yrTerm3Convertible.allUpfront": "8.295",
						"yrTerm3Convertible.noUpfront": "9.141",
						"yrTerm3Convertible.partialUpfront": "8.464",
						"yrTerm3Standard.allUpfront": "6.918",
						"yrTerm3Standard.noUpfront": "7.949",
						"yrTerm3Standard.partialUpfront": "7.360"
					}
				},
				"mswin": {
					"ondemand": "18.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.885",
						"yrTerm1Standard.noUpfront": "13.644",
						"yrTerm1Standard.partialUpfront": "13.088",
						"yrTerm3Convertible.allUpfront": "11.239",
						"yrTerm3Convertible.noUpfront": "12.085",
						"yrTerm3Convertible.partialUpfront": "11.408",
						"yrTerm3Standard.allUpfront": "9.862",
						"yrTerm3Standard.noUpfront": "10.893",
						"yrTerm3Standard.partialUpfront": "10.304"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "14.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.173",
						"yrTerm1Standard.noUpfront": "9.828",
						"yrTerm1Standard.partialUpfront": "9.360",
						"yrTerm3Convertible.allUpfront": "7.664",
						"yrTerm3Convertible.noUpfront": "8.446",
						"yrTerm3Convertible.partialUpfront": "7.820",
						"yrTerm3Standard.allUpfront": "6.392",
						"yrTerm3Standard.noUpfront": "7.344",
						"yrTerm3Standard.partialUpfront": "6.800"
					}
				},
				"mswin": {
					"ondemand": "17.344",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.117",
						"yrTerm1Standard.noUpfront": "12.772",
						"yrTerm1Standard.partialUpfront": "12.304",
						"yrTerm3Convertible.allUpfront": "10.608",
						"yrTerm3Convertible.noUpfront": "11.390",
						"yrTerm3Convertible.partialUpfront": "10.764",
						"yrTerm3Standard.allUpfront": "9.336",
						"yrTerm3Standard.noUpfront": "10.288",
						"yrTerm3Standard.partialUpfront": "9.744"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "14.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.173",
						"yrTerm1Standard.noUpfront": "9.828",
						"yrTerm1Standard.partialUpfront": "9.360",
						"yrTerm3Convertible.allUpfront": "7.664",
						"yrTerm3Convertible.noUpfront": "8.446",
						"yrTerm3Convertible.partialUpfront": "7.820",
						"yrTerm3Standard.allUpfront": "6.392",
						"yrTerm3Standard.noUpfront": "7.344",
						"yrTerm3Standard.partialUpfront": "6.800"
					}
				},
				"mswin": {
					"ondemand": "17.344",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.117",
						"yrTerm1Standard.noUpfront": "12.772",
						"yrTerm1Standard.partialUpfront": "12.304",
						"yrTerm3Convertible.allUpfront": "10.608",
						"yrTerm3Convertible.noUpfront": "11.390",
						"yrTerm3Convertible.partialUpfront": "10.764",
						"yrTerm3Standard.allUpfront": "9.336",
						"yrTerm3Standard.noUpfront": "10.288",
						"yrTerm3Standard.partialUpfront": "9.744"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "17.28",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.007",
						"yrTerm1Standard.noUpfront": "11.794",
						"yrTerm1Standard.partialUpfront": "11.232",
						"yrTerm3Convertible.allUpfront": "9.196",
						"yrTerm3Convertible.noUpfront": "10.135",
						"yrTerm3Convertible.partialUpfront": "9.384",
						"yrTerm3Standard.allUpfront": "7.670",
						"yrTerm3Standard.noUpfront": "8.813",
						"yrTerm3Standard.partialUpfront": "8.160"
					}
				},
				"mswin": {
					"ondemand": "20.224",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.951",
						"yrTerm1Standard.noUpfront": "14.738",
						"yrTerm1Standard.partialUpfront": "14.176",
						"yrTerm3Convertible.allUpfront": "12.140",
						"yrTerm3Convertible.noUpfront": "13.079",
						"yrTerm3Convertible.partialUpfront": "12.328",
						"yrTerm3Standard.allUpfront": "10.614",
						"yrTerm3Standard.noUpfront": "11.757",
						"yrTerm3Standard.partialUpfront": "11.104"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "14.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.173",
						"yrTerm1Standard.noUpfront": "9.828",
						"yrTerm1Standard.partialUpfront": "9.360",
						"yrTerm3Convertible.allUpfront": "7.664",
						"yrTerm3Convertible.noUpfront": "8.446",
						"yrTerm3Convertible.partialUpfront": "7.820",
						"yrTerm3Standard.allUpfront": "6.392",
						"yrTerm3Standard.noUpfront": "7.344",
						"yrTerm3Standard.partialUpfront": "6.800"
					}
				},
				"mswin": {
					"ondemand": "17.344",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.117",
						"yrTerm1Standard.noUpfront": "12.772",
						"yrTerm1Standard.partialUpfront": "12.304",
						"yrTerm3Convertible.allUpfront": "10.608",
						"yrTerm3Convertible.noUpfront": "11.390",
						"yrTerm3Convertible.partialUpfront": "10.764",
						"yrTerm3Standard.allUpfront": "9.336",
						"yrTerm3Standard.noUpfront": "10.288",
						"yrTerm3Standard.partialUpfront": "9.744"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 64,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 26,
		"FPGA": 0,
		"GPU": "1",
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": false,
		"family": "Accelerated computing",
		"generation": "current",
		"instance_type": "g2.2xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 15,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "G2 Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.898",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.587",
						"yrTerm1Standard.noUpfront": "0.678",
						"yrTerm1Standard.partialUpfront": "0.599",
						"yrTerm3Convertible.allUpfront": "0.528",
						"yrTerm3Convertible.noUpfront": "0.610",
						"yrTerm3Convertible.partialUpfront": "0.539",
						"yrTerm3Standard.allUpfront": "0.417",
						"yrTerm3Standard.partialUpfront": "0.443"
					}
				},
				"mswin": {
					"ondemand": "1.01",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.696",
						"yrTerm1Standard.noUpfront": "0.831",
						"yrTerm1Standard.partialUpfront": "0.710",
						"yrTerm3Convertible.allUpfront": "0.637",
						"yrTerm3Convertible.noUpfront": "0.763",
						"yrTerm3Convertible.partialUpfront": "0.650",
						"yrTerm3Standard.allUpfront": "0.521",
						"yrTerm3Standard.partialUpfront": "0.555"
					}
				},
				"mswinSQL": {
					"ondemand": "3.913",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.203",
						"yrTerm1Standard.noUpfront": "3.824",
						"yrTerm1Standard.partialUpfront": "3.268",
						"yrTerm3Convertible.allUpfront": "3.144",
						"yrTerm3Convertible.noUpfront": "3.756",
						"yrTerm3Convertible.partialUpfront": "3.208",
						"yrTerm3Standard.allUpfront": "2.726",
						"yrTerm3Standard.partialUpfront": "2.900"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.19",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.826",
						"yrTerm1Standard.noUpfront": "0.986",
						"yrTerm1Standard.partialUpfront": "0.843",
						"yrTerm3Convertible.allUpfront": "0.767",
						"yrTerm3Convertible.noUpfront": "0.918",
						"yrTerm3Convertible.partialUpfront": "0.783",
						"yrTerm3Standard.allUpfront": "0.587",
						"yrTerm3Standard.partialUpfront": "0.625"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.05"
			},
			"ap-southeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.702",
						"yrTerm1Standard.noUpfront": "0.772",
						"yrTerm1Standard.partialUpfront": "0.716",
						"yrTerm3Convertible.allUpfront": "0.632",
						"yrTerm3Convertible.noUpfront": "0.695",
						"yrTerm3Convertible.partialUpfront": "0.645",
						"yrTerm3Standard.allUpfront": "0.464",
						"yrTerm3Standard.partialUpfront": "0.494"
					}
				},
				"mswin": {
					"ondemand": "1.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.868",
						"yrTerm1Standard.noUpfront": "1.036",
						"yrTerm1Standard.partialUpfront": "0.886",
						"yrTerm3Convertible.allUpfront": "0.798",
						"yrTerm3Convertible.noUpfront": "0.959",
						"yrTerm3Convertible.partialUpfront": "0.814",
						"yrTerm3Standard.allUpfront": "0.574",
						"yrTerm3Standard.partialUpfront": "0.611"
					}
				},
				"mswinSQL": {
					"ondemand": "4.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.933",
						"yrTerm1Standard.noUpfront": "4.064",
						"yrTerm1Standard.partialUpfront": "4.013",
						"yrTerm3Convertible.allUpfront": "3.863",
						"yrTerm3Convertible.noUpfront": "3.987",
						"yrTerm3Convertible.partialUpfront": "3.942",
						"yrTerm3Standard.allUpfront": "2.889",
						"yrTerm3Standard.partialUpfront": "3.074"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.307",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.974",
						"yrTerm1Standard.noUpfront": "1.162",
						"yrTerm1Standard.partialUpfront": "0.993",
						"yrTerm3Convertible.allUpfront": "0.903",
						"yrTerm3Convertible.noUpfront": "1.085",
						"yrTerm3Convertible.partialUpfront": "0.922",
						"yrTerm3Standard.allUpfront": "0.644",
						"yrTerm3Standard.partialUpfront": "0.685"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.898",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.587",
						"yrTerm1Standard.noUpfront": "0.678",
						"yrTerm1Standard.partialUpfront": "0.599",
						"yrTerm3Convertible.allUpfront": "0.528",
						"yrTerm3Convertible.noUpfront": "0.610",
						"yrTerm3Convertible.partialUpfront": "0.539",
						"yrTerm3Standard.allUpfront": "0.417",
						"yrTerm3Standard.partialUpfront": "0.443"
					}
				},
				"mswin": {
					"ondemand": "1.058",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.741",
						"yrTerm1Standard.noUpfront": "0.885",
						"yrTerm1Standard.partialUpfront": "0.756",
						"yrTerm3Convertible.allUpfront": "0.683",
						"yrTerm3Convertible.noUpfront": "0.817",
						"yrTerm3Convertible.partialUpfront": "0.697",
						"yrTerm3Standard.allUpfront": "0.526",
						"yrTerm3Standard.partialUpfront": "0.560"
					}
				},
				"mswinSQL": {
					"ondemand": "4.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.882",
						"yrTerm1Standard.noUpfront": "3.996",
						"yrTerm1Standard.partialUpfront": "3.961",
						"yrTerm3Convertible.allUpfront": "3.824",
						"yrTerm3Convertible.noUpfront": "3.928",
						"yrTerm3Convertible.partialUpfront": "3.902",
						"yrTerm3Standard.allUpfront": "2.842",
						"yrTerm3Standard.partialUpfront": "3.023"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.205",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.839",
						"yrTerm1Standard.noUpfront": "1.002",
						"yrTerm1Standard.partialUpfront": "0.856",
						"yrTerm3Convertible.allUpfront": "0.781",
						"yrTerm3Convertible.noUpfront": "0.934",
						"yrTerm3Convertible.partialUpfront": "0.797",
						"yrTerm3Standard.allUpfront": "0.596",
						"yrTerm3Standard.partialUpfront": "0.634"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.772",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.474",
						"yrTerm1Standard.noUpfront": "0.565",
						"yrTerm1Standard.partialUpfront": "0.484",
						"yrTerm3Convertible.allUpfront": "0.426",
						"yrTerm3Convertible.noUpfront": "0.509",
						"yrTerm3Convertible.partialUpfront": "0.435",
						"yrTerm3Standard.allUpfront": "0.336",
						"yrTerm3Standard.partialUpfront": "0.357"
					}
				},
				"mswin": {
					"ondemand": "0.906",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.543",
						"yrTerm1Standard.noUpfront": "0.649",
						"yrTerm1Standard.partialUpfront": "0.554",
						"yrTerm3Convertible.allUpfront": "0.496",
						"yrTerm3Convertible.noUpfront": "0.593",
						"yrTerm3Convertible.partialUpfront": "0.506",
						"yrTerm3Standard.allUpfront": "0.402",
						"yrTerm3Standard.partialUpfront": "0.428"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.702",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.431",
						"yrTerm1Standard.noUpfront": "0.514",
						"yrTerm1Standard.partialUpfront": "0.439",
						"yrTerm3Convertible.allUpfront": "0.388",
						"yrTerm3Convertible.noUpfront": "0.463",
						"yrTerm3Convertible.partialUpfront": "0.395",
						"yrTerm3Standard.allUpfront": "0.305",
						"yrTerm3Standard.partialUpfront": "0.325"
					}
				},
				"mswin": {
					"ondemand": "0.767",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.512",
						"yrTerm1Standard.noUpfront": "0.611",
						"yrTerm1Standard.partialUpfront": "0.523",
						"yrTerm3Convertible.allUpfront": "0.469",
						"yrTerm3Convertible.noUpfront": "0.560",
						"yrTerm3Convertible.partialUpfront": "0.479",
						"yrTerm3Standard.allUpfront": "0.389",
						"yrTerm3Standard.partialUpfront": "0.414"
					}
				},
				"mswinSQL": {
					"ondemand": "3.816",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.144",
						"yrTerm1Standard.noUpfront": "3.754",
						"yrTerm1Standard.partialUpfront": "3.208",
						"yrTerm3Convertible.allUpfront": "3.101",
						"yrTerm3Convertible.noUpfront": "3.703",
						"yrTerm3Convertible.partialUpfront": "3.164",
						"yrTerm3Standard.allUpfront": "2.707",
						"yrTerm3Standard.partialUpfront": "2.880"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.957",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.649",
						"yrTerm1Standard.noUpfront": "0.775",
						"yrTerm1Standard.partialUpfront": "0.663",
						"yrTerm3Convertible.allUpfront": "0.606",
						"yrTerm3Convertible.noUpfront": "0.724",
						"yrTerm3Convertible.partialUpfront": "0.619",
						"yrTerm3Standard.allUpfront": "0.461",
						"yrTerm3Standard.partialUpfront": "0.490"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.65",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.397",
						"yrTerm1Standard.noUpfront": "0.474",
						"yrTerm1Standard.partialUpfront": "0.405",
						"yrTerm3Convertible.allUpfront": "0.357",
						"yrTerm3Convertible.noUpfront": "0.427",
						"yrTerm3Convertible.partialUpfront": "0.365",
						"yrTerm3Standard.allUpfront": "0.282",
						"yrTerm3Standard.partialUpfront": "0.300"
					}
				},
				"mswin": {
					"ondemand": "0.767",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.512",
						"yrTerm1Standard.noUpfront": "0.611",
						"yrTerm1Standard.partialUpfront": "0.523",
						"yrTerm3Convertible.allUpfront": "0.472",
						"yrTerm3Convertible.noUpfront": "0.564",
						"yrTerm3Convertible.partialUpfront": "0.482",
						"yrTerm3Standard.allUpfront": "0.392",
						"yrTerm3Standard.partialUpfront": "0.417"
					}
				},
				"mswinSQL": {
					"ondemand": "3.816",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.144",
						"yrTerm1Standard.noUpfront": "3.754",
						"yrTerm1Standard.partialUpfront": "3.208",
						"yrTerm3Convertible.allUpfront": "3.104",
						"yrTerm3Convertible.noUpfront": "3.707",
						"yrTerm3Convertible.partialUpfront": "3.168",
						"yrTerm3Standard.allUpfront": "2.707",
						"yrTerm3Standard.partialUpfront": "2.880"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.957",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.649",
						"yrTerm1Standard.noUpfront": "0.775",
						"yrTerm1Standard.partialUpfront": "0.663",
						"yrTerm3Convertible.allUpfront": "0.610",
						"yrTerm3Convertible.noUpfront": "0.728",
						"yrTerm3Convertible.partialUpfront": "0.622",
						"yrTerm3Standard.allUpfront": "0.461",
						"yrTerm3Standard.partialUpfront": "0.490"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.702",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.431",
						"yrTerm1Standard.noUpfront": "0.514",
						"yrTerm1Standard.partialUpfront": "0.439",
						"yrTerm3Convertible.allUpfront": "0.388",
						"yrTerm3Convertible.noUpfront": "0.463",
						"yrTerm3Convertible.partialUpfront": "0.395",
						"yrTerm3Standard.allUpfront": "0.305",
						"yrTerm3Standard.partialUpfront": "0.325"
					}
				},
				"mswin": {
					"ondemand": "0.819",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.545",
						"yrTerm1Standard.noUpfront": "0.651",
						"yrTerm1Standard.partialUpfront": "0.556",
						"yrTerm3Convertible.allUpfront": "0.502",
						"yrTerm3Convertible.noUpfront": "0.600",
						"yrTerm3Convertible.partialUpfront": "0.512",
						"yrTerm3Standard.allUpfront": "0.416",
						"yrTerm3Standard.partialUpfront": "0.442"
					}
				},
				"mswinSQL": {
					"ondemand": "3.868",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.177",
						"yrTerm1Standard.noUpfront": "3.793",
						"yrTerm1Standard.partialUpfront": "3.242",
						"yrTerm3Convertible.allUpfront": "3.134",
						"yrTerm3Convertible.noUpfront": "3.742",
						"yrTerm3Convertible.partialUpfront": "3.198",
						"yrTerm3Standard.allUpfront": "2.730",
						"yrTerm3Standard.partialUpfront": "2.904"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.009",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.683",
						"yrTerm1Standard.noUpfront": "0.816",
						"yrTerm1Standard.partialUpfront": "0.697",
						"yrTerm3Convertible.allUpfront": "0.640",
						"yrTerm3Convertible.noUpfront": "0.765",
						"yrTerm3Convertible.partialUpfront": "0.653",
						"yrTerm3Standard.allUpfront": "0.485",
						"yrTerm3Standard.partialUpfront": "0.516"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.65",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.397",
						"yrTerm1Standard.noUpfront": "0.474",
						"yrTerm1Standard.partialUpfront": "0.405",
						"yrTerm3Convertible.allUpfront": "0.357",
						"yrTerm3Convertible.noUpfront": "0.427",
						"yrTerm3Convertible.partialUpfront": "0.365",
						"yrTerm3Standard.allUpfront": "0.282",
						"yrTerm3Standard.partialUpfront": "0.300"
					}
				},
				"mswin": {
					"ondemand": "0.767",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.512",
						"yrTerm1Standard.noUpfront": "0.611",
						"yrTerm1Standard.partialUpfront": "0.523",
						"yrTerm3Convertible.allUpfront": "0.472",
						"yrTerm3Convertible.noUpfront": "0.564",
						"yrTerm3Convertible.partialUpfront": "0.482",
						"yrTerm3Standard.allUpfront": "0.392",
						"yrTerm3Standard.partialUpfront": "0.417"
					}
				},
				"mswinSQL": {
					"ondemand": "3.816",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.144",
						"yrTerm1Standard.noUpfront": "3.754",
						"yrTerm1Standard.partialUpfront": "3.208",
						"yrTerm3Convertible.allUpfront": "3.104",
						"yrTerm3Convertible.noUpfront": "3.707",
						"yrTerm3Convertible.partialUpfront": "3.168",
						"yrTerm3Standard.allUpfront": "2.707",
						"yrTerm3Standard.partialUpfront": "2.880"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.957",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.649",
						"yrTerm1Standard.noUpfront": "0.775",
						"yrTerm1Standard.partialUpfront": "0.663",
						"yrTerm3Convertible.allUpfront": "0.610",
						"yrTerm3Convertible.noUpfront": "0.728",
						"yrTerm3Convertible.partialUpfront": "0.622",
						"yrTerm3Standard.allUpfront": "0.461",
						"yrTerm3Standard.partialUpfront": "0.490"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 60,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 104,
		"FPGA": 0,
		"GPU": "4",
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": false,
		"family": "Accelerated computing",
		"generation": "current",
		"instance_type": "g2.8xlarge",
		"ipv6_support": false,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 60,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "G2 Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "3.592",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.347",
						"yrTerm1Standard.noUpfront": "2.712",
						"yrTerm1Standard.partialUpfront": "2.395",
						"yrTerm3Convertible.allUpfront": "2.112",
						"yrTerm3Convertible.noUpfront": "2.441",
						"yrTerm3Convertible.partialUpfront": "2.156",
						"yrTerm3Standard.allUpfront": "1.667",
						"yrTerm3Standard.partialUpfront": "1.773"
					}
				},
				"mswin": {
					"ondemand": "3.87",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.417",
						"yrTerm1Standard.noUpfront": "2.795",
						"yrTerm1Standard.partialUpfront": "2.466",
						"yrTerm3Convertible.allUpfront": "2.182",
						"yrTerm3Convertible.noUpfront": "2.524",
						"yrTerm3Convertible.partialUpfront": "2.227",
						"yrTerm3Standard.allUpfront": "1.732",
						"yrTerm3Standard.partialUpfront": "1.844"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.808",
						"yrTerm1Standard.noUpfront": "3.088",
						"yrTerm1Standard.partialUpfront": "2.866",
						"yrTerm3Convertible.allUpfront": "2.527",
						"yrTerm3Convertible.noUpfront": "2.779",
						"yrTerm3Convertible.partialUpfront": "2.579",
						"yrTerm3Standard.allUpfront": "1.857",
						"yrTerm3Standard.partialUpfront": "1.975"
					}
				},
				"mswin": {
					"ondemand": "4.278",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.878",
						"yrTerm1Standard.noUpfront": "3.171",
						"yrTerm1Standard.partialUpfront": "2.937",
						"yrTerm3Convertible.allUpfront": "2.597",
						"yrTerm3Convertible.noUpfront": "2.862",
						"yrTerm3Convertible.partialUpfront": "2.650",
						"yrTerm3Standard.allUpfront": "1.923",
						"yrTerm3Standard.partialUpfront": "2.046"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "3.592",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.347",
						"yrTerm1Standard.noUpfront": "2.712",
						"yrTerm1Standard.partialUpfront": "2.395",
						"yrTerm3Convertible.allUpfront": "2.112",
						"yrTerm3Convertible.noUpfront": "2.441",
						"yrTerm3Convertible.partialUpfront": "2.156",
						"yrTerm3Standard.allUpfront": "1.667",
						"yrTerm3Standard.partialUpfront": "1.773"
					}
				},
				"mswin": {
					"ondemand": "3.87",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.417",
						"yrTerm1Standard.noUpfront": "2.795",
						"yrTerm1Standard.partialUpfront": "2.466",
						"yrTerm3Convertible.allUpfront": "2.182",
						"yrTerm3Convertible.noUpfront": "2.524",
						"yrTerm3Convertible.partialUpfront": "2.227",
						"yrTerm3Standard.allUpfront": "1.732",
						"yrTerm3Standard.partialUpfront": "1.844"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "3.088",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.895",
						"yrTerm1Standard.noUpfront": "2.260",
						"yrTerm1Standard.partialUpfront": "1.935",
						"yrTerm3Convertible.allUpfront": "1.705",
						"yrTerm3Convertible.noUpfront": "2.034",
						"yrTerm3Convertible.partialUpfront": "1.741",
						"yrTerm3Standard.allUpfront": "1.342",
						"yrTerm3Standard.partialUpfront": "1.426"
					}
				},
				"mswin": {
					"ondemand": "3.366",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.966",
						"yrTerm1Standard.noUpfront": "2.347",
						"yrTerm1Standard.partialUpfront": "2.006",
						"yrTerm3Convertible.allUpfront": "1.776",
						"yrTerm3Convertible.noUpfront": "2.121",
						"yrTerm3Convertible.partialUpfront": "1.812",
						"yrTerm3Standard.allUpfront": "1.407",
						"yrTerm3Standard.partialUpfront": "1.498"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "2.808",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.722",
						"yrTerm1Standard.noUpfront": "2.056",
						"yrTerm1Standard.partialUpfront": "1.758",
						"yrTerm3Convertible.allUpfront": "1.550",
						"yrTerm3Convertible.noUpfront": "1.850",
						"yrTerm3Convertible.partialUpfront": "1.582",
						"yrTerm3Standard.allUpfront": "1.220",
						"yrTerm3Standard.partialUpfront": "1.298"
					}
				},
				"mswin": {
					"ondemand": "3.086",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.792",
						"yrTerm1Standard.noUpfront": "2.139",
						"yrTerm1Standard.partialUpfront": "1.829",
						"yrTerm3Convertible.allUpfront": "1.620",
						"yrTerm3Convertible.noUpfront": "1.934",
						"yrTerm3Convertible.partialUpfront": "1.653",
						"yrTerm3Standard.allUpfront": "1.286",
						"yrTerm3Standard.partialUpfront": "1.369"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "2.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.588",
						"yrTerm1Standard.noUpfront": "1.896",
						"yrTerm1Standard.partialUpfront": "1.621",
						"yrTerm3Convertible.allUpfront": "1.429",
						"yrTerm3Convertible.noUpfront": "1.706",
						"yrTerm3Convertible.partialUpfront": "1.459",
						"yrTerm3Standard.allUpfront": "1.128",
						"yrTerm3Standard.partialUpfront": "1.200"
					}
				},
				"mswin": {
					"ondemand": "2.878",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.658",
						"yrTerm1Standard.noUpfront": "1.979",
						"yrTerm1Standard.partialUpfront": "1.692",
						"yrTerm3Convertible.allUpfront": "1.499",
						"yrTerm3Convertible.noUpfront": "1.790",
						"yrTerm3Convertible.partialUpfront": "1.530",
						"yrTerm3Standard.allUpfront": "1.194",
						"yrTerm3Standard.partialUpfront": "1.271"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "2.808",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.722",
						"yrTerm1Standard.noUpfront": "2.056",
						"yrTerm1Standard.partialUpfront": "1.758",
						"yrTerm3Convertible.allUpfront": "1.550",
						"yrTerm3Convertible.noUpfront": "1.850",
						"yrTerm3Convertible.partialUpfront": "1.582",
						"yrTerm3Standard.allUpfront": "1.220",
						"yrTerm3Standard.partialUpfront": "1.298"
					}
				},
				"mswin": {
					"ondemand": "3.086",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.792",
						"yrTerm1Standard.noUpfront": "2.139",
						"yrTerm1Standard.partialUpfront": "1.829",
						"yrTerm3Convertible.allUpfront": "1.620",
						"yrTerm3Convertible.noUpfront": "1.934",
						"yrTerm3Convertible.partialUpfront": "1.653",
						"yrTerm3Standard.allUpfront": "1.286",
						"yrTerm3Standard.partialUpfront": "1.369"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "2.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.588",
						"yrTerm1Standard.noUpfront": "1.896",
						"yrTerm1Standard.partialUpfront": "1.621",
						"yrTerm3Convertible.allUpfront": "1.429",
						"yrTerm3Convertible.noUpfront": "1.706",
						"yrTerm3Convertible.partialUpfront": "1.459",
						"yrTerm3Standard.allUpfront": "1.128",
						"yrTerm3Standard.partialUpfront": "1.200"
					}
				},
				"mswin": {
					"ondemand": "2.878",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.658",
						"yrTerm1Standard.noUpfront": "1.979",
						"yrTerm1Standard.partialUpfront": "1.692",
						"yrTerm3Convertible.allUpfront": "1.499",
						"yrTerm3Convertible.noUpfront": "1.790",
						"yrTerm3Convertible.partialUpfront": "1.530",
						"yrTerm3Standard.allUpfront": "1.194",
						"yrTerm3Standard.partialUpfront": "1.271"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 120,
			"ssd": true,
			"storage_needs_initialization": true,
			"trim_support": false
		},
		"vCPU": 32,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 174.5,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 32500,
		"ebs_max_bandwidth": 5000,
		"ebs_optimized": true,
		"ebs_throughput": 625,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "x1.16xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 976,
		"network_performance": "10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "X1 Extra High-Memory 16xlarge",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "9.671",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.562",
						"yrTerm1Standard.noUpfront": "5.959",
						"yrTerm1Standard.partialUpfront": "5.675",
						"yrTerm3Convertible.allUpfront": "3.245",
						"yrTerm3Convertible.noUpfront": "3.576",
						"yrTerm3Convertible.partialUpfront": "3.310",
						"yrTerm3Standard.allUpfront": "2.706",
						"yrTerm3Standard.noUpfront": "3.109",
						"yrTerm3Standard.partialUpfront": "2.879"
					}
				},
				"mswin": {
					"ondemand": "12.615",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.506",
						"yrTerm1Standard.noUpfront": "8.903",
						"yrTerm1Standard.partialUpfront": "8.619",
						"yrTerm3Convertible.allUpfront": "6.189",
						"yrTerm3Convertible.noUpfront": "6.520",
						"yrTerm3Convertible.partialUpfront": "6.254",
						"yrTerm3Standard.allUpfront": "5.650",
						"yrTerm3Standard.noUpfront": "6.053",
						"yrTerm3Standard.partialUpfront": "5.823"
					}
				},
				"mswinSQL": {
					"ondemand": "33.842",
					"reserved": {
						"yrTerm1Standard.allUpfront": "29.732",
						"yrTerm1Standard.noUpfront": "26.213",
						"yrTerm1Standard.partialUpfront": "29.846",
						"yrTerm3Convertible.allUpfront": "23.499",
						"yrTerm3Convertible.noUpfront": "23.830",
						"yrTerm3Convertible.partialUpfront": "23.564",
						"yrTerm3Standard.allUpfront": "26.877",
						"yrTerm3Standard.noUpfront": "23.363",
						"yrTerm3Standard.partialUpfront": "27.050"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "13.942",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.832",
						"yrTerm1Standard.noUpfront": "9.985",
						"yrTerm1Standard.partialUpfront": "9.946",
						"yrTerm3Convertible.allUpfront": "7.271",
						"yrTerm3Convertible.noUpfront": "7.602",
						"yrTerm3Convertible.partialUpfront": "7.336",
						"yrTerm3Standard.allUpfront": "6.977",
						"yrTerm3Standard.noUpfront": "7.135",
						"yrTerm3Standard.partialUpfront": "7.150"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "9.671",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.562",
						"yrTerm1Standard.noUpfront": "5.959",
						"yrTerm1Standard.partialUpfront": "5.675",
						"yrTerm3Convertible.allUpfront": "3.245",
						"yrTerm3Convertible.noUpfront": "3.576",
						"yrTerm3Convertible.partialUpfront": "3.310",
						"yrTerm3Standard.allUpfront": "2.706",
						"yrTerm3Standard.noUpfront": "3.109",
						"yrTerm3Standard.partialUpfront": "2.879"
					}
				},
				"mswin": {
					"ondemand": "12.615",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.506",
						"yrTerm1Standard.noUpfront": "8.903",
						"yrTerm1Standard.partialUpfront": "8.619",
						"yrTerm3Convertible.allUpfront": "6.189",
						"yrTerm3Convertible.noUpfront": "6.520",
						"yrTerm3Convertible.partialUpfront": "6.254",
						"yrTerm3Standard.allUpfront": "5.650",
						"yrTerm3Standard.noUpfront": "6.053",
						"yrTerm3Standard.partialUpfront": "5.823"
					}
				},
				"mswinSQL": {
					"ondemand": "33.842",
					"reserved": {
						"yrTerm1Standard.allUpfront": "29.732",
						"yrTerm1Standard.noUpfront": "26.213",
						"yrTerm1Standard.partialUpfront": "29.846",
						"yrTerm3Convertible.allUpfront": "23.499",
						"yrTerm3Convertible.noUpfront": "23.830",
						"yrTerm3Convertible.partialUpfront": "23.564",
						"yrTerm3Standard.allUpfront": "26.877",
						"yrTerm3Standard.noUpfront": "23.363",
						"yrTerm3Standard.partialUpfront": "27.050"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "13.942",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.832",
						"yrTerm1Standard.noUpfront": "9.985",
						"yrTerm1Standard.partialUpfront": "9.946",
						"yrTerm3Convertible.allUpfront": "7.271",
						"yrTerm3Convertible.noUpfront": "7.602",
						"yrTerm3Convertible.partialUpfront": "7.336",
						"yrTerm3Standard.allUpfront": "6.977",
						"yrTerm3Standard.noUpfront": "7.135",
						"yrTerm3Standard.partialUpfront": "7.150"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "9.187",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.283",
						"yrTerm1Standard.noUpfront": "5.661",
						"yrTerm1Standard.partialUpfront": "5.391",
						"yrTerm3Convertible.allUpfront": "3.082",
						"yrTerm3Convertible.noUpfront": "3.397",
						"yrTerm3Convertible.partialUpfront": "3.146",
						"yrTerm3Standard.allUpfront": "2.571",
						"yrTerm3Standard.noUpfront": "2.954",
						"yrTerm3Standard.partialUpfront": "2.735"
					}
				},
				"mswin": {
					"ondemand": "12.131",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.227",
						"yrTerm1Standard.noUpfront": "8.605",
						"yrTerm1Standard.partialUpfront": "8.335",
						"yrTerm3Convertible.allUpfront": "6.026",
						"yrTerm3Convertible.noUpfront": "6.341",
						"yrTerm3Convertible.partialUpfront": "6.090",
						"yrTerm3Standard.allUpfront": "5.515",
						"yrTerm3Standard.noUpfront": "5.898",
						"yrTerm3Standard.partialUpfront": "5.679"
					}
				},
				"mswinSQL": {
					"ondemand": "33.358",
					"reserved": {
						"yrTerm1Standard.allUpfront": "29.454",
						"yrTerm1Standard.noUpfront": "25.915",
						"yrTerm1Standard.partialUpfront": "29.562",
						"yrTerm3Convertible.allUpfront": "23.336",
						"yrTerm3Convertible.noUpfront": "23.651",
						"yrTerm3Convertible.partialUpfront": "23.400",
						"yrTerm3Standard.allUpfront": "26.742",
						"yrTerm3Standard.noUpfront": "23.208",
						"yrTerm3Standard.partialUpfront": "26.906"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "13.458",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.554",
						"yrTerm1Standard.noUpfront": "9.687",
						"yrTerm1Standard.partialUpfront": "9.662",
						"yrTerm3Convertible.allUpfront": "7.108",
						"yrTerm3Convertible.noUpfront": "7.423",
						"yrTerm3Convertible.partialUpfront": "7.172",
						"yrTerm3Standard.allUpfront": "6.842",
						"yrTerm3Standard.noUpfront": "6.980",
						"yrTerm3Standard.partialUpfront": "7.006"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "9.671",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.562",
						"yrTerm1Standard.noUpfront": "5.959",
						"yrTerm1Standard.partialUpfront": "5.675",
						"yrTerm3Convertible.allUpfront": "3.245",
						"yrTerm3Convertible.noUpfront": "3.576",
						"yrTerm3Convertible.partialUpfront": "3.310",
						"yrTerm3Standard.allUpfront": "2.706",
						"yrTerm3Standard.noUpfront": "3.109",
						"yrTerm3Standard.partialUpfront": "2.879"
					}
				},
				"mswin": {
					"ondemand": "12.615",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.506",
						"yrTerm1Standard.noUpfront": "8.903",
						"yrTerm1Standard.partialUpfront": "8.619",
						"yrTerm3Convertible.allUpfront": "6.189",
						"yrTerm3Convertible.noUpfront": "6.520",
						"yrTerm3Convertible.partialUpfront": "6.254",
						"yrTerm3Standard.allUpfront": "5.650",
						"yrTerm3Standard.noUpfront": "6.053",
						"yrTerm3Standard.partialUpfront": "5.823"
					}
				},
				"mswinSQL": {
					"ondemand": "33.842",
					"reserved": {
						"yrTerm1Standard.allUpfront": "29.732",
						"yrTerm1Standard.noUpfront": "26.213",
						"yrTerm1Standard.partialUpfront": "29.846",
						"yrTerm3Convertible.allUpfront": "23.499",
						"yrTerm3Convertible.noUpfront": "23.830",
						"yrTerm3Convertible.partialUpfront": "23.564",
						"yrTerm3Standard.allUpfront": "26.877",
						"yrTerm3Standard.noUpfront": "23.363",
						"yrTerm3Standard.partialUpfront": "27.050"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "13.942",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.832",
						"yrTerm1Standard.noUpfront": "9.985",
						"yrTerm1Standard.partialUpfront": "9.946",
						"yrTerm3Convertible.allUpfront": "7.271",
						"yrTerm3Convertible.noUpfront": "7.602",
						"yrTerm3Convertible.partialUpfront": "7.336",
						"yrTerm3Standard.allUpfront": "6.977",
						"yrTerm3Standard.noUpfront": "7.135",
						"yrTerm3Standard.partialUpfront": "7.150"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "9.671",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.562",
						"yrTerm1Standard.noUpfront": "5.959",
						"yrTerm1Standard.partialUpfront": "5.675",
						"yrTerm3Convertible.allUpfront": "3.245",
						"yrTerm3Convertible.noUpfront": "3.576",
						"yrTerm3Convertible.partialUpfront": "3.310",
						"yrTerm3Standard.allUpfront": "2.706",
						"yrTerm3Standard.noUpfront": "3.109",
						"yrTerm3Standard.partialUpfront": "2.879"
					}
				},
				"mswin": {
					"ondemand": "12.615",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.506",
						"yrTerm1Standard.noUpfront": "8.903",
						"yrTerm1Standard.partialUpfront": "8.619",
						"yrTerm3Convertible.allUpfront": "6.189",
						"yrTerm3Convertible.noUpfront": "6.520",
						"yrTerm3Convertible.partialUpfront": "6.254",
						"yrTerm3Standard.allUpfront": "5.650",
						"yrTerm3Standard.noUpfront": "6.053",
						"yrTerm3Standard.partialUpfront": "5.823"
					}
				},
				"mswinSQL": {
					"ondemand": "33.842",
					"reserved": {
						"yrTerm1Standard.allUpfront": "29.732",
						"yrTerm1Standard.noUpfront": "26.213",
						"yrTerm1Standard.partialUpfront": "29.846",
						"yrTerm3Convertible.allUpfront": "23.499",
						"yrTerm3Convertible.noUpfront": "23.830",
						"yrTerm3Convertible.partialUpfront": "23.564",
						"yrTerm3Standard.allUpfront": "26.877",
						"yrTerm3Standard.noUpfront": "23.363",
						"yrTerm3Standard.partialUpfront": "27.050"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "13.942",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.832",
						"yrTerm1Standard.noUpfront": "9.985",
						"yrTerm1Standard.partialUpfront": "9.946",
						"yrTerm3Convertible.allUpfront": "7.271",
						"yrTerm3Convertible.noUpfront": "7.602",
						"yrTerm3Convertible.partialUpfront": "7.336",
						"yrTerm3Standard.allUpfront": "6.977",
						"yrTerm3Standard.noUpfront": "7.135",
						"yrTerm3Standard.partialUpfront": "7.150"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "7.336",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.219",
						"yrTerm1Standard.noUpfront": "4.520",
						"yrTerm1Standard.partialUpfront": "4.305",
						"yrTerm3Convertible.allUpfront": "2.461",
						"yrTerm3Convertible.noUpfront": "2.713",
						"yrTerm3Convertible.partialUpfront": "2.512",
						"yrTerm3Standard.allUpfront": "2.052",
						"yrTerm3Standard.noUpfront": "2.359",
						"yrTerm3Standard.partialUpfront": "2.184"
					}
				},
				"mswin": {
					"ondemand": "10.28",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.163",
						"yrTerm1Standard.noUpfront": "7.464",
						"yrTerm1Standard.partialUpfront": "7.249",
						"yrTerm3Convertible.allUpfront": "5.405",
						"yrTerm3Convertible.noUpfront": "5.657",
						"yrTerm3Convertible.partialUpfront": "5.456",
						"yrTerm3Standard.allUpfront": "4.996",
						"yrTerm3Standard.noUpfront": "5.303",
						"yrTerm3Standard.partialUpfront": "5.127"
					}
				},
				"mswinSQL": {
					"ondemand": "28.302",
					"reserved": {
						"yrTerm1Standard.allUpfront": "25.185",
						"yrTerm1Standard.noUpfront": "24.774",
						"yrTerm1Standard.partialUpfront": "25.271",
						"yrTerm3Convertible.allUpfront": "22.715",
						"yrTerm3Convertible.noUpfront": "22.967",
						"yrTerm3Convertible.partialUpfront": "22.766",
						"yrTerm3Standard.allUpfront": "23.018",
						"yrTerm3Standard.noUpfront": "22.613",
						"yrTerm3Standard.partialUpfront": "23.149"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "11.407",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.290",
						"yrTerm1Standard.noUpfront": "8.546",
						"yrTerm1Standard.partialUpfront": "8.376",
						"yrTerm3Convertible.allUpfront": "6.487",
						"yrTerm3Convertible.noUpfront": "6.739",
						"yrTerm3Convertible.partialUpfront": "6.538",
						"yrTerm3Standard.allUpfront": "6.123",
						"yrTerm3Standard.noUpfront": "6.385",
						"yrTerm3Standard.partialUpfront": "6.254"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "9.337",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.370",
						"yrTerm1Standard.noUpfront": "5.754",
						"yrTerm1Standard.partialUpfront": "5.480",
						"yrTerm3Convertible.allUpfront": "3.132",
						"yrTerm3Convertible.noUpfront": "3.452",
						"yrTerm3Convertible.partialUpfront": "3.196",
						"yrTerm3Standard.allUpfront": "2.612",
						"yrTerm3Standard.noUpfront": "3.001",
						"yrTerm3Standard.partialUpfront": "2.779"
					}
				},
				"mswin": {
					"ondemand": "12.281",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.314",
						"yrTerm1Standard.noUpfront": "8.698",
						"yrTerm1Standard.partialUpfront": "8.424",
						"yrTerm3Convertible.allUpfront": "6.076",
						"yrTerm3Convertible.noUpfront": "6.396",
						"yrTerm3Convertible.partialUpfront": "6.140",
						"yrTerm3Standard.allUpfront": "5.556",
						"yrTerm3Standard.noUpfront": "5.945",
						"yrTerm3Standard.partialUpfront": "5.723"
					}
				},
				"mswinSQL": {
					"ondemand": "33.508",
					"reserved": {
						"yrTerm1Standard.allUpfront": "29.541",
						"yrTerm1Standard.noUpfront": "26.008",
						"yrTerm1Standard.partialUpfront": "29.651",
						"yrTerm3Convertible.allUpfront": "23.386",
						"yrTerm3Convertible.noUpfront": "23.706",
						"yrTerm3Convertible.partialUpfront": "23.450",
						"yrTerm3Standard.allUpfront": "26.783",
						"yrTerm3Standard.noUpfront": "23.255",
						"yrTerm3Standard.partialUpfront": "26.950"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "13.608",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.641",
						"yrTerm1Standard.noUpfront": "9.780",
						"yrTerm1Standard.partialUpfront": "9.751",
						"yrTerm3Convertible.allUpfront": "7.158",
						"yrTerm3Convertible.noUpfront": "7.478",
						"yrTerm3Convertible.partialUpfront": "7.222",
						"yrTerm3Standard.allUpfront": "6.883",
						"yrTerm3Standard.noUpfront": "7.027",
						"yrTerm3Standard.partialUpfront": "7.050"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "8.003",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.603",
						"yrTerm1Standard.noUpfront": "4.932",
						"yrTerm1Standard.partialUpfront": "4.697",
						"yrTerm3Convertible.allUpfront": "2.684",
						"yrTerm3Convertible.noUpfront": "2.958",
						"yrTerm3Convertible.partialUpfront": "2.740",
						"yrTerm3Standard.allUpfront": "2.239",
						"yrTerm3Standard.noUpfront": "2.573",
						"yrTerm3Standard.partialUpfront": "2.382"
					}
				},
				"mswin": {
					"ondemand": "10.947",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.547",
						"yrTerm1Standard.noUpfront": "7.876",
						"yrTerm1Standard.partialUpfront": "7.641",
						"yrTerm3Convertible.allUpfront": "5.628",
						"yrTerm3Convertible.noUpfront": "5.902",
						"yrTerm3Convertible.partialUpfront": "5.684",
						"yrTerm3Standard.allUpfront": "5.183",
						"yrTerm3Standard.noUpfront": "5.517",
						"yrTerm3Standard.partialUpfront": "5.326"
					}
				},
				"mswinSQL": {
					"ondemand": "32.174",
					"reserved": {
						"yrTerm1Standard.allUpfront": "28.774",
						"yrTerm1Standard.noUpfront": "25.186",
						"yrTerm1Standard.partialUpfront": "28.868",
						"yrTerm3Convertible.allUpfront": "22.938",
						"yrTerm3Convertible.noUpfront": "23.212",
						"yrTerm3Convertible.partialUpfront": "22.994",
						"yrTerm3Standard.allUpfront": "26.410",
						"yrTerm3Standard.noUpfront": "22.827",
						"yrTerm3Standard.partialUpfront": "26.553"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "12.274",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.874",
						"yrTerm1Standard.noUpfront": "8.958",
						"yrTerm1Standard.partialUpfront": "8.968",
						"yrTerm3Convertible.allUpfront": "6.710",
						"yrTerm3Convertible.noUpfront": "6.984",
						"yrTerm3Convertible.partialUpfront": "6.766",
						"yrTerm3Standard.allUpfront": "6.510",
						"yrTerm3Standard.noUpfront": "6.599",
						"yrTerm3Standard.partialUpfront": "6.653"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "8.403",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.833",
						"yrTerm1Standard.noUpfront": "5.179",
						"yrTerm1Standard.partialUpfront": "4.932",
						"yrTerm3Convertible.allUpfront": "2.819",
						"yrTerm3Convertible.noUpfront": "3.106",
						"yrTerm3Convertible.partialUpfront": "2.876",
						"yrTerm3Standard.allUpfront": "2.351",
						"yrTerm3Standard.noUpfront": "2.701",
						"yrTerm3Standard.partialUpfront": "2.501"
					}
				},
				"mswin": {
					"ondemand": "11.347",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.777",
						"yrTerm1Standard.noUpfront": "8.123",
						"yrTerm1Standard.partialUpfront": "7.876",
						"yrTerm3Convertible.allUpfront": "5.763",
						"yrTerm3Convertible.noUpfront": "6.050",
						"yrTerm3Convertible.partialUpfront": "5.820",
						"yrTerm3Standard.allUpfront": "5.295",
						"yrTerm3Standard.noUpfront": "5.645",
						"yrTerm3Standard.partialUpfront": "5.445"
					}
				},
				"mswinSQL": {
					"ondemand": "29.369",
					"reserved": {
						"yrTerm1Standard.allUpfront": "25.799",
						"yrTerm1Standard.noUpfront": "25.433",
						"yrTerm1Standard.partialUpfront": "25.898",
						"yrTerm3Convertible.allUpfront": "23.073",
						"yrTerm3Convertible.noUpfront": "23.360",
						"yrTerm3Convertible.partialUpfront": "23.130",
						"yrTerm3Standard.allUpfront": "23.317",
						"yrTerm3Standard.noUpfront": "22.955",
						"yrTerm3Standard.partialUpfront": "23.467"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "12.474",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.904",
						"yrTerm1Standard.noUpfront": "9.205",
						"yrTerm1Standard.partialUpfront": "9.003",
						"yrTerm3Convertible.allUpfront": "6.845",
						"yrTerm3Convertible.noUpfront": "7.132",
						"yrTerm3Convertible.partialUpfront": "6.902",
						"yrTerm3Standard.allUpfront": "6.422",
						"yrTerm3Standard.noUpfront": "6.727",
						"yrTerm3Standard.partialUpfront": "6.572"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "6.669",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.836",
						"yrTerm1Standard.noUpfront": "4.110",
						"yrTerm1Standard.partialUpfront": "3.914",
						"yrTerm3Convertible.allUpfront": "2.237",
						"yrTerm3Convertible.noUpfront": "2.465",
						"yrTerm3Convertible.partialUpfront": "2.282",
						"yrTerm3Standard.allUpfront": "1.866",
						"yrTerm3Standard.noUpfront": "2.144",
						"yrTerm3Standard.partialUpfront": "1.985"
					}
				},
				"mswin": {
					"ondemand": "9.613",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.780",
						"yrTerm1Standard.noUpfront": "7.054",
						"yrTerm1Standard.partialUpfront": "6.858",
						"yrTerm3Convertible.allUpfront": "5.181",
						"yrTerm3Convertible.noUpfront": "5.409",
						"yrTerm3Convertible.partialUpfront": "5.226",
						"yrTerm3Standard.allUpfront": "4.810",
						"yrTerm3Standard.noUpfront": "5.088",
						"yrTerm3Standard.partialUpfront": "4.929"
					}
				},
				"mswinSQL": {
					"ondemand": "30.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "28.007",
						"yrTerm1Standard.noUpfront": "24.364",
						"yrTerm1Standard.partialUpfront": "28.085",
						"yrTerm3Convertible.allUpfront": "22.491",
						"yrTerm3Convertible.noUpfront": "22.719",
						"yrTerm3Convertible.partialUpfront": "22.536",
						"yrTerm3Standard.allUpfront": "26.037",
						"yrTerm3Standard.noUpfront": "22.398",
						"yrTerm3Standard.partialUpfront": "26.156"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "10.94",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.107",
						"yrTerm1Standard.noUpfront": "8.136",
						"yrTerm1Standard.partialUpfront": "8.185",
						"yrTerm3Convertible.allUpfront": "6.263",
						"yrTerm3Convertible.noUpfront": "6.491",
						"yrTerm3Convertible.partialUpfront": "6.308",
						"yrTerm3Standard.allUpfront": "6.137",
						"yrTerm3Standard.noUpfront": "6.170",
						"yrTerm3Standard.partialUpfront": "6.256"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "6.669",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.836",
						"yrTerm1Standard.noUpfront": "4.110",
						"yrTerm1Standard.partialUpfront": "3.914",
						"yrTerm3Convertible.allUpfront": "2.237",
						"yrTerm3Convertible.noUpfront": "2.465",
						"yrTerm3Convertible.partialUpfront": "2.282",
						"yrTerm3Standard.allUpfront": "1.866",
						"yrTerm3Standard.noUpfront": "2.144",
						"yrTerm3Standard.partialUpfront": "1.985"
					}
				},
				"mswin": {
					"ondemand": "9.613",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.780",
						"yrTerm1Standard.noUpfront": "7.054",
						"yrTerm1Standard.partialUpfront": "6.858",
						"yrTerm3Convertible.allUpfront": "5.181",
						"yrTerm3Convertible.noUpfront": "5.409",
						"yrTerm3Convertible.partialUpfront": "5.226",
						"yrTerm3Standard.allUpfront": "4.810",
						"yrTerm3Standard.noUpfront": "5.088",
						"yrTerm3Standard.partialUpfront": "4.929"
					}
				},
				"mswinSQL": {
					"ondemand": "30.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "28.007",
						"yrTerm1Standard.noUpfront": "24.364",
						"yrTerm1Standard.partialUpfront": "28.085",
						"yrTerm3Convertible.allUpfront": "22.491",
						"yrTerm3Convertible.noUpfront": "22.719",
						"yrTerm3Convertible.partialUpfront": "22.536",
						"yrTerm3Standard.allUpfront": "26.037",
						"yrTerm3Standard.noUpfront": "22.398",
						"yrTerm3Standard.partialUpfront": "26.156"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "10.94",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.107",
						"yrTerm1Standard.noUpfront": "8.136",
						"yrTerm1Standard.partialUpfront": "8.185",
						"yrTerm3Convertible.allUpfront": "6.263",
						"yrTerm3Convertible.noUpfront": "6.491",
						"yrTerm3Convertible.partialUpfront": "6.308",
						"yrTerm3Standard.allUpfront": "6.137",
						"yrTerm3Standard.noUpfront": "6.170",
						"yrTerm3Standard.partialUpfront": "6.256"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "8.003",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.603",
						"yrTerm1Standard.noUpfront": "4.932",
						"yrTerm1Standard.partialUpfront": "4.697",
						"yrTerm3Convertible.allUpfront": "2.684",
						"yrTerm3Convertible.noUpfront": "2.958",
						"yrTerm3Convertible.partialUpfront": "2.740",
						"yrTerm3Standard.allUpfront": "2.239",
						"yrTerm3Standard.noUpfront": "2.573",
						"yrTerm3Standard.partialUpfront": "2.382"
					}
				},
				"mswin": {
					"ondemand": "10.947",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.547",
						"yrTerm1Standard.noUpfront": "7.876",
						"yrTerm1Standard.partialUpfront": "7.641",
						"yrTerm3Convertible.allUpfront": "5.628",
						"yrTerm3Convertible.noUpfront": "5.902",
						"yrTerm3Convertible.partialUpfront": "5.684",
						"yrTerm3Standard.allUpfront": "5.183",
						"yrTerm3Standard.noUpfront": "5.517",
						"yrTerm3Standard.partialUpfront": "5.326"
					}
				},
				"mswinSQL": {
					"ondemand": "32.174",
					"reserved": {
						"yrTerm1Standard.allUpfront": "28.774",
						"yrTerm1Standard.noUpfront": "25.186",
						"yrTerm1Standard.partialUpfront": "28.868",
						"yrTerm3Convertible.allUpfront": "22.938",
						"yrTerm3Convertible.noUpfront": "23.212",
						"yrTerm3Convertible.partialUpfront": "22.994",
						"yrTerm3Standard.allUpfront": "26.410",
						"yrTerm3Standard.noUpfront": "22.827",
						"yrTerm3Standard.partialUpfront": "26.553"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "12.274",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.874",
						"yrTerm1Standard.noUpfront": "8.958",
						"yrTerm1Standard.partialUpfront": "8.968",
						"yrTerm3Convertible.allUpfront": "6.710",
						"yrTerm3Convertible.noUpfront": "6.984",
						"yrTerm3Convertible.partialUpfront": "6.766",
						"yrTerm3Standard.allUpfront": "6.510",
						"yrTerm3Standard.noUpfront": "6.599",
						"yrTerm3Standard.partialUpfront": "6.653"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "6.669",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.836",
						"yrTerm1Standard.noUpfront": "4.110",
						"yrTerm1Standard.partialUpfront": "3.914",
						"yrTerm3Convertible.allUpfront": "2.237",
						"yrTerm3Convertible.noUpfront": "2.465",
						"yrTerm3Convertible.partialUpfront": "2.282",
						"yrTerm3Standard.allUpfront": "1.866",
						"yrTerm3Standard.noUpfront": "2.144",
						"yrTerm3Standard.partialUpfront": "1.985"
					}
				},
				"mswin": {
					"ondemand": "9.613",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.780",
						"yrTerm1Standard.noUpfront": "7.054",
						"yrTerm1Standard.partialUpfront": "6.858",
						"yrTerm3Convertible.allUpfront": "5.181",
						"yrTerm3Convertible.noUpfront": "5.409",
						"yrTerm3Convertible.partialUpfront": "5.226",
						"yrTerm3Standard.allUpfront": "4.810",
						"yrTerm3Standard.noUpfront": "5.088",
						"yrTerm3Standard.partialUpfront": "4.929"
					}
				},
				"mswinSQL": {
					"ondemand": "30.84",
					"reserved": {
						"yrTerm1Standard.allUpfront": "28.007",
						"yrTerm1Standard.noUpfront": "24.364",
						"yrTerm1Standard.partialUpfront": "28.085",
						"yrTerm3Convertible.allUpfront": "22.491",
						"yrTerm3Convertible.noUpfront": "22.719",
						"yrTerm3Convertible.partialUpfront": "22.536",
						"yrTerm3Standard.allUpfront": "26.037",
						"yrTerm3Standard.noUpfront": "22.398",
						"yrTerm3Standard.partialUpfront": "26.156"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "10.94",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.107",
						"yrTerm1Standard.noUpfront": "8.136",
						"yrTerm1Standard.partialUpfront": "8.185",
						"yrTerm3Convertible.allUpfront": "6.263",
						"yrTerm3Convertible.noUpfront": "6.491",
						"yrTerm3Convertible.partialUpfront": "6.308",
						"yrTerm3Standard.allUpfront": "6.137",
						"yrTerm3Standard.noUpfront": "6.170",
						"yrTerm3Standard.partialUpfront": "6.256"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 1920,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": false
		},
		"vCPU": 64,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 349,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 65000,
		"ebs_max_bandwidth": 10000,
		"ebs_optimized": true,
		"ebs_throughput": 1250,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "x1.32xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 1952,
		"network_performance": "20 Gigabit",
		"placement_group_support": true,
		"pretty_name": "X1 Extra High-Memory 32xlarge",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "19.341",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.123",
						"yrTerm1Standard.noUpfront": "11.918",
						"yrTerm1Standard.partialUpfront": "11.350",
						"yrTerm3Convertible.allUpfront": "6.489",
						"yrTerm3Convertible.noUpfront": "7.151",
						"yrTerm3Convertible.partialUpfront": "6.622",
						"yrTerm3Standard.allUpfront": "5.411",
						"yrTerm3Standard.noUpfront": "6.219",
						"yrTerm3Standard.partialUpfront": "5.757"
					}
				},
				"mswin": {
					"ondemand": "25.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.011",
						"yrTerm1Standard.noUpfront": "17.806",
						"yrTerm1Standard.partialUpfront": "17.238",
						"yrTerm3Convertible.allUpfront": "12.377",
						"yrTerm3Convertible.noUpfront": "13.039",
						"yrTerm3Convertible.partialUpfront": "12.510",
						"yrTerm3Standard.allUpfront": "11.299",
						"yrTerm3Standard.noUpfront": "12.107",
						"yrTerm3Standard.partialUpfront": "11.645"
					}
				},
				"mswinSQL": {
					"ondemand": "67.685",
					"reserved": {
						"yrTerm1Standard.allUpfront": "59.467",
						"yrTerm1Standard.noUpfront": "52.426",
						"yrTerm1Standard.partialUpfront": "59.694",
						"yrTerm3Convertible.allUpfront": "46.997",
						"yrTerm3Convertible.noUpfront": "47.659",
						"yrTerm3Convertible.partialUpfront": "47.130",
						"yrTerm3Standard.allUpfront": "53.755",
						"yrTerm3Standard.noUpfront": "46.727",
						"yrTerm3Standard.partialUpfront": "54.101"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "27.883",
					"reserved": {
						"yrTerm1Standard.allUpfront": "19.665",
						"yrTerm1Standard.noUpfront": "19.970",
						"yrTerm1Standard.partialUpfront": "19.892",
						"yrTerm3Convertible.allUpfront": "14.541",
						"yrTerm3Convertible.noUpfront": "15.203",
						"yrTerm3Convertible.partialUpfront": "14.674",
						"yrTerm3Standard.allUpfront": "13.953",
						"yrTerm3Standard.noUpfront": "14.271",
						"yrTerm3Standard.partialUpfront": "14.299"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "19.341",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.123",
						"yrTerm1Standard.noUpfront": "11.918",
						"yrTerm1Standard.partialUpfront": "11.350",
						"yrTerm3Convertible.allUpfront": "6.489",
						"yrTerm3Convertible.noUpfront": "7.151",
						"yrTerm3Convertible.partialUpfront": "6.622",
						"yrTerm3Standard.allUpfront": "5.412",
						"yrTerm3Standard.noUpfront": "6.219",
						"yrTerm3Standard.partialUpfront": "5.757"
					}
				},
				"mswin": {
					"ondemand": "25.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.011",
						"yrTerm1Standard.noUpfront": "17.806",
						"yrTerm1Standard.partialUpfront": "17.238",
						"yrTerm3Convertible.allUpfront": "12.377",
						"yrTerm3Convertible.noUpfront": "13.039",
						"yrTerm3Convertible.partialUpfront": "12.510",
						"yrTerm3Standard.allUpfront": "11.300",
						"yrTerm3Standard.noUpfront": "12.107",
						"yrTerm3Standard.partialUpfront": "11.645"
					}
				},
				"mswinSQL": {
					"ondemand": "67.685",
					"reserved": {
						"yrTerm1Standard.allUpfront": "59.467",
						"yrTerm1Standard.noUpfront": "52.426",
						"yrTerm1Standard.partialUpfront": "59.694",
						"yrTerm3Convertible.allUpfront": "46.997",
						"yrTerm3Convertible.noUpfront": "47.659",
						"yrTerm3Convertible.partialUpfront": "47.130",
						"yrTerm3Standard.allUpfront": "53.756",
						"yrTerm3Standard.noUpfront": "46.727",
						"yrTerm3Standard.partialUpfront": "54.101"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "27.883",
					"reserved": {
						"yrTerm1Standard.allUpfront": "19.665",
						"yrTerm1Standard.noUpfront": "19.970",
						"yrTerm1Standard.partialUpfront": "19.892",
						"yrTerm3Convertible.allUpfront": "14.541",
						"yrTerm3Convertible.noUpfront": "15.203",
						"yrTerm3Convertible.partialUpfront": "14.674",
						"yrTerm3Standard.allUpfront": "13.954",
						"yrTerm3Standard.noUpfront": "14.271",
						"yrTerm3Standard.partialUpfront": "14.299"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "18.374",
					"reserved": {
						"yrTerm1Standard.allUpfront": "10.567",
						"yrTerm1Standard.noUpfront": "11.321",
						"yrTerm1Standard.partialUpfront": "10.783",
						"yrTerm3Convertible.allUpfront": "6.165",
						"yrTerm3Convertible.noUpfront": "6.794",
						"yrTerm3Convertible.partialUpfront": "6.290",
						"yrTerm3Standard.allUpfront": "5.141",
						"yrTerm3Standard.noUpfront": "5.908",
						"yrTerm3Standard.partialUpfront": "5.469"
					}
				},
				"mswin": {
					"ondemand": "24.262",
					"reserved": {
						"yrTerm1Standard.allUpfront": "16.455",
						"yrTerm1Standard.noUpfront": "17.209",
						"yrTerm1Standard.partialUpfront": "16.671",
						"yrTerm3Convertible.allUpfront": "12.053",
						"yrTerm3Convertible.noUpfront": "12.682",
						"yrTerm3Convertible.partialUpfront": "12.178",
						"yrTerm3Standard.allUpfront": "11.029",
						"yrTerm3Standard.noUpfront": "11.796",
						"yrTerm3Standard.partialUpfront": "11.357"
					}
				},
				"mswinSQL": {
					"ondemand": "66.718",
					"reserved": {
						"yrTerm1Standard.allUpfront": "58.911",
						"yrTerm1Standard.noUpfront": "51.829",
						"yrTerm1Standard.partialUpfront": "59.127",
						"yrTerm3Convertible.allUpfront": "46.673",
						"yrTerm3Convertible.noUpfront": "47.302",
						"yrTerm3Convertible.partialUpfront": "46.798",
						"yrTerm3Standard.allUpfront": "53.485",
						"yrTerm3Standard.noUpfront": "46.416",
						"yrTerm3Standard.partialUpfront": "53.813"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "26.916",
					"reserved": {
						"yrTerm1Standard.allUpfront": "19.109",
						"yrTerm1Standard.noUpfront": "19.373",
						"yrTerm1Standard.partialUpfront": "19.325",
						"yrTerm3Convertible.allUpfront": "14.217",
						"yrTerm3Convertible.noUpfront": "14.846",
						"yrTerm3Convertible.partialUpfront": "14.342",
						"yrTerm3Standard.allUpfront": "13.683",
						"yrTerm3Standard.noUpfront": "13.960",
						"yrTerm3Standard.partialUpfront": "14.011"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "19.341",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.123",
						"yrTerm1Standard.noUpfront": "11.918",
						"yrTerm1Standard.partialUpfront": "11.350",
						"yrTerm3Convertible.allUpfront": "6.489",
						"yrTerm3Convertible.noUpfront": "7.151",
						"yrTerm3Convertible.partialUpfront": "6.622",
						"yrTerm3Standard.allUpfront": "5.411",
						"yrTerm3Standard.noUpfront": "6.219",
						"yrTerm3Standard.partialUpfront": "5.757"
					}
				},
				"mswin": {
					"ondemand": "25.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.011",
						"yrTerm1Standard.noUpfront": "17.806",
						"yrTerm1Standard.partialUpfront": "17.238",
						"yrTerm3Convertible.allUpfront": "12.377",
						"yrTerm3Convertible.noUpfront": "13.039",
						"yrTerm3Convertible.partialUpfront": "12.510",
						"yrTerm3Standard.allUpfront": "11.299",
						"yrTerm3Standard.noUpfront": "12.107",
						"yrTerm3Standard.partialUpfront": "11.645"
					}
				},
				"mswinSQL": {
					"ondemand": "67.685",
					"reserved": {
						"yrTerm1Standard.allUpfront": "59.467",
						"yrTerm1Standard.noUpfront": "52.426",
						"yrTerm1Standard.partialUpfront": "59.694",
						"yrTerm3Convertible.allUpfront": "46.997",
						"yrTerm3Convertible.noUpfront": "47.659",
						"yrTerm3Convertible.partialUpfront": "47.130",
						"yrTerm3Standard.allUpfront": "53.755",
						"yrTerm3Standard.noUpfront": "46.727",
						"yrTerm3Standard.partialUpfront": "54.101"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "27.883",
					"reserved": {
						"yrTerm1Standard.allUpfront": "19.665",
						"yrTerm1Standard.noUpfront": "19.970",
						"yrTerm1Standard.partialUpfront": "19.892",
						"yrTerm3Convertible.allUpfront": "14.541",
						"yrTerm3Convertible.noUpfront": "15.203",
						"yrTerm3Convertible.partialUpfront": "14.674",
						"yrTerm3Standard.allUpfront": "13.953",
						"yrTerm3Standard.noUpfront": "14.271",
						"yrTerm3Standard.partialUpfront": "14.299"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "19.341",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.123",
						"yrTerm1Standard.noUpfront": "11.918",
						"yrTerm1Standard.partialUpfront": "11.350",
						"yrTerm3Convertible.allUpfront": "6.489",
						"yrTerm3Convertible.noUpfront": "7.151",
						"yrTerm3Convertible.partialUpfront": "6.622",
						"yrTerm3Standard.allUpfront": "5.411",
						"yrTerm3Standard.noUpfront": "6.219",
						"yrTerm3Standard.partialUpfront": "5.757"
					}
				},
				"mswin": {
					"ondemand": "25.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.011",
						"yrTerm1Standard.noUpfront": "17.806",
						"yrTerm1Standard.partialUpfront": "17.238",
						"yrTerm3Convertible.allUpfront": "12.377",
						"yrTerm3Convertible.noUpfront": "13.039",
						"yrTerm3Convertible.partialUpfront": "12.510",
						"yrTerm3Standard.allUpfront": "11.299",
						"yrTerm3Standard.noUpfront": "12.107",
						"yrTerm3Standard.partialUpfront": "11.645"
					}
				},
				"mswinSQL": {
					"ondemand": "67.685",
					"reserved": {
						"yrTerm1Standard.allUpfront": "59.467",
						"yrTerm1Standard.noUpfront": "52.426",
						"yrTerm1Standard.partialUpfront": "59.694",
						"yrTerm3Convertible.allUpfront": "46.997",
						"yrTerm3Convertible.noUpfront": "47.659",
						"yrTerm3Convertible.partialUpfront": "47.130",
						"yrTerm3Standard.allUpfront": "53.755",
						"yrTerm3Standard.noUpfront": "46.727",
						"yrTerm3Standard.partialUpfront": "54.101"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "27.883",
					"reserved": {
						"yrTerm1Standard.allUpfront": "19.665",
						"yrTerm1Standard.noUpfront": "19.970",
						"yrTerm1Standard.partialUpfront": "19.892",
						"yrTerm3Convertible.allUpfront": "14.541",
						"yrTerm3Convertible.noUpfront": "15.203",
						"yrTerm3Convertible.partialUpfront": "14.674",
						"yrTerm3Standard.allUpfront": "13.953",
						"yrTerm3Standard.noUpfront": "14.271",
						"yrTerm3Standard.partialUpfront": "14.299"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "14.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.439",
						"yrTerm1Standard.noUpfront": "9.040",
						"yrTerm1Standard.partialUpfront": "8.611",
						"yrTerm3Convertible.allUpfront": "4.923",
						"yrTerm3Convertible.noUpfront": "5.425",
						"yrTerm3Convertible.partialUpfront": "5.024",
						"yrTerm3Standard.allUpfront": "4.105",
						"yrTerm3Standard.noUpfront": "4.717",
						"yrTerm3Standard.partialUpfront": "4.367"
					}
				},
				"mswin": {
					"ondemand": "20.56",
					"reserved": {
						"yrTerm1Standard.allUpfront": "14.327",
						"yrTerm1Standard.noUpfront": "14.928",
						"yrTerm1Standard.partialUpfront": "14.499",
						"yrTerm3Convertible.allUpfront": "10.811",
						"yrTerm3Convertible.noUpfront": "11.313",
						"yrTerm3Convertible.partialUpfront": "10.912",
						"yrTerm3Standard.allUpfront": "9.993",
						"yrTerm3Standard.noUpfront": "10.605",
						"yrTerm3Standard.partialUpfront": "10.255"
					}
				},
				"mswinSQL": {
					"ondemand": "56.604",
					"reserved": {
						"yrTerm1Standard.allUpfront": "50.371",
						"yrTerm1Standard.noUpfront": "49.548",
						"yrTerm1Standard.partialUpfront": "50.543",
						"yrTerm3Convertible.allUpfront": "45.431",
						"yrTerm3Convertible.noUpfront": "45.933",
						"yrTerm3Convertible.partialUpfront": "45.532",
						"yrTerm3Standard.allUpfront": "46.037",
						"yrTerm3Standard.noUpfront": "45.225",
						"yrTerm3Standard.partialUpfront": "46.299"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "22.813",
					"reserved": {
						"yrTerm1Standard.allUpfront": "16.580",
						"yrTerm1Standard.noUpfront": "17.092",
						"yrTerm1Standard.partialUpfront": "16.752",
						"yrTerm3Convertible.allUpfront": "12.975",
						"yrTerm3Convertible.noUpfront": "13.477",
						"yrTerm3Convertible.partialUpfront": "13.076",
						"yrTerm3Standard.allUpfront": "12.246",
						"yrTerm3Standard.noUpfront": "12.769",
						"yrTerm3Standard.partialUpfront": "12.508"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "18.674",
					"reserved": {
						"yrTerm1Standard.allUpfront": "10.740",
						"yrTerm1Standard.noUpfront": "11.508",
						"yrTerm1Standard.partialUpfront": "10.959",
						"yrTerm3Convertible.allUpfront": "6.264",
						"yrTerm3Convertible.noUpfront": "6.903",
						"yrTerm3Convertible.partialUpfront": "6.392",
						"yrTerm3Standard.allUpfront": "5.225",
						"yrTerm3Standard.noUpfront": "6.003",
						"yrTerm3Standard.partialUpfront": "5.558"
					}
				},
				"mswin": {
					"ondemand": "24.562",
					"reserved": {
						"yrTerm1Standard.allUpfront": "16.628",
						"yrTerm1Standard.noUpfront": "17.396",
						"yrTerm1Standard.partialUpfront": "16.847",
						"yrTerm3Convertible.allUpfront": "12.152",
						"yrTerm3Convertible.noUpfront": "12.791",
						"yrTerm3Convertible.partialUpfront": "12.280",
						"yrTerm3Standard.allUpfront": "11.113",
						"yrTerm3Standard.noUpfront": "11.891",
						"yrTerm3Standard.partialUpfront": "11.446"
					}
				},
				"mswinSQL": {
					"ondemand": "67.018",
					"reserved": {
						"yrTerm1Standard.allUpfront": "59.084",
						"yrTerm1Standard.noUpfront": "52.016",
						"yrTerm1Standard.partialUpfront": "59.303",
						"yrTerm3Convertible.allUpfront": "46.772",
						"yrTerm3Convertible.noUpfront": "47.411",
						"yrTerm3Convertible.partialUpfront": "46.900",
						"yrTerm3Standard.allUpfront": "53.569",
						"yrTerm3Standard.noUpfront": "46.511",
						"yrTerm3Standard.partialUpfront": "53.902"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "27.216",
					"reserved": {
						"yrTerm1Standard.allUpfront": "19.282",
						"yrTerm1Standard.noUpfront": "19.560",
						"yrTerm1Standard.partialUpfront": "19.501",
						"yrTerm3Convertible.allUpfront": "14.316",
						"yrTerm3Convertible.noUpfront": "14.955",
						"yrTerm3Convertible.partialUpfront": "14.444",
						"yrTerm3Standard.allUpfront": "13.767",
						"yrTerm3Standard.noUpfront": "14.055",
						"yrTerm3Standard.partialUpfront": "14.100"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "16.006",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.205",
						"yrTerm1Standard.noUpfront": "9.864",
						"yrTerm1Standard.partialUpfront": "9.393",
						"yrTerm3Convertible.allUpfront": "5.369",
						"yrTerm3Convertible.noUpfront": "5.917",
						"yrTerm3Convertible.partialUpfront": "5.478",
						"yrTerm3Standard.allUpfront": "4.478",
						"yrTerm3Standard.noUpfront": "5.145",
						"yrTerm3Standard.partialUpfront": "4.764"
					}
				},
				"mswin": {
					"ondemand": "21.894",
					"reserved": {
						"yrTerm1Standard.allUpfront": "15.093",
						"yrTerm1Standard.noUpfront": "15.752",
						"yrTerm1Standard.partialUpfront": "15.281",
						"yrTerm3Convertible.allUpfront": "11.257",
						"yrTerm3Convertible.noUpfront": "11.805",
						"yrTerm3Convertible.partialUpfront": "11.366",
						"yrTerm3Standard.allUpfront": "10.366",
						"yrTerm3Standard.noUpfront": "11.033",
						"yrTerm3Standard.partialUpfront": "10.652"
					}
				},
				"mswinSQL": {
					"ondemand": "64.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "57.549",
						"yrTerm1Standard.noUpfront": "50.372",
						"yrTerm1Standard.partialUpfront": "57.737",
						"yrTerm3Convertible.allUpfront": "45.877",
						"yrTerm3Convertible.noUpfront": "46.425",
						"yrTerm3Convertible.partialUpfront": "45.986",
						"yrTerm3Standard.allUpfront": "52.822",
						"yrTerm3Standard.noUpfront": "45.653",
						"yrTerm3Standard.partialUpfront": "53.108"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "24.548",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.747",
						"yrTerm1Standard.noUpfront": "17.916",
						"yrTerm1Standard.partialUpfront": "17.935",
						"yrTerm3Convertible.allUpfront": "13.421",
						"yrTerm3Convertible.noUpfront": "13.969",
						"yrTerm3Convertible.partialUpfront": "13.530",
						"yrTerm3Standard.allUpfront": "13.020",
						"yrTerm3Standard.noUpfront": "13.197",
						"yrTerm3Standard.partialUpfront": "13.306"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "16.806",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.665",
						"yrTerm1Standard.noUpfront": "10.357",
						"yrTerm1Standard.partialUpfront": "9.863",
						"yrTerm3Convertible.allUpfront": "5.637",
						"yrTerm3Convertible.noUpfront": "6.213",
						"yrTerm3Convertible.partialUpfront": "5.752",
						"yrTerm3Standard.allUpfront": "4.702",
						"yrTerm3Standard.noUpfront": "5.402",
						"yrTerm3Standard.partialUpfront": "5.002"
					}
				},
				"mswin": {
					"ondemand": "22.694",
					"reserved": {
						"yrTerm1Standard.allUpfront": "15.553",
						"yrTerm1Standard.noUpfront": "16.245",
						"yrTerm1Standard.partialUpfront": "15.751",
						"yrTerm3Convertible.allUpfront": "11.525",
						"yrTerm3Convertible.noUpfront": "12.101",
						"yrTerm3Convertible.partialUpfront": "11.640",
						"yrTerm3Standard.allUpfront": "10.590",
						"yrTerm3Standard.noUpfront": "11.290",
						"yrTerm3Standard.partialUpfront": "10.890"
					}
				},
				"mswinSQL": {
					"ondemand": "58.738",
					"reserved": {
						"yrTerm1Standard.allUpfront": "51.597",
						"yrTerm1Standard.noUpfront": "50.865",
						"yrTerm1Standard.partialUpfront": "51.795",
						"yrTerm3Convertible.allUpfront": "46.145",
						"yrTerm3Convertible.noUpfront": "46.721",
						"yrTerm3Convertible.partialUpfront": "46.260",
						"yrTerm3Standard.allUpfront": "46.634",
						"yrTerm3Standard.noUpfront": "45.910",
						"yrTerm3Standard.partialUpfront": "46.934"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "24.947",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.806",
						"yrTerm1Standard.noUpfront": "18.409",
						"yrTerm1Standard.partialUpfront": "18.004",
						"yrTerm3Convertible.allUpfront": "13.689",
						"yrTerm3Convertible.noUpfront": "14.265",
						"yrTerm3Convertible.partialUpfront": "13.804",
						"yrTerm3Standard.allUpfront": "12.843",
						"yrTerm3Standard.noUpfront": "13.454",
						"yrTerm3Standard.partialUpfront": "13.143"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "13.338",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.671",
						"yrTerm1Standard.noUpfront": "8.219",
						"yrTerm1Standard.partialUpfront": "7.828",
						"yrTerm3Convertible.allUpfront": "4.474",
						"yrTerm3Convertible.noUpfront": "4.931",
						"yrTerm3Convertible.partialUpfront": "4.566",
						"yrTerm3Standard.allUpfront": "3.732",
						"yrTerm3Standard.noUpfront": "4.288",
						"yrTerm3Standard.partialUpfront": "3.970"
					}
				},
				"mswin": {
					"ondemand": "19.226",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.559",
						"yrTerm1Standard.noUpfront": "14.107",
						"yrTerm1Standard.partialUpfront": "13.716",
						"yrTerm3Convertible.allUpfront": "10.362",
						"yrTerm3Convertible.noUpfront": "10.819",
						"yrTerm3Convertible.partialUpfront": "10.454",
						"yrTerm3Standard.allUpfront": "9.620",
						"yrTerm3Standard.noUpfront": "10.176",
						"yrTerm3Standard.partialUpfront": "9.858"
					}
				},
				"mswinSQL": {
					"ondemand": "61.682",
					"reserved": {
						"yrTerm1Standard.allUpfront": "56.015",
						"yrTerm1Standard.noUpfront": "48.727",
						"yrTerm1Standard.partialUpfront": "56.172",
						"yrTerm3Convertible.allUpfront": "44.982",
						"yrTerm3Convertible.noUpfront": "45.439",
						"yrTerm3Convertible.partialUpfront": "45.074",
						"yrTerm3Standard.allUpfront": "52.076",
						"yrTerm3Standard.noUpfront": "44.796",
						"yrTerm3Standard.partialUpfront": "52.314"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "21.88",
					"reserved": {
						"yrTerm1Standard.allUpfront": "16.213",
						"yrTerm1Standard.noUpfront": "16.271",
						"yrTerm1Standard.partialUpfront": "16.370",
						"yrTerm3Convertible.allUpfront": "12.526",
						"yrTerm3Convertible.noUpfront": "12.983",
						"yrTerm3Convertible.partialUpfront": "12.618",
						"yrTerm3Standard.allUpfront": "12.274",
						"yrTerm3Standard.noUpfront": "12.340",
						"yrTerm3Standard.partialUpfront": "12.512"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "13.338",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.671",
						"yrTerm1Standard.noUpfront": "8.219",
						"yrTerm1Standard.partialUpfront": "7.828",
						"yrTerm3Convertible.allUpfront": "4.474",
						"yrTerm3Convertible.noUpfront": "4.931",
						"yrTerm3Convertible.partialUpfront": "4.566",
						"yrTerm3Standard.allUpfront": "3.732",
						"yrTerm3Standard.noUpfront": "4.288",
						"yrTerm3Standard.partialUpfront": "3.970"
					}
				},
				"mswin": {
					"ondemand": "19.226",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.559",
						"yrTerm1Standard.noUpfront": "14.107",
						"yrTerm1Standard.partialUpfront": "13.716",
						"yrTerm3Convertible.allUpfront": "10.362",
						"yrTerm3Convertible.noUpfront": "10.819",
						"yrTerm3Convertible.partialUpfront": "10.454",
						"yrTerm3Standard.allUpfront": "9.620",
						"yrTerm3Standard.noUpfront": "10.176",
						"yrTerm3Standard.partialUpfront": "9.858"
					}
				},
				"mswinSQL": {
					"ondemand": "61.682",
					"reserved": {
						"yrTerm1Standard.allUpfront": "56.015",
						"yrTerm1Standard.noUpfront": "48.727",
						"yrTerm1Standard.partialUpfront": "56.172",
						"yrTerm3Convertible.allUpfront": "44.982",
						"yrTerm3Convertible.noUpfront": "45.439",
						"yrTerm3Convertible.partialUpfront": "45.074",
						"yrTerm3Standard.allUpfront": "52.076",
						"yrTerm3Standard.noUpfront": "44.796",
						"yrTerm3Standard.partialUpfront": "52.314"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "21.88",
					"reserved": {
						"yrTerm1Standard.allUpfront": "16.213",
						"yrTerm1Standard.noUpfront": "16.271",
						"yrTerm1Standard.partialUpfront": "16.370",
						"yrTerm3Convertible.allUpfront": "12.526",
						"yrTerm3Convertible.noUpfront": "12.983",
						"yrTerm3Convertible.partialUpfront": "12.618",
						"yrTerm3Standard.allUpfront": "12.274",
						"yrTerm3Standard.noUpfront": "12.340",
						"yrTerm3Standard.partialUpfront": "12.512"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "16.006",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.205",
						"yrTerm1Standard.noUpfront": "9.864",
						"yrTerm1Standard.partialUpfront": "9.393",
						"yrTerm3Convertible.allUpfront": "5.369",
						"yrTerm3Convertible.noUpfront": "5.917",
						"yrTerm3Convertible.partialUpfront": "5.478",
						"yrTerm3Standard.allUpfront": "4.478",
						"yrTerm3Standard.noUpfront": "5.145",
						"yrTerm3Standard.partialUpfront": "4.764"
					}
				},
				"mswin": {
					"ondemand": "21.894",
					"reserved": {
						"yrTerm1Standard.allUpfront": "15.093",
						"yrTerm1Standard.noUpfront": "15.752",
						"yrTerm1Standard.partialUpfront": "15.281",
						"yrTerm3Convertible.allUpfront": "11.257",
						"yrTerm3Convertible.noUpfront": "11.805",
						"yrTerm3Convertible.partialUpfront": "11.366",
						"yrTerm3Standard.allUpfront": "10.366",
						"yrTerm3Standard.noUpfront": "11.033",
						"yrTerm3Standard.partialUpfront": "10.652"
					}
				},
				"mswinSQL": {
					"ondemand": "64.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "57.549",
						"yrTerm1Standard.noUpfront": "50.372",
						"yrTerm1Standard.partialUpfront": "57.737",
						"yrTerm3Convertible.allUpfront": "45.877",
						"yrTerm3Convertible.noUpfront": "46.425",
						"yrTerm3Convertible.partialUpfront": "45.986",
						"yrTerm3Standard.allUpfront": "52.822",
						"yrTerm3Standard.noUpfront": "45.653",
						"yrTerm3Standard.partialUpfront": "53.108"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "24.548",
					"reserved": {
						"yrTerm1Standard.allUpfront": "17.747",
						"yrTerm1Standard.noUpfront": "17.916",
						"yrTerm1Standard.partialUpfront": "17.935",
						"yrTerm3Convertible.allUpfront": "13.421",
						"yrTerm3Convertible.noUpfront": "13.969",
						"yrTerm3Convertible.partialUpfront": "13.530",
						"yrTerm3Standard.allUpfront": "13.020",
						"yrTerm3Standard.noUpfront": "13.197",
						"yrTerm3Standard.partialUpfront": "13.306"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "13.338",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.671",
						"yrTerm1Standard.noUpfront": "8.219",
						"yrTerm1Standard.partialUpfront": "7.828",
						"yrTerm3Convertible.allUpfront": "4.474",
						"yrTerm3Convertible.noUpfront": "4.931",
						"yrTerm3Convertible.partialUpfront": "4.566",
						"yrTerm3Standard.allUpfront": "3.732",
						"yrTerm3Standard.noUpfront": "4.288",
						"yrTerm3Standard.partialUpfront": "3.970"
					}
				},
				"mswin": {
					"ondemand": "19.226",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.559",
						"yrTerm1Standard.noUpfront": "14.107",
						"yrTerm1Standard.partialUpfront": "13.716",
						"yrTerm3Convertible.allUpfront": "10.362",
						"yrTerm3Convertible.noUpfront": "10.819",
						"yrTerm3Convertible.partialUpfront": "10.454",
						"yrTerm3Standard.allUpfront": "9.620",
						"yrTerm3Standard.noUpfront": "10.176",
						"yrTerm3Standard.partialUpfront": "9.858"
					}
				},
				"mswinSQL": {
					"ondemand": "61.682",
					"reserved": {
						"yrTerm1Standard.allUpfront": "56.015",
						"yrTerm1Standard.noUpfront": "48.727",
						"yrTerm1Standard.partialUpfront": "56.172",
						"yrTerm3Convertible.allUpfront": "44.982",
						"yrTerm3Convertible.noUpfront": "45.439",
						"yrTerm3Convertible.partialUpfront": "45.074",
						"yrTerm3Standard.allUpfront": "52.076",
						"yrTerm3Standard.noUpfront": "44.796",
						"yrTerm3Standard.partialUpfront": "52.314"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "21.88",
					"reserved": {
						"yrTerm1Standard.allUpfront": "16.213",
						"yrTerm1Standard.noUpfront": "16.271",
						"yrTerm1Standard.partialUpfront": "16.370",
						"yrTerm3Convertible.allUpfront": "12.526",
						"yrTerm3Convertible.noUpfront": "12.983",
						"yrTerm3Convertible.partialUpfront": "12.618",
						"yrTerm3Standard.allUpfront": "12.274",
						"yrTerm3Standard.noUpfront": "12.340",
						"yrTerm3Standard.partialUpfront": "12.512"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 1920,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": false
		},
		"vCPU": 128,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 7,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 3000,
		"ebs_max_bandwidth": 400,
		"ebs_optimized": true,
		"ebs_throughput": 50,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r4.large",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 15.25,
		"network_performance": "Up to 10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "R4 High-Memory Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.094",
						"yrTerm1Standard.noUpfront": "0.101",
						"yrTerm1Standard.partialUpfront": "0.096",
						"yrTerm3Convertible.allUpfront": "0.072",
						"yrTerm3Convertible.noUpfront": "0.080",
						"yrTerm3Convertible.partialUpfront": "0.074",
						"yrTerm3Standard.allUpfront": "0.060",
						"yrTerm3Standard.noUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.193",
						"yrTerm1Standard.partialUpfront": "0.188",
						"yrTerm3Convertible.allUpfront": "0.164",
						"yrTerm3Convertible.noUpfront": "0.172",
						"yrTerm3Convertible.partialUpfront": "0.166",
						"yrTerm3Standard.allUpfront": "0.152",
						"yrTerm3Standard.noUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswinSQL": {
					"ondemand": "1.379",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.313",
						"yrTerm1Standard.noUpfront": "1.320",
						"yrTerm1Standard.partialUpfront": "1.315",
						"yrTerm3Convertible.allUpfront": "1.291",
						"yrTerm3Convertible.noUpfront": "1.299",
						"yrTerm3Convertible.partialUpfront": "1.293",
						"yrTerm3Standard.allUpfront": "1.279",
						"yrTerm3Standard.noUpfront": "1.288",
						"yrTerm3Standard.partialUpfront": "1.283"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.323",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.264",
						"yrTerm1Standard.partialUpfront": "0.259",
						"yrTerm3Convertible.allUpfront": "0.235",
						"yrTerm3Convertible.noUpfront": "0.243",
						"yrTerm3Convertible.partialUpfront": "0.237",
						"yrTerm3Standard.allUpfront": "0.223",
						"yrTerm3Standard.noUpfront": "0.232",
						"yrTerm3Standard.partialUpfront": "0.227"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.094",
						"yrTerm1Standard.noUpfront": "0.101",
						"yrTerm1Standard.partialUpfront": "0.096",
						"yrTerm3Convertible.allUpfront": "0.072",
						"yrTerm3Convertible.noUpfront": "0.080",
						"yrTerm3Convertible.partialUpfront": "0.074",
						"yrTerm3Standard.allUpfront": "0.060",
						"yrTerm3Standard.noUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.193",
						"yrTerm1Standard.partialUpfront": "0.188",
						"yrTerm3Convertible.allUpfront": "0.164",
						"yrTerm3Convertible.noUpfront": "0.172",
						"yrTerm3Convertible.partialUpfront": "0.166",
						"yrTerm3Standard.allUpfront": "0.152",
						"yrTerm3Standard.noUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswinSQL": {
					"ondemand": "1.379",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.313",
						"yrTerm1Standard.noUpfront": "1.320",
						"yrTerm1Standard.partialUpfront": "1.315",
						"yrTerm3Convertible.allUpfront": "1.291",
						"yrTerm3Convertible.noUpfront": "1.299",
						"yrTerm3Convertible.partialUpfront": "1.293",
						"yrTerm3Standard.allUpfront": "1.279",
						"yrTerm3Standard.noUpfront": "1.288",
						"yrTerm3Standard.partialUpfront": "1.283"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.323",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.264",
						"yrTerm1Standard.partialUpfront": "0.259",
						"yrTerm3Convertible.allUpfront": "0.235",
						"yrTerm3Convertible.noUpfront": "0.243",
						"yrTerm3Convertible.partialUpfront": "0.237",
						"yrTerm3Standard.allUpfront": "0.223",
						"yrTerm3Standard.noUpfront": "0.232",
						"yrTerm3Standard.partialUpfront": "0.227"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.152",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.089",
						"yrTerm1Standard.noUpfront": "0.096",
						"yrTerm1Standard.partialUpfront": "0.091",
						"yrTerm3Convertible.allUpfront": "0.069",
						"yrTerm3Convertible.noUpfront": "0.076",
						"yrTerm3Convertible.partialUpfront": "0.070",
						"yrTerm3Standard.allUpfront": "0.057",
						"yrTerm3Standard.noUpfront": "0.066",
						"yrTerm3Standard.partialUpfront": "0.061"
					}
				},
				"mswin": {
					"ondemand": "0.244",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.181",
						"yrTerm1Standard.noUpfront": "0.188",
						"yrTerm1Standard.partialUpfront": "0.183",
						"yrTerm3Convertible.allUpfront": "0.161",
						"yrTerm3Convertible.noUpfront": "0.168",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.149",
						"yrTerm3Standard.noUpfront": "0.158",
						"yrTerm3Standard.partialUpfront": "0.153"
					}
				},
				"mswinSQL": {
					"ondemand": "1.371",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.308",
						"yrTerm1Standard.noUpfront": "1.315",
						"yrTerm1Standard.partialUpfront": "1.310",
						"yrTerm3Convertible.allUpfront": "1.288",
						"yrTerm3Convertible.noUpfront": "1.295",
						"yrTerm3Convertible.partialUpfront": "1.289",
						"yrTerm3Standard.allUpfront": "1.276",
						"yrTerm3Standard.noUpfront": "1.285",
						"yrTerm3Standard.partialUpfront": "1.280"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.315",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.252",
						"yrTerm1Standard.noUpfront": "0.259",
						"yrTerm1Standard.partialUpfront": "0.254",
						"yrTerm3Convertible.allUpfront": "0.232",
						"yrTerm3Convertible.noUpfront": "0.239",
						"yrTerm3Convertible.partialUpfront": "0.233",
						"yrTerm3Standard.allUpfront": "0.220",
						"yrTerm3Standard.noUpfront": "0.229",
						"yrTerm3Standard.partialUpfront": "0.224"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.094",
						"yrTerm1Standard.noUpfront": "0.101",
						"yrTerm1Standard.partialUpfront": "0.096",
						"yrTerm3Convertible.allUpfront": "0.072",
						"yrTerm3Convertible.noUpfront": "0.080",
						"yrTerm3Convertible.partialUpfront": "0.074",
						"yrTerm3Standard.allUpfront": "0.060",
						"yrTerm3Standard.noUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.193",
						"yrTerm1Standard.partialUpfront": "0.188",
						"yrTerm3Convertible.allUpfront": "0.164",
						"yrTerm3Convertible.noUpfront": "0.172",
						"yrTerm3Convertible.partialUpfront": "0.166",
						"yrTerm3Standard.allUpfront": "0.152",
						"yrTerm3Standard.noUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswinSQL": {
					"ondemand": "1.379",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.313",
						"yrTerm1Standard.noUpfront": "1.320",
						"yrTerm1Standard.partialUpfront": "1.315",
						"yrTerm3Convertible.allUpfront": "1.291",
						"yrTerm3Convertible.noUpfront": "1.299",
						"yrTerm3Convertible.partialUpfront": "1.293",
						"yrTerm3Standard.allUpfront": "1.279",
						"yrTerm3Standard.noUpfront": "1.288",
						"yrTerm3Standard.partialUpfront": "1.283"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.323",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.264",
						"yrTerm1Standard.partialUpfront": "0.259",
						"yrTerm3Convertible.allUpfront": "0.235",
						"yrTerm3Convertible.noUpfront": "0.243",
						"yrTerm3Convertible.partialUpfront": "0.237",
						"yrTerm3Standard.allUpfront": "0.223",
						"yrTerm3Standard.noUpfront": "0.232",
						"yrTerm3Standard.partialUpfront": "0.227"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.094",
						"yrTerm1Standard.noUpfront": "0.101",
						"yrTerm1Standard.partialUpfront": "0.096",
						"yrTerm3Convertible.allUpfront": "0.072",
						"yrTerm3Convertible.noUpfront": "0.080",
						"yrTerm3Convertible.partialUpfront": "0.074",
						"yrTerm3Standard.allUpfront": "0.060",
						"yrTerm3Standard.noUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.193",
						"yrTerm1Standard.partialUpfront": "0.188",
						"yrTerm3Convertible.allUpfront": "0.164",
						"yrTerm3Convertible.noUpfront": "0.172",
						"yrTerm3Convertible.partialUpfront": "0.166",
						"yrTerm3Standard.allUpfront": "0.152",
						"yrTerm3Standard.noUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswinSQL": {
					"ondemand": "1.379",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.313",
						"yrTerm1Standard.noUpfront": "1.320",
						"yrTerm1Standard.partialUpfront": "1.315",
						"yrTerm3Convertible.allUpfront": "1.291",
						"yrTerm3Convertible.noUpfront": "1.299",
						"yrTerm3Convertible.partialUpfront": "1.293",
						"yrTerm3Standard.allUpfront": "1.279",
						"yrTerm3Standard.noUpfront": "1.288",
						"yrTerm3Standard.partialUpfront": "1.283"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.323",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.264",
						"yrTerm1Standard.partialUpfront": "0.259",
						"yrTerm3Convertible.allUpfront": "0.235",
						"yrTerm3Convertible.noUpfront": "0.243",
						"yrTerm3Convertible.partialUpfront": "0.237",
						"yrTerm3Standard.allUpfront": "0.223",
						"yrTerm3Standard.noUpfront": "0.232",
						"yrTerm3Standard.partialUpfront": "0.227"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.146",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.086",
						"yrTerm1Standard.noUpfront": "0.092",
						"yrTerm1Standard.partialUpfront": "0.088",
						"yrTerm3Convertible.allUpfront": "0.065",
						"yrTerm3Convertible.noUpfront": "0.072",
						"yrTerm3Convertible.partialUpfront": "0.067",
						"yrTerm3Standard.allUpfront": "0.055",
						"yrTerm3Standard.noUpfront": "0.063",
						"yrTerm3Standard.partialUpfront": "0.058"
					}
				},
				"mswin": {
					"ondemand": "0.238",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.178",
						"yrTerm1Standard.noUpfront": "0.184",
						"yrTerm1Standard.partialUpfront": "0.180",
						"yrTerm3Convertible.allUpfront": "0.157",
						"yrTerm3Convertible.noUpfront": "0.164",
						"yrTerm3Convertible.partialUpfront": "0.159",
						"yrTerm3Standard.allUpfront": "0.147",
						"yrTerm3Standard.noUpfront": "0.155",
						"yrTerm3Standard.partialUpfront": "0.150"
					}
				},
				"mswinSQL": {
					"ondemand": "1.365",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.305",
						"yrTerm1Standard.noUpfront": "1.311",
						"yrTerm1Standard.partialUpfront": "1.307",
						"yrTerm3Convertible.allUpfront": "1.284",
						"yrTerm3Convertible.noUpfront": "1.291",
						"yrTerm3Convertible.partialUpfront": "1.286",
						"yrTerm3Standard.allUpfront": "1.274",
						"yrTerm3Standard.noUpfront": "1.282",
						"yrTerm3Standard.partialUpfront": "1.277"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.309",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.249",
						"yrTerm1Standard.noUpfront": "0.255",
						"yrTerm1Standard.partialUpfront": "0.251",
						"yrTerm3Convertible.allUpfront": "0.228",
						"yrTerm3Convertible.noUpfront": "0.235",
						"yrTerm3Convertible.partialUpfront": "0.230",
						"yrTerm3Standard.allUpfront": "0.218",
						"yrTerm3Standard.noUpfront": "0.226",
						"yrTerm3Standard.partialUpfront": "0.221"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.094",
						"yrTerm1Standard.noUpfront": "0.101",
						"yrTerm1Standard.partialUpfront": "0.096",
						"yrTerm3Convertible.allUpfront": "0.072",
						"yrTerm3Convertible.noUpfront": "0.080",
						"yrTerm3Convertible.partialUpfront": "0.074",
						"yrTerm3Standard.allUpfront": "0.060",
						"yrTerm3Standard.noUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.193",
						"yrTerm1Standard.partialUpfront": "0.188",
						"yrTerm3Convertible.allUpfront": "0.164",
						"yrTerm3Convertible.noUpfront": "0.172",
						"yrTerm3Convertible.partialUpfront": "0.166",
						"yrTerm3Standard.allUpfront": "0.152",
						"yrTerm3Standard.noUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswinSQL": {
					"ondemand": "1.379",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.313",
						"yrTerm1Standard.noUpfront": "1.320",
						"yrTerm1Standard.partialUpfront": "1.315",
						"yrTerm3Convertible.allUpfront": "1.291",
						"yrTerm3Convertible.noUpfront": "1.299",
						"yrTerm3Convertible.partialUpfront": "1.293",
						"yrTerm3Standard.allUpfront": "1.279",
						"yrTerm3Standard.noUpfront": "1.288",
						"yrTerm3Standard.partialUpfront": "1.283"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.323",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.264",
						"yrTerm1Standard.partialUpfront": "0.259",
						"yrTerm3Convertible.allUpfront": "0.235",
						"yrTerm3Convertible.noUpfront": "0.243",
						"yrTerm3Convertible.partialUpfront": "0.237",
						"yrTerm3Standard.allUpfront": "0.223",
						"yrTerm3Standard.noUpfront": "0.232",
						"yrTerm3Standard.partialUpfront": "0.227"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.148",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.087",
						"yrTerm1Standard.noUpfront": "0.093",
						"yrTerm1Standard.partialUpfront": "0.089",
						"yrTerm3Convertible.allUpfront": "0.067",
						"yrTerm3Convertible.noUpfront": "0.073",
						"yrTerm3Convertible.partialUpfront": "0.068",
						"yrTerm3Standard.allUpfront": "0.056",
						"yrTerm3Standard.noUpfront": "0.064",
						"yrTerm3Standard.partialUpfront": "0.059"
					}
				},
				"mswin": {
					"ondemand": "0.24",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.179",
						"yrTerm1Standard.noUpfront": "0.185",
						"yrTerm1Standard.partialUpfront": "0.181",
						"yrTerm3Convertible.allUpfront": "0.159",
						"yrTerm3Convertible.noUpfront": "0.165",
						"yrTerm3Convertible.partialUpfront": "0.160",
						"yrTerm3Standard.allUpfront": "0.148",
						"yrTerm3Standard.noUpfront": "0.156",
						"yrTerm3Standard.partialUpfront": "0.151"
					}
				},
				"mswinSQL": {
					"ondemand": "1.367",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.306",
						"yrTerm1Standard.noUpfront": "1.312",
						"yrTerm1Standard.partialUpfront": "1.308",
						"yrTerm3Convertible.allUpfront": "1.286",
						"yrTerm3Convertible.noUpfront": "1.292",
						"yrTerm3Convertible.partialUpfront": "1.287",
						"yrTerm3Standard.allUpfront": "1.275",
						"yrTerm3Standard.noUpfront": "1.283",
						"yrTerm3Standard.partialUpfront": "1.278"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.311",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.250",
						"yrTerm1Standard.noUpfront": "0.256",
						"yrTerm1Standard.partialUpfront": "0.252",
						"yrTerm3Convertible.allUpfront": "0.230",
						"yrTerm3Convertible.noUpfront": "0.236",
						"yrTerm3Convertible.partialUpfront": "0.231",
						"yrTerm3Standard.allUpfront": "0.219",
						"yrTerm3Standard.noUpfront": "0.227",
						"yrTerm3Standard.partialUpfront": "0.222"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.092",
						"yrTerm1Standard.noUpfront": "0.099",
						"yrTerm1Standard.partialUpfront": "0.094",
						"yrTerm3Convertible.allUpfront": "0.070",
						"yrTerm3Convertible.noUpfront": "0.077",
						"yrTerm3Convertible.partialUpfront": "0.071",
						"yrTerm3Standard.allUpfront": "0.059",
						"yrTerm3Standard.noUpfront": "0.067",
						"yrTerm3Standard.partialUpfront": "0.062"
					}
				},
				"mswin": {
					"ondemand": "0.248",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.184",
						"yrTerm1Standard.noUpfront": "0.191",
						"yrTerm1Standard.partialUpfront": "0.186",
						"yrTerm3Convertible.allUpfront": "0.162",
						"yrTerm3Convertible.noUpfront": "0.169",
						"yrTerm3Convertible.partialUpfront": "0.163",
						"yrTerm3Standard.allUpfront": "0.151",
						"yrTerm3Standard.noUpfront": "0.159",
						"yrTerm3Standard.partialUpfront": "0.154"
					}
				},
				"mswinSQL": {
					"ondemand": "1.375",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.311",
						"yrTerm1Standard.noUpfront": "1.318",
						"yrTerm1Standard.partialUpfront": "1.313",
						"yrTerm3Convertible.allUpfront": "1.289",
						"yrTerm3Convertible.noUpfront": "1.296",
						"yrTerm3Convertible.partialUpfront": "1.290",
						"yrTerm3Standard.allUpfront": "1.278",
						"yrTerm3Standard.noUpfront": "1.286",
						"yrTerm3Standard.partialUpfront": "1.281"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.319",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.255",
						"yrTerm1Standard.noUpfront": "0.262",
						"yrTerm1Standard.partialUpfront": "0.257",
						"yrTerm3Convertible.allUpfront": "0.233",
						"yrTerm3Convertible.noUpfront": "0.240",
						"yrTerm3Convertible.partialUpfront": "0.234",
						"yrTerm3Standard.allUpfront": "0.222",
						"yrTerm3Standard.noUpfront": "0.230",
						"yrTerm3Standard.partialUpfront": "0.225"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.28",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.165",
						"yrTerm1Standard.noUpfront": "0.176",
						"yrTerm1Standard.partialUpfront": "0.168",
						"yrTerm3Convertible.allUpfront": "0.126",
						"yrTerm3Convertible.noUpfront": "0.139",
						"yrTerm3Convertible.partialUpfront": "0.129",
						"yrTerm3Standard.allUpfront": "0.105",
						"yrTerm3Standard.noUpfront": "0.121",
						"yrTerm3Standard.partialUpfront": "0.112"
					}
				},
				"mswin": {
					"ondemand": "0.372",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.268",
						"yrTerm1Standard.partialUpfront": "0.260",
						"yrTerm3Convertible.allUpfront": "0.218",
						"yrTerm3Convertible.noUpfront": "0.231",
						"yrTerm3Convertible.partialUpfront": "0.221",
						"yrTerm3Standard.allUpfront": "0.197",
						"yrTerm3Standard.noUpfront": "0.213",
						"yrTerm3Standard.partialUpfront": "0.204"
					}
				},
				"mswinSQL": {
					"ondemand": "1.499",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.384",
						"yrTerm1Standard.noUpfront": "1.395",
						"yrTerm1Standard.partialUpfront": "1.387",
						"yrTerm3Convertible.allUpfront": "1.345",
						"yrTerm3Convertible.noUpfront": "1.358",
						"yrTerm3Convertible.partialUpfront": "1.348",
						"yrTerm3Standard.allUpfront": "1.324",
						"yrTerm3Standard.noUpfront": "1.340",
						"yrTerm3Standard.partialUpfront": "1.331"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.443",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.328",
						"yrTerm1Standard.noUpfront": "0.339",
						"yrTerm1Standard.partialUpfront": "0.331",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.302",
						"yrTerm3Convertible.partialUpfront": "0.292",
						"yrTerm3Standard.allUpfront": "0.268",
						"yrTerm3Standard.noUpfront": "0.284",
						"yrTerm3Standard.partialUpfront": "0.275"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.133",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.084",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Convertible.allUpfront": "0.060",
						"yrTerm3Convertible.noUpfront": "0.066",
						"yrTerm3Convertible.partialUpfront": "0.061",
						"yrTerm3Standard.allUpfront": "0.050",
						"yrTerm3Standard.noUpfront": "0.057",
						"yrTerm3Standard.partialUpfront": "0.053"
					}
				},
				"mswin": {
					"ondemand": "0.225",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.170",
						"yrTerm1Standard.noUpfront": "0.176",
						"yrTerm1Standard.partialUpfront": "0.172",
						"yrTerm3Convertible.allUpfront": "0.152",
						"yrTerm3Convertible.noUpfront": "0.158",
						"yrTerm3Convertible.partialUpfront": "0.153",
						"yrTerm3Standard.allUpfront": "0.142",
						"yrTerm3Standard.noUpfront": "0.149",
						"yrTerm3Standard.partialUpfront": "0.145"
					}
				},
				"mswinSQL": {
					"ondemand": "1.352",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.297",
						"yrTerm1Standard.noUpfront": "1.303",
						"yrTerm1Standard.partialUpfront": "1.299",
						"yrTerm3Convertible.allUpfront": "1.279",
						"yrTerm3Convertible.noUpfront": "1.285",
						"yrTerm3Convertible.partialUpfront": "1.280",
						"yrTerm3Standard.allUpfront": "1.269",
						"yrTerm3Standard.noUpfront": "1.276",
						"yrTerm3Standard.partialUpfront": "1.272"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.296",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.241",
						"yrTerm1Standard.noUpfront": "0.247",
						"yrTerm1Standard.partialUpfront": "0.243",
						"yrTerm3Convertible.allUpfront": "0.223",
						"yrTerm3Convertible.noUpfront": "0.229",
						"yrTerm3Convertible.partialUpfront": "0.224",
						"yrTerm3Standard.allUpfront": "0.213",
						"yrTerm3Standard.noUpfront": "0.220",
						"yrTerm3Standard.partialUpfront": "0.216"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.133",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.084",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Convertible.allUpfront": "0.060",
						"yrTerm3Convertible.noUpfront": "0.066",
						"yrTerm3Convertible.partialUpfront": "0.061",
						"yrTerm3Standard.allUpfront": "0.050",
						"yrTerm3Standard.noUpfront": "0.057",
						"yrTerm3Standard.partialUpfront": "0.053"
					}
				},
				"mswin": {
					"ondemand": "0.225",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.170",
						"yrTerm1Standard.noUpfront": "0.176",
						"yrTerm1Standard.partialUpfront": "0.172",
						"yrTerm3Convertible.allUpfront": "0.152",
						"yrTerm3Convertible.noUpfront": "0.158",
						"yrTerm3Convertible.partialUpfront": "0.153",
						"yrTerm3Standard.allUpfront": "0.142",
						"yrTerm3Standard.noUpfront": "0.149",
						"yrTerm3Standard.partialUpfront": "0.145"
					}
				},
				"mswinSQL": {
					"ondemand": "1.352",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.297",
						"yrTerm1Standard.noUpfront": "1.303",
						"yrTerm1Standard.partialUpfront": "1.299",
						"yrTerm3Convertible.allUpfront": "1.279",
						"yrTerm3Convertible.noUpfront": "1.285",
						"yrTerm3Convertible.partialUpfront": "1.280",
						"yrTerm3Standard.allUpfront": "1.269",
						"yrTerm3Standard.noUpfront": "1.276",
						"yrTerm3Standard.partialUpfront": "1.272"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.296",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.241",
						"yrTerm1Standard.noUpfront": "0.247",
						"yrTerm1Standard.partialUpfront": "0.243",
						"yrTerm3Convertible.allUpfront": "0.223",
						"yrTerm3Convertible.noUpfront": "0.229",
						"yrTerm3Convertible.partialUpfront": "0.224",
						"yrTerm3Standard.allUpfront": "0.213",
						"yrTerm3Standard.noUpfront": "0.220",
						"yrTerm3Standard.partialUpfront": "0.216"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.16",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.094",
						"yrTerm1Standard.noUpfront": "0.101",
						"yrTerm1Standard.partialUpfront": "0.096",
						"yrTerm3Convertible.allUpfront": "0.072",
						"yrTerm3Convertible.noUpfront": "0.080",
						"yrTerm3Convertible.partialUpfront": "0.074",
						"yrTerm3Standard.allUpfront": "0.060",
						"yrTerm3Standard.noUpfront": "0.069",
						"yrTerm3Standard.partialUpfront": "0.064"
					}
				},
				"mswin": {
					"ondemand": "0.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.186",
						"yrTerm1Standard.noUpfront": "0.193",
						"yrTerm1Standard.partialUpfront": "0.188",
						"yrTerm3Convertible.allUpfront": "0.164",
						"yrTerm3Convertible.noUpfront": "0.172",
						"yrTerm3Convertible.partialUpfront": "0.166",
						"yrTerm3Standard.allUpfront": "0.152",
						"yrTerm3Standard.noUpfront": "0.161",
						"yrTerm3Standard.partialUpfront": "0.156"
					}
				},
				"mswinSQL": {
					"ondemand": "1.379",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.313",
						"yrTerm1Standard.noUpfront": "1.320",
						"yrTerm1Standard.partialUpfront": "1.315",
						"yrTerm3Convertible.allUpfront": "1.291",
						"yrTerm3Convertible.noUpfront": "1.299",
						"yrTerm3Convertible.partialUpfront": "1.293",
						"yrTerm3Standard.allUpfront": "1.279",
						"yrTerm3Standard.noUpfront": "1.288",
						"yrTerm3Standard.partialUpfront": "1.283"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.323",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.257",
						"yrTerm1Standard.noUpfront": "0.264",
						"yrTerm1Standard.partialUpfront": "0.259",
						"yrTerm3Convertible.allUpfront": "0.235",
						"yrTerm3Convertible.noUpfront": "0.243",
						"yrTerm3Convertible.partialUpfront": "0.237",
						"yrTerm3Standard.allUpfront": "0.223",
						"yrTerm3Standard.noUpfront": "0.232",
						"yrTerm3Standard.partialUpfront": "0.227"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.148",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.087",
						"yrTerm1Standard.noUpfront": "0.093",
						"yrTerm1Standard.partialUpfront": "0.089",
						"yrTerm3Convertible.allUpfront": "0.067",
						"yrTerm3Convertible.noUpfront": "0.073",
						"yrTerm3Convertible.partialUpfront": "0.068",
						"yrTerm3Standard.allUpfront": "0.056",
						"yrTerm3Standard.noUpfront": "0.064",
						"yrTerm3Standard.partialUpfront": "0.059"
					}
				},
				"mswin": {
					"ondemand": "0.24",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.179",
						"yrTerm1Standard.noUpfront": "0.185",
						"yrTerm1Standard.partialUpfront": "0.181",
						"yrTerm3Convertible.allUpfront": "0.159",
						"yrTerm3Convertible.noUpfront": "0.165",
						"yrTerm3Convertible.partialUpfront": "0.160",
						"yrTerm3Standard.allUpfront": "0.148",
						"yrTerm3Standard.noUpfront": "0.156",
						"yrTerm3Standard.partialUpfront": "0.151"
					}
				},
				"mswinSQL": {
					"ondemand": "1.367",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.306",
						"yrTerm1Standard.noUpfront": "1.312",
						"yrTerm1Standard.partialUpfront": "1.308",
						"yrTerm3Convertible.allUpfront": "1.286",
						"yrTerm3Convertible.noUpfront": "1.292",
						"yrTerm3Convertible.partialUpfront": "1.287",
						"yrTerm3Standard.allUpfront": "1.275",
						"yrTerm3Standard.noUpfront": "1.283",
						"yrTerm3Standard.partialUpfront": "1.278"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.311",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.250",
						"yrTerm1Standard.noUpfront": "0.256",
						"yrTerm1Standard.partialUpfront": "0.252",
						"yrTerm3Convertible.allUpfront": "0.230",
						"yrTerm3Convertible.noUpfront": "0.236",
						"yrTerm3Convertible.partialUpfront": "0.231",
						"yrTerm3Standard.allUpfront": "0.219",
						"yrTerm3Standard.noUpfront": "0.227",
						"yrTerm3Standard.partialUpfront": "0.222"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.133",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.078",
						"yrTerm1Standard.noUpfront": "0.084",
						"yrTerm1Standard.partialUpfront": "0.080",
						"yrTerm3Convertible.allUpfront": "0.060",
						"yrTerm3Convertible.noUpfront": "0.066",
						"yrTerm3Convertible.partialUpfront": "0.061",
						"yrTerm3Standard.allUpfront": "0.050",
						"yrTerm3Standard.noUpfront": "0.057",
						"yrTerm3Standard.partialUpfront": "0.053"
					}
				},
				"mswin": {
					"ondemand": "0.225",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.170",
						"yrTerm1Standard.noUpfront": "0.176",
						"yrTerm1Standard.partialUpfront": "0.172",
						"yrTerm3Convertible.allUpfront": "0.152",
						"yrTerm3Convertible.noUpfront": "0.158",
						"yrTerm3Convertible.partialUpfront": "0.153",
						"yrTerm3Standard.allUpfront": "0.142",
						"yrTerm3Standard.noUpfront": "0.149",
						"yrTerm3Standard.partialUpfront": "0.145"
					}
				},
				"mswinSQL": {
					"ondemand": "1.352",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.297",
						"yrTerm1Standard.noUpfront": "1.303",
						"yrTerm1Standard.partialUpfront": "1.299",
						"yrTerm3Convertible.allUpfront": "1.279",
						"yrTerm3Convertible.noUpfront": "1.285",
						"yrTerm3Convertible.partialUpfront": "1.280",
						"yrTerm3Standard.allUpfront": "1.269",
						"yrTerm3Standard.noUpfront": "1.276",
						"yrTerm3Standard.partialUpfront": "1.272"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.296",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.241",
						"yrTerm1Standard.noUpfront": "0.247",
						"yrTerm1Standard.partialUpfront": "0.243",
						"yrTerm3Convertible.allUpfront": "0.223",
						"yrTerm3Convertible.noUpfront": "0.229",
						"yrTerm3Convertible.partialUpfront": "0.224",
						"yrTerm3Standard.allUpfront": "0.213",
						"yrTerm3Standard.noUpfront": "0.220",
						"yrTerm3Standard.partialUpfront": "0.216"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 10,
			"max_enis": 3
		},
		"vpc_only": true
	},
	{
		"ECU": 13.5,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 6000,
		"ebs_max_bandwidth": 800,
		"ebs_optimized": true,
		"ebs_throughput": 100,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r4.xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 30.5,
		"network_performance": "Up to 10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "R4 High-Memory Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.32",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.188",
						"yrTerm1Standard.noUpfront": "0.202",
						"yrTerm1Standard.partialUpfront": "0.192",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.120",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				},
				"mswin": {
					"ondemand": "0.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.372",
						"yrTerm1Standard.noUpfront": "0.386",
						"yrTerm1Standard.partialUpfront": "0.376",
						"yrTerm3Convertible.allUpfront": "0.328",
						"yrTerm3Convertible.noUpfront": "0.343",
						"yrTerm3Convertible.partialUpfront": "0.331",
						"yrTerm3Standard.allUpfront": "0.304",
						"yrTerm3Standard.noUpfront": "0.322",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswinSQL": {
					"ondemand": "1.631",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.499",
						"yrTerm1Standard.noUpfront": "1.513",
						"yrTerm1Standard.partialUpfront": "1.503",
						"yrTerm3Convertible.allUpfront": "1.455",
						"yrTerm3Convertible.noUpfront": "1.470",
						"yrTerm3Convertible.partialUpfront": "1.458",
						"yrTerm3Standard.allUpfront": "1.431",
						"yrTerm3Standard.noUpfront": "1.449",
						"yrTerm3Standard.partialUpfront": "1.439"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.575",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.443",
						"yrTerm1Standard.noUpfront": "0.457",
						"yrTerm1Standard.partialUpfront": "0.447",
						"yrTerm3Convertible.allUpfront": "0.399",
						"yrTerm3Convertible.noUpfront": "0.414",
						"yrTerm3Convertible.partialUpfront": "0.402",
						"yrTerm3Standard.allUpfront": "0.375",
						"yrTerm3Standard.noUpfront": "0.393",
						"yrTerm3Standard.partialUpfront": "0.383"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.32",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.188",
						"yrTerm1Standard.noUpfront": "0.202",
						"yrTerm1Standard.partialUpfront": "0.192",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.120",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				},
				"mswin": {
					"ondemand": "0.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.372",
						"yrTerm1Standard.noUpfront": "0.386",
						"yrTerm1Standard.partialUpfront": "0.376",
						"yrTerm3Convertible.allUpfront": "0.328",
						"yrTerm3Convertible.noUpfront": "0.343",
						"yrTerm3Convertible.partialUpfront": "0.331",
						"yrTerm3Standard.allUpfront": "0.304",
						"yrTerm3Standard.noUpfront": "0.322",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswinSQL": {
					"ondemand": "1.631",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.499",
						"yrTerm1Standard.noUpfront": "1.513",
						"yrTerm1Standard.partialUpfront": "1.503",
						"yrTerm3Convertible.allUpfront": "1.455",
						"yrTerm3Convertible.noUpfront": "1.470",
						"yrTerm3Convertible.partialUpfront": "1.458",
						"yrTerm3Standard.allUpfront": "1.431",
						"yrTerm3Standard.noUpfront": "1.449",
						"yrTerm3Standard.partialUpfront": "1.439"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.575",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.443",
						"yrTerm1Standard.noUpfront": "0.457",
						"yrTerm1Standard.partialUpfront": "0.447",
						"yrTerm3Convertible.allUpfront": "0.399",
						"yrTerm3Convertible.noUpfront": "0.414",
						"yrTerm3Convertible.partialUpfront": "0.402",
						"yrTerm3Standard.allUpfront": "0.375",
						"yrTerm3Standard.noUpfront": "0.393",
						"yrTerm3Standard.partialUpfront": "0.383"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.304",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.179",
						"yrTerm1Standard.noUpfront": "0.191",
						"yrTerm1Standard.partialUpfront": "0.182",
						"yrTerm3Convertible.allUpfront": "0.138",
						"yrTerm3Convertible.noUpfront": "0.152",
						"yrTerm3Convertible.partialUpfront": "0.140",
						"yrTerm3Standard.allUpfront": "0.114",
						"yrTerm3Standard.noUpfront": "0.132",
						"yrTerm3Standard.partialUpfront": "0.122"
					}
				},
				"mswin": {
					"ondemand": "0.488",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.363",
						"yrTerm1Standard.noUpfront": "0.375",
						"yrTerm1Standard.partialUpfront": "0.366",
						"yrTerm3Convertible.allUpfront": "0.322",
						"yrTerm3Convertible.noUpfront": "0.336",
						"yrTerm3Convertible.partialUpfront": "0.324",
						"yrTerm3Standard.allUpfront": "0.298",
						"yrTerm3Standard.noUpfront": "0.316",
						"yrTerm3Standard.partialUpfront": "0.306"
					}
				},
				"mswinSQL": {
					"ondemand": "1.615",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.490",
						"yrTerm1Standard.noUpfront": "1.502",
						"yrTerm1Standard.partialUpfront": "1.493",
						"yrTerm3Convertible.allUpfront": "1.449",
						"yrTerm3Convertible.noUpfront": "1.463",
						"yrTerm3Convertible.partialUpfront": "1.451",
						"yrTerm3Standard.allUpfront": "1.425",
						"yrTerm3Standard.noUpfront": "1.443",
						"yrTerm3Standard.partialUpfront": "1.433"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.559",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.434",
						"yrTerm1Standard.noUpfront": "0.446",
						"yrTerm1Standard.partialUpfront": "0.437",
						"yrTerm3Convertible.allUpfront": "0.393",
						"yrTerm3Convertible.noUpfront": "0.407",
						"yrTerm3Convertible.partialUpfront": "0.395",
						"yrTerm3Standard.allUpfront": "0.369",
						"yrTerm3Standard.noUpfront": "0.387",
						"yrTerm3Standard.partialUpfront": "0.377"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.32",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.188",
						"yrTerm1Standard.noUpfront": "0.202",
						"yrTerm1Standard.partialUpfront": "0.192",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.120",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				},
				"mswin": {
					"ondemand": "0.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.372",
						"yrTerm1Standard.noUpfront": "0.386",
						"yrTerm1Standard.partialUpfront": "0.376",
						"yrTerm3Convertible.allUpfront": "0.328",
						"yrTerm3Convertible.noUpfront": "0.343",
						"yrTerm3Convertible.partialUpfront": "0.331",
						"yrTerm3Standard.allUpfront": "0.304",
						"yrTerm3Standard.noUpfront": "0.322",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswinSQL": {
					"ondemand": "1.631",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.499",
						"yrTerm1Standard.noUpfront": "1.513",
						"yrTerm1Standard.partialUpfront": "1.503",
						"yrTerm3Convertible.allUpfront": "1.455",
						"yrTerm3Convertible.noUpfront": "1.470",
						"yrTerm3Convertible.partialUpfront": "1.458",
						"yrTerm3Standard.allUpfront": "1.431",
						"yrTerm3Standard.noUpfront": "1.449",
						"yrTerm3Standard.partialUpfront": "1.439"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.575",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.443",
						"yrTerm1Standard.noUpfront": "0.457",
						"yrTerm1Standard.partialUpfront": "0.447",
						"yrTerm3Convertible.allUpfront": "0.399",
						"yrTerm3Convertible.noUpfront": "0.414",
						"yrTerm3Convertible.partialUpfront": "0.402",
						"yrTerm3Standard.allUpfront": "0.375",
						"yrTerm3Standard.noUpfront": "0.393",
						"yrTerm3Standard.partialUpfront": "0.383"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.319",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.188",
						"yrTerm1Standard.noUpfront": "0.202",
						"yrTerm1Standard.partialUpfront": "0.192",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.120",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				},
				"mswin": {
					"ondemand": "0.503",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.372",
						"yrTerm1Standard.noUpfront": "0.386",
						"yrTerm1Standard.partialUpfront": "0.376",
						"yrTerm3Convertible.allUpfront": "0.328",
						"yrTerm3Convertible.noUpfront": "0.343",
						"yrTerm3Convertible.partialUpfront": "0.331",
						"yrTerm3Standard.allUpfront": "0.304",
						"yrTerm3Standard.noUpfront": "0.322",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswinSQL": {
					"ondemand": "1.63",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.499",
						"yrTerm1Standard.noUpfront": "1.513",
						"yrTerm1Standard.partialUpfront": "1.503",
						"yrTerm3Convertible.allUpfront": "1.455",
						"yrTerm3Convertible.noUpfront": "1.470",
						"yrTerm3Convertible.partialUpfront": "1.458",
						"yrTerm3Standard.allUpfront": "1.431",
						"yrTerm3Standard.noUpfront": "1.449",
						"yrTerm3Standard.partialUpfront": "1.439"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.574",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.443",
						"yrTerm1Standard.noUpfront": "0.457",
						"yrTerm1Standard.partialUpfront": "0.447",
						"yrTerm3Convertible.allUpfront": "0.399",
						"yrTerm3Convertible.noUpfront": "0.414",
						"yrTerm3Convertible.partialUpfront": "0.402",
						"yrTerm3Standard.allUpfront": "0.375",
						"yrTerm3Standard.noUpfront": "0.393",
						"yrTerm3Standard.partialUpfront": "0.383"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.292",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.172",
						"yrTerm1Standard.noUpfront": "0.185",
						"yrTerm1Standard.partialUpfront": "0.175",
						"yrTerm3Convertible.allUpfront": "0.131",
						"yrTerm3Convertible.noUpfront": "0.144",
						"yrTerm3Convertible.partialUpfront": "0.133",
						"yrTerm3Standard.allUpfront": "0.110",
						"yrTerm3Standard.noUpfront": "0.125",
						"yrTerm3Standard.partialUpfront": "0.117"
					}
				},
				"mswin": {
					"ondemand": "0.476",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.356",
						"yrTerm1Standard.noUpfront": "0.369",
						"yrTerm1Standard.partialUpfront": "0.359",
						"yrTerm3Convertible.allUpfront": "0.315",
						"yrTerm3Convertible.noUpfront": "0.328",
						"yrTerm3Convertible.partialUpfront": "0.317",
						"yrTerm3Standard.allUpfront": "0.294",
						"yrTerm3Standard.noUpfront": "0.309",
						"yrTerm3Standard.partialUpfront": "0.301"
					}
				},
				"mswinSQL": {
					"ondemand": "1.603",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.483",
						"yrTerm1Standard.noUpfront": "1.496",
						"yrTerm1Standard.partialUpfront": "1.486",
						"yrTerm3Convertible.allUpfront": "1.442",
						"yrTerm3Convertible.noUpfront": "1.455",
						"yrTerm3Convertible.partialUpfront": "1.444",
						"yrTerm3Standard.allUpfront": "1.421",
						"yrTerm3Standard.noUpfront": "1.436",
						"yrTerm3Standard.partialUpfront": "1.428"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.547",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.427",
						"yrTerm1Standard.noUpfront": "0.440",
						"yrTerm1Standard.partialUpfront": "0.430",
						"yrTerm3Convertible.allUpfront": "0.386",
						"yrTerm3Convertible.noUpfront": "0.399",
						"yrTerm3Convertible.partialUpfront": "0.388",
						"yrTerm3Standard.allUpfront": "0.365",
						"yrTerm3Standard.noUpfront": "0.380",
						"yrTerm3Standard.partialUpfront": "0.372"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.32",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.188",
						"yrTerm1Standard.noUpfront": "0.202",
						"yrTerm1Standard.partialUpfront": "0.192",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.120",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				},
				"mswin": {
					"ondemand": "0.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.372",
						"yrTerm1Standard.noUpfront": "0.386",
						"yrTerm1Standard.partialUpfront": "0.376",
						"yrTerm3Convertible.allUpfront": "0.328",
						"yrTerm3Convertible.noUpfront": "0.343",
						"yrTerm3Convertible.partialUpfront": "0.331",
						"yrTerm3Standard.allUpfront": "0.304",
						"yrTerm3Standard.noUpfront": "0.322",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswinSQL": {
					"ondemand": "1.631",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.499",
						"yrTerm1Standard.noUpfront": "1.513",
						"yrTerm1Standard.partialUpfront": "1.503",
						"yrTerm3Convertible.allUpfront": "1.455",
						"yrTerm3Convertible.noUpfront": "1.470",
						"yrTerm3Convertible.partialUpfront": "1.458",
						"yrTerm3Standard.allUpfront": "1.431",
						"yrTerm3Standard.noUpfront": "1.449",
						"yrTerm3Standard.partialUpfront": "1.439"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.575",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.443",
						"yrTerm1Standard.noUpfront": "0.457",
						"yrTerm1Standard.partialUpfront": "0.447",
						"yrTerm3Convertible.allUpfront": "0.399",
						"yrTerm3Convertible.noUpfront": "0.414",
						"yrTerm3Convertible.partialUpfront": "0.402",
						"yrTerm3Standard.allUpfront": "0.375",
						"yrTerm3Standard.noUpfront": "0.393",
						"yrTerm3Standard.partialUpfront": "0.383"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.296",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.174",
						"yrTerm1Standard.noUpfront": "0.187",
						"yrTerm1Standard.partialUpfront": "0.178",
						"yrTerm3Convertible.allUpfront": "0.133",
						"yrTerm3Convertible.noUpfront": "0.147",
						"yrTerm3Convertible.partialUpfront": "0.136",
						"yrTerm3Standard.allUpfront": "0.111",
						"yrTerm3Standard.noUpfront": "0.127",
						"yrTerm3Standard.partialUpfront": "0.119"
					}
				},
				"mswin": {
					"ondemand": "0.48",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.358",
						"yrTerm1Standard.noUpfront": "0.371",
						"yrTerm1Standard.partialUpfront": "0.362",
						"yrTerm3Convertible.allUpfront": "0.317",
						"yrTerm3Convertible.noUpfront": "0.331",
						"yrTerm3Convertible.partialUpfront": "0.320",
						"yrTerm3Standard.allUpfront": "0.295",
						"yrTerm3Standard.noUpfront": "0.311",
						"yrTerm3Standard.partialUpfront": "0.303"
					}
				},
				"mswinSQL": {
					"ondemand": "1.607",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.485",
						"yrTerm1Standard.noUpfront": "1.498",
						"yrTerm1Standard.partialUpfront": "1.489",
						"yrTerm3Convertible.allUpfront": "1.444",
						"yrTerm3Convertible.noUpfront": "1.458",
						"yrTerm3Convertible.partialUpfront": "1.447",
						"yrTerm3Standard.allUpfront": "1.422",
						"yrTerm3Standard.noUpfront": "1.438",
						"yrTerm3Standard.partialUpfront": "1.430"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.551",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.429",
						"yrTerm1Standard.noUpfront": "0.442",
						"yrTerm1Standard.partialUpfront": "0.433",
						"yrTerm3Convertible.allUpfront": "0.388",
						"yrTerm3Convertible.noUpfront": "0.402",
						"yrTerm3Convertible.partialUpfront": "0.391",
						"yrTerm3Standard.allUpfront": "0.366",
						"yrTerm3Standard.noUpfront": "0.382",
						"yrTerm3Standard.partialUpfront": "0.374"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.312",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.183",
						"yrTerm1Standard.noUpfront": "0.197",
						"yrTerm1Standard.partialUpfront": "0.187",
						"yrTerm3Convertible.allUpfront": "0.140",
						"yrTerm3Convertible.noUpfront": "0.154",
						"yrTerm3Convertible.partialUpfront": "0.143",
						"yrTerm3Standard.allUpfront": "0.117",
						"yrTerm3Standard.noUpfront": "0.134",
						"yrTerm3Standard.partialUpfront": "0.125"
					}
				},
				"mswin": {
					"ondemand": "0.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.367",
						"yrTerm1Standard.noUpfront": "0.381",
						"yrTerm1Standard.partialUpfront": "0.371",
						"yrTerm3Convertible.allUpfront": "0.324",
						"yrTerm3Convertible.noUpfront": "0.338",
						"yrTerm3Convertible.partialUpfront": "0.327",
						"yrTerm3Standard.allUpfront": "0.301",
						"yrTerm3Standard.noUpfront": "0.318",
						"yrTerm3Standard.partialUpfront": "0.309"
					}
				},
				"mswinSQL": {
					"ondemand": "1.623",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.494",
						"yrTerm1Standard.noUpfront": "1.508",
						"yrTerm1Standard.partialUpfront": "1.498",
						"yrTerm3Convertible.allUpfront": "1.451",
						"yrTerm3Convertible.noUpfront": "1.465",
						"yrTerm3Convertible.partialUpfront": "1.454",
						"yrTerm3Standard.allUpfront": "1.428",
						"yrTerm3Standard.noUpfront": "1.445",
						"yrTerm3Standard.partialUpfront": "1.436"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.567",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.438",
						"yrTerm1Standard.noUpfront": "0.452",
						"yrTerm1Standard.partialUpfront": "0.442",
						"yrTerm3Convertible.allUpfront": "0.395",
						"yrTerm3Convertible.noUpfront": "0.409",
						"yrTerm3Convertible.partialUpfront": "0.398",
						"yrTerm3Standard.allUpfront": "0.372",
						"yrTerm3Standard.noUpfront": "0.389",
						"yrTerm3Standard.partialUpfront": "0.380"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.56",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.329",
						"yrTerm1Standard.noUpfront": "0.353",
						"yrTerm1Standard.partialUpfront": "0.336",
						"yrTerm3Convertible.allUpfront": "0.252",
						"yrTerm3Convertible.noUpfront": "0.278",
						"yrTerm3Convertible.partialUpfront": "0.258",
						"yrTerm3Standard.allUpfront": "0.211",
						"yrTerm3Standard.noUpfront": "0.242",
						"yrTerm3Standard.partialUpfront": "0.224"
					}
				},
				"mswin": {
					"ondemand": "0.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.513",
						"yrTerm1Standard.noUpfront": "0.537",
						"yrTerm1Standard.partialUpfront": "0.520",
						"yrTerm3Convertible.allUpfront": "0.436",
						"yrTerm3Convertible.noUpfront": "0.462",
						"yrTerm3Convertible.partialUpfront": "0.442",
						"yrTerm3Standard.allUpfront": "0.395",
						"yrTerm3Standard.noUpfront": "0.426",
						"yrTerm3Standard.partialUpfront": "0.408"
					}
				},
				"mswinSQL": {
					"ondemand": "1.871",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.640",
						"yrTerm1Standard.noUpfront": "1.664",
						"yrTerm1Standard.partialUpfront": "1.647",
						"yrTerm3Convertible.allUpfront": "1.563",
						"yrTerm3Convertible.noUpfront": "1.589",
						"yrTerm3Convertible.partialUpfront": "1.569",
						"yrTerm3Standard.allUpfront": "1.522",
						"yrTerm3Standard.noUpfront": "1.553",
						"yrTerm3Standard.partialUpfront": "1.535"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.815",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.584",
						"yrTerm1Standard.noUpfront": "0.608",
						"yrTerm1Standard.partialUpfront": "0.591",
						"yrTerm3Convertible.allUpfront": "0.507",
						"yrTerm3Convertible.noUpfront": "0.533",
						"yrTerm3Convertible.partialUpfront": "0.513",
						"yrTerm3Standard.allUpfront": "0.466",
						"yrTerm3Standard.noUpfront": "0.497",
						"yrTerm3Standard.partialUpfront": "0.479"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.156",
						"yrTerm1Standard.noUpfront": "0.168",
						"yrTerm1Standard.partialUpfront": "0.160",
						"yrTerm3Convertible.allUpfront": "0.120",
						"yrTerm3Convertible.noUpfront": "0.132",
						"yrTerm3Convertible.partialUpfront": "0.122",
						"yrTerm3Standard.allUpfront": "0.100",
						"yrTerm3Standard.noUpfront": "0.115",
						"yrTerm3Standard.partialUpfront": "0.106"
					}
				},
				"mswin": {
					"ondemand": "0.45",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.340",
						"yrTerm1Standard.noUpfront": "0.352",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.304",
						"yrTerm3Convertible.noUpfront": "0.316",
						"yrTerm3Convertible.partialUpfront": "0.306",
						"yrTerm3Standard.allUpfront": "0.284",
						"yrTerm3Standard.noUpfront": "0.299",
						"yrTerm3Standard.partialUpfront": "0.290"
					}
				},
				"mswinSQL": {
					"ondemand": "1.577",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.467",
						"yrTerm1Standard.noUpfront": "1.479",
						"yrTerm1Standard.partialUpfront": "1.471",
						"yrTerm3Convertible.allUpfront": "1.431",
						"yrTerm3Convertible.noUpfront": "1.443",
						"yrTerm3Convertible.partialUpfront": "1.433",
						"yrTerm3Standard.allUpfront": "1.411",
						"yrTerm3Standard.noUpfront": "1.426",
						"yrTerm3Standard.partialUpfront": "1.417"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.521",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.411",
						"yrTerm1Standard.noUpfront": "0.423",
						"yrTerm1Standard.partialUpfront": "0.415",
						"yrTerm3Convertible.allUpfront": "0.375",
						"yrTerm3Convertible.noUpfront": "0.387",
						"yrTerm3Convertible.partialUpfront": "0.377",
						"yrTerm3Standard.allUpfront": "0.355",
						"yrTerm3Standard.noUpfront": "0.370",
						"yrTerm3Standard.partialUpfront": "0.361"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.156",
						"yrTerm1Standard.noUpfront": "0.168",
						"yrTerm1Standard.partialUpfront": "0.160",
						"yrTerm3Convertible.allUpfront": "0.120",
						"yrTerm3Convertible.noUpfront": "0.132",
						"yrTerm3Convertible.partialUpfront": "0.122",
						"yrTerm3Standard.allUpfront": "0.100",
						"yrTerm3Standard.noUpfront": "0.115",
						"yrTerm3Standard.partialUpfront": "0.106"
					}
				},
				"mswin": {
					"ondemand": "0.45",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.340",
						"yrTerm1Standard.noUpfront": "0.352",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.304",
						"yrTerm3Convertible.noUpfront": "0.316",
						"yrTerm3Convertible.partialUpfront": "0.306",
						"yrTerm3Standard.allUpfront": "0.284",
						"yrTerm3Standard.noUpfront": "0.299",
						"yrTerm3Standard.partialUpfront": "0.290"
					}
				},
				"mswinSQL": {
					"ondemand": "1.577",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.467",
						"yrTerm1Standard.noUpfront": "1.479",
						"yrTerm1Standard.partialUpfront": "1.471",
						"yrTerm3Convertible.allUpfront": "1.431",
						"yrTerm3Convertible.noUpfront": "1.443",
						"yrTerm3Convertible.partialUpfront": "1.433",
						"yrTerm3Standard.allUpfront": "1.411",
						"yrTerm3Standard.noUpfront": "1.426",
						"yrTerm3Standard.partialUpfront": "1.417"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.521",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.411",
						"yrTerm1Standard.noUpfront": "0.423",
						"yrTerm1Standard.partialUpfront": "0.415",
						"yrTerm3Convertible.allUpfront": "0.375",
						"yrTerm3Convertible.noUpfront": "0.387",
						"yrTerm3Convertible.partialUpfront": "0.377",
						"yrTerm3Standard.allUpfront": "0.355",
						"yrTerm3Standard.noUpfront": "0.370",
						"yrTerm3Standard.partialUpfront": "0.361"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.319",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.188",
						"yrTerm1Standard.noUpfront": "0.202",
						"yrTerm1Standard.partialUpfront": "0.192",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.147",
						"yrTerm3Standard.allUpfront": "0.120",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				},
				"mswin": {
					"ondemand": "0.503",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.372",
						"yrTerm1Standard.noUpfront": "0.386",
						"yrTerm1Standard.partialUpfront": "0.376",
						"yrTerm3Convertible.allUpfront": "0.328",
						"yrTerm3Convertible.noUpfront": "0.343",
						"yrTerm3Convertible.partialUpfront": "0.331",
						"yrTerm3Standard.allUpfront": "0.304",
						"yrTerm3Standard.noUpfront": "0.322",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswinSQL": {
					"ondemand": "1.63",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.499",
						"yrTerm1Standard.noUpfront": "1.513",
						"yrTerm1Standard.partialUpfront": "1.503",
						"yrTerm3Convertible.allUpfront": "1.455",
						"yrTerm3Convertible.noUpfront": "1.470",
						"yrTerm3Convertible.partialUpfront": "1.458",
						"yrTerm3Standard.allUpfront": "1.431",
						"yrTerm3Standard.noUpfront": "1.449",
						"yrTerm3Standard.partialUpfront": "1.439"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.574",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.443",
						"yrTerm1Standard.noUpfront": "0.457",
						"yrTerm1Standard.partialUpfront": "0.447",
						"yrTerm3Convertible.allUpfront": "0.399",
						"yrTerm3Convertible.noUpfront": "0.414",
						"yrTerm3Convertible.partialUpfront": "0.402",
						"yrTerm3Standard.allUpfront": "0.375",
						"yrTerm3Standard.noUpfront": "0.393",
						"yrTerm3Standard.partialUpfront": "0.383"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.296",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.174",
						"yrTerm1Standard.noUpfront": "0.187",
						"yrTerm1Standard.partialUpfront": "0.178",
						"yrTerm3Convertible.allUpfront": "0.133",
						"yrTerm3Convertible.noUpfront": "0.147",
						"yrTerm3Convertible.partialUpfront": "0.136",
						"yrTerm3Standard.allUpfront": "0.111",
						"yrTerm3Standard.noUpfront": "0.127",
						"yrTerm3Standard.partialUpfront": "0.119"
					}
				},
				"mswin": {
					"ondemand": "0.48",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.358",
						"yrTerm1Standard.noUpfront": "0.371",
						"yrTerm1Standard.partialUpfront": "0.362",
						"yrTerm3Convertible.allUpfront": "0.317",
						"yrTerm3Convertible.noUpfront": "0.331",
						"yrTerm3Convertible.partialUpfront": "0.320",
						"yrTerm3Standard.allUpfront": "0.295",
						"yrTerm3Standard.noUpfront": "0.311",
						"yrTerm3Standard.partialUpfront": "0.303"
					}
				},
				"mswinSQL": {
					"ondemand": "1.607",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.485",
						"yrTerm1Standard.noUpfront": "1.498",
						"yrTerm1Standard.partialUpfront": "1.489",
						"yrTerm3Convertible.allUpfront": "1.444",
						"yrTerm3Convertible.noUpfront": "1.458",
						"yrTerm3Convertible.partialUpfront": "1.447",
						"yrTerm3Standard.allUpfront": "1.422",
						"yrTerm3Standard.noUpfront": "1.438",
						"yrTerm3Standard.partialUpfront": "1.430"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.551",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.429",
						"yrTerm1Standard.noUpfront": "0.442",
						"yrTerm1Standard.partialUpfront": "0.433",
						"yrTerm3Convertible.allUpfront": "0.388",
						"yrTerm3Convertible.noUpfront": "0.402",
						"yrTerm3Convertible.partialUpfront": "0.391",
						"yrTerm3Standard.allUpfront": "0.366",
						"yrTerm3Standard.noUpfront": "0.382",
						"yrTerm3Standard.partialUpfront": "0.374"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.156",
						"yrTerm1Standard.noUpfront": "0.168",
						"yrTerm1Standard.partialUpfront": "0.160",
						"yrTerm3Convertible.allUpfront": "0.120",
						"yrTerm3Convertible.noUpfront": "0.132",
						"yrTerm3Convertible.partialUpfront": "0.122",
						"yrTerm3Standard.allUpfront": "0.100",
						"yrTerm3Standard.noUpfront": "0.115",
						"yrTerm3Standard.partialUpfront": "0.106"
					}
				},
				"mswin": {
					"ondemand": "0.45",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.340",
						"yrTerm1Standard.noUpfront": "0.352",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.304",
						"yrTerm3Convertible.noUpfront": "0.316",
						"yrTerm3Convertible.partialUpfront": "0.306",
						"yrTerm3Standard.allUpfront": "0.284",
						"yrTerm3Standard.noUpfront": "0.299",
						"yrTerm3Standard.partialUpfront": "0.290"
					}
				},
				"mswinSQL": {
					"ondemand": "1.577",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.467",
						"yrTerm1Standard.noUpfront": "1.479",
						"yrTerm1Standard.partialUpfront": "1.471",
						"yrTerm3Convertible.allUpfront": "1.431",
						"yrTerm3Convertible.noUpfront": "1.443",
						"yrTerm3Convertible.partialUpfront": "1.433",
						"yrTerm3Standard.allUpfront": "1.411",
						"yrTerm3Standard.noUpfront": "1.426",
						"yrTerm3Standard.partialUpfront": "1.417"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.521",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.411",
						"yrTerm1Standard.noUpfront": "0.423",
						"yrTerm1Standard.partialUpfront": "0.415",
						"yrTerm3Convertible.allUpfront": "0.375",
						"yrTerm3Convertible.noUpfront": "0.387",
						"yrTerm3Convertible.partialUpfront": "0.377",
						"yrTerm3Standard.allUpfront": "0.355",
						"yrTerm3Standard.noUpfront": "0.370",
						"yrTerm3Standard.partialUpfront": "0.361"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": true
	},
	{
		"ECU": 27,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 12000,
		"ebs_max_bandwidth": 1600,
		"ebs_optimized": true,
		"ebs_throughput": 200,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r4.2xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 61,
		"network_performance": "Up to 10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "R4 High-Memory Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.64",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.376",
						"yrTerm1Standard.noUpfront": "0.403",
						"yrTerm1Standard.partialUpfront": "0.384",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.241",
						"yrTerm3Standard.noUpfront": "0.277",
						"yrTerm3Standard.partialUpfront": "0.256"
					}
				},
				"mswin": {
					"ondemand": "1.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.744",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.752",
						"yrTerm3Convertible.allUpfront": "0.657",
						"yrTerm3Convertible.noUpfront": "0.686",
						"yrTerm3Convertible.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.609",
						"yrTerm3Standard.noUpfront": "0.645",
						"yrTerm3Standard.partialUpfront": "0.624"
					}
				},
				"mswinSQL": {
					"ondemand": "3.261",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.997",
						"yrTerm1Standard.noUpfront": "3.024",
						"yrTerm1Standard.partialUpfront": "3.005",
						"yrTerm3Convertible.allUpfront": "2.910",
						"yrTerm3Convertible.noUpfront": "2.939",
						"yrTerm3Convertible.partialUpfront": "2.915",
						"yrTerm3Standard.allUpfront": "2.862",
						"yrTerm3Standard.noUpfront": "2.898",
						"yrTerm3Standard.partialUpfront": "2.877"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.149",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.885",
						"yrTerm1Standard.noUpfront": "0.912",
						"yrTerm1Standard.partialUpfront": "0.893",
						"yrTerm3Convertible.allUpfront": "0.798",
						"yrTerm3Convertible.noUpfront": "0.827",
						"yrTerm3Convertible.partialUpfront": "0.803",
						"yrTerm3Standard.allUpfront": "0.750",
						"yrTerm3Standard.noUpfront": "0.786",
						"yrTerm3Standard.partialUpfront": "0.765"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.64",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.376",
						"yrTerm1Standard.noUpfront": "0.403",
						"yrTerm1Standard.partialUpfront": "0.384",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.241",
						"yrTerm3Standard.noUpfront": "0.277",
						"yrTerm3Standard.partialUpfront": "0.256"
					}
				},
				"mswin": {
					"ondemand": "1.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.744",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.752",
						"yrTerm3Convertible.allUpfront": "0.657",
						"yrTerm3Convertible.noUpfront": "0.686",
						"yrTerm3Convertible.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.609",
						"yrTerm3Standard.noUpfront": "0.645",
						"yrTerm3Standard.partialUpfront": "0.624"
					}
				},
				"mswinSQL": {
					"ondemand": "3.261",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.997",
						"yrTerm1Standard.noUpfront": "3.024",
						"yrTerm1Standard.partialUpfront": "3.005",
						"yrTerm3Convertible.allUpfront": "2.910",
						"yrTerm3Convertible.noUpfront": "2.939",
						"yrTerm3Convertible.partialUpfront": "2.915",
						"yrTerm3Standard.allUpfront": "2.862",
						"yrTerm3Standard.noUpfront": "2.898",
						"yrTerm3Standard.partialUpfront": "2.877"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.149",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.885",
						"yrTerm1Standard.noUpfront": "0.912",
						"yrTerm1Standard.partialUpfront": "0.893",
						"yrTerm3Convertible.allUpfront": "0.798",
						"yrTerm3Convertible.noUpfront": "0.827",
						"yrTerm3Convertible.partialUpfront": "0.803",
						"yrTerm3Standard.allUpfront": "0.750",
						"yrTerm3Standard.noUpfront": "0.786",
						"yrTerm3Standard.partialUpfront": "0.765"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.608",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.358",
						"yrTerm1Standard.noUpfront": "0.382",
						"yrTerm1Standard.partialUpfront": "0.365",
						"yrTerm3Convertible.allUpfront": "0.275",
						"yrTerm3Convertible.noUpfront": "0.303",
						"yrTerm3Convertible.partialUpfront": "0.281",
						"yrTerm3Standard.allUpfront": "0.229",
						"yrTerm3Standard.noUpfront": "0.264",
						"yrTerm3Standard.partialUpfront": "0.243"
					}
				},
				"mswin": {
					"ondemand": "0.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.726",
						"yrTerm1Standard.noUpfront": "0.750",
						"yrTerm1Standard.partialUpfront": "0.733",
						"yrTerm3Convertible.allUpfront": "0.643",
						"yrTerm3Convertible.noUpfront": "0.671",
						"yrTerm3Convertible.partialUpfront": "0.649",
						"yrTerm3Standard.allUpfront": "0.597",
						"yrTerm3Standard.noUpfront": "0.632",
						"yrTerm3Standard.partialUpfront": "0.611"
					}
				},
				"mswinSQL": {
					"ondemand": "3.229",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.979",
						"yrTerm1Standard.noUpfront": "3.003",
						"yrTerm1Standard.partialUpfront": "2.986",
						"yrTerm3Convertible.allUpfront": "2.896",
						"yrTerm3Convertible.noUpfront": "2.924",
						"yrTerm3Convertible.partialUpfront": "2.902",
						"yrTerm3Standard.allUpfront": "2.850",
						"yrTerm3Standard.noUpfront": "2.885",
						"yrTerm3Standard.partialUpfront": "2.864"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.117",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.867",
						"yrTerm1Standard.noUpfront": "0.891",
						"yrTerm1Standard.partialUpfront": "0.874",
						"yrTerm3Convertible.allUpfront": "0.784",
						"yrTerm3Convertible.noUpfront": "0.812",
						"yrTerm3Convertible.partialUpfront": "0.790",
						"yrTerm3Standard.allUpfront": "0.738",
						"yrTerm3Standard.noUpfront": "0.773",
						"yrTerm3Standard.partialUpfront": "0.752"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.64",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.376",
						"yrTerm1Standard.noUpfront": "0.403",
						"yrTerm1Standard.partialUpfront": "0.384",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.241",
						"yrTerm3Standard.noUpfront": "0.277",
						"yrTerm3Standard.partialUpfront": "0.256"
					}
				},
				"mswin": {
					"ondemand": "1.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.744",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.752",
						"yrTerm3Convertible.allUpfront": "0.657",
						"yrTerm3Convertible.noUpfront": "0.686",
						"yrTerm3Convertible.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.609",
						"yrTerm3Standard.noUpfront": "0.645",
						"yrTerm3Standard.partialUpfront": "0.624"
					}
				},
				"mswinSQL": {
					"ondemand": "3.261",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.997",
						"yrTerm1Standard.noUpfront": "3.024",
						"yrTerm1Standard.partialUpfront": "3.005",
						"yrTerm3Convertible.allUpfront": "2.910",
						"yrTerm3Convertible.noUpfront": "2.939",
						"yrTerm3Convertible.partialUpfront": "2.915",
						"yrTerm3Standard.allUpfront": "2.862",
						"yrTerm3Standard.noUpfront": "2.898",
						"yrTerm3Standard.partialUpfront": "2.877"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.149",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.885",
						"yrTerm1Standard.noUpfront": "0.912",
						"yrTerm1Standard.partialUpfront": "0.893",
						"yrTerm3Convertible.allUpfront": "0.798",
						"yrTerm3Convertible.noUpfront": "0.827",
						"yrTerm3Convertible.partialUpfront": "0.803",
						"yrTerm3Standard.allUpfront": "0.750",
						"yrTerm3Standard.noUpfront": "0.786",
						"yrTerm3Standard.partialUpfront": "0.765"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.638",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.375",
						"yrTerm1Standard.noUpfront": "0.403",
						"yrTerm1Standard.partialUpfront": "0.383",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.240",
						"yrTerm3Standard.noUpfront": "0.277",
						"yrTerm3Standard.partialUpfront": "0.255"
					}
				},
				"mswin": {
					"ondemand": "1.006",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.743",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.751",
						"yrTerm3Convertible.allUpfront": "0.657",
						"yrTerm3Convertible.noUpfront": "0.686",
						"yrTerm3Convertible.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.608",
						"yrTerm3Standard.noUpfront": "0.645",
						"yrTerm3Standard.partialUpfront": "0.623"
					}
				},
				"mswinSQL": {
					"ondemand": "1.949",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.686",
						"yrTerm1Standard.noUpfront": "1.759",
						"yrTerm1Standard.partialUpfront": "1.694",
						"yrTerm3Convertible.allUpfront": "1.649",
						"yrTerm3Convertible.noUpfront": "1.714",
						"yrTerm3Convertible.partialUpfront": "1.656",
						"yrTerm3Standard.allUpfront": "1.551",
						"yrTerm3Standard.noUpfront": "1.566",
						"yrTerm3Standard.partialUpfront": "1.566"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.893",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.630",
						"yrTerm1Standard.noUpfront": "0.703",
						"yrTerm1Standard.partialUpfront": "0.638",
						"yrTerm3Convertible.allUpfront": "0.593",
						"yrTerm3Convertible.noUpfront": "0.658",
						"yrTerm3Convertible.partialUpfront": "0.600",
						"yrTerm3Standard.allUpfront": "0.495",
						"yrTerm3Standard.noUpfront": "0.786",
						"yrTerm3Standard.partialUpfront": "0.510"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.584",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.343",
						"yrTerm1Standard.noUpfront": "0.370",
						"yrTerm1Standard.partialUpfront": "0.350",
						"yrTerm3Convertible.allUpfront": "0.262",
						"yrTerm3Convertible.noUpfront": "0.288",
						"yrTerm3Convertible.partialUpfront": "0.267",
						"yrTerm3Standard.allUpfront": "0.220",
						"yrTerm3Standard.noUpfront": "0.251",
						"yrTerm3Standard.partialUpfront": "0.234"
					}
				},
				"mswin": {
					"ondemand": "0.952",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.711",
						"yrTerm1Standard.noUpfront": "0.738",
						"yrTerm1Standard.partialUpfront": "0.718",
						"yrTerm3Convertible.allUpfront": "0.630",
						"yrTerm3Convertible.noUpfront": "0.656",
						"yrTerm3Convertible.partialUpfront": "0.635",
						"yrTerm3Standard.allUpfront": "0.588",
						"yrTerm3Standard.noUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.602"
					}
				},
				"mswinSQL": {
					"ondemand": "3.205",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.964",
						"yrTerm1Standard.noUpfront": "2.991",
						"yrTerm1Standard.partialUpfront": "2.971",
						"yrTerm3Convertible.allUpfront": "2.883",
						"yrTerm3Convertible.noUpfront": "2.909",
						"yrTerm3Convertible.partialUpfront": "2.888",
						"yrTerm3Standard.allUpfront": "2.841",
						"yrTerm3Standard.noUpfront": "2.872",
						"yrTerm3Standard.partialUpfront": "2.855"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.093",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.852",
						"yrTerm1Standard.noUpfront": "0.879",
						"yrTerm1Standard.partialUpfront": "0.859",
						"yrTerm3Convertible.allUpfront": "0.771",
						"yrTerm3Convertible.noUpfront": "0.797",
						"yrTerm3Convertible.partialUpfront": "0.776",
						"yrTerm3Standard.allUpfront": "0.729",
						"yrTerm3Standard.noUpfront": "0.760",
						"yrTerm3Standard.partialUpfront": "0.743"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.64",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.376",
						"yrTerm1Standard.noUpfront": "0.403",
						"yrTerm1Standard.partialUpfront": "0.384",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.241",
						"yrTerm3Standard.noUpfront": "0.277",
						"yrTerm3Standard.partialUpfront": "0.256"
					}
				},
				"mswin": {
					"ondemand": "1.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.744",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.752",
						"yrTerm3Convertible.allUpfront": "0.657",
						"yrTerm3Convertible.noUpfront": "0.686",
						"yrTerm3Convertible.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.609",
						"yrTerm3Standard.noUpfront": "0.645",
						"yrTerm3Standard.partialUpfront": "0.624"
					}
				},
				"mswinSQL": {
					"ondemand": "1.951",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.687",
						"yrTerm1Standard.noUpfront": "1.760",
						"yrTerm1Standard.partialUpfront": "1.695",
						"yrTerm3Convertible.allUpfront": "1.650",
						"yrTerm3Convertible.noUpfront": "1.715",
						"yrTerm3Convertible.partialUpfront": "1.657",
						"yrTerm3Standard.allUpfront": "1.552",
						"yrTerm3Standard.noUpfront": "1.567",
						"yrTerm3Standard.partialUpfront": "1.567"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.895",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.631",
						"yrTerm1Standard.noUpfront": "0.704",
						"yrTerm1Standard.partialUpfront": "0.639",
						"yrTerm3Convertible.allUpfront": "0.594",
						"yrTerm3Convertible.noUpfront": "0.659",
						"yrTerm3Convertible.partialUpfront": "0.601",
						"yrTerm3Standard.allUpfront": "0.496",
						"yrTerm3Standard.noUpfront": "0.786",
						"yrTerm3Standard.partialUpfront": "0.511"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.593",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.349",
						"yrTerm1Standard.noUpfront": "0.374",
						"yrTerm1Standard.partialUpfront": "0.356",
						"yrTerm3Convertible.allUpfront": "0.266",
						"yrTerm3Convertible.noUpfront": "0.293",
						"yrTerm3Convertible.partialUpfront": "0.271",
						"yrTerm3Standard.allUpfront": "0.223",
						"yrTerm3Standard.noUpfront": "0.255",
						"yrTerm3Standard.partialUpfront": "0.237"
					}
				},
				"mswin": {
					"ondemand": "0.961",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.717",
						"yrTerm1Standard.noUpfront": "0.742",
						"yrTerm1Standard.partialUpfront": "0.724",
						"yrTerm3Convertible.allUpfront": "0.634",
						"yrTerm3Convertible.noUpfront": "0.661",
						"yrTerm3Convertible.partialUpfront": "0.639",
						"yrTerm3Standard.allUpfront": "0.591",
						"yrTerm3Standard.noUpfront": "0.623",
						"yrTerm3Standard.partialUpfront": "0.605"
					}
				},
				"mswinSQL": {
					"ondemand": "1.904",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.660",
						"yrTerm1Standard.noUpfront": "1.727",
						"yrTerm1Standard.partialUpfront": "1.667",
						"yrTerm3Convertible.allUpfront": "1.625",
						"yrTerm3Convertible.noUpfront": "1.686",
						"yrTerm3Convertible.partialUpfront": "1.631",
						"yrTerm3Standard.allUpfront": "1.534",
						"yrTerm3Standard.noUpfront": "1.548",
						"yrTerm3Standard.partialUpfront": "1.548"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.848",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.604",
						"yrTerm1Standard.noUpfront": "0.671",
						"yrTerm1Standard.partialUpfront": "0.611",
						"yrTerm3Convertible.allUpfront": "0.569",
						"yrTerm3Convertible.noUpfront": "0.630",
						"yrTerm3Convertible.partialUpfront": "0.575",
						"yrTerm3Standard.allUpfront": "0.478",
						"yrTerm3Standard.noUpfront": "0.764",
						"yrTerm3Standard.partialUpfront": "0.492"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.367",
						"yrTerm1Standard.noUpfront": "0.395",
						"yrTerm1Standard.partialUpfront": "0.374",
						"yrTerm3Convertible.allUpfront": "0.280",
						"yrTerm3Convertible.noUpfront": "0.308",
						"yrTerm3Convertible.partialUpfront": "0.285",
						"yrTerm3Standard.allUpfront": "0.235",
						"yrTerm3Standard.noUpfront": "0.268",
						"yrTerm3Standard.partialUpfront": "0.250"
					}
				},
				"mswin": {
					"ondemand": "0.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.735",
						"yrTerm1Standard.noUpfront": "0.763",
						"yrTerm1Standard.partialUpfront": "0.742",
						"yrTerm3Convertible.allUpfront": "0.648",
						"yrTerm3Convertible.noUpfront": "0.676",
						"yrTerm3Convertible.partialUpfront": "0.653",
						"yrTerm3Standard.allUpfront": "0.603",
						"yrTerm3Standard.noUpfront": "0.636",
						"yrTerm3Standard.partialUpfront": "0.618"
					}
				},
				"mswinSQL": {
					"ondemand": "3.245",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.988",
						"yrTerm1Standard.noUpfront": "3.016",
						"yrTerm1Standard.partialUpfront": "2.995",
						"yrTerm3Convertible.allUpfront": "2.901",
						"yrTerm3Convertible.noUpfront": "2.929",
						"yrTerm3Convertible.partialUpfront": "2.906",
						"yrTerm3Standard.allUpfront": "2.856",
						"yrTerm3Standard.noUpfront": "2.889",
						"yrTerm3Standard.partialUpfront": "2.871"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.133",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.876",
						"yrTerm1Standard.noUpfront": "0.904",
						"yrTerm1Standard.partialUpfront": "0.883",
						"yrTerm3Convertible.allUpfront": "0.789",
						"yrTerm3Convertible.noUpfront": "0.817",
						"yrTerm3Convertible.partialUpfront": "0.794",
						"yrTerm3Standard.allUpfront": "0.744",
						"yrTerm3Standard.noUpfront": "0.777",
						"yrTerm3Standard.partialUpfront": "0.759"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "1.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.659",
						"yrTerm1Standard.noUpfront": "0.706",
						"yrTerm1Standard.partialUpfront": "0.672",
						"yrTerm3Convertible.allUpfront": "0.505",
						"yrTerm3Convertible.noUpfront": "0.556",
						"yrTerm3Convertible.partialUpfront": "0.515",
						"yrTerm3Standard.allUpfront": "0.421",
						"yrTerm3Standard.noUpfront": "0.484",
						"yrTerm3Standard.partialUpfront": "0.448"
					}
				},
				"mswin": {
					"ondemand": "1.488",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.027",
						"yrTerm1Standard.noUpfront": "1.074",
						"yrTerm1Standard.partialUpfront": "1.040",
						"yrTerm3Convertible.allUpfront": "0.873",
						"yrTerm3Convertible.noUpfront": "0.924",
						"yrTerm3Convertible.partialUpfront": "0.883",
						"yrTerm3Standard.allUpfront": "0.789",
						"yrTerm3Standard.noUpfront": "0.852",
						"yrTerm3Standard.partialUpfront": "0.816"
					}
				},
				"mswinSQL": {
					"ondemand": "3.741",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.280",
						"yrTerm1Standard.noUpfront": "3.327",
						"yrTerm1Standard.partialUpfront": "3.293",
						"yrTerm3Convertible.allUpfront": "3.126",
						"yrTerm3Convertible.noUpfront": "3.177",
						"yrTerm3Convertible.partialUpfront": "3.136",
						"yrTerm3Standard.allUpfront": "3.042",
						"yrTerm3Standard.noUpfront": "3.105",
						"yrTerm3Standard.partialUpfront": "3.069"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.629",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.168",
						"yrTerm1Standard.noUpfront": "1.215",
						"yrTerm1Standard.partialUpfront": "1.181",
						"yrTerm3Convertible.allUpfront": "1.014",
						"yrTerm3Convertible.noUpfront": "1.065",
						"yrTerm3Convertible.partialUpfront": "1.024",
						"yrTerm3Standard.allUpfront": "0.930",
						"yrTerm3Standard.noUpfront": "0.993",
						"yrTerm3Standard.partialUpfront": "0.957"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.313",
						"yrTerm1Standard.noUpfront": "0.336",
						"yrTerm1Standard.partialUpfront": "0.319",
						"yrTerm3Convertible.allUpfront": "0.239",
						"yrTerm3Convertible.noUpfront": "0.263",
						"yrTerm3Convertible.partialUpfront": "0.244",
						"yrTerm3Standard.allUpfront": "0.200",
						"yrTerm3Standard.noUpfront": "0.229",
						"yrTerm3Standard.partialUpfront": "0.213"
					}
				},
				"mswin": {
					"ondemand": "0.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.681",
						"yrTerm1Standard.noUpfront": "0.704",
						"yrTerm1Standard.partialUpfront": "0.687",
						"yrTerm3Convertible.allUpfront": "0.607",
						"yrTerm3Convertible.noUpfront": "0.631",
						"yrTerm3Convertible.partialUpfront": "0.612",
						"yrTerm3Standard.allUpfront": "0.568",
						"yrTerm3Standard.noUpfront": "0.597",
						"yrTerm3Standard.partialUpfront": "0.581"
					}
				},
				"mswinSQL": {
					"ondemand": "1.843",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.624",
						"yrTerm1Standard.noUpfront": "1.684",
						"yrTerm1Standard.partialUpfront": "1.630",
						"yrTerm3Convertible.allUpfront": "1.593",
						"yrTerm3Convertible.noUpfront": "1.647",
						"yrTerm3Convertible.partialUpfront": "1.598",
						"yrTerm3Standard.allUpfront": "1.511",
						"yrTerm3Standard.noUpfront": "1.524",
						"yrTerm3Standard.partialUpfront": "1.524"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.787",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.568",
						"yrTerm1Standard.noUpfront": "0.628",
						"yrTerm1Standard.partialUpfront": "0.574",
						"yrTerm3Convertible.allUpfront": "0.537",
						"yrTerm3Convertible.noUpfront": "0.591",
						"yrTerm3Convertible.partialUpfront": "0.542",
						"yrTerm3Standard.allUpfront": "0.455",
						"yrTerm3Standard.noUpfront": "0.738",
						"yrTerm3Standard.partialUpfront": "0.468"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.313",
						"yrTerm1Standard.noUpfront": "0.336",
						"yrTerm1Standard.partialUpfront": "0.319",
						"yrTerm3Convertible.allUpfront": "0.239",
						"yrTerm3Convertible.noUpfront": "0.263",
						"yrTerm3Convertible.partialUpfront": "0.244",
						"yrTerm3Standard.allUpfront": "0.200",
						"yrTerm3Standard.noUpfront": "0.229",
						"yrTerm3Standard.partialUpfront": "0.213"
					}
				},
				"mswin": {
					"ondemand": "0.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.681",
						"yrTerm1Standard.noUpfront": "0.704",
						"yrTerm1Standard.partialUpfront": "0.687",
						"yrTerm3Convertible.allUpfront": "0.607",
						"yrTerm3Convertible.noUpfront": "0.631",
						"yrTerm3Convertible.partialUpfront": "0.612",
						"yrTerm3Standard.allUpfront": "0.568",
						"yrTerm3Standard.noUpfront": "0.597",
						"yrTerm3Standard.partialUpfront": "0.581"
					}
				},
				"mswinSQL": {
					"ondemand": "1.843",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.624",
						"yrTerm1Standard.noUpfront": "1.684",
						"yrTerm1Standard.partialUpfront": "1.630",
						"yrTerm3Convertible.allUpfront": "1.593",
						"yrTerm3Convertible.noUpfront": "1.647",
						"yrTerm3Convertible.partialUpfront": "1.598",
						"yrTerm3Standard.allUpfront": "1.511",
						"yrTerm3Standard.noUpfront": "1.524",
						"yrTerm3Standard.partialUpfront": "1.524"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.787",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.568",
						"yrTerm1Standard.noUpfront": "0.628",
						"yrTerm1Standard.partialUpfront": "0.574",
						"yrTerm3Convertible.allUpfront": "0.537",
						"yrTerm3Convertible.noUpfront": "0.591",
						"yrTerm3Convertible.partialUpfront": "0.542",
						"yrTerm3Standard.allUpfront": "0.455",
						"yrTerm3Standard.noUpfront": "0.738",
						"yrTerm3Standard.partialUpfront": "0.468"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.638",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.375",
						"yrTerm1Standard.noUpfront": "0.403",
						"yrTerm1Standard.partialUpfront": "0.383",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.240",
						"yrTerm3Standard.noUpfront": "0.277",
						"yrTerm3Standard.partialUpfront": "0.255"
					}
				},
				"mswin": {
					"ondemand": "1.006",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.743",
						"yrTerm1Standard.noUpfront": "0.771",
						"yrTerm1Standard.partialUpfront": "0.751",
						"yrTerm3Convertible.allUpfront": "0.657",
						"yrTerm3Convertible.noUpfront": "0.686",
						"yrTerm3Convertible.partialUpfront": "0.662",
						"yrTerm3Standard.allUpfront": "0.608",
						"yrTerm3Standard.noUpfront": "0.645",
						"yrTerm3Standard.partialUpfront": "0.623"
					}
				},
				"mswinSQL": {
					"ondemand": "1.949",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.686",
						"yrTerm1Standard.noUpfront": "1.759",
						"yrTerm1Standard.partialUpfront": "1.694",
						"yrTerm3Convertible.allUpfront": "1.649",
						"yrTerm3Convertible.noUpfront": "1.714",
						"yrTerm3Convertible.partialUpfront": "1.656",
						"yrTerm3Standard.allUpfront": "1.551",
						"yrTerm3Standard.noUpfront": "1.566",
						"yrTerm3Standard.partialUpfront": "1.566"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.893",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.630",
						"yrTerm1Standard.noUpfront": "0.703",
						"yrTerm1Standard.partialUpfront": "0.638",
						"yrTerm3Convertible.allUpfront": "0.593",
						"yrTerm3Convertible.noUpfront": "0.658",
						"yrTerm3Convertible.partialUpfront": "0.600",
						"yrTerm3Standard.allUpfront": "0.495",
						"yrTerm3Standard.noUpfront": "0.786",
						"yrTerm3Standard.partialUpfront": "0.510"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.593",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.349",
						"yrTerm1Standard.noUpfront": "0.374",
						"yrTerm1Standard.partialUpfront": "0.356",
						"yrTerm3Convertible.allUpfront": "0.266",
						"yrTerm3Convertible.noUpfront": "0.293",
						"yrTerm3Convertible.partialUpfront": "0.271",
						"yrTerm3Standard.allUpfront": "0.223",
						"yrTerm3Standard.noUpfront": "0.255",
						"yrTerm3Standard.partialUpfront": "0.237"
					}
				},
				"mswin": {
					"ondemand": "0.961",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.717",
						"yrTerm1Standard.noUpfront": "0.742",
						"yrTerm1Standard.partialUpfront": "0.724",
						"yrTerm3Convertible.allUpfront": "0.634",
						"yrTerm3Convertible.noUpfront": "0.661",
						"yrTerm3Convertible.partialUpfront": "0.639",
						"yrTerm3Standard.allUpfront": "0.591",
						"yrTerm3Standard.noUpfront": "0.623",
						"yrTerm3Standard.partialUpfront": "0.605"
					}
				},
				"mswinSQL": {
					"ondemand": "1.904",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.660",
						"yrTerm1Standard.noUpfront": "1.727",
						"yrTerm1Standard.partialUpfront": "1.667",
						"yrTerm3Convertible.allUpfront": "1.625",
						"yrTerm3Convertible.noUpfront": "1.686",
						"yrTerm3Convertible.partialUpfront": "1.631",
						"yrTerm3Standard.allUpfront": "1.534",
						"yrTerm3Standard.noUpfront": "1.548",
						"yrTerm3Standard.partialUpfront": "1.548"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.848",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.604",
						"yrTerm1Standard.noUpfront": "0.671",
						"yrTerm1Standard.partialUpfront": "0.611",
						"yrTerm3Convertible.allUpfront": "0.569",
						"yrTerm3Convertible.noUpfront": "0.630",
						"yrTerm3Convertible.partialUpfront": "0.575",
						"yrTerm3Standard.allUpfront": "0.478",
						"yrTerm3Standard.noUpfront": "0.764",
						"yrTerm3Standard.partialUpfront": "0.492"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.313",
						"yrTerm1Standard.noUpfront": "0.336",
						"yrTerm1Standard.partialUpfront": "0.319",
						"yrTerm3Convertible.allUpfront": "0.239",
						"yrTerm3Convertible.noUpfront": "0.263",
						"yrTerm3Convertible.partialUpfront": "0.244",
						"yrTerm3Standard.allUpfront": "0.200",
						"yrTerm3Standard.noUpfront": "0.229",
						"yrTerm3Standard.partialUpfront": "0.213"
					}
				},
				"mswin": {
					"ondemand": "0.9",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.681",
						"yrTerm1Standard.noUpfront": "0.704",
						"yrTerm1Standard.partialUpfront": "0.687",
						"yrTerm3Convertible.allUpfront": "0.607",
						"yrTerm3Convertible.noUpfront": "0.631",
						"yrTerm3Convertible.partialUpfront": "0.612",
						"yrTerm3Standard.allUpfront": "0.568",
						"yrTerm3Standard.noUpfront": "0.597",
						"yrTerm3Standard.partialUpfront": "0.581"
					}
				},
				"mswinSQL": {
					"ondemand": "1.843",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.624",
						"yrTerm1Standard.noUpfront": "1.684",
						"yrTerm1Standard.partialUpfront": "1.630",
						"yrTerm3Convertible.allUpfront": "1.593",
						"yrTerm3Convertible.noUpfront": "1.647",
						"yrTerm3Convertible.partialUpfront": "1.598",
						"yrTerm3Standard.allUpfront": "1.511",
						"yrTerm3Standard.noUpfront": "1.524",
						"yrTerm3Standard.partialUpfront": "1.524"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.787",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.568",
						"yrTerm1Standard.noUpfront": "0.628",
						"yrTerm1Standard.partialUpfront": "0.574",
						"yrTerm3Convertible.allUpfront": "0.537",
						"yrTerm3Convertible.noUpfront": "0.591",
						"yrTerm3Convertible.partialUpfront": "0.542",
						"yrTerm3Standard.allUpfront": "0.455",
						"yrTerm3Standard.noUpfront": "0.738",
						"yrTerm3Standard.partialUpfront": "0.468"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": true
	},
	{
		"ECU": 53,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 16000,
		"ebs_max_bandwidth": 3000,
		"ebs_optimized": true,
		"ebs_throughput": 375,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r4.4xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 122,
		"network_performance": "Up to 10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "R4 High-Memory Quadruple Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "1.28",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.753",
						"yrTerm1Standard.noUpfront": "0.806",
						"yrTerm1Standard.partialUpfront": "0.768",
						"yrTerm3Convertible.allUpfront": "0.577",
						"yrTerm3Convertible.noUpfront": "0.636",
						"yrTerm3Convertible.partialUpfront": "0.589",
						"yrTerm3Standard.allUpfront": "0.481",
						"yrTerm3Standard.noUpfront": "0.553",
						"yrTerm3Standard.partialUpfront": "0.512"
					}
				},
				"mswin": {
					"ondemand": "2.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.489",
						"yrTerm1Standard.noUpfront": "1.542",
						"yrTerm1Standard.partialUpfront": "1.504",
						"yrTerm3Convertible.allUpfront": "1.313",
						"yrTerm3Convertible.noUpfront": "1.372",
						"yrTerm3Convertible.partialUpfront": "1.325",
						"yrTerm3Standard.allUpfront": "1.217",
						"yrTerm3Standard.noUpfront": "1.289",
						"yrTerm3Standard.partialUpfront": "1.248"
					}
				},
				"mswinSQL": {
					"ondemand": "6.522",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.995",
						"yrTerm1Standard.noUpfront": "6.048",
						"yrTerm1Standard.partialUpfront": "6.010",
						"yrTerm3Convertible.allUpfront": "5.819",
						"yrTerm3Convertible.noUpfront": "5.878",
						"yrTerm3Convertible.partialUpfront": "5.831",
						"yrTerm3Standard.allUpfront": "5.723",
						"yrTerm3Standard.noUpfront": "5.795",
						"yrTerm3Standard.partialUpfront": "5.754"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.298",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.771",
						"yrTerm1Standard.noUpfront": "1.824",
						"yrTerm1Standard.partialUpfront": "1.786",
						"yrTerm3Convertible.allUpfront": "1.595",
						"yrTerm3Convertible.noUpfront": "1.654",
						"yrTerm3Convertible.partialUpfront": "1.607",
						"yrTerm3Standard.allUpfront": "1.499",
						"yrTerm3Standard.noUpfront": "1.571",
						"yrTerm3Standard.partialUpfront": "1.530"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "1.28",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.753",
						"yrTerm1Standard.noUpfront": "0.806",
						"yrTerm1Standard.partialUpfront": "0.768",
						"yrTerm3Convertible.allUpfront": "0.577",
						"yrTerm3Convertible.noUpfront": "0.636",
						"yrTerm3Convertible.partialUpfront": "0.589",
						"yrTerm3Standard.allUpfront": "0.481",
						"yrTerm3Standard.noUpfront": "0.553",
						"yrTerm3Standard.partialUpfront": "0.512"
					}
				},
				"mswin": {
					"ondemand": "2.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.489",
						"yrTerm1Standard.noUpfront": "1.542",
						"yrTerm1Standard.partialUpfront": "1.504",
						"yrTerm3Convertible.allUpfront": "1.313",
						"yrTerm3Convertible.noUpfront": "1.372",
						"yrTerm3Convertible.partialUpfront": "1.325",
						"yrTerm3Standard.allUpfront": "1.217",
						"yrTerm3Standard.noUpfront": "1.289",
						"yrTerm3Standard.partialUpfront": "1.248"
					}
				},
				"mswinSQL": {
					"ondemand": "6.522",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.995",
						"yrTerm1Standard.noUpfront": "6.048",
						"yrTerm1Standard.partialUpfront": "6.010",
						"yrTerm3Convertible.allUpfront": "5.819",
						"yrTerm3Convertible.noUpfront": "5.878",
						"yrTerm3Convertible.partialUpfront": "5.831",
						"yrTerm3Standard.allUpfront": "5.723",
						"yrTerm3Standard.noUpfront": "5.795",
						"yrTerm3Standard.partialUpfront": "5.754"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.298",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.771",
						"yrTerm1Standard.noUpfront": "1.824",
						"yrTerm1Standard.partialUpfront": "1.786",
						"yrTerm3Convertible.allUpfront": "1.595",
						"yrTerm3Convertible.noUpfront": "1.654",
						"yrTerm3Convertible.partialUpfront": "1.607",
						"yrTerm3Standard.allUpfront": "1.499",
						"yrTerm3Standard.noUpfront": "1.571",
						"yrTerm3Standard.partialUpfront": "1.530"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "1.216",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.715",
						"yrTerm1Standard.noUpfront": "0.764",
						"yrTerm1Standard.partialUpfront": "0.730",
						"yrTerm3Convertible.allUpfront": "0.550",
						"yrTerm3Convertible.noUpfront": "0.606",
						"yrTerm3Convertible.partialUpfront": "0.561",
						"yrTerm3Standard.allUpfront": "0.457",
						"yrTerm3Standard.noUpfront": "0.527",
						"yrTerm3Standard.partialUpfront": "0.486"
					}
				},
				"mswin": {
					"ondemand": "1.952",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.451",
						"yrTerm1Standard.noUpfront": "1.500",
						"yrTerm1Standard.partialUpfront": "1.466",
						"yrTerm3Convertible.allUpfront": "1.286",
						"yrTerm3Convertible.noUpfront": "1.342",
						"yrTerm3Convertible.partialUpfront": "1.297",
						"yrTerm3Standard.allUpfront": "1.193",
						"yrTerm3Standard.noUpfront": "1.263",
						"yrTerm3Standard.partialUpfront": "1.222"
					}
				},
				"mswinSQL": {
					"ondemand": "6.458",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.957",
						"yrTerm1Standard.noUpfront": "6.006",
						"yrTerm1Standard.partialUpfront": "5.972",
						"yrTerm3Convertible.allUpfront": "5.792",
						"yrTerm3Convertible.noUpfront": "5.848",
						"yrTerm3Convertible.partialUpfront": "5.803",
						"yrTerm3Standard.allUpfront": "5.699",
						"yrTerm3Standard.noUpfront": "5.769",
						"yrTerm3Standard.partialUpfront": "5.728"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.234",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.733",
						"yrTerm1Standard.noUpfront": "1.782",
						"yrTerm1Standard.partialUpfront": "1.748",
						"yrTerm3Convertible.allUpfront": "1.568",
						"yrTerm3Convertible.noUpfront": "1.624",
						"yrTerm3Convertible.partialUpfront": "1.579",
						"yrTerm3Standard.allUpfront": "1.475",
						"yrTerm3Standard.noUpfront": "1.545",
						"yrTerm3Standard.partialUpfront": "1.504"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "1.28",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.753",
						"yrTerm1Standard.noUpfront": "0.806",
						"yrTerm1Standard.partialUpfront": "0.768",
						"yrTerm3Convertible.allUpfront": "0.577",
						"yrTerm3Convertible.noUpfront": "0.636",
						"yrTerm3Convertible.partialUpfront": "0.589",
						"yrTerm3Standard.allUpfront": "0.481",
						"yrTerm3Standard.noUpfront": "0.553",
						"yrTerm3Standard.partialUpfront": "0.512"
					}
				},
				"mswin": {
					"ondemand": "2.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.489",
						"yrTerm1Standard.noUpfront": "1.542",
						"yrTerm1Standard.partialUpfront": "1.504",
						"yrTerm3Convertible.allUpfront": "1.313",
						"yrTerm3Convertible.noUpfront": "1.372",
						"yrTerm3Convertible.partialUpfront": "1.325",
						"yrTerm3Standard.allUpfront": "1.217",
						"yrTerm3Standard.noUpfront": "1.289",
						"yrTerm3Standard.partialUpfront": "1.248"
					}
				},
				"mswinSQL": {
					"ondemand": "6.522",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.995",
						"yrTerm1Standard.noUpfront": "6.048",
						"yrTerm1Standard.partialUpfront": "6.010",
						"yrTerm3Convertible.allUpfront": "5.819",
						"yrTerm3Convertible.noUpfront": "5.878",
						"yrTerm3Convertible.partialUpfront": "5.831",
						"yrTerm3Standard.allUpfront": "5.723",
						"yrTerm3Standard.noUpfront": "5.795",
						"yrTerm3Standard.partialUpfront": "5.754"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.298",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.771",
						"yrTerm1Standard.noUpfront": "1.824",
						"yrTerm1Standard.partialUpfront": "1.786",
						"yrTerm3Convertible.allUpfront": "1.595",
						"yrTerm3Convertible.noUpfront": "1.654",
						"yrTerm3Convertible.partialUpfront": "1.607",
						"yrTerm3Standard.allUpfront": "1.499",
						"yrTerm3Standard.noUpfront": "1.571",
						"yrTerm3Standard.partialUpfront": "1.530"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "1.277",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.751",
						"yrTerm1Standard.noUpfront": "0.806",
						"yrTerm1Standard.partialUpfront": "0.766",
						"yrTerm3Convertible.allUpfront": "0.577",
						"yrTerm3Convertible.noUpfront": "0.636",
						"yrTerm3Convertible.partialUpfront": "0.589",
						"yrTerm3Standard.allUpfront": "0.480",
						"yrTerm3Standard.noUpfront": "0.553",
						"yrTerm3Standard.partialUpfront": "0.511"
					}
				},
				"mswin": {
					"ondemand": "2.013",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.487",
						"yrTerm1Standard.noUpfront": "1.542",
						"yrTerm1Standard.partialUpfront": "1.502",
						"yrTerm3Convertible.allUpfront": "1.313",
						"yrTerm3Convertible.noUpfront": "1.372",
						"yrTerm3Convertible.partialUpfront": "1.325",
						"yrTerm3Standard.allUpfront": "1.216",
						"yrTerm3Standard.noUpfront": "1.289",
						"yrTerm3Standard.partialUpfront": "1.247"
					}
				},
				"mswinSQL": {
					"ondemand": "6.519",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.993",
						"yrTerm1Standard.noUpfront": "6.048",
						"yrTerm1Standard.partialUpfront": "6.008",
						"yrTerm3Convertible.allUpfront": "5.819",
						"yrTerm3Convertible.noUpfront": "5.878",
						"yrTerm3Convertible.partialUpfront": "5.831",
						"yrTerm3Standard.allUpfront": "5.722",
						"yrTerm3Standard.noUpfront": "5.795",
						"yrTerm3Standard.partialUpfront": "5.753"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.295",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.769",
						"yrTerm1Standard.noUpfront": "1.824",
						"yrTerm1Standard.partialUpfront": "1.784",
						"yrTerm3Convertible.allUpfront": "1.595",
						"yrTerm3Convertible.noUpfront": "1.654",
						"yrTerm3Convertible.partialUpfront": "1.607",
						"yrTerm3Standard.allUpfront": "1.498",
						"yrTerm3Standard.noUpfront": "1.571",
						"yrTerm3Standard.partialUpfront": "1.529"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "1.168",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.687",
						"yrTerm1Standard.noUpfront": "0.739",
						"yrTerm1Standard.partialUpfront": "0.701",
						"yrTerm3Convertible.allUpfront": "0.523",
						"yrTerm3Convertible.noUpfront": "0.576",
						"yrTerm3Convertible.partialUpfront": "0.534",
						"yrTerm3Standard.allUpfront": "0.439",
						"yrTerm3Standard.noUpfront": "0.501",
						"yrTerm3Standard.partialUpfront": "0.467"
					}
				},
				"mswin": {
					"ondemand": "1.904",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.423",
						"yrTerm1Standard.noUpfront": "1.475",
						"yrTerm1Standard.partialUpfront": "1.437",
						"yrTerm3Convertible.allUpfront": "1.259",
						"yrTerm3Convertible.noUpfront": "1.312",
						"yrTerm3Convertible.partialUpfront": "1.270",
						"yrTerm3Standard.allUpfront": "1.175",
						"yrTerm3Standard.noUpfront": "1.237",
						"yrTerm3Standard.partialUpfront": "1.203"
					}
				},
				"mswinSQL": {
					"ondemand": "6.41",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.929",
						"yrTerm1Standard.noUpfront": "5.981",
						"yrTerm1Standard.partialUpfront": "5.943",
						"yrTerm3Convertible.allUpfront": "5.765",
						"yrTerm3Convertible.noUpfront": "5.818",
						"yrTerm3Convertible.partialUpfront": "5.776",
						"yrTerm3Standard.allUpfront": "5.681",
						"yrTerm3Standard.noUpfront": "5.743",
						"yrTerm3Standard.partialUpfront": "5.709"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.186",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.705",
						"yrTerm1Standard.noUpfront": "1.757",
						"yrTerm1Standard.partialUpfront": "1.719",
						"yrTerm3Convertible.allUpfront": "1.541",
						"yrTerm3Convertible.noUpfront": "1.594",
						"yrTerm3Convertible.partialUpfront": "1.552",
						"yrTerm3Standard.allUpfront": "1.457",
						"yrTerm3Standard.noUpfront": "1.519",
						"yrTerm3Standard.partialUpfront": "1.485"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "1.28",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.753",
						"yrTerm1Standard.noUpfront": "0.806",
						"yrTerm1Standard.partialUpfront": "0.768",
						"yrTerm3Convertible.allUpfront": "0.577",
						"yrTerm3Convertible.noUpfront": "0.636",
						"yrTerm3Convertible.partialUpfront": "0.589",
						"yrTerm3Standard.allUpfront": "0.481",
						"yrTerm3Standard.noUpfront": "0.553",
						"yrTerm3Standard.partialUpfront": "0.512"
					}
				},
				"mswin": {
					"ondemand": "2.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.489",
						"yrTerm1Standard.noUpfront": "1.542",
						"yrTerm1Standard.partialUpfront": "1.504",
						"yrTerm3Convertible.allUpfront": "1.313",
						"yrTerm3Convertible.noUpfront": "1.372",
						"yrTerm3Convertible.partialUpfront": "1.325",
						"yrTerm3Standard.allUpfront": "1.217",
						"yrTerm3Standard.noUpfront": "1.289",
						"yrTerm3Standard.partialUpfront": "1.248"
					}
				},
				"mswinSQL": {
					"ondemand": "6.522",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.995",
						"yrTerm1Standard.noUpfront": "6.048",
						"yrTerm1Standard.partialUpfront": "6.010",
						"yrTerm3Convertible.allUpfront": "5.819",
						"yrTerm3Convertible.noUpfront": "5.878",
						"yrTerm3Convertible.partialUpfront": "5.831",
						"yrTerm3Standard.allUpfront": "5.723",
						"yrTerm3Standard.noUpfront": "5.795",
						"yrTerm3Standard.partialUpfront": "5.754"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.298",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.771",
						"yrTerm1Standard.noUpfront": "1.824",
						"yrTerm1Standard.partialUpfront": "1.786",
						"yrTerm3Convertible.allUpfront": "1.595",
						"yrTerm3Convertible.noUpfront": "1.654",
						"yrTerm3Convertible.partialUpfront": "1.607",
						"yrTerm3Standard.allUpfront": "1.499",
						"yrTerm3Standard.noUpfront": "1.571",
						"yrTerm3Standard.partialUpfront": "1.530"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "1.186",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.697",
						"yrTerm1Standard.noUpfront": "0.748",
						"yrTerm1Standard.partialUpfront": "0.711",
						"yrTerm3Convertible.allUpfront": "0.532",
						"yrTerm3Convertible.noUpfront": "0.586",
						"yrTerm3Convertible.partialUpfront": "0.543",
						"yrTerm3Standard.allUpfront": "0.446",
						"yrTerm3Standard.noUpfront": "0.510",
						"yrTerm3Standard.partialUpfront": "0.474"
					}
				},
				"mswin": {
					"ondemand": "1.922",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.433",
						"yrTerm1Standard.noUpfront": "1.484",
						"yrTerm1Standard.partialUpfront": "1.447",
						"yrTerm3Convertible.allUpfront": "1.268",
						"yrTerm3Convertible.noUpfront": "1.322",
						"yrTerm3Convertible.partialUpfront": "1.279",
						"yrTerm3Standard.allUpfront": "1.182",
						"yrTerm3Standard.noUpfront": "1.246",
						"yrTerm3Standard.partialUpfront": "1.210"
					}
				},
				"mswinSQL": {
					"ondemand": "6.428",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.939",
						"yrTerm1Standard.noUpfront": "5.990",
						"yrTerm1Standard.partialUpfront": "5.953",
						"yrTerm3Convertible.allUpfront": "5.774",
						"yrTerm3Convertible.noUpfront": "5.828",
						"yrTerm3Convertible.partialUpfront": "5.785",
						"yrTerm3Standard.allUpfront": "5.688",
						"yrTerm3Standard.noUpfront": "5.752",
						"yrTerm3Standard.partialUpfront": "5.716"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.204",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.715",
						"yrTerm1Standard.noUpfront": "1.766",
						"yrTerm1Standard.partialUpfront": "1.729",
						"yrTerm3Convertible.allUpfront": "1.550",
						"yrTerm3Convertible.noUpfront": "1.604",
						"yrTerm3Convertible.partialUpfront": "1.561",
						"yrTerm3Standard.allUpfront": "1.464",
						"yrTerm3Standard.noUpfront": "1.528",
						"yrTerm3Standard.partialUpfront": "1.492"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "1.248",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.734",
						"yrTerm1Standard.noUpfront": "0.790",
						"yrTerm1Standard.partialUpfront": "0.749",
						"yrTerm3Convertible.allUpfront": "0.559",
						"yrTerm3Convertible.noUpfront": "0.616",
						"yrTerm3Convertible.partialUpfront": "0.570",
						"yrTerm3Standard.allUpfront": "0.469",
						"yrTerm3Standard.noUpfront": "0.536",
						"yrTerm3Standard.partialUpfront": "0.499"
					}
				},
				"mswin": {
					"ondemand": "1.984",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.470",
						"yrTerm1Standard.noUpfront": "1.526",
						"yrTerm1Standard.partialUpfront": "1.485",
						"yrTerm3Convertible.allUpfront": "1.295",
						"yrTerm3Convertible.noUpfront": "1.352",
						"yrTerm3Convertible.partialUpfront": "1.306",
						"yrTerm3Standard.allUpfront": "1.205",
						"yrTerm3Standard.noUpfront": "1.272",
						"yrTerm3Standard.partialUpfront": "1.235"
					}
				},
				"mswinSQL": {
					"ondemand": "6.49",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.976",
						"yrTerm1Standard.noUpfront": "6.032",
						"yrTerm1Standard.partialUpfront": "5.991",
						"yrTerm3Convertible.allUpfront": "5.801",
						"yrTerm3Convertible.noUpfront": "5.858",
						"yrTerm3Convertible.partialUpfront": "5.812",
						"yrTerm3Standard.allUpfront": "5.711",
						"yrTerm3Standard.noUpfront": "5.778",
						"yrTerm3Standard.partialUpfront": "5.741"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.752",
						"yrTerm1Standard.noUpfront": "1.808",
						"yrTerm1Standard.partialUpfront": "1.767",
						"yrTerm3Convertible.allUpfront": "1.577",
						"yrTerm3Convertible.noUpfront": "1.634",
						"yrTerm3Convertible.partialUpfront": "1.588",
						"yrTerm3Standard.allUpfront": "1.487",
						"yrTerm3Standard.noUpfront": "1.554",
						"yrTerm3Standard.partialUpfront": "1.517"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "2.24",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.317",
						"yrTerm1Standard.noUpfront": "1.411",
						"yrTerm1Standard.partialUpfront": "1.344",
						"yrTerm3Convertible.allUpfront": "1.010",
						"yrTerm3Convertible.noUpfront": "1.113",
						"yrTerm3Convertible.partialUpfront": "1.030",
						"yrTerm3Standard.allUpfront": "0.842",
						"yrTerm3Standard.noUpfront": "0.968",
						"yrTerm3Standard.partialUpfront": "0.896"
					}
				},
				"mswin": {
					"ondemand": "2.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.053",
						"yrTerm1Standard.noUpfront": "2.147",
						"yrTerm1Standard.partialUpfront": "2.080",
						"yrTerm3Convertible.allUpfront": "1.746",
						"yrTerm3Convertible.noUpfront": "1.849",
						"yrTerm3Convertible.partialUpfront": "1.766",
						"yrTerm3Standard.allUpfront": "1.578",
						"yrTerm3Standard.noUpfront": "1.704",
						"yrTerm3Standard.partialUpfront": "1.632"
					}
				},
				"mswinSQL": {
					"ondemand": "7.482",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.559",
						"yrTerm1Standard.noUpfront": "6.653",
						"yrTerm1Standard.partialUpfront": "6.586",
						"yrTerm3Convertible.allUpfront": "6.252",
						"yrTerm3Convertible.noUpfront": "6.355",
						"yrTerm3Convertible.partialUpfront": "6.272",
						"yrTerm3Standard.allUpfront": "6.084",
						"yrTerm3Standard.noUpfront": "6.210",
						"yrTerm3Standard.partialUpfront": "6.138"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.258",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.335",
						"yrTerm1Standard.noUpfront": "2.429",
						"yrTerm1Standard.partialUpfront": "2.362",
						"yrTerm3Convertible.allUpfront": "2.028",
						"yrTerm3Convertible.noUpfront": "2.131",
						"yrTerm3Convertible.partialUpfront": "2.048",
						"yrTerm3Standard.allUpfront": "1.860",
						"yrTerm3Standard.noUpfront": "1.986",
						"yrTerm3Standard.partialUpfront": "1.914"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "1.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.626",
						"yrTerm1Standard.noUpfront": "0.672",
						"yrTerm1Standard.partialUpfront": "0.638",
						"yrTerm3Convertible.allUpfront": "0.478",
						"yrTerm3Convertible.noUpfront": "0.527",
						"yrTerm3Convertible.partialUpfront": "0.488",
						"yrTerm3Standard.allUpfront": "0.400",
						"yrTerm3Standard.noUpfront": "0.458",
						"yrTerm3Standard.partialUpfront": "0.426"
					}
				},
				"mswin": {
					"ondemand": "1.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.362",
						"yrTerm1Standard.noUpfront": "1.408",
						"yrTerm1Standard.partialUpfront": "1.374",
						"yrTerm3Convertible.allUpfront": "1.214",
						"yrTerm3Convertible.noUpfront": "1.263",
						"yrTerm3Convertible.partialUpfront": "1.224",
						"yrTerm3Standard.allUpfront": "1.136",
						"yrTerm3Standard.noUpfront": "1.194",
						"yrTerm3Standard.partialUpfront": "1.162"
					}
				},
				"mswinSQL": {
					"ondemand": "6.306",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.868",
						"yrTerm1Standard.noUpfront": "5.914",
						"yrTerm1Standard.partialUpfront": "5.880",
						"yrTerm3Convertible.allUpfront": "5.720",
						"yrTerm3Convertible.noUpfront": "5.769",
						"yrTerm3Convertible.partialUpfront": "5.730",
						"yrTerm3Standard.allUpfront": "5.642",
						"yrTerm3Standard.noUpfront": "5.700",
						"yrTerm3Standard.partialUpfront": "5.668"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.082",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.644",
						"yrTerm1Standard.noUpfront": "1.690",
						"yrTerm1Standard.partialUpfront": "1.656",
						"yrTerm3Convertible.allUpfront": "1.496",
						"yrTerm3Convertible.noUpfront": "1.545",
						"yrTerm3Convertible.partialUpfront": "1.506",
						"yrTerm3Standard.allUpfront": "1.418",
						"yrTerm3Standard.noUpfront": "1.476",
						"yrTerm3Standard.partialUpfront": "1.444"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.626",
						"yrTerm1Standard.noUpfront": "0.672",
						"yrTerm1Standard.partialUpfront": "0.638",
						"yrTerm3Convertible.allUpfront": "0.478",
						"yrTerm3Convertible.noUpfront": "0.527",
						"yrTerm3Convertible.partialUpfront": "0.488",
						"yrTerm3Standard.allUpfront": "0.400",
						"yrTerm3Standard.noUpfront": "0.458",
						"yrTerm3Standard.partialUpfront": "0.426"
					}
				},
				"mswin": {
					"ondemand": "1.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.362",
						"yrTerm1Standard.noUpfront": "1.408",
						"yrTerm1Standard.partialUpfront": "1.374",
						"yrTerm3Convertible.allUpfront": "1.214",
						"yrTerm3Convertible.noUpfront": "1.263",
						"yrTerm3Convertible.partialUpfront": "1.224",
						"yrTerm3Standard.allUpfront": "1.136",
						"yrTerm3Standard.noUpfront": "1.194",
						"yrTerm3Standard.partialUpfront": "1.162"
					}
				},
				"mswinSQL": {
					"ondemand": "6.306",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.868",
						"yrTerm1Standard.noUpfront": "5.914",
						"yrTerm1Standard.partialUpfront": "5.880",
						"yrTerm3Convertible.allUpfront": "5.720",
						"yrTerm3Convertible.noUpfront": "5.769",
						"yrTerm3Convertible.partialUpfront": "5.730",
						"yrTerm3Standard.allUpfront": "5.642",
						"yrTerm3Standard.noUpfront": "5.700",
						"yrTerm3Standard.partialUpfront": "5.668"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.082",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.644",
						"yrTerm1Standard.noUpfront": "1.690",
						"yrTerm1Standard.partialUpfront": "1.656",
						"yrTerm3Convertible.allUpfront": "1.496",
						"yrTerm3Convertible.noUpfront": "1.545",
						"yrTerm3Convertible.partialUpfront": "1.506",
						"yrTerm3Standard.allUpfront": "1.418",
						"yrTerm3Standard.noUpfront": "1.476",
						"yrTerm3Standard.partialUpfront": "1.444"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "1.277",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.751",
						"yrTerm1Standard.noUpfront": "0.806",
						"yrTerm1Standard.partialUpfront": "0.766",
						"yrTerm3Convertible.allUpfront": "0.577",
						"yrTerm3Convertible.noUpfront": "0.636",
						"yrTerm3Convertible.partialUpfront": "0.589",
						"yrTerm3Standard.allUpfront": "0.480",
						"yrTerm3Standard.noUpfront": "0.553",
						"yrTerm3Standard.partialUpfront": "0.511"
					}
				},
				"mswin": {
					"ondemand": "2.013",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.487",
						"yrTerm1Standard.noUpfront": "1.542",
						"yrTerm1Standard.partialUpfront": "1.502",
						"yrTerm3Convertible.allUpfront": "1.313",
						"yrTerm3Convertible.noUpfront": "1.372",
						"yrTerm3Convertible.partialUpfront": "1.325",
						"yrTerm3Standard.allUpfront": "1.216",
						"yrTerm3Standard.noUpfront": "1.289",
						"yrTerm3Standard.partialUpfront": "1.247"
					}
				},
				"mswinSQL": {
					"ondemand": "6.519",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.993",
						"yrTerm1Standard.noUpfront": "6.048",
						"yrTerm1Standard.partialUpfront": "6.008",
						"yrTerm3Convertible.allUpfront": "5.819",
						"yrTerm3Convertible.noUpfront": "5.878",
						"yrTerm3Convertible.partialUpfront": "5.831",
						"yrTerm3Standard.allUpfront": "5.722",
						"yrTerm3Standard.noUpfront": "5.795",
						"yrTerm3Standard.partialUpfront": "5.753"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.295",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.769",
						"yrTerm1Standard.noUpfront": "1.824",
						"yrTerm1Standard.partialUpfront": "1.784",
						"yrTerm3Convertible.allUpfront": "1.595",
						"yrTerm3Convertible.noUpfront": "1.654",
						"yrTerm3Convertible.partialUpfront": "1.607",
						"yrTerm3Standard.allUpfront": "1.498",
						"yrTerm3Standard.noUpfront": "1.571",
						"yrTerm3Standard.partialUpfront": "1.529"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "1.186",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.697",
						"yrTerm1Standard.noUpfront": "0.748",
						"yrTerm1Standard.partialUpfront": "0.711",
						"yrTerm3Convertible.allUpfront": "0.532",
						"yrTerm3Convertible.noUpfront": "0.586",
						"yrTerm3Convertible.partialUpfront": "0.543",
						"yrTerm3Standard.allUpfront": "0.446",
						"yrTerm3Standard.noUpfront": "0.510",
						"yrTerm3Standard.partialUpfront": "0.474"
					}
				},
				"mswin": {
					"ondemand": "1.922",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.433",
						"yrTerm1Standard.noUpfront": "1.484",
						"yrTerm1Standard.partialUpfront": "1.447",
						"yrTerm3Convertible.allUpfront": "1.268",
						"yrTerm3Convertible.noUpfront": "1.322",
						"yrTerm3Convertible.partialUpfront": "1.279",
						"yrTerm3Standard.allUpfront": "1.182",
						"yrTerm3Standard.noUpfront": "1.246",
						"yrTerm3Standard.partialUpfront": "1.210"
					}
				},
				"mswinSQL": {
					"ondemand": "6.428",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.939",
						"yrTerm1Standard.noUpfront": "5.990",
						"yrTerm1Standard.partialUpfront": "5.953",
						"yrTerm3Convertible.allUpfront": "5.774",
						"yrTerm3Convertible.noUpfront": "5.828",
						"yrTerm3Convertible.partialUpfront": "5.785",
						"yrTerm3Standard.allUpfront": "5.688",
						"yrTerm3Standard.noUpfront": "5.752",
						"yrTerm3Standard.partialUpfront": "5.716"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.204",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.715",
						"yrTerm1Standard.noUpfront": "1.766",
						"yrTerm1Standard.partialUpfront": "1.729",
						"yrTerm3Convertible.allUpfront": "1.550",
						"yrTerm3Convertible.noUpfront": "1.604",
						"yrTerm3Convertible.partialUpfront": "1.561",
						"yrTerm3Standard.allUpfront": "1.464",
						"yrTerm3Standard.noUpfront": "1.528",
						"yrTerm3Standard.partialUpfront": "1.492"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "1.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.626",
						"yrTerm1Standard.noUpfront": "0.672",
						"yrTerm1Standard.partialUpfront": "0.638",
						"yrTerm3Convertible.allUpfront": "0.478",
						"yrTerm3Convertible.noUpfront": "0.527",
						"yrTerm3Convertible.partialUpfront": "0.488",
						"yrTerm3Standard.allUpfront": "0.400",
						"yrTerm3Standard.noUpfront": "0.458",
						"yrTerm3Standard.partialUpfront": "0.426"
					}
				},
				"mswin": {
					"ondemand": "1.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.362",
						"yrTerm1Standard.noUpfront": "1.408",
						"yrTerm1Standard.partialUpfront": "1.374",
						"yrTerm3Convertible.allUpfront": "1.214",
						"yrTerm3Convertible.noUpfront": "1.263",
						"yrTerm3Convertible.partialUpfront": "1.224",
						"yrTerm3Standard.allUpfront": "1.136",
						"yrTerm3Standard.noUpfront": "1.194",
						"yrTerm3Standard.partialUpfront": "1.162"
					}
				},
				"mswinSQL": {
					"ondemand": "6.306",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.868",
						"yrTerm1Standard.noUpfront": "5.914",
						"yrTerm1Standard.partialUpfront": "5.880",
						"yrTerm3Convertible.allUpfront": "5.720",
						"yrTerm3Convertible.noUpfront": "5.769",
						"yrTerm3Convertible.partialUpfront": "5.730",
						"yrTerm3Standard.allUpfront": "5.642",
						"yrTerm3Standard.noUpfront": "5.700",
						"yrTerm3Standard.partialUpfront": "5.668"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.082",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.644",
						"yrTerm1Standard.noUpfront": "1.690",
						"yrTerm1Standard.partialUpfront": "1.656",
						"yrTerm3Convertible.allUpfront": "1.496",
						"yrTerm3Convertible.noUpfront": "1.545",
						"yrTerm3Convertible.partialUpfront": "1.506",
						"yrTerm3Standard.allUpfront": "1.418",
						"yrTerm3Standard.noUpfront": "1.476",
						"yrTerm3Standard.partialUpfront": "1.444"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 99,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 32000,
		"ebs_max_bandwidth": 6000,
		"ebs_optimized": true,
		"ebs_throughput": 750,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r4.8xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 244,
		"network_performance": "10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "R4 High-Memory Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "2.56",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.505",
						"yrTerm1Standard.noUpfront": "1.613",
						"yrTerm1Standard.partialUpfront": "1.536",
						"yrTerm3Convertible.allUpfront": "1.154",
						"yrTerm3Convertible.noUpfront": "1.272",
						"yrTerm3Convertible.partialUpfront": "1.178",
						"yrTerm3Standard.allUpfront": "0.963",
						"yrTerm3Standard.noUpfront": "1.106",
						"yrTerm3Standard.partialUpfront": "1.024"
					}
				},
				"mswin": {
					"ondemand": "4.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.977",
						"yrTerm1Standard.noUpfront": "3.085",
						"yrTerm1Standard.partialUpfront": "3.008",
						"yrTerm3Convertible.allUpfront": "2.626",
						"yrTerm3Convertible.noUpfront": "2.744",
						"yrTerm3Convertible.partialUpfront": "2.650",
						"yrTerm3Standard.allUpfront": "2.435",
						"yrTerm3Standard.noUpfront": "2.578",
						"yrTerm3Standard.partialUpfront": "2.496"
					}
				},
				"mswinSQL": {
					"ondemand": "13.043",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.988",
						"yrTerm1Standard.noUpfront": "12.096",
						"yrTerm1Standard.partialUpfront": "12.019",
						"yrTerm3Convertible.allUpfront": "11.637",
						"yrTerm3Convertible.noUpfront": "11.755",
						"yrTerm3Convertible.partialUpfront": "11.661",
						"yrTerm3Standard.allUpfront": "11.446",
						"yrTerm3Standard.noUpfront": "11.589",
						"yrTerm3Standard.partialUpfront": "11.507"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.596",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.541",
						"yrTerm1Standard.noUpfront": "3.649",
						"yrTerm1Standard.partialUpfront": "3.572",
						"yrTerm3Convertible.allUpfront": "3.190",
						"yrTerm3Convertible.noUpfront": "3.308",
						"yrTerm3Convertible.partialUpfront": "3.214",
						"yrTerm3Standard.allUpfront": "2.999",
						"yrTerm3Standard.noUpfront": "3.142",
						"yrTerm3Standard.partialUpfront": "3.060"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "2.56",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.505",
						"yrTerm1Standard.noUpfront": "1.613",
						"yrTerm1Standard.partialUpfront": "1.536",
						"yrTerm3Convertible.allUpfront": "1.154",
						"yrTerm3Convertible.noUpfront": "1.272",
						"yrTerm3Convertible.partialUpfront": "1.178",
						"yrTerm3Standard.allUpfront": "0.963",
						"yrTerm3Standard.noUpfront": "1.106",
						"yrTerm3Standard.partialUpfront": "1.024"
					}
				},
				"mswin": {
					"ondemand": "4.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.977",
						"yrTerm1Standard.noUpfront": "3.085",
						"yrTerm1Standard.partialUpfront": "3.008",
						"yrTerm3Convertible.allUpfront": "2.626",
						"yrTerm3Convertible.noUpfront": "2.744",
						"yrTerm3Convertible.partialUpfront": "2.650",
						"yrTerm3Standard.allUpfront": "2.435",
						"yrTerm3Standard.noUpfront": "2.578",
						"yrTerm3Standard.partialUpfront": "2.496"
					}
				},
				"mswinSQL": {
					"ondemand": "13.043",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.988",
						"yrTerm1Standard.noUpfront": "12.096",
						"yrTerm1Standard.partialUpfront": "12.019",
						"yrTerm3Convertible.allUpfront": "11.637",
						"yrTerm3Convertible.noUpfront": "11.755",
						"yrTerm3Convertible.partialUpfront": "11.661",
						"yrTerm3Standard.allUpfront": "11.446",
						"yrTerm3Standard.noUpfront": "11.589",
						"yrTerm3Standard.partialUpfront": "11.507"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.596",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.541",
						"yrTerm1Standard.noUpfront": "3.649",
						"yrTerm1Standard.partialUpfront": "3.572",
						"yrTerm3Convertible.allUpfront": "3.190",
						"yrTerm3Convertible.noUpfront": "3.308",
						"yrTerm3Convertible.partialUpfront": "3.214",
						"yrTerm3Standard.allUpfront": "2.999",
						"yrTerm3Standard.noUpfront": "3.142",
						"yrTerm3Standard.partialUpfront": "3.060"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "2.432",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.430",
						"yrTerm1Standard.noUpfront": "1.529",
						"yrTerm1Standard.partialUpfront": "1.459",
						"yrTerm3Convertible.allUpfront": "1.100",
						"yrTerm3Convertible.noUpfront": "1.212",
						"yrTerm3Convertible.partialUpfront": "1.122",
						"yrTerm3Standard.allUpfront": "0.914",
						"yrTerm3Standard.noUpfront": "1.054",
						"yrTerm3Standard.partialUpfront": "0.973"
					}
				},
				"mswin": {
					"ondemand": "3.904",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.902",
						"yrTerm1Standard.noUpfront": "3.001",
						"yrTerm1Standard.partialUpfront": "2.931",
						"yrTerm3Convertible.allUpfront": "2.572",
						"yrTerm3Convertible.noUpfront": "2.684",
						"yrTerm3Convertible.partialUpfront": "2.594",
						"yrTerm3Standard.allUpfront": "2.386",
						"yrTerm3Standard.noUpfront": "2.526",
						"yrTerm3Standard.partialUpfront": "2.445"
					}
				},
				"mswinSQL": {
					"ondemand": "12.915",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.913",
						"yrTerm1Standard.noUpfront": "12.012",
						"yrTerm1Standard.partialUpfront": "11.942",
						"yrTerm3Convertible.allUpfront": "11.583",
						"yrTerm3Convertible.noUpfront": "11.695",
						"yrTerm3Convertible.partialUpfront": "11.605",
						"yrTerm3Standard.allUpfront": "11.397",
						"yrTerm3Standard.noUpfront": "11.537",
						"yrTerm3Standard.partialUpfront": "11.456"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.468",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.466",
						"yrTerm1Standard.noUpfront": "3.565",
						"yrTerm1Standard.partialUpfront": "3.495",
						"yrTerm3Convertible.allUpfront": "3.136",
						"yrTerm3Convertible.noUpfront": "3.248",
						"yrTerm3Convertible.partialUpfront": "3.158",
						"yrTerm3Standard.allUpfront": "2.950",
						"yrTerm3Standard.noUpfront": "3.090",
						"yrTerm3Standard.partialUpfront": "3.009"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "2.56",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.505",
						"yrTerm1Standard.noUpfront": "1.613",
						"yrTerm1Standard.partialUpfront": "1.536",
						"yrTerm3Convertible.allUpfront": "1.154",
						"yrTerm3Convertible.noUpfront": "1.272",
						"yrTerm3Convertible.partialUpfront": "1.178",
						"yrTerm3Standard.allUpfront": "0.963",
						"yrTerm3Standard.noUpfront": "1.106",
						"yrTerm3Standard.partialUpfront": "1.024"
					}
				},
				"mswin": {
					"ondemand": "4.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.977",
						"yrTerm1Standard.noUpfront": "3.085",
						"yrTerm1Standard.partialUpfront": "3.008",
						"yrTerm3Convertible.allUpfront": "2.626",
						"yrTerm3Convertible.noUpfront": "2.744",
						"yrTerm3Convertible.partialUpfront": "2.650",
						"yrTerm3Standard.allUpfront": "2.435",
						"yrTerm3Standard.noUpfront": "2.578",
						"yrTerm3Standard.partialUpfront": "2.496"
					}
				},
				"mswinSQL": {
					"ondemand": "13.043",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.988",
						"yrTerm1Standard.noUpfront": "12.096",
						"yrTerm1Standard.partialUpfront": "12.019",
						"yrTerm3Convertible.allUpfront": "11.637",
						"yrTerm3Convertible.noUpfront": "11.755",
						"yrTerm3Convertible.partialUpfront": "11.661",
						"yrTerm3Standard.allUpfront": "11.446",
						"yrTerm3Standard.noUpfront": "11.589",
						"yrTerm3Standard.partialUpfront": "11.507"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.596",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.541",
						"yrTerm1Standard.noUpfront": "3.649",
						"yrTerm1Standard.partialUpfront": "3.572",
						"yrTerm3Convertible.allUpfront": "3.190",
						"yrTerm3Convertible.noUpfront": "3.308",
						"yrTerm3Convertible.partialUpfront": "3.214",
						"yrTerm3Standard.allUpfront": "2.999",
						"yrTerm3Standard.noUpfront": "3.142",
						"yrTerm3Standard.partialUpfront": "3.060"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "2.554",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.502",
						"yrTerm1Standard.noUpfront": "1.613",
						"yrTerm1Standard.partialUpfront": "1.532",
						"yrTerm3Convertible.allUpfront": "1.154",
						"yrTerm3Convertible.noUpfront": "1.272",
						"yrTerm3Convertible.partialUpfront": "1.178",
						"yrTerm3Standard.allUpfront": "0.960",
						"yrTerm3Standard.noUpfront": "1.106",
						"yrTerm3Standard.partialUpfront": "1.021"
					}
				},
				"mswin": {
					"ondemand": "4.026",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.974",
						"yrTerm1Standard.noUpfront": "3.085",
						"yrTerm1Standard.partialUpfront": "3.004",
						"yrTerm3Convertible.allUpfront": "2.626",
						"yrTerm3Convertible.noUpfront": "2.744",
						"yrTerm3Convertible.partialUpfront": "2.650",
						"yrTerm3Standard.allUpfront": "2.432",
						"yrTerm3Standard.noUpfront": "2.578",
						"yrTerm3Standard.partialUpfront": "2.493"
					}
				},
				"mswinSQL": {
					"ondemand": "13.037",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.985",
						"yrTerm1Standard.noUpfront": "12.096",
						"yrTerm1Standard.partialUpfront": "12.015",
						"yrTerm3Convertible.allUpfront": "11.637",
						"yrTerm3Convertible.noUpfront": "11.755",
						"yrTerm3Convertible.partialUpfront": "11.661",
						"yrTerm3Standard.allUpfront": "11.443",
						"yrTerm3Standard.noUpfront": "11.589",
						"yrTerm3Standard.partialUpfront": "11.504"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.59",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.538",
						"yrTerm1Standard.noUpfront": "3.649",
						"yrTerm1Standard.partialUpfront": "3.568",
						"yrTerm3Convertible.allUpfront": "3.190",
						"yrTerm3Convertible.noUpfront": "3.308",
						"yrTerm3Convertible.partialUpfront": "3.214",
						"yrTerm3Standard.allUpfront": "2.996",
						"yrTerm3Standard.noUpfront": "3.142",
						"yrTerm3Standard.partialUpfront": "3.057"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "2.336",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.374",
						"yrTerm1Standard.noUpfront": "1.478",
						"yrTerm1Standard.partialUpfront": "1.402",
						"yrTerm3Convertible.allUpfront": "1.046",
						"yrTerm3Convertible.noUpfront": "1.153",
						"yrTerm3Convertible.partialUpfront": "1.067",
						"yrTerm3Standard.allUpfront": "0.878",
						"yrTerm3Standard.noUpfront": "1.002",
						"yrTerm3Standard.partialUpfront": "0.934"
					}
				},
				"mswin": {
					"ondemand": "3.808",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.846",
						"yrTerm1Standard.noUpfront": "2.950",
						"yrTerm1Standard.partialUpfront": "2.874",
						"yrTerm3Convertible.allUpfront": "2.518",
						"yrTerm3Convertible.noUpfront": "2.625",
						"yrTerm3Convertible.partialUpfront": "2.539",
						"yrTerm3Standard.allUpfront": "2.350",
						"yrTerm3Standard.noUpfront": "2.474",
						"yrTerm3Standard.partialUpfront": "2.406"
					}
				},
				"mswinSQL": {
					"ondemand": "12.819",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.857",
						"yrTerm1Standard.noUpfront": "11.961",
						"yrTerm1Standard.partialUpfront": "11.885",
						"yrTerm3Convertible.allUpfront": "11.529",
						"yrTerm3Convertible.noUpfront": "11.636",
						"yrTerm3Convertible.partialUpfront": "11.550",
						"yrTerm3Standard.allUpfront": "11.361",
						"yrTerm3Standard.noUpfront": "11.485",
						"yrTerm3Standard.partialUpfront": "11.417"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.372",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.410",
						"yrTerm1Standard.noUpfront": "3.514",
						"yrTerm1Standard.partialUpfront": "3.438",
						"yrTerm3Convertible.allUpfront": "3.082",
						"yrTerm3Convertible.noUpfront": "3.189",
						"yrTerm3Convertible.partialUpfront": "3.103",
						"yrTerm3Standard.allUpfront": "2.914",
						"yrTerm3Standard.noUpfront": "3.038",
						"yrTerm3Standard.partialUpfront": "2.970"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "2.561",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.506",
						"yrTerm1Standard.noUpfront": "1.613",
						"yrTerm1Standard.partialUpfront": "1.536",
						"yrTerm3Convertible.allUpfront": "1.154",
						"yrTerm3Convertible.noUpfront": "1.272",
						"yrTerm3Convertible.partialUpfront": "1.178",
						"yrTerm3Standard.allUpfront": "0.963",
						"yrTerm3Standard.noUpfront": "1.106",
						"yrTerm3Standard.partialUpfront": "1.024"
					}
				},
				"mswin": {
					"ondemand": "4.033",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.978",
						"yrTerm1Standard.noUpfront": "3.085",
						"yrTerm1Standard.partialUpfront": "3.008",
						"yrTerm3Convertible.allUpfront": "2.626",
						"yrTerm3Convertible.noUpfront": "2.744",
						"yrTerm3Convertible.partialUpfront": "2.650",
						"yrTerm3Standard.allUpfront": "2.435",
						"yrTerm3Standard.noUpfront": "2.578",
						"yrTerm3Standard.partialUpfront": "2.496"
					}
				},
				"mswinSQL": {
					"ondemand": "13.044",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.989",
						"yrTerm1Standard.noUpfront": "12.096",
						"yrTerm1Standard.partialUpfront": "12.019",
						"yrTerm3Convertible.allUpfront": "11.637",
						"yrTerm3Convertible.noUpfront": "11.755",
						"yrTerm3Convertible.partialUpfront": "11.661",
						"yrTerm3Standard.allUpfront": "11.446",
						"yrTerm3Standard.noUpfront": "11.589",
						"yrTerm3Standard.partialUpfront": "11.507"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.597",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.542",
						"yrTerm1Standard.noUpfront": "3.649",
						"yrTerm1Standard.partialUpfront": "3.572",
						"yrTerm3Convertible.allUpfront": "3.190",
						"yrTerm3Convertible.noUpfront": "3.308",
						"yrTerm3Convertible.partialUpfront": "3.214",
						"yrTerm3Standard.allUpfront": "2.999",
						"yrTerm3Standard.noUpfront": "3.142",
						"yrTerm3Standard.partialUpfront": "3.060"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "2.371",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.394",
						"yrTerm1Standard.noUpfront": "1.495",
						"yrTerm1Standard.partialUpfront": "1.423",
						"yrTerm3Convertible.allUpfront": "1.064",
						"yrTerm3Convertible.noUpfront": "1.173",
						"yrTerm3Convertible.partialUpfront": "1.086",
						"yrTerm3Standard.allUpfront": "0.892",
						"yrTerm3Standard.noUpfront": "1.020",
						"yrTerm3Standard.partialUpfront": "0.948"
					}
				},
				"mswin": {
					"ondemand": "3.843",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.866",
						"yrTerm1Standard.noUpfront": "2.967",
						"yrTerm1Standard.partialUpfront": "2.895",
						"yrTerm3Convertible.allUpfront": "2.536",
						"yrTerm3Convertible.noUpfront": "2.645",
						"yrTerm3Convertible.partialUpfront": "2.558",
						"yrTerm3Standard.allUpfront": "2.364",
						"yrTerm3Standard.noUpfront": "2.492",
						"yrTerm3Standard.partialUpfront": "2.420"
					}
				},
				"mswinSQL": {
					"ondemand": "12.854",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.877",
						"yrTerm1Standard.noUpfront": "11.978",
						"yrTerm1Standard.partialUpfront": "11.906",
						"yrTerm3Convertible.allUpfront": "11.547",
						"yrTerm3Convertible.noUpfront": "11.656",
						"yrTerm3Convertible.partialUpfront": "11.569",
						"yrTerm3Standard.allUpfront": "11.375",
						"yrTerm3Standard.noUpfront": "11.503",
						"yrTerm3Standard.partialUpfront": "11.431"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.407",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.430",
						"yrTerm1Standard.noUpfront": "3.531",
						"yrTerm1Standard.partialUpfront": "3.459",
						"yrTerm3Convertible.allUpfront": "3.100",
						"yrTerm3Convertible.noUpfront": "3.209",
						"yrTerm3Convertible.partialUpfront": "3.122",
						"yrTerm3Standard.allUpfront": "2.928",
						"yrTerm3Standard.noUpfront": "3.056",
						"yrTerm3Standard.partialUpfront": "2.984"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "2.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.468",
						"yrTerm1Standard.noUpfront": "1.579",
						"yrTerm1Standard.partialUpfront": "1.498",
						"yrTerm3Convertible.allUpfront": "1.118",
						"yrTerm3Convertible.noUpfront": "1.232",
						"yrTerm3Convertible.partialUpfront": "1.141",
						"yrTerm3Standard.allUpfront": "0.938",
						"yrTerm3Standard.noUpfront": "1.071",
						"yrTerm3Standard.partialUpfront": "0.998"
					}
				},
				"mswin": {
					"ondemand": "3.968",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.940",
						"yrTerm1Standard.noUpfront": "3.051",
						"yrTerm1Standard.partialUpfront": "2.970",
						"yrTerm3Convertible.allUpfront": "2.590",
						"yrTerm3Convertible.noUpfront": "2.704",
						"yrTerm3Convertible.partialUpfront": "2.613",
						"yrTerm3Standard.allUpfront": "2.410",
						"yrTerm3Standard.noUpfront": "2.543",
						"yrTerm3Standard.partialUpfront": "2.470"
					}
				},
				"mswinSQL": {
					"ondemand": "12.979",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.951",
						"yrTerm1Standard.noUpfront": "12.062",
						"yrTerm1Standard.partialUpfront": "11.981",
						"yrTerm3Convertible.allUpfront": "11.601",
						"yrTerm3Convertible.noUpfront": "11.715",
						"yrTerm3Convertible.partialUpfront": "11.624",
						"yrTerm3Standard.allUpfront": "11.421",
						"yrTerm3Standard.noUpfront": "11.554",
						"yrTerm3Standard.partialUpfront": "11.481"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.504",
						"yrTerm1Standard.noUpfront": "3.615",
						"yrTerm1Standard.partialUpfront": "3.534",
						"yrTerm3Convertible.allUpfront": "3.154",
						"yrTerm3Convertible.noUpfront": "3.268",
						"yrTerm3Convertible.partialUpfront": "3.177",
						"yrTerm3Standard.allUpfront": "2.974",
						"yrTerm3Standard.noUpfront": "3.107",
						"yrTerm3Standard.partialUpfront": "3.034"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "4.48",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.634",
						"yrTerm1Standard.noUpfront": "2.822",
						"yrTerm1Standard.partialUpfront": "2.688",
						"yrTerm3Convertible.allUpfront": "2.020",
						"yrTerm3Convertible.noUpfront": "2.226",
						"yrTerm3Convertible.partialUpfront": "2.061",
						"yrTerm3Standard.allUpfront": "1.684",
						"yrTerm3Standard.noUpfront": "1.935",
						"yrTerm3Standard.partialUpfront": "1.792"
					}
				},
				"mswin": {
					"ondemand": "5.952",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.106",
						"yrTerm1Standard.noUpfront": "4.294",
						"yrTerm1Standard.partialUpfront": "4.160",
						"yrTerm3Convertible.allUpfront": "3.492",
						"yrTerm3Convertible.noUpfront": "3.698",
						"yrTerm3Convertible.partialUpfront": "3.533",
						"yrTerm3Standard.allUpfront": "3.156",
						"yrTerm3Standard.noUpfront": "3.407",
						"yrTerm3Standard.partialUpfront": "3.264"
					}
				},
				"mswinSQL": {
					"ondemand": "14.963",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.117",
						"yrTerm1Standard.noUpfront": "13.305",
						"yrTerm1Standard.partialUpfront": "13.171",
						"yrTerm3Convertible.allUpfront": "12.503",
						"yrTerm3Convertible.noUpfront": "12.709",
						"yrTerm3Convertible.partialUpfront": "12.544",
						"yrTerm3Standard.allUpfront": "12.167",
						"yrTerm3Standard.noUpfront": "12.418",
						"yrTerm3Standard.partialUpfront": "12.275"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "6.516",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.670",
						"yrTerm1Standard.noUpfront": "4.858",
						"yrTerm1Standard.partialUpfront": "4.724",
						"yrTerm3Convertible.allUpfront": "4.056",
						"yrTerm3Convertible.noUpfront": "4.262",
						"yrTerm3Convertible.partialUpfront": "4.097",
						"yrTerm3Standard.allUpfront": "3.720",
						"yrTerm3Standard.noUpfront": "3.971",
						"yrTerm3Standard.partialUpfront": "3.828"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "2.128",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.251",
						"yrTerm1Standard.noUpfront": "1.344",
						"yrTerm1Standard.partialUpfront": "1.277",
						"yrTerm3Convertible.allUpfront": "0.956",
						"yrTerm3Convertible.noUpfront": "1.053",
						"yrTerm3Convertible.partialUpfront": "0.975",
						"yrTerm3Standard.allUpfront": "0.800",
						"yrTerm3Standard.noUpfront": "0.916",
						"yrTerm3Standard.partialUpfront": "0.851"
					}
				},
				"mswin": {
					"ondemand": "3.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.723",
						"yrTerm1Standard.noUpfront": "2.816",
						"yrTerm1Standard.partialUpfront": "2.749",
						"yrTerm3Convertible.allUpfront": "2.428",
						"yrTerm3Convertible.noUpfront": "2.525",
						"yrTerm3Convertible.partialUpfront": "2.447",
						"yrTerm3Standard.allUpfront": "2.272",
						"yrTerm3Standard.noUpfront": "2.388",
						"yrTerm3Standard.partialUpfront": "2.323"
					}
				},
				"mswinSQL": {
					"ondemand": "12.611",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.734",
						"yrTerm1Standard.noUpfront": "11.827",
						"yrTerm1Standard.partialUpfront": "11.760",
						"yrTerm3Convertible.allUpfront": "11.439",
						"yrTerm3Convertible.noUpfront": "11.536",
						"yrTerm3Convertible.partialUpfront": "11.458",
						"yrTerm3Standard.allUpfront": "11.283",
						"yrTerm3Standard.noUpfront": "11.399",
						"yrTerm3Standard.partialUpfront": "11.334"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.164",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.287",
						"yrTerm1Standard.noUpfront": "3.380",
						"yrTerm1Standard.partialUpfront": "3.313",
						"yrTerm3Convertible.allUpfront": "2.992",
						"yrTerm3Convertible.noUpfront": "3.089",
						"yrTerm3Convertible.partialUpfront": "3.011",
						"yrTerm3Standard.allUpfront": "2.836",
						"yrTerm3Standard.noUpfront": "2.952",
						"yrTerm3Standard.partialUpfront": "2.887"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.128",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.251",
						"yrTerm1Standard.noUpfront": "1.344",
						"yrTerm1Standard.partialUpfront": "1.277",
						"yrTerm3Convertible.allUpfront": "0.956",
						"yrTerm3Convertible.noUpfront": "1.053",
						"yrTerm3Convertible.partialUpfront": "0.975",
						"yrTerm3Standard.allUpfront": "0.800",
						"yrTerm3Standard.noUpfront": "0.916",
						"yrTerm3Standard.partialUpfront": "0.851"
					}
				},
				"mswin": {
					"ondemand": "3.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.723",
						"yrTerm1Standard.noUpfront": "2.816",
						"yrTerm1Standard.partialUpfront": "2.749",
						"yrTerm3Convertible.allUpfront": "2.428",
						"yrTerm3Convertible.noUpfront": "2.525",
						"yrTerm3Convertible.partialUpfront": "2.447",
						"yrTerm3Standard.allUpfront": "2.272",
						"yrTerm3Standard.noUpfront": "2.388",
						"yrTerm3Standard.partialUpfront": "2.323"
					}
				},
				"mswinSQL": {
					"ondemand": "12.611",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.734",
						"yrTerm1Standard.noUpfront": "11.827",
						"yrTerm1Standard.partialUpfront": "11.760",
						"yrTerm3Convertible.allUpfront": "11.439",
						"yrTerm3Convertible.noUpfront": "11.536",
						"yrTerm3Convertible.partialUpfront": "11.458",
						"yrTerm3Standard.allUpfront": "11.283",
						"yrTerm3Standard.noUpfront": "11.399",
						"yrTerm3Standard.partialUpfront": "11.334"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.164",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.287",
						"yrTerm1Standard.noUpfront": "3.380",
						"yrTerm1Standard.partialUpfront": "3.313",
						"yrTerm3Convertible.allUpfront": "2.992",
						"yrTerm3Convertible.noUpfront": "3.089",
						"yrTerm3Convertible.partialUpfront": "3.011",
						"yrTerm3Standard.allUpfront": "2.836",
						"yrTerm3Standard.noUpfront": "2.952",
						"yrTerm3Standard.partialUpfront": "2.887"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "2.554",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.502",
						"yrTerm1Standard.noUpfront": "1.613",
						"yrTerm1Standard.partialUpfront": "1.532",
						"yrTerm3Convertible.allUpfront": "1.154",
						"yrTerm3Convertible.noUpfront": "1.272",
						"yrTerm3Convertible.partialUpfront": "1.178",
						"yrTerm3Standard.allUpfront": "0.960",
						"yrTerm3Standard.noUpfront": "1.106",
						"yrTerm3Standard.partialUpfront": "1.021"
					}
				},
				"mswin": {
					"ondemand": "4.026",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.974",
						"yrTerm1Standard.noUpfront": "3.085",
						"yrTerm1Standard.partialUpfront": "3.004",
						"yrTerm3Convertible.allUpfront": "2.626",
						"yrTerm3Convertible.noUpfront": "2.744",
						"yrTerm3Convertible.partialUpfront": "2.650",
						"yrTerm3Standard.allUpfront": "2.432",
						"yrTerm3Standard.noUpfront": "2.578",
						"yrTerm3Standard.partialUpfront": "2.493"
					}
				},
				"mswinSQL": {
					"ondemand": "13.037",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.985",
						"yrTerm1Standard.noUpfront": "12.096",
						"yrTerm1Standard.partialUpfront": "12.015",
						"yrTerm3Convertible.allUpfront": "11.637",
						"yrTerm3Convertible.noUpfront": "11.755",
						"yrTerm3Convertible.partialUpfront": "11.661",
						"yrTerm3Standard.allUpfront": "11.443",
						"yrTerm3Standard.noUpfront": "11.589",
						"yrTerm3Standard.partialUpfront": "11.504"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.59",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.538",
						"yrTerm1Standard.noUpfront": "3.649",
						"yrTerm1Standard.partialUpfront": "3.568",
						"yrTerm3Convertible.allUpfront": "3.190",
						"yrTerm3Convertible.noUpfront": "3.308",
						"yrTerm3Convertible.partialUpfront": "3.214",
						"yrTerm3Standard.allUpfront": "2.996",
						"yrTerm3Standard.noUpfront": "3.142",
						"yrTerm3Standard.partialUpfront": "3.057"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "2.371",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.394",
						"yrTerm1Standard.noUpfront": "1.495",
						"yrTerm1Standard.partialUpfront": "1.423",
						"yrTerm3Convertible.allUpfront": "1.064",
						"yrTerm3Convertible.noUpfront": "1.173",
						"yrTerm3Convertible.partialUpfront": "1.086",
						"yrTerm3Standard.allUpfront": "0.892",
						"yrTerm3Standard.noUpfront": "1.020",
						"yrTerm3Standard.partialUpfront": "0.948"
					}
				},
				"mswin": {
					"ondemand": "3.843",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.866",
						"yrTerm1Standard.noUpfront": "2.967",
						"yrTerm1Standard.partialUpfront": "2.895",
						"yrTerm3Convertible.allUpfront": "2.536",
						"yrTerm3Convertible.noUpfront": "2.645",
						"yrTerm3Convertible.partialUpfront": "2.558",
						"yrTerm3Standard.allUpfront": "2.364",
						"yrTerm3Standard.noUpfront": "2.492",
						"yrTerm3Standard.partialUpfront": "2.420"
					}
				},
				"mswinSQL": {
					"ondemand": "12.854",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.877",
						"yrTerm1Standard.noUpfront": "11.978",
						"yrTerm1Standard.partialUpfront": "11.906",
						"yrTerm3Convertible.allUpfront": "11.547",
						"yrTerm3Convertible.noUpfront": "11.656",
						"yrTerm3Convertible.partialUpfront": "11.569",
						"yrTerm3Standard.allUpfront": "11.375",
						"yrTerm3Standard.noUpfront": "11.503",
						"yrTerm3Standard.partialUpfront": "11.431"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.407",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.430",
						"yrTerm1Standard.noUpfront": "3.531",
						"yrTerm1Standard.partialUpfront": "3.459",
						"yrTerm3Convertible.allUpfront": "3.100",
						"yrTerm3Convertible.noUpfront": "3.209",
						"yrTerm3Convertible.partialUpfront": "3.122",
						"yrTerm3Standard.allUpfront": "2.928",
						"yrTerm3Standard.noUpfront": "3.056",
						"yrTerm3Standard.partialUpfront": "2.984"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "2.128",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.251",
						"yrTerm1Standard.noUpfront": "1.344",
						"yrTerm1Standard.partialUpfront": "1.277",
						"yrTerm3Convertible.allUpfront": "0.956",
						"yrTerm3Convertible.noUpfront": "1.053",
						"yrTerm3Convertible.partialUpfront": "0.975",
						"yrTerm3Standard.allUpfront": "0.800",
						"yrTerm3Standard.noUpfront": "0.916",
						"yrTerm3Standard.partialUpfront": "0.851"
					}
				},
				"mswin": {
					"ondemand": "3.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.723",
						"yrTerm1Standard.noUpfront": "2.816",
						"yrTerm1Standard.partialUpfront": "2.749",
						"yrTerm3Convertible.allUpfront": "2.428",
						"yrTerm3Convertible.noUpfront": "2.525",
						"yrTerm3Convertible.partialUpfront": "2.447",
						"yrTerm3Standard.allUpfront": "2.272",
						"yrTerm3Standard.noUpfront": "2.388",
						"yrTerm3Standard.partialUpfront": "2.323"
					}
				},
				"mswinSQL": {
					"ondemand": "12.611",
					"reserved": {
						"yrTerm1Standard.allUpfront": "11.734",
						"yrTerm1Standard.noUpfront": "11.827",
						"yrTerm1Standard.partialUpfront": "11.760",
						"yrTerm3Convertible.allUpfront": "11.439",
						"yrTerm3Convertible.noUpfront": "11.536",
						"yrTerm3Convertible.partialUpfront": "11.458",
						"yrTerm3Standard.allUpfront": "11.283",
						"yrTerm3Standard.noUpfront": "11.399",
						"yrTerm3Standard.partialUpfront": "11.334"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.164",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.287",
						"yrTerm1Standard.noUpfront": "3.380",
						"yrTerm1Standard.partialUpfront": "3.313",
						"yrTerm3Convertible.allUpfront": "2.992",
						"yrTerm3Convertible.noUpfront": "3.089",
						"yrTerm3Convertible.partialUpfront": "3.011",
						"yrTerm3Standard.allUpfront": "2.836",
						"yrTerm3Standard.noUpfront": "2.952",
						"yrTerm3Standard.partialUpfront": "2.887"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 32,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 195,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 65000,
		"ebs_max_bandwidth": 12000,
		"ebs_optimized": true,
		"ebs_throughput": 1500,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r4.16xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 488,
		"network_performance": "20 Gigabit",
		"placement_group_support": true,
		"pretty_name": "R4 High-Memory 16xlarge",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "5.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.011",
						"yrTerm1Standard.noUpfront": "3.226",
						"yrTerm1Standard.partialUpfront": "3.072",
						"yrTerm3Convertible.allUpfront": "2.308",
						"yrTerm3Convertible.noUpfront": "2.544",
						"yrTerm3Convertible.partialUpfront": "2.355",
						"yrTerm3Standard.allUpfront": "1.925",
						"yrTerm3Standard.noUpfront": "2.212",
						"yrTerm3Standard.partialUpfront": "2.048"
					}
				},
				"mswin": {
					"ondemand": "8.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.955",
						"yrTerm1Standard.noUpfront": "6.170",
						"yrTerm1Standard.partialUpfront": "6.016",
						"yrTerm3Convertible.allUpfront": "5.252",
						"yrTerm3Convertible.noUpfront": "5.488",
						"yrTerm3Convertible.partialUpfront": "5.299",
						"yrTerm3Standard.allUpfront": "4.869",
						"yrTerm3Standard.noUpfront": "5.156",
						"yrTerm3Standard.partialUpfront": "4.992"
					}
				},
				"mswinSQL": {
					"ondemand": "26.086",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.977",
						"yrTerm1Standard.noUpfront": "24.192",
						"yrTerm1Standard.partialUpfront": "24.038",
						"yrTerm3Convertible.allUpfront": "23.274",
						"yrTerm3Convertible.noUpfront": "23.510",
						"yrTerm3Convertible.partialUpfront": "23.321",
						"yrTerm3Standard.allUpfront": "22.891",
						"yrTerm3Standard.noUpfront": "23.178",
						"yrTerm3Standard.partialUpfront": "23.014"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.191",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.082",
						"yrTerm1Standard.noUpfront": "7.297",
						"yrTerm1Standard.partialUpfront": "7.143",
						"yrTerm3Convertible.allUpfront": "6.379",
						"yrTerm3Convertible.noUpfront": "6.615",
						"yrTerm3Convertible.partialUpfront": "6.426",
						"yrTerm3Standard.allUpfront": "5.996",
						"yrTerm3Standard.noUpfront": "6.283",
						"yrTerm3Standard.partialUpfront": "6.119"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "5.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.011",
						"yrTerm1Standard.noUpfront": "3.226",
						"yrTerm1Standard.partialUpfront": "3.072",
						"yrTerm3Convertible.allUpfront": "2.308",
						"yrTerm3Convertible.noUpfront": "2.544",
						"yrTerm3Convertible.partialUpfront": "2.355",
						"yrTerm3Standard.allUpfront": "1.925",
						"yrTerm3Standard.noUpfront": "2.212",
						"yrTerm3Standard.partialUpfront": "2.048"
					}
				},
				"mswin": {
					"ondemand": "8.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.955",
						"yrTerm1Standard.noUpfront": "6.170",
						"yrTerm1Standard.partialUpfront": "6.016",
						"yrTerm3Convertible.allUpfront": "5.252",
						"yrTerm3Convertible.noUpfront": "5.488",
						"yrTerm3Convertible.partialUpfront": "5.299",
						"yrTerm3Standard.allUpfront": "4.869",
						"yrTerm3Standard.noUpfront": "5.156",
						"yrTerm3Standard.partialUpfront": "4.992"
					}
				},
				"mswinSQL": {
					"ondemand": "26.086",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.977",
						"yrTerm1Standard.noUpfront": "24.192",
						"yrTerm1Standard.partialUpfront": "24.038",
						"yrTerm3Convertible.allUpfront": "23.274",
						"yrTerm3Convertible.noUpfront": "23.510",
						"yrTerm3Convertible.partialUpfront": "23.321",
						"yrTerm3Standard.allUpfront": "22.891",
						"yrTerm3Standard.noUpfront": "23.178",
						"yrTerm3Standard.partialUpfront": "23.014"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.191",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.082",
						"yrTerm1Standard.noUpfront": "7.297",
						"yrTerm1Standard.partialUpfront": "7.143",
						"yrTerm3Convertible.allUpfront": "6.379",
						"yrTerm3Convertible.noUpfront": "6.615",
						"yrTerm3Convertible.partialUpfront": "6.426",
						"yrTerm3Standard.allUpfront": "5.996",
						"yrTerm3Standard.noUpfront": "6.283",
						"yrTerm3Standard.partialUpfront": "6.119"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "4.864",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.860",
						"yrTerm1Standard.noUpfront": "3.058",
						"yrTerm1Standard.partialUpfront": "2.918",
						"yrTerm3Convertible.allUpfront": "2.200",
						"yrTerm3Convertible.noUpfront": "2.424",
						"yrTerm3Convertible.partialUpfront": "2.245",
						"yrTerm3Standard.allUpfront": "1.829",
						"yrTerm3Standard.noUpfront": "2.108",
						"yrTerm3Standard.partialUpfront": "1.946"
					}
				},
				"mswin": {
					"ondemand": "7.808",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.804",
						"yrTerm1Standard.noUpfront": "6.002",
						"yrTerm1Standard.partialUpfront": "5.862",
						"yrTerm3Convertible.allUpfront": "5.144",
						"yrTerm3Convertible.noUpfront": "5.368",
						"yrTerm3Convertible.partialUpfront": "5.189",
						"yrTerm3Standard.allUpfront": "4.773",
						"yrTerm3Standard.noUpfront": "5.052",
						"yrTerm3Standard.partialUpfront": "4.890"
					}
				},
				"mswinSQL": {
					"ondemand": "25.83",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.826",
						"yrTerm1Standard.noUpfront": "24.024",
						"yrTerm1Standard.partialUpfront": "23.884",
						"yrTerm3Convertible.allUpfront": "23.166",
						"yrTerm3Convertible.noUpfront": "23.390",
						"yrTerm3Convertible.partialUpfront": "23.211",
						"yrTerm3Standard.allUpfront": "22.795",
						"yrTerm3Standard.noUpfront": "23.074",
						"yrTerm3Standard.partialUpfront": "22.912"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.935",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.931",
						"yrTerm1Standard.noUpfront": "7.129",
						"yrTerm1Standard.partialUpfront": "6.989",
						"yrTerm3Convertible.allUpfront": "6.271",
						"yrTerm3Convertible.noUpfront": "6.495",
						"yrTerm3Convertible.partialUpfront": "6.316",
						"yrTerm3Standard.allUpfront": "5.900",
						"yrTerm3Standard.noUpfront": "6.179",
						"yrTerm3Standard.partialUpfront": "6.017"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "5.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.011",
						"yrTerm1Standard.noUpfront": "3.226",
						"yrTerm1Standard.partialUpfront": "3.072",
						"yrTerm3Convertible.allUpfront": "2.308",
						"yrTerm3Convertible.noUpfront": "2.544",
						"yrTerm3Convertible.partialUpfront": "2.355",
						"yrTerm3Standard.allUpfront": "1.925",
						"yrTerm3Standard.noUpfront": "2.212",
						"yrTerm3Standard.partialUpfront": "2.048"
					}
				},
				"mswin": {
					"ondemand": "8.064",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.955",
						"yrTerm1Standard.noUpfront": "6.170",
						"yrTerm1Standard.partialUpfront": "6.016",
						"yrTerm3Convertible.allUpfront": "5.252",
						"yrTerm3Convertible.noUpfront": "5.488",
						"yrTerm3Convertible.partialUpfront": "5.299",
						"yrTerm3Standard.allUpfront": "4.869",
						"yrTerm3Standard.noUpfront": "5.156",
						"yrTerm3Standard.partialUpfront": "4.992"
					}
				},
				"mswinSQL": {
					"ondemand": "26.086",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.977",
						"yrTerm1Standard.noUpfront": "24.192",
						"yrTerm1Standard.partialUpfront": "24.038",
						"yrTerm3Convertible.allUpfront": "23.274",
						"yrTerm3Convertible.noUpfront": "23.510",
						"yrTerm3Convertible.partialUpfront": "23.321",
						"yrTerm3Standard.allUpfront": "22.891",
						"yrTerm3Standard.noUpfront": "23.178",
						"yrTerm3Standard.partialUpfront": "23.014"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.191",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.082",
						"yrTerm1Standard.noUpfront": "7.297",
						"yrTerm1Standard.partialUpfront": "7.143",
						"yrTerm3Convertible.allUpfront": "6.379",
						"yrTerm3Convertible.noUpfront": "6.615",
						"yrTerm3Convertible.partialUpfront": "6.426",
						"yrTerm3Standard.allUpfront": "5.996",
						"yrTerm3Standard.noUpfront": "6.283",
						"yrTerm3Standard.partialUpfront": "6.119"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "5.107",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.003",
						"yrTerm1Standard.noUpfront": "3.226",
						"yrTerm1Standard.partialUpfront": "3.064",
						"yrTerm3Convertible.allUpfront": "2.308",
						"yrTerm3Convertible.noUpfront": "2.544",
						"yrTerm3Convertible.partialUpfront": "2.355",
						"yrTerm3Standard.allUpfront": "1.920",
						"yrTerm3Standard.noUpfront": "2.212",
						"yrTerm3Standard.partialUpfront": "2.043"
					}
				},
				"mswin": {
					"ondemand": "8.051",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.947",
						"yrTerm1Standard.noUpfront": "6.170",
						"yrTerm1Standard.partialUpfront": "6.008",
						"yrTerm3Convertible.allUpfront": "5.252",
						"yrTerm3Convertible.noUpfront": "5.488",
						"yrTerm3Convertible.partialUpfront": "5.299",
						"yrTerm3Standard.allUpfront": "4.864",
						"yrTerm3Standard.noUpfront": "5.156",
						"yrTerm3Standard.partialUpfront": "4.987"
					}
				},
				"mswinSQL": {
					"ondemand": "26.073",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.969",
						"yrTerm1Standard.noUpfront": "24.192",
						"yrTerm1Standard.partialUpfront": "24.030",
						"yrTerm3Convertible.allUpfront": "23.274",
						"yrTerm3Convertible.noUpfront": "23.510",
						"yrTerm3Convertible.partialUpfront": "23.321",
						"yrTerm3Standard.allUpfront": "22.886",
						"yrTerm3Standard.noUpfront": "23.178",
						"yrTerm3Standard.partialUpfront": "23.009"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.178",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.074",
						"yrTerm1Standard.noUpfront": "7.297",
						"yrTerm1Standard.partialUpfront": "7.135",
						"yrTerm3Convertible.allUpfront": "6.379",
						"yrTerm3Convertible.noUpfront": "6.615",
						"yrTerm3Convertible.partialUpfront": "6.426",
						"yrTerm3Standard.allUpfront": "5.991",
						"yrTerm3Standard.noUpfront": "6.283",
						"yrTerm3Standard.partialUpfront": "6.114"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "4.672",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.747",
						"yrTerm1Standard.noUpfront": "2.957",
						"yrTerm1Standard.partialUpfront": "2.803",
						"yrTerm3Convertible.allUpfront": "2.092",
						"yrTerm3Convertible.noUpfront": "2.305",
						"yrTerm3Convertible.partialUpfront": "2.134",
						"yrTerm3Standard.allUpfront": "1.757",
						"yrTerm3Standard.noUpfront": "2.005",
						"yrTerm3Standard.partialUpfront": "1.869"
					}
				},
				"mswin": {
					"ondemand": "7.616",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.691",
						"yrTerm1Standard.noUpfront": "5.901",
						"yrTerm1Standard.partialUpfront": "5.747",
						"yrTerm3Convertible.allUpfront": "5.036",
						"yrTerm3Convertible.noUpfront": "5.249",
						"yrTerm3Convertible.partialUpfront": "5.078",
						"yrTerm3Standard.allUpfront": "4.701",
						"yrTerm3Standard.noUpfront": "4.949",
						"yrTerm3Standard.partialUpfront": "4.813"
					}
				},
				"mswinSQL": {
					"ondemand": "25.638",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.713",
						"yrTerm1Standard.noUpfront": "23.923",
						"yrTerm1Standard.partialUpfront": "23.769",
						"yrTerm3Convertible.allUpfront": "23.058",
						"yrTerm3Convertible.noUpfront": "23.271",
						"yrTerm3Convertible.partialUpfront": "23.100",
						"yrTerm3Standard.allUpfront": "22.723",
						"yrTerm3Standard.noUpfront": "22.971",
						"yrTerm3Standard.partialUpfront": "22.835"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.743",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.818",
						"yrTerm1Standard.noUpfront": "7.028",
						"yrTerm1Standard.partialUpfront": "6.874",
						"yrTerm3Convertible.allUpfront": "6.163",
						"yrTerm3Convertible.noUpfront": "6.376",
						"yrTerm3Convertible.partialUpfront": "6.205",
						"yrTerm3Standard.allUpfront": "5.828",
						"yrTerm3Standard.noUpfront": "6.076",
						"yrTerm3Standard.partialUpfront": "5.940"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "5.122",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.012",
						"yrTerm1Standard.noUpfront": "3.226",
						"yrTerm1Standard.partialUpfront": "3.073",
						"yrTerm3Convertible.allUpfront": "2.308",
						"yrTerm3Convertible.noUpfront": "2.544",
						"yrTerm3Convertible.partialUpfront": "2.355",
						"yrTerm3Standard.allUpfront": "1.926",
						"yrTerm3Standard.noUpfront": "2.212",
						"yrTerm3Standard.partialUpfront": "2.049"
					}
				},
				"mswin": {
					"ondemand": "8.066",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.956",
						"yrTerm1Standard.noUpfront": "6.170",
						"yrTerm1Standard.partialUpfront": "6.017",
						"yrTerm3Convertible.allUpfront": "5.252",
						"yrTerm3Convertible.noUpfront": "5.488",
						"yrTerm3Convertible.partialUpfront": "5.299",
						"yrTerm3Standard.allUpfront": "4.870",
						"yrTerm3Standard.noUpfront": "5.156",
						"yrTerm3Standard.partialUpfront": "4.993"
					}
				},
				"mswinSQL": {
					"ondemand": "26.088",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.978",
						"yrTerm1Standard.noUpfront": "24.192",
						"yrTerm1Standard.partialUpfront": "24.039",
						"yrTerm3Convertible.allUpfront": "23.274",
						"yrTerm3Convertible.noUpfront": "23.510",
						"yrTerm3Convertible.partialUpfront": "23.321",
						"yrTerm3Standard.allUpfront": "22.892",
						"yrTerm3Standard.noUpfront": "23.178",
						"yrTerm3Standard.partialUpfront": "23.015"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.193",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.083",
						"yrTerm1Standard.noUpfront": "7.297",
						"yrTerm1Standard.partialUpfront": "7.144",
						"yrTerm3Convertible.allUpfront": "6.379",
						"yrTerm3Convertible.noUpfront": "6.615",
						"yrTerm3Convertible.partialUpfront": "6.426",
						"yrTerm3Standard.allUpfront": "5.997",
						"yrTerm3Standard.noUpfront": "6.283",
						"yrTerm3Standard.partialUpfront": "6.120"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "4.742",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.789",
						"yrTerm1Standard.noUpfront": "2.990",
						"yrTerm1Standard.partialUpfront": "2.845",
						"yrTerm3Convertible.allUpfront": "2.128",
						"yrTerm3Convertible.noUpfront": "2.345",
						"yrTerm3Convertible.partialUpfront": "2.171",
						"yrTerm3Standard.allUpfront": "1.783",
						"yrTerm3Standard.noUpfront": "2.039",
						"yrTerm3Standard.partialUpfront": "1.897"
					}
				},
				"mswin": {
					"ondemand": "7.686",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.733",
						"yrTerm1Standard.noUpfront": "5.934",
						"yrTerm1Standard.partialUpfront": "5.789",
						"yrTerm3Convertible.allUpfront": "5.072",
						"yrTerm3Convertible.noUpfront": "5.289",
						"yrTerm3Convertible.partialUpfront": "5.115",
						"yrTerm3Standard.allUpfront": "4.727",
						"yrTerm3Standard.noUpfront": "4.983",
						"yrTerm3Standard.partialUpfront": "4.841"
					}
				},
				"mswinSQL": {
					"ondemand": "25.708",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.755",
						"yrTerm1Standard.noUpfront": "23.956",
						"yrTerm1Standard.partialUpfront": "23.811",
						"yrTerm3Convertible.allUpfront": "23.094",
						"yrTerm3Convertible.noUpfront": "23.311",
						"yrTerm3Convertible.partialUpfront": "23.137",
						"yrTerm3Standard.allUpfront": "22.749",
						"yrTerm3Standard.noUpfront": "23.005",
						"yrTerm3Standard.partialUpfront": "22.863"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.813",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.860",
						"yrTerm1Standard.noUpfront": "7.061",
						"yrTerm1Standard.partialUpfront": "6.916",
						"yrTerm3Convertible.allUpfront": "6.199",
						"yrTerm3Convertible.noUpfront": "6.416",
						"yrTerm3Convertible.partialUpfront": "6.242",
						"yrTerm3Standard.allUpfront": "5.854",
						"yrTerm3Standard.noUpfront": "6.110",
						"yrTerm3Standard.partialUpfront": "5.968"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "4.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.935",
						"yrTerm1Standard.noUpfront": "3.158",
						"yrTerm1Standard.partialUpfront": "2.995",
						"yrTerm3Convertible.allUpfront": "2.236",
						"yrTerm3Convertible.noUpfront": "2.464",
						"yrTerm3Convertible.partialUpfront": "2.282",
						"yrTerm3Standard.allUpfront": "1.877",
						"yrTerm3Standard.noUpfront": "2.143",
						"yrTerm3Standard.partialUpfront": "1.997"
					}
				},
				"mswin": {
					"ondemand": "7.936",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.879",
						"yrTerm1Standard.noUpfront": "6.102",
						"yrTerm1Standard.partialUpfront": "5.939",
						"yrTerm3Convertible.allUpfront": "5.180",
						"yrTerm3Convertible.noUpfront": "5.408",
						"yrTerm3Convertible.partialUpfront": "5.226",
						"yrTerm3Standard.allUpfront": "4.821",
						"yrTerm3Standard.noUpfront": "5.087",
						"yrTerm3Standard.partialUpfront": "4.941"
					}
				},
				"mswinSQL": {
					"ondemand": "25.958",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.901",
						"yrTerm1Standard.noUpfront": "24.124",
						"yrTerm1Standard.partialUpfront": "23.961",
						"yrTerm3Convertible.allUpfront": "23.202",
						"yrTerm3Convertible.noUpfront": "23.430",
						"yrTerm3Convertible.partialUpfront": "23.248",
						"yrTerm3Standard.allUpfront": "22.843",
						"yrTerm3Standard.noUpfront": "23.109",
						"yrTerm3Standard.partialUpfront": "22.963"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.063",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.006",
						"yrTerm1Standard.noUpfront": "7.229",
						"yrTerm1Standard.partialUpfront": "7.066",
						"yrTerm3Convertible.allUpfront": "6.307",
						"yrTerm3Convertible.noUpfront": "6.535",
						"yrTerm3Convertible.partialUpfront": "6.353",
						"yrTerm3Standard.allUpfront": "5.948",
						"yrTerm3Standard.noUpfront": "6.214",
						"yrTerm3Standard.partialUpfront": "6.068"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "8.96",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.268",
						"yrTerm1Standard.noUpfront": "5.645",
						"yrTerm1Standard.partialUpfront": "5.376",
						"yrTerm3Convertible.allUpfront": "4.039",
						"yrTerm3Convertible.noUpfront": "4.451",
						"yrTerm3Convertible.partialUpfront": "4.122",
						"yrTerm3Standard.allUpfront": "3.369",
						"yrTerm3Standard.noUpfront": "3.871",
						"yrTerm3Standard.partialUpfront": "3.584"
					}
				},
				"mswin": {
					"ondemand": "11.904",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.212",
						"yrTerm1Standard.noUpfront": "8.589",
						"yrTerm1Standard.partialUpfront": "8.320",
						"yrTerm3Convertible.allUpfront": "6.983",
						"yrTerm3Convertible.noUpfront": "7.395",
						"yrTerm3Convertible.partialUpfront": "7.066",
						"yrTerm3Standard.allUpfront": "6.313",
						"yrTerm3Standard.noUpfront": "6.815",
						"yrTerm3Standard.partialUpfront": "6.528"
					}
				},
				"mswinSQL": {
					"ondemand": "29.926",
					"reserved": {
						"yrTerm1Standard.allUpfront": "26.234",
						"yrTerm1Standard.noUpfront": "26.611",
						"yrTerm1Standard.partialUpfront": "26.342",
						"yrTerm3Convertible.allUpfront": "25.005",
						"yrTerm3Convertible.noUpfront": "25.417",
						"yrTerm3Convertible.partialUpfront": "25.088",
						"yrTerm3Standard.allUpfront": "24.335",
						"yrTerm3Standard.noUpfront": "24.837",
						"yrTerm3Standard.partialUpfront": "24.550"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "13.031",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.339",
						"yrTerm1Standard.noUpfront": "9.716",
						"yrTerm1Standard.partialUpfront": "9.447",
						"yrTerm3Convertible.allUpfront": "8.110",
						"yrTerm3Convertible.noUpfront": "8.522",
						"yrTerm3Convertible.partialUpfront": "8.193",
						"yrTerm3Standard.allUpfront": "7.440",
						"yrTerm3Standard.noUpfront": "7.942",
						"yrTerm3Standard.partialUpfront": "7.655"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "4.256",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.503",
						"yrTerm1Standard.noUpfront": "2.688",
						"yrTerm1Standard.partialUpfront": "2.554",
						"yrTerm3Convertible.allUpfront": "1.911",
						"yrTerm3Convertible.noUpfront": "2.106",
						"yrTerm3Convertible.partialUpfront": "1.950",
						"yrTerm3Standard.allUpfront": "1.600",
						"yrTerm3Standard.noUpfront": "1.832",
						"yrTerm3Standard.partialUpfront": "1.702"
					}
				},
				"mswin": {
					"ondemand": "7.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.447",
						"yrTerm1Standard.noUpfront": "5.632",
						"yrTerm1Standard.partialUpfront": "5.498",
						"yrTerm3Convertible.allUpfront": "4.855",
						"yrTerm3Convertible.noUpfront": "5.050",
						"yrTerm3Convertible.partialUpfront": "4.894",
						"yrTerm3Standard.allUpfront": "4.544",
						"yrTerm3Standard.noUpfront": "4.776",
						"yrTerm3Standard.partialUpfront": "4.646"
					}
				},
				"mswinSQL": {
					"ondemand": "25.222",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.469",
						"yrTerm1Standard.noUpfront": "23.654",
						"yrTerm1Standard.partialUpfront": "23.520",
						"yrTerm3Convertible.allUpfront": "22.877",
						"yrTerm3Convertible.noUpfront": "23.072",
						"yrTerm3Convertible.partialUpfront": "22.916",
						"yrTerm3Standard.allUpfront": "22.566",
						"yrTerm3Standard.noUpfront": "22.798",
						"yrTerm3Standard.partialUpfront": "22.668"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.327",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.574",
						"yrTerm1Standard.noUpfront": "6.759",
						"yrTerm1Standard.partialUpfront": "6.625",
						"yrTerm3Convertible.allUpfront": "5.982",
						"yrTerm3Convertible.noUpfront": "6.177",
						"yrTerm3Convertible.partialUpfront": "6.021",
						"yrTerm3Standard.allUpfront": "5.671",
						"yrTerm3Standard.noUpfront": "5.903",
						"yrTerm3Standard.partialUpfront": "5.773"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "4.256",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.503",
						"yrTerm1Standard.noUpfront": "2.688",
						"yrTerm1Standard.partialUpfront": "2.554",
						"yrTerm3Convertible.allUpfront": "1.911",
						"yrTerm3Convertible.noUpfront": "2.106",
						"yrTerm3Convertible.partialUpfront": "1.950",
						"yrTerm3Standard.allUpfront": "1.600",
						"yrTerm3Standard.noUpfront": "1.832",
						"yrTerm3Standard.partialUpfront": "1.702"
					}
				},
				"mswin": {
					"ondemand": "7.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.447",
						"yrTerm1Standard.noUpfront": "5.632",
						"yrTerm1Standard.partialUpfront": "5.498",
						"yrTerm3Convertible.allUpfront": "4.855",
						"yrTerm3Convertible.noUpfront": "5.050",
						"yrTerm3Convertible.partialUpfront": "4.894",
						"yrTerm3Standard.allUpfront": "4.544",
						"yrTerm3Standard.noUpfront": "4.776",
						"yrTerm3Standard.partialUpfront": "4.646"
					}
				},
				"mswinSQL": {
					"ondemand": "25.222",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.469",
						"yrTerm1Standard.noUpfront": "23.654",
						"yrTerm1Standard.partialUpfront": "23.520",
						"yrTerm3Convertible.allUpfront": "22.877",
						"yrTerm3Convertible.noUpfront": "23.072",
						"yrTerm3Convertible.partialUpfront": "22.916",
						"yrTerm3Standard.allUpfront": "22.566",
						"yrTerm3Standard.noUpfront": "22.798",
						"yrTerm3Standard.partialUpfront": "22.668"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.327",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.574",
						"yrTerm1Standard.noUpfront": "6.759",
						"yrTerm1Standard.partialUpfront": "6.625",
						"yrTerm3Convertible.allUpfront": "5.982",
						"yrTerm3Convertible.noUpfront": "6.177",
						"yrTerm3Convertible.partialUpfront": "6.021",
						"yrTerm3Standard.allUpfront": "5.671",
						"yrTerm3Standard.noUpfront": "5.903",
						"yrTerm3Standard.partialUpfront": "5.773"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "5.107",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.003",
						"yrTerm1Standard.noUpfront": "3.226",
						"yrTerm1Standard.partialUpfront": "3.064",
						"yrTerm3Convertible.allUpfront": "2.308",
						"yrTerm3Convertible.noUpfront": "2.544",
						"yrTerm3Convertible.partialUpfront": "2.355",
						"yrTerm3Standard.allUpfront": "1.920",
						"yrTerm3Standard.noUpfront": "2.212",
						"yrTerm3Standard.partialUpfront": "2.043"
					}
				},
				"mswin": {
					"ondemand": "8.051",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.947",
						"yrTerm1Standard.noUpfront": "6.170",
						"yrTerm1Standard.partialUpfront": "6.008",
						"yrTerm3Convertible.allUpfront": "5.252",
						"yrTerm3Convertible.noUpfront": "5.488",
						"yrTerm3Convertible.partialUpfront": "5.299",
						"yrTerm3Standard.allUpfront": "4.864",
						"yrTerm3Standard.noUpfront": "5.156",
						"yrTerm3Standard.partialUpfront": "4.987"
					}
				},
				"mswinSQL": {
					"ondemand": "26.073",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.969",
						"yrTerm1Standard.noUpfront": "24.192",
						"yrTerm1Standard.partialUpfront": "24.030",
						"yrTerm3Convertible.allUpfront": "23.274",
						"yrTerm3Convertible.noUpfront": "23.510",
						"yrTerm3Convertible.partialUpfront": "23.321",
						"yrTerm3Standard.allUpfront": "22.886",
						"yrTerm3Standard.noUpfront": "23.178",
						"yrTerm3Standard.partialUpfront": "23.009"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.178",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.074",
						"yrTerm1Standard.noUpfront": "7.297",
						"yrTerm1Standard.partialUpfront": "7.135",
						"yrTerm3Convertible.allUpfront": "6.379",
						"yrTerm3Convertible.noUpfront": "6.615",
						"yrTerm3Convertible.partialUpfront": "6.426",
						"yrTerm3Standard.allUpfront": "5.991",
						"yrTerm3Standard.noUpfront": "6.283",
						"yrTerm3Standard.partialUpfront": "6.114"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "4.742",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.789",
						"yrTerm1Standard.noUpfront": "2.990",
						"yrTerm1Standard.partialUpfront": "2.845",
						"yrTerm3Convertible.allUpfront": "2.128",
						"yrTerm3Convertible.noUpfront": "2.345",
						"yrTerm3Convertible.partialUpfront": "2.171",
						"yrTerm3Standard.allUpfront": "1.783",
						"yrTerm3Standard.noUpfront": "2.039",
						"yrTerm3Standard.partialUpfront": "1.897"
					}
				},
				"mswin": {
					"ondemand": "7.686",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.733",
						"yrTerm1Standard.noUpfront": "5.934",
						"yrTerm1Standard.partialUpfront": "5.789",
						"yrTerm3Convertible.allUpfront": "5.072",
						"yrTerm3Convertible.noUpfront": "5.289",
						"yrTerm3Convertible.partialUpfront": "5.115",
						"yrTerm3Standard.allUpfront": "4.727",
						"yrTerm3Standard.noUpfront": "4.983",
						"yrTerm3Standard.partialUpfront": "4.841"
					}
				},
				"mswinSQL": {
					"ondemand": "25.708",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.755",
						"yrTerm1Standard.noUpfront": "23.956",
						"yrTerm1Standard.partialUpfront": "23.811",
						"yrTerm3Convertible.allUpfront": "23.094",
						"yrTerm3Convertible.noUpfront": "23.311",
						"yrTerm3Convertible.partialUpfront": "23.137",
						"yrTerm3Standard.allUpfront": "22.749",
						"yrTerm3Standard.noUpfront": "23.005",
						"yrTerm3Standard.partialUpfront": "22.863"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.813",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.860",
						"yrTerm1Standard.noUpfront": "7.061",
						"yrTerm1Standard.partialUpfront": "6.916",
						"yrTerm3Convertible.allUpfront": "6.199",
						"yrTerm3Convertible.noUpfront": "6.416",
						"yrTerm3Convertible.partialUpfront": "6.242",
						"yrTerm3Standard.allUpfront": "5.854",
						"yrTerm3Standard.noUpfront": "6.110",
						"yrTerm3Standard.partialUpfront": "5.968"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "4.256",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.503",
						"yrTerm1Standard.noUpfront": "2.688",
						"yrTerm1Standard.partialUpfront": "2.554",
						"yrTerm3Convertible.allUpfront": "1.911",
						"yrTerm3Convertible.noUpfront": "2.106",
						"yrTerm3Convertible.partialUpfront": "1.950",
						"yrTerm3Standard.allUpfront": "1.600",
						"yrTerm3Standard.noUpfront": "1.832",
						"yrTerm3Standard.partialUpfront": "1.702"
					}
				},
				"mswin": {
					"ondemand": "7.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.447",
						"yrTerm1Standard.noUpfront": "5.632",
						"yrTerm1Standard.partialUpfront": "5.498",
						"yrTerm3Convertible.allUpfront": "4.855",
						"yrTerm3Convertible.noUpfront": "5.050",
						"yrTerm3Convertible.partialUpfront": "4.894",
						"yrTerm3Standard.allUpfront": "4.544",
						"yrTerm3Standard.noUpfront": "4.776",
						"yrTerm3Standard.partialUpfront": "4.646"
					}
				},
				"mswinSQL": {
					"ondemand": "25.222",
					"reserved": {
						"yrTerm1Standard.allUpfront": "23.469",
						"yrTerm1Standard.noUpfront": "23.654",
						"yrTerm1Standard.partialUpfront": "23.520",
						"yrTerm3Convertible.allUpfront": "22.877",
						"yrTerm3Convertible.noUpfront": "23.072",
						"yrTerm3Convertible.partialUpfront": "22.916",
						"yrTerm3Standard.allUpfront": "22.566",
						"yrTerm3Standard.noUpfront": "22.798",
						"yrTerm3Standard.partialUpfront": "22.668"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "8.327",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.574",
						"yrTerm1Standard.noUpfront": "6.759",
						"yrTerm1Standard.partialUpfront": "6.625",
						"yrTerm3Convertible.allUpfront": "5.982",
						"yrTerm3Convertible.noUpfront": "6.177",
						"yrTerm3Convertible.partialUpfront": "6.021",
						"yrTerm3Standard.allUpfront": "5.671",
						"yrTerm3Standard.noUpfront": "5.903",
						"yrTerm3Standard.partialUpfront": "5.773"
					}
				}
			}
		},
		"storage": null,
		"vCPU": 64,
		"vpc": {
			"ips_per_eni": 50,
			"max_enis": 15
		},
		"vpc_only": true
	},
	{
		"ECU": 6.5,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r3.large",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 15.25,
		"network_performance": "Moderate",
		"placement_group_support": true,
		"pretty_name": "R3 High-Memory Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.127",
						"yrTerm1Standard.noUpfront": "0.149",
						"yrTerm1Standard.partialUpfront": "0.130",
						"yrTerm3Convertible.allUpfront": "0.114",
						"yrTerm3Convertible.noUpfront": "0.134",
						"yrTerm3Convertible.partialUpfront": "0.117",
						"yrTerm3Standard.allUpfront": "0.084",
						"yrTerm3Standard.partialUpfront": "0.090"
					}
				},
				"mswin": {
					"ondemand": "0.3",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.218",
						"yrTerm1Standard.noUpfront": "0.253",
						"yrTerm1Standard.partialUpfront": "0.222",
						"yrTerm3Convertible.allUpfront": "0.206",
						"yrTerm3Convertible.noUpfront": "0.238",
						"yrTerm3Convertible.partialUpfront": "0.209",
						"yrTerm3Standard.allUpfront": "0.174",
						"yrTerm3Standard.partialUpfront": "0.182"
					}
				},
				"mswinSQL": {
					"ondemand": "0.961",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.707",
						"yrTerm1Standard.noUpfront": "0.844",
						"yrTerm1Standard.partialUpfront": "0.722",
						"yrTerm3Convertible.allUpfront": "0.694",
						"yrTerm3Convertible.noUpfront": "0.829",
						"yrTerm3Convertible.partialUpfront": "0.709",
						"yrTerm3Standard.allUpfront": "0.608",
						"yrTerm3Standard.partialUpfront": "0.646"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.401",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.230",
						"yrTerm1Standard.noUpfront": "0.274",
						"yrTerm1Standard.partialUpfront": "0.235",
						"yrTerm3Convertible.allUpfront": "0.217",
						"yrTerm3Convertible.noUpfront": "0.259",
						"yrTerm3Convertible.partialUpfront": "0.222",
						"yrTerm3Standard.allUpfront": "0.192",
						"yrTerm3Standard.partialUpfront": "0.205"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.127",
						"yrTerm1Standard.noUpfront": "0.152",
						"yrTerm1Standard.partialUpfront": "0.130",
						"yrTerm3Convertible.allUpfront": "0.115",
						"yrTerm3Convertible.noUpfront": "0.137",
						"yrTerm3Convertible.partialUpfront": "0.117",
						"yrTerm3Standard.allUpfront": "0.085",
						"yrTerm3Standard.partialUpfront": "0.090"
					}
				},
				"mswin": {
					"ondemand": "0.292",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.219",
						"yrTerm1Standard.noUpfront": "0.244",
						"yrTerm1Standard.partialUpfront": "0.222",
						"yrTerm3Convertible.allUpfront": "0.207",
						"yrTerm3Convertible.noUpfront": "0.229",
						"yrTerm3Convertible.partialUpfront": "0.209",
						"yrTerm3Standard.allUpfront": "0.177",
						"yrTerm3Standard.partialUpfront": "0.182"
					}
				},
				"mswinSQL": {
					"ondemand": "1.029",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.956",
						"yrTerm1Standard.noUpfront": "0.981",
						"yrTerm1Standard.partialUpfront": "0.959",
						"yrTerm3Convertible.allUpfront": "0.944",
						"yrTerm3Convertible.noUpfront": "0.966",
						"yrTerm3Convertible.partialUpfront": "0.946",
						"yrTerm3Standard.allUpfront": "0.914",
						"yrTerm3Standard.partialUpfront": "0.919"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.369",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.296",
						"yrTerm1Standard.noUpfront": "0.321",
						"yrTerm1Standard.partialUpfront": "0.299",
						"yrTerm3Convertible.allUpfront": "0.284",
						"yrTerm3Convertible.noUpfront": "0.306",
						"yrTerm3Convertible.partialUpfront": "0.286",
						"yrTerm3Standard.allUpfront": "0.254",
						"yrTerm3Standard.partialUpfront": "0.259"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.19",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.121",
						"yrTerm1Standard.noUpfront": "0.145",
						"yrTerm1Standard.partialUpfront": "0.124",
						"yrTerm3Convertible.allUpfront": "0.109",
						"yrTerm3Convertible.noUpfront": "0.131",
						"yrTerm3Convertible.partialUpfront": "0.112",
						"yrTerm3Standard.allUpfront": "0.080",
						"yrTerm3Standard.partialUpfront": "0.085"
					}
				},
				"mswin": {
					"ondemand": "0.282",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.213",
						"yrTerm1Standard.noUpfront": "0.237",
						"yrTerm1Standard.partialUpfront": "0.216",
						"yrTerm3Convertible.allUpfront": "0.201",
						"yrTerm3Convertible.noUpfront": "0.223",
						"yrTerm3Convertible.partialUpfront": "0.204",
						"yrTerm3Standard.allUpfront": "0.172",
						"yrTerm3Standard.partialUpfront": "0.177"
					}
				},
				"mswinSQL": {
					"ondemand": "1.019",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.950",
						"yrTerm1Standard.noUpfront": "0.974",
						"yrTerm1Standard.partialUpfront": "0.953",
						"yrTerm3Convertible.allUpfront": "0.938",
						"yrTerm3Convertible.noUpfront": "0.960",
						"yrTerm3Convertible.partialUpfront": "0.941",
						"yrTerm3Standard.allUpfront": "0.909",
						"yrTerm3Standard.partialUpfront": "0.914"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.359",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.290",
						"yrTerm1Standard.noUpfront": "0.314",
						"yrTerm1Standard.partialUpfront": "0.293",
						"yrTerm3Convertible.allUpfront": "0.278",
						"yrTerm3Convertible.noUpfront": "0.300",
						"yrTerm3Convertible.partialUpfront": "0.281",
						"yrTerm3Standard.allUpfront": "0.249",
						"yrTerm3Standard.partialUpfront": "0.254"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.127",
						"yrTerm1Standard.noUpfront": "0.149",
						"yrTerm1Standard.partialUpfront": "0.130",
						"yrTerm3Convertible.allUpfront": "0.114",
						"yrTerm3Convertible.noUpfront": "0.134",
						"yrTerm3Convertible.partialUpfront": "0.117",
						"yrTerm3Standard.allUpfront": "0.084",
						"yrTerm3Standard.partialUpfront": "0.090"
					}
				},
				"mswin": {
					"ondemand": "0.313",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.226",
						"yrTerm1Standard.noUpfront": "0.270",
						"yrTerm1Standard.partialUpfront": "0.231",
						"yrTerm3Convertible.allUpfront": "0.213",
						"yrTerm3Convertible.noUpfront": "0.255",
						"yrTerm3Convertible.partialUpfront": "0.218",
						"yrTerm3Standard.allUpfront": "0.179",
						"yrTerm3Standard.partialUpfront": "0.190"
					}
				},
				"mswinSQL": {
					"ondemand": "0.98",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.721",
						"yrTerm1Standard.noUpfront": "0.861",
						"yrTerm1Standard.partialUpfront": "0.737",
						"yrTerm3Convertible.allUpfront": "0.709",
						"yrTerm3Convertible.noUpfront": "0.846",
						"yrTerm3Convertible.partialUpfront": "0.723",
						"yrTerm3Standard.allUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.658"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.42",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.246",
						"yrTerm1Standard.noUpfront": "0.294",
						"yrTerm1Standard.partialUpfront": "0.251",
						"yrTerm3Convertible.allUpfront": "0.233",
						"yrTerm3Convertible.noUpfront": "0.279",
						"yrTerm3Convertible.partialUpfront": "0.238",
						"yrTerm3Standard.allUpfront": "0.206",
						"yrTerm3Standard.partialUpfront": "0.219"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.127",
						"yrTerm1Standard.noUpfront": "0.149",
						"yrTerm1Standard.partialUpfront": "0.130",
						"yrTerm3Convertible.allUpfront": "0.114",
						"yrTerm3Convertible.noUpfront": "0.134",
						"yrTerm3Convertible.partialUpfront": "0.117",
						"yrTerm3Standard.allUpfront": "0.084",
						"yrTerm3Standard.partialUpfront": "0.090"
					}
				},
				"mswin": {
					"ondemand": "0.313",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.226",
						"yrTerm1Standard.noUpfront": "0.270",
						"yrTerm1Standard.partialUpfront": "0.231",
						"yrTerm3Convertible.allUpfront": "0.213",
						"yrTerm3Convertible.noUpfront": "0.255",
						"yrTerm3Convertible.partialUpfront": "0.218",
						"yrTerm3Standard.allUpfront": "0.179",
						"yrTerm3Standard.partialUpfront": "0.190"
					}
				},
				"mswinSQL": {
					"ondemand": "0.98",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.721",
						"yrTerm1Standard.noUpfront": "0.861",
						"yrTerm1Standard.partialUpfront": "0.737",
						"yrTerm3Convertible.allUpfront": "0.709",
						"yrTerm3Convertible.noUpfront": "0.846",
						"yrTerm3Convertible.partialUpfront": "0.723",
						"yrTerm3Standard.allUpfront": "0.619",
						"yrTerm3Standard.partialUpfront": "0.658"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.42",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.246",
						"yrTerm1Standard.noUpfront": "0.294",
						"yrTerm1Standard.partialUpfront": "0.251",
						"yrTerm3Convertible.allUpfront": "0.233",
						"yrTerm3Convertible.noUpfront": "0.279",
						"yrTerm3Convertible.partialUpfront": "0.238",
						"yrTerm3Standard.allUpfront": "0.206",
						"yrTerm3Standard.partialUpfront": "0.219"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.123",
						"yrTerm1Standard.noUpfront": "0.146",
						"yrTerm1Standard.partialUpfront": "0.126",
						"yrTerm3Convertible.allUpfront": "0.111",
						"yrTerm3Convertible.noUpfront": "0.131",
						"yrTerm3Convertible.partialUpfront": "0.113",
						"yrTerm3Standard.allUpfront": "0.082",
						"yrTerm3Standard.partialUpfront": "0.087"
					}
				},
				"mswin": {
					"ondemand": "0.325",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.234",
						"yrTerm1Standard.noUpfront": "0.279",
						"yrTerm1Standard.partialUpfront": "0.239",
						"yrTerm3Convertible.allUpfront": "0.222",
						"yrTerm3Convertible.noUpfront": "0.264",
						"yrTerm3Convertible.partialUpfront": "0.226",
						"yrTerm3Standard.allUpfront": "0.181",
						"yrTerm3Standard.partialUpfront": "0.192"
					}
				},
				"mswinSQL": {
					"ondemand": "1.292",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.732",
						"yrTerm1Standard.noUpfront": "0.874",
						"yrTerm1Standard.partialUpfront": "0.747",
						"yrTerm3Convertible.allUpfront": "0.720",
						"yrTerm3Convertible.noUpfront": "0.859",
						"yrTerm3Convertible.partialUpfront": "0.735",
						"yrTerm3Standard.allUpfront": "0.622",
						"yrTerm3Standard.partialUpfront": "0.661"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.508",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.262",
						"yrTerm1Standard.noUpfront": "0.313",
						"yrTerm1Standard.partialUpfront": "0.268",
						"yrTerm3Convertible.allUpfront": "0.250",
						"yrTerm3Convertible.noUpfront": "0.298",
						"yrTerm3Convertible.partialUpfront": "0.255",
						"yrTerm3Standard.allUpfront": "0.213",
						"yrTerm3Standard.partialUpfront": "0.226"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.185",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.114",
						"yrTerm1Standard.noUpfront": "0.136",
						"yrTerm1Standard.partialUpfront": "0.117",
						"yrTerm3Convertible.allUpfront": "0.103",
						"yrTerm3Convertible.noUpfront": "0.122",
						"yrTerm3Convertible.partialUpfront": "0.105",
						"yrTerm3Standard.allUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.080"
					}
				},
				"mswin": {
					"ondemand": "0.29",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.210",
						"yrTerm1Standard.noUpfront": "0.251",
						"yrTerm1Standard.partialUpfront": "0.215",
						"yrTerm3Convertible.allUpfront": "0.199",
						"yrTerm3Convertible.noUpfront": "0.237",
						"yrTerm3Convertible.partialUpfront": "0.203",
						"yrTerm3Standard.allUpfront": "0.179",
						"yrTerm3Standard.partialUpfront": "0.190"
					}
				},
				"mswinSQL": {
					"ondemand": "0.945",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.696",
						"yrTerm1Standard.noUpfront": "0.831",
						"yrTerm1Standard.partialUpfront": "0.710",
						"yrTerm3Convertible.allUpfront": "0.685",
						"yrTerm3Convertible.noUpfront": "0.817",
						"yrTerm3Convertible.partialUpfront": "0.699",
						"yrTerm3Standard.allUpfront": "0.598",
						"yrTerm3Standard.partialUpfront": "0.635"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.385",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.226",
						"yrTerm1Standard.noUpfront": "0.270",
						"yrTerm1Standard.partialUpfront": "0.231",
						"yrTerm3Convertible.allUpfront": "0.215",
						"yrTerm3Convertible.noUpfront": "0.256",
						"yrTerm3Convertible.partialUpfront": "0.219",
						"yrTerm3Standard.allUpfront": "0.189",
						"yrTerm3Standard.partialUpfront": "0.201"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.223",
						"yrTerm1Standard.noUpfront": "0.267",
						"yrTerm1Standard.partialUpfront": "0.228",
						"yrTerm3Convertible.allUpfront": "0.201",
						"yrTerm3Convertible.noUpfront": "0.240",
						"yrTerm3Convertible.partialUpfront": "0.205",
						"yrTerm3Standard.allUpfront": "0.148",
						"yrTerm3Standard.partialUpfront": "0.157"
					}
				},
				"mswin": {
					"ondemand": "0.442",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.315",
						"yrTerm1Standard.noUpfront": "0.359",
						"yrTerm1Standard.partialUpfront": "0.320",
						"yrTerm3Convertible.allUpfront": "0.293",
						"yrTerm3Convertible.noUpfront": "0.332",
						"yrTerm3Convertible.partialUpfront": "0.297",
						"yrTerm3Standard.allUpfront": "0.240",
						"yrTerm3Standard.partialUpfront": "0.249"
					}
				},
				"mswinSQL": {
					"ondemand": "1.179",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.052",
						"yrTerm1Standard.noUpfront": "1.096",
						"yrTerm1Standard.partialUpfront": "1.057",
						"yrTerm3Convertible.allUpfront": "1.030",
						"yrTerm3Convertible.noUpfront": "1.069",
						"yrTerm3Convertible.partialUpfront": "1.034",
						"yrTerm3Standard.allUpfront": "0.977",
						"yrTerm3Standard.partialUpfront": "0.986"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.519",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.392",
						"yrTerm1Standard.noUpfront": "0.436",
						"yrTerm1Standard.partialUpfront": "0.397",
						"yrTerm3Convertible.allUpfront": "0.370",
						"yrTerm3Convertible.noUpfront": "0.409",
						"yrTerm3Convertible.partialUpfront": "0.374",
						"yrTerm3Standard.allUpfront": "0.317",
						"yrTerm3Standard.partialUpfront": "0.326"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.088",
						"yrTerm1Standard.noUpfront": "0.105",
						"yrTerm1Standard.partialUpfront": "0.090",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.095",
						"yrTerm3Convertible.partialUpfront": "0.081",
						"yrTerm3Standard.allUpfront": "0.058",
						"yrTerm3Standard.partialUpfront": "0.062"
					}
				},
				"mswin": {
					"ondemand": "0.291",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.199",
						"yrTerm1Standard.noUpfront": "0.238",
						"yrTerm1Standard.partialUpfront": "0.203",
						"yrTerm3Convertible.allUpfront": "0.190",
						"yrTerm3Convertible.noUpfront": "0.228",
						"yrTerm3Convertible.partialUpfront": "0.194",
						"yrTerm3Standard.allUpfront": "0.146",
						"yrTerm3Standard.partialUpfront": "0.155"
					}
				},
				"mswinSQL": {
					"ondemand": "0.946",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.697",
						"yrTerm1Standard.noUpfront": "0.833",
						"yrTerm1Standard.partialUpfront": "0.711",
						"yrTerm3Convertible.allUpfront": "0.689",
						"yrTerm3Convertible.noUpfront": "0.823",
						"yrTerm3Convertible.partialUpfront": "0.702",
						"yrTerm3Standard.allUpfront": "0.599",
						"yrTerm3Standard.partialUpfront": "0.637"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.386",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.228",
						"yrTerm1Standard.noUpfront": "0.272",
						"yrTerm1Standard.partialUpfront": "0.232",
						"yrTerm3Convertible.allUpfront": "0.219",
						"yrTerm3Convertible.noUpfront": "0.262",
						"yrTerm3Convertible.partialUpfront": "0.223",
						"yrTerm3Standard.allUpfront": "0.190",
						"yrTerm3Standard.partialUpfront": "0.202"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.088",
						"yrTerm1Standard.noUpfront": "0.105",
						"yrTerm1Standard.partialUpfront": "0.090",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.095",
						"yrTerm3Convertible.partialUpfront": "0.081",
						"yrTerm3Standard.allUpfront": "0.058",
						"yrTerm3Standard.partialUpfront": "0.062"
					}
				},
				"mswin": {
					"ondemand": "0.291",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.199",
						"yrTerm1Standard.noUpfront": "0.238",
						"yrTerm1Standard.partialUpfront": "0.203",
						"yrTerm3Convertible.allUpfront": "0.190",
						"yrTerm3Convertible.noUpfront": "0.228",
						"yrTerm3Convertible.partialUpfront": "0.194",
						"yrTerm3Standard.allUpfront": "0.146",
						"yrTerm3Standard.partialUpfront": "0.155"
					}
				},
				"mswinSQL": {
					"ondemand": "0.946",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.697",
						"yrTerm1Standard.noUpfront": "0.833",
						"yrTerm1Standard.partialUpfront": "0.711",
						"yrTerm3Convertible.allUpfront": "0.689",
						"yrTerm3Convertible.noUpfront": "0.823",
						"yrTerm3Convertible.partialUpfront": "0.702",
						"yrTerm3Standard.allUpfront": "0.599",
						"yrTerm3Standard.partialUpfront": "0.637"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.386",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.228",
						"yrTerm1Standard.noUpfront": "0.272",
						"yrTerm1Standard.partialUpfront": "0.232",
						"yrTerm3Convertible.allUpfront": "0.219",
						"yrTerm3Convertible.noUpfront": "0.262",
						"yrTerm3Convertible.partialUpfront": "0.223",
						"yrTerm3Standard.allUpfront": "0.190",
						"yrTerm3Standard.partialUpfront": "0.202"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.106",
						"yrTerm1Standard.noUpfront": "0.125",
						"yrTerm1Standard.partialUpfront": "0.107",
						"yrTerm3Convertible.allUpfront": "0.095",
						"yrTerm3Convertible.noUpfront": "0.113",
						"yrTerm3Convertible.partialUpfront": "0.097",
						"yrTerm3Standard.allUpfront": "0.070",
						"yrTerm3Standard.partialUpfront": "0.074"
					}
				},
				"mswin": {
					"ondemand": "0.325",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.217",
						"yrTerm1Standard.noUpfront": "0.259",
						"yrTerm1Standard.partialUpfront": "0.222",
						"yrTerm3Convertible.allUpfront": "0.207",
						"yrTerm3Convertible.noUpfront": "0.247",
						"yrTerm3Convertible.partialUpfront": "0.211",
						"yrTerm3Standard.allUpfront": "0.159",
						"yrTerm3Standard.partialUpfront": "0.167"
					}
				},
				"mswinSQL": {
					"ondemand": "0.98",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.715",
						"yrTerm1Standard.noUpfront": "0.854",
						"yrTerm1Standard.partialUpfront": "0.730",
						"yrTerm3Convertible.allUpfront": "0.705",
						"yrTerm3Convertible.noUpfront": "0.842",
						"yrTerm3Convertible.partialUpfront": "0.719",
						"yrTerm3Standard.allUpfront": "0.611",
						"yrTerm3Standard.partialUpfront": "0.649"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.42",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.246",
						"yrTerm1Standard.noUpfront": "0.293",
						"yrTerm1Standard.partialUpfront": "0.251",
						"yrTerm3Convertible.allUpfront": "0.235",
						"yrTerm3Convertible.noUpfront": "0.281",
						"yrTerm3Convertible.partialUpfront": "0.240",
						"yrTerm3Standard.allUpfront": "0.202",
						"yrTerm3Standard.partialUpfront": "0.214"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.185",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.114",
						"yrTerm1Standard.noUpfront": "0.136",
						"yrTerm1Standard.partialUpfront": "0.117",
						"yrTerm3Convertible.allUpfront": "0.103",
						"yrTerm3Convertible.noUpfront": "0.122",
						"yrTerm3Convertible.partialUpfront": "0.105",
						"yrTerm3Standard.allUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.080"
					}
				},
				"mswin": {
					"ondemand": "0.32",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.210",
						"yrTerm1Standard.noUpfront": "0.251",
						"yrTerm1Standard.partialUpfront": "0.215",
						"yrTerm3Convertible.allUpfront": "0.199",
						"yrTerm3Convertible.noUpfront": "0.237",
						"yrTerm3Convertible.partialUpfront": "0.203",
						"yrTerm3Standard.allUpfront": "0.179",
						"yrTerm3Standard.partialUpfront": "0.190"
					}
				},
				"mswinSQL": {
					"ondemand": "0.974",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.717",
						"yrTerm1Standard.noUpfront": "0.856",
						"yrTerm1Standard.partialUpfront": "0.732",
						"yrTerm3Convertible.allUpfront": "0.705",
						"yrTerm3Convertible.noUpfront": "0.842",
						"yrTerm3Convertible.partialUpfront": "0.720",
						"yrTerm3Standard.allUpfront": "0.616",
						"yrTerm3Standard.partialUpfront": "0.655"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.414",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.243",
						"yrTerm1Standard.noUpfront": "0.290",
						"yrTerm1Standard.partialUpfront": "0.248",
						"yrTerm3Convertible.allUpfront": "0.231",
						"yrTerm3Convertible.noUpfront": "0.276",
						"yrTerm3Convertible.partialUpfront": "0.236",
						"yrTerm3Standard.allUpfront": "0.203",
						"yrTerm3Standard.partialUpfront": "0.215"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.088",
						"yrTerm1Standard.noUpfront": "0.105",
						"yrTerm1Standard.partialUpfront": "0.090",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.095",
						"yrTerm3Convertible.partialUpfront": "0.081",
						"yrTerm3Standard.allUpfront": "0.058",
						"yrTerm3Standard.partialUpfront": "0.062"
					}
				},
				"mswin": {
					"ondemand": "0.291",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.199",
						"yrTerm1Standard.noUpfront": "0.238",
						"yrTerm1Standard.partialUpfront": "0.203",
						"yrTerm3Convertible.allUpfront": "0.190",
						"yrTerm3Convertible.noUpfront": "0.228",
						"yrTerm3Convertible.partialUpfront": "0.194",
						"yrTerm3Standard.allUpfront": "0.146",
						"yrTerm3Standard.partialUpfront": "0.155"
					}
				},
				"mswinSQL": {
					"ondemand": "0.946",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.697",
						"yrTerm1Standard.noUpfront": "0.833",
						"yrTerm1Standard.partialUpfront": "0.711",
						"yrTerm3Convertible.allUpfront": "0.689",
						"yrTerm3Convertible.noUpfront": "0.823",
						"yrTerm3Convertible.partialUpfront": "0.702",
						"yrTerm3Standard.allUpfront": "0.599",
						"yrTerm3Standard.partialUpfront": "0.637"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.386",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.228",
						"yrTerm1Standard.noUpfront": "0.272",
						"yrTerm1Standard.partialUpfront": "0.232",
						"yrTerm3Convertible.allUpfront": "0.219",
						"yrTerm3Convertible.noUpfront": "0.262",
						"yrTerm3Convertible.partialUpfront": "0.223",
						"yrTerm3Standard.allUpfront": "0.190",
						"yrTerm3Standard.partialUpfront": "0.202"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 32,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 10,
			"max_enis": 3
		},
		"vpc_only": false
	},
	{
		"ECU": 13,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 4000,
		"ebs_max_bandwidth": 500,
		"ebs_optimized": true,
		"ebs_throughput": 62.5,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r3.xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 30.5,
		"network_performance": "Moderate",
		"placement_group_support": true,
		"pretty_name": "R3 High-Memory Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.399",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.255",
						"yrTerm1Standard.noUpfront": "0.298",
						"yrTerm1Standard.partialUpfront": "0.260",
						"yrTerm3Convertible.allUpfront": "0.229",
						"yrTerm3Convertible.noUpfront": "0.268",
						"yrTerm3Convertible.partialUpfront": "0.234",
						"yrTerm3Standard.allUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.178"
					}
				},
				"mswin": {
					"ondemand": "0.599",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.423",
						"yrTerm1Standard.noUpfront": "0.489",
						"yrTerm1Standard.partialUpfront": "0.432",
						"yrTerm3Convertible.allUpfront": "0.398",
						"yrTerm3Convertible.noUpfront": "0.459",
						"yrTerm3Convertible.partialUpfront": "0.406",
						"yrTerm3Standard.allUpfront": "0.338",
						"yrTerm3Standard.partialUpfront": "0.360"
					}
				},
				"mswinSQL": {
					"ondemand": "1.427",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.031",
						"yrTerm1Standard.noUpfront": "1.231",
						"yrTerm1Standard.partialUpfront": "1.052",
						"yrTerm3Convertible.allUpfront": "1.005",
						"yrTerm3Convertible.noUpfront": "1.201",
						"yrTerm3Convertible.partialUpfront": "1.026",
						"yrTerm3Standard.allUpfront": "0.886",
						"yrTerm3Standard.partialUpfront": "0.942"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.787",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.453",
						"yrTerm1Standard.noUpfront": "0.541",
						"yrTerm1Standard.partialUpfront": "0.462",
						"yrTerm3Convertible.allUpfront": "0.428",
						"yrTerm3Convertible.noUpfront": "0.511",
						"yrTerm3Convertible.partialUpfront": "0.436",
						"yrTerm3Standard.allUpfront": "0.378",
						"yrTerm3Standard.partialUpfront": "0.402"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.399",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.255",
						"yrTerm1Standard.noUpfront": "0.304",
						"yrTerm1Standard.partialUpfront": "0.260",
						"yrTerm3Convertible.allUpfront": "0.229",
						"yrTerm3Convertible.noUpfront": "0.274",
						"yrTerm3Convertible.partialUpfront": "0.234",
						"yrTerm3Standard.allUpfront": "0.167",
						"yrTerm3Standard.partialUpfront": "0.178"
					}
				},
				"mswin": {
					"ondemand": "0.583",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.439",
						"yrTerm1Standard.noUpfront": "0.488",
						"yrTerm1Standard.partialUpfront": "0.444",
						"yrTerm3Convertible.allUpfront": "0.413",
						"yrTerm3Convertible.noUpfront": "0.458",
						"yrTerm3Convertible.partialUpfront": "0.418",
						"yrTerm3Standard.allUpfront": "0.351",
						"yrTerm3Standard.partialUpfront": "0.362"
					}
				},
				"mswinSQL": {
					"ondemand": "1.291",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.147",
						"yrTerm1Standard.noUpfront": "1.196",
						"yrTerm1Standard.partialUpfront": "1.152",
						"yrTerm3Convertible.allUpfront": "1.121",
						"yrTerm3Convertible.noUpfront": "1.166",
						"yrTerm3Convertible.partialUpfront": "1.126",
						"yrTerm3Standard.allUpfront": "1.059",
						"yrTerm3Standard.partialUpfront": "1.070"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.656",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.512",
						"yrTerm1Standard.noUpfront": "0.561",
						"yrTerm1Standard.partialUpfront": "0.517",
						"yrTerm3Convertible.allUpfront": "0.486",
						"yrTerm3Convertible.noUpfront": "0.531",
						"yrTerm3Convertible.partialUpfront": "0.491",
						"yrTerm3Standard.allUpfront": "0.424",
						"yrTerm3Standard.partialUpfront": "0.435"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.379",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.242",
						"yrTerm1Standard.noUpfront": "0.288",
						"yrTerm1Standard.partialUpfront": "0.246",
						"yrTerm3Convertible.allUpfront": "0.218",
						"yrTerm3Convertible.noUpfront": "0.259",
						"yrTerm3Convertible.partialUpfront": "0.221",
						"yrTerm3Standard.allUpfront": "0.159",
						"yrTerm3Standard.partialUpfront": "0.169"
					}
				},
				"mswin": {
					"ondemand": "0.563",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.426",
						"yrTerm1Standard.noUpfront": "0.472",
						"yrTerm1Standard.partialUpfront": "0.430",
						"yrTerm3Convertible.allUpfront": "0.402",
						"yrTerm3Convertible.noUpfront": "0.443",
						"yrTerm3Convertible.partialUpfront": "0.405",
						"yrTerm3Standard.allUpfront": "0.343",
						"yrTerm3Standard.partialUpfront": "0.353"
					}
				},
				"mswinSQL": {
					"ondemand": "1.271",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.134",
						"yrTerm1Standard.noUpfront": "1.180",
						"yrTerm1Standard.partialUpfront": "1.138",
						"yrTerm3Convertible.allUpfront": "1.110",
						"yrTerm3Convertible.noUpfront": "1.151",
						"yrTerm3Convertible.partialUpfront": "1.113",
						"yrTerm3Standard.allUpfront": "1.051",
						"yrTerm3Standard.partialUpfront": "1.061"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.636",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.499",
						"yrTerm1Standard.noUpfront": "0.545",
						"yrTerm1Standard.partialUpfront": "0.503",
						"yrTerm3Convertible.allUpfront": "0.475",
						"yrTerm3Convertible.noUpfront": "0.516",
						"yrTerm3Convertible.partialUpfront": "0.478",
						"yrTerm3Standard.allUpfront": "0.416",
						"yrTerm3Standard.partialUpfront": "0.426"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.399",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.255",
						"yrTerm1Standard.noUpfront": "0.298",
						"yrTerm1Standard.partialUpfront": "0.260",
						"yrTerm3Convertible.allUpfront": "0.229",
						"yrTerm3Convertible.noUpfront": "0.268",
						"yrTerm3Convertible.partialUpfront": "0.234",
						"yrTerm3Standard.allUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.178"
					}
				},
				"mswin": {
					"ondemand": "0.625",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.439",
						"yrTerm1Standard.noUpfront": "0.523",
						"yrTerm1Standard.partialUpfront": "0.447",
						"yrTerm3Convertible.allUpfront": "0.413",
						"yrTerm3Convertible.noUpfront": "0.493",
						"yrTerm3Convertible.partialUpfront": "0.421",
						"yrTerm3Standard.allUpfront": "0.352",
						"yrTerm3Standard.partialUpfront": "0.368"
					}
				},
				"mswinSQL": {
					"ondemand": "1.466",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.079",
						"yrTerm1Standard.noUpfront": "1.288",
						"yrTerm1Standard.partialUpfront": "1.101",
						"yrTerm3Convertible.allUpfront": "1.054",
						"yrTerm3Convertible.noUpfront": "1.258",
						"yrTerm3Convertible.partialUpfront": "1.075",
						"yrTerm3Standard.allUpfront": "0.928",
						"yrTerm3Standard.partialUpfront": "0.987"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.826",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.485",
						"yrTerm1Standard.noUpfront": "0.579",
						"yrTerm1Standard.partialUpfront": "0.494",
						"yrTerm3Convertible.allUpfront": "0.459",
						"yrTerm3Convertible.noUpfront": "0.549",
						"yrTerm3Convertible.partialUpfront": "0.468",
						"yrTerm3Standard.allUpfront": "0.405",
						"yrTerm3Standard.partialUpfront": "0.430"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.399",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.255",
						"yrTerm1Standard.noUpfront": "0.298",
						"yrTerm1Standard.partialUpfront": "0.260",
						"yrTerm3Convertible.allUpfront": "0.229",
						"yrTerm3Convertible.noUpfront": "0.268",
						"yrTerm3Convertible.partialUpfront": "0.234",
						"yrTerm3Standard.allUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.178"
					}
				},
				"mswin": {
					"ondemand": "0.625",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.439",
						"yrTerm1Standard.noUpfront": "0.523",
						"yrTerm1Standard.partialUpfront": "0.447",
						"yrTerm3Convertible.allUpfront": "0.413",
						"yrTerm3Convertible.noUpfront": "0.493",
						"yrTerm3Convertible.partialUpfront": "0.421",
						"yrTerm3Standard.allUpfront": "0.352",
						"yrTerm3Standard.partialUpfront": "0.368"
					}
				},
				"mswinSQL": {
					"ondemand": "1.466",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.079",
						"yrTerm1Standard.noUpfront": "1.288",
						"yrTerm1Standard.partialUpfront": "1.101",
						"yrTerm3Convertible.allUpfront": "1.054",
						"yrTerm3Convertible.noUpfront": "1.258",
						"yrTerm3Convertible.partialUpfront": "1.075",
						"yrTerm3Standard.allUpfront": "0.928",
						"yrTerm3Standard.partialUpfront": "0.987"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.826",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.485",
						"yrTerm1Standard.noUpfront": "0.579",
						"yrTerm1Standard.partialUpfront": "0.494",
						"yrTerm3Convertible.allUpfront": "0.459",
						"yrTerm3Convertible.noUpfront": "0.549",
						"yrTerm3Convertible.partialUpfront": "0.468",
						"yrTerm3Standard.allUpfront": "0.405",
						"yrTerm3Standard.partialUpfront": "0.430"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.246",
						"yrTerm1Standard.noUpfront": "0.293",
						"yrTerm1Standard.partialUpfront": "0.252",
						"yrTerm3Convertible.allUpfront": "0.222",
						"yrTerm3Convertible.noUpfront": "0.264",
						"yrTerm3Convertible.partialUpfront": "0.227",
						"yrTerm3Standard.allUpfront": "0.163",
						"yrTerm3Standard.partialUpfront": "0.174"
					}
				},
				"mswin": {
					"ondemand": "0.65",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.430",
						"yrTerm1Standard.noUpfront": "0.511",
						"yrTerm1Standard.partialUpfront": "0.443",
						"yrTerm3Convertible.allUpfront": "0.406",
						"yrTerm3Convertible.noUpfront": "0.482",
						"yrTerm3Convertible.partialUpfront": "0.417",
						"yrTerm3Standard.allUpfront": "0.332",
						"yrTerm3Standard.partialUpfront": "0.350"
					}
				},
				"mswinSQL": {
					"ondemand": "1.863",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.086",
						"yrTerm1Standard.noUpfront": "1.296",
						"yrTerm1Standard.partialUpfront": "1.108",
						"yrTerm3Convertible.allUpfront": "1.061",
						"yrTerm3Convertible.noUpfront": "1.267",
						"yrTerm3Convertible.partialUpfront": "1.083",
						"yrTerm3Standard.allUpfront": "0.919",
						"yrTerm3Standard.partialUpfront": "0.978"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.967",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.505",
						"yrTerm1Standard.noUpfront": "0.603",
						"yrTerm1Standard.partialUpfront": "0.515",
						"yrTerm3Convertible.allUpfront": "0.480",
						"yrTerm3Convertible.noUpfront": "0.574",
						"yrTerm3Convertible.partialUpfront": "0.490",
						"yrTerm3Standard.allUpfront": "0.410",
						"yrTerm3Standard.partialUpfront": "0.437"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.371",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.228",
						"yrTerm1Standard.noUpfront": "0.272",
						"yrTerm1Standard.partialUpfront": "0.233",
						"yrTerm3Convertible.allUpfront": "0.205",
						"yrTerm3Convertible.noUpfront": "0.245",
						"yrTerm3Convertible.partialUpfront": "0.210",
						"yrTerm3Standard.allUpfront": "0.151",
						"yrTerm3Standard.partialUpfront": "0.161"
					}
				},
				"mswin": {
					"ondemand": "0.581",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.391",
						"yrTerm1Standard.noUpfront": "0.456",
						"yrTerm1Standard.partialUpfront": "0.399",
						"yrTerm3Convertible.allUpfront": "0.368",
						"yrTerm3Convertible.noUpfront": "0.429",
						"yrTerm3Convertible.partialUpfront": "0.376",
						"yrTerm3Standard.allUpfront": "0.329",
						"yrTerm3Standard.partialUpfront": "0.345"
					}
				},
				"mswinSQL": {
					"ondemand": "1.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.013",
						"yrTerm1Standard.noUpfront": "1.210",
						"yrTerm1Standard.partialUpfront": "1.034",
						"yrTerm3Convertible.allUpfront": "0.990",
						"yrTerm3Convertible.noUpfront": "1.183",
						"yrTerm3Convertible.partialUpfront": "1.011",
						"yrTerm3Standard.allUpfront": "0.871",
						"yrTerm3Standard.partialUpfront": "0.927"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.736",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.432",
						"yrTerm1Standard.noUpfront": "0.516",
						"yrTerm1Standard.partialUpfront": "0.441",
						"yrTerm3Convertible.allUpfront": "0.409",
						"yrTerm3Convertible.noUpfront": "0.489",
						"yrTerm3Convertible.partialUpfront": "0.418",
						"yrTerm3Standard.allUpfront": "0.362",
						"yrTerm3Standard.partialUpfront": "0.385"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.7",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.447",
						"yrTerm1Standard.noUpfront": "0.534",
						"yrTerm1Standard.partialUpfront": "0.456",
						"yrTerm3Convertible.allUpfront": "0.402",
						"yrTerm3Convertible.noUpfront": "0.481",
						"yrTerm3Convertible.partialUpfront": "0.410",
						"yrTerm3Standard.allUpfront": "0.295",
						"yrTerm3Standard.partialUpfront": "0.314"
					}
				},
				"mswin": {
					"ondemand": "0.884",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.631",
						"yrTerm1Standard.noUpfront": "0.718",
						"yrTerm1Standard.partialUpfront": "0.640",
						"yrTerm3Convertible.allUpfront": "0.586",
						"yrTerm3Convertible.noUpfront": "0.665",
						"yrTerm3Convertible.partialUpfront": "0.594",
						"yrTerm3Standard.allUpfront": "0.479",
						"yrTerm3Standard.partialUpfront": "0.498"
					}
				},
				"mswinSQL": {
					"ondemand": "1.592",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.339",
						"yrTerm1Standard.noUpfront": "1.426",
						"yrTerm1Standard.partialUpfront": "1.348",
						"yrTerm3Convertible.allUpfront": "1.294",
						"yrTerm3Convertible.noUpfront": "1.373",
						"yrTerm3Convertible.partialUpfront": "1.302",
						"yrTerm3Standard.allUpfront": "1.187",
						"yrTerm3Standard.partialUpfront": "1.206"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.957",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.704",
						"yrTerm1Standard.noUpfront": "0.791",
						"yrTerm1Standard.partialUpfront": "0.713",
						"yrTerm3Convertible.allUpfront": "0.659",
						"yrTerm3Convertible.noUpfront": "0.738",
						"yrTerm3Convertible.partialUpfront": "0.667",
						"yrTerm3Standard.allUpfront": "0.552",
						"yrTerm3Standard.partialUpfront": "0.571"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.333",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.176",
						"yrTerm1Standard.noUpfront": "0.209",
						"yrTerm1Standard.partialUpfront": "0.180",
						"yrTerm3Convertible.allUpfront": "0.159",
						"yrTerm3Convertible.noUpfront": "0.188",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.117",
						"yrTerm3Standard.partialUpfront": "0.124"
					}
				},
				"mswin": {
					"ondemand": "0.583",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.360",
						"yrTerm1Standard.noUpfront": "0.428",
						"yrTerm1Standard.partialUpfront": "0.366",
						"yrTerm3Convertible.allUpfront": "0.343",
						"yrTerm3Convertible.noUpfront": "0.407",
						"yrTerm3Convertible.partialUpfront": "0.348",
						"yrTerm3Standard.allUpfront": "0.263",
						"yrTerm3Standard.partialUpfront": "0.280"
					}
				},
				"mswinSQL": {
					"ondemand": "1.378",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.016",
						"yrTerm1Standard.noUpfront": "1.213",
						"yrTerm1Standard.partialUpfront": "1.037",
						"yrTerm3Convertible.allUpfront": "0.998",
						"yrTerm3Convertible.noUpfront": "1.192",
						"yrTerm3Convertible.partialUpfront": "1.019",
						"yrTerm3Standard.allUpfront": "0.873",
						"yrTerm3Standard.partialUpfront": "0.928"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.738",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.435",
						"yrTerm1Standard.noUpfront": "0.519",
						"yrTerm1Standard.partialUpfront": "0.444",
						"yrTerm3Convertible.allUpfront": "0.417",
						"yrTerm3Convertible.noUpfront": "0.498",
						"yrTerm3Convertible.partialUpfront": "0.426",
						"yrTerm3Standard.allUpfront": "0.364",
						"yrTerm3Standard.partialUpfront": "0.387"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.333",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.176",
						"yrTerm1Standard.noUpfront": "0.209",
						"yrTerm1Standard.partialUpfront": "0.180",
						"yrTerm3Convertible.allUpfront": "0.159",
						"yrTerm3Convertible.noUpfront": "0.188",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.117",
						"yrTerm3Standard.partialUpfront": "0.124"
					}
				},
				"mswin": {
					"ondemand": "0.583",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.360",
						"yrTerm1Standard.noUpfront": "0.428",
						"yrTerm1Standard.partialUpfront": "0.366",
						"yrTerm3Convertible.allUpfront": "0.343",
						"yrTerm3Convertible.noUpfront": "0.407",
						"yrTerm3Convertible.partialUpfront": "0.348",
						"yrTerm3Standard.allUpfront": "0.263",
						"yrTerm3Standard.partialUpfront": "0.280"
					}
				},
				"mswinSQL": {
					"ondemand": "1.378",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.016",
						"yrTerm1Standard.noUpfront": "1.213",
						"yrTerm1Standard.partialUpfront": "1.037",
						"yrTerm3Convertible.allUpfront": "0.998",
						"yrTerm3Convertible.noUpfront": "1.192",
						"yrTerm3Convertible.partialUpfront": "1.019",
						"yrTerm3Standard.allUpfront": "0.873",
						"yrTerm3Standard.partialUpfront": "0.928"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.738",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.435",
						"yrTerm1Standard.noUpfront": "0.519",
						"yrTerm1Standard.partialUpfront": "0.444",
						"yrTerm3Convertible.allUpfront": "0.417",
						"yrTerm3Convertible.noUpfront": "0.498",
						"yrTerm3Convertible.partialUpfront": "0.426",
						"yrTerm3Standard.allUpfront": "0.364",
						"yrTerm3Standard.partialUpfront": "0.387"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.399",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.212",
						"yrTerm1Standard.noUpfront": "0.251",
						"yrTerm1Standard.partialUpfront": "0.216",
						"yrTerm3Convertible.allUpfront": "0.190",
						"yrTerm3Convertible.noUpfront": "0.226",
						"yrTerm3Convertible.partialUpfront": "0.194",
						"yrTerm3Standard.allUpfront": "0.140",
						"yrTerm3Standard.partialUpfront": "0.149"
					}
				},
				"mswin": {
					"ondemand": "0.649",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.396",
						"yrTerm1Standard.noUpfront": "0.471",
						"yrTerm1Standard.partialUpfront": "0.402",
						"yrTerm3Convertible.allUpfront": "0.375",
						"yrTerm3Convertible.noUpfront": "0.446",
						"yrTerm3Convertible.partialUpfront": "0.381",
						"yrTerm3Standard.allUpfront": "0.288",
						"yrTerm3Standard.partialUpfront": "0.307"
					}
				},
				"mswinSQL": {
					"ondemand": "1.444",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.052",
						"yrTerm1Standard.noUpfront": "1.256",
						"yrTerm1Standard.partialUpfront": "1.073",
						"yrTerm3Convertible.allUpfront": "1.030",
						"yrTerm3Convertible.noUpfront": "1.231",
						"yrTerm3Convertible.partialUpfront": "1.052",
						"yrTerm3Standard.allUpfront": "0.897",
						"yrTerm3Standard.partialUpfront": "0.954"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.804",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.471",
						"yrTerm1Standard.noUpfront": "0.563",
						"yrTerm1Standard.partialUpfront": "0.481",
						"yrTerm3Convertible.allUpfront": "0.450",
						"yrTerm3Convertible.noUpfront": "0.538",
						"yrTerm3Convertible.partialUpfront": "0.459",
						"yrTerm3Standard.allUpfront": "0.388",
						"yrTerm3Standard.partialUpfront": "0.413"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.371",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.228",
						"yrTerm1Standard.noUpfront": "0.272",
						"yrTerm1Standard.partialUpfront": "0.233",
						"yrTerm3Convertible.allUpfront": "0.205",
						"yrTerm3Convertible.noUpfront": "0.245",
						"yrTerm3Convertible.partialUpfront": "0.210",
						"yrTerm3Standard.allUpfront": "0.151",
						"yrTerm3Standard.partialUpfront": "0.161"
					}
				},
				"mswin": {
					"ondemand": "0.633",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.391",
						"yrTerm1Standard.noUpfront": "0.456",
						"yrTerm1Standard.partialUpfront": "0.399",
						"yrTerm3Convertible.allUpfront": "0.368",
						"yrTerm3Convertible.noUpfront": "0.429",
						"yrTerm3Convertible.partialUpfront": "0.376",
						"yrTerm3Standard.allUpfront": "0.329",
						"yrTerm3Standard.partialUpfront": "0.345"
					}
				},
				"mswinSQL": {
					"ondemand": "1.427",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.052",
						"yrTerm1Standard.noUpfront": "1.256",
						"yrTerm1Standard.partialUpfront": "1.073",
						"yrTerm3Convertible.allUpfront": "1.029",
						"yrTerm3Convertible.noUpfront": "1.229",
						"yrTerm3Convertible.partialUpfront": "1.050",
						"yrTerm3Standard.allUpfront": "0.903",
						"yrTerm3Standard.partialUpfront": "0.961"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.787",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.462",
						"yrTerm1Standard.noUpfront": "0.552",
						"yrTerm1Standard.partialUpfront": "0.472",
						"yrTerm3Convertible.allUpfront": "0.439",
						"yrTerm3Convertible.noUpfront": "0.525",
						"yrTerm3Convertible.partialUpfront": "0.448",
						"yrTerm3Standard.allUpfront": "0.386",
						"yrTerm3Standard.partialUpfront": "0.411"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.02",
				"linux": {
					"ondemand": "0.333",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.176",
						"yrTerm1Standard.noUpfront": "0.209",
						"yrTerm1Standard.partialUpfront": "0.180",
						"yrTerm3Convertible.allUpfront": "0.159",
						"yrTerm3Convertible.noUpfront": "0.188",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.117",
						"yrTerm3Standard.partialUpfront": "0.124"
					}
				},
				"mswin": {
					"ondemand": "0.583",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.360",
						"yrTerm1Standard.noUpfront": "0.428",
						"yrTerm1Standard.partialUpfront": "0.366",
						"yrTerm3Convertible.allUpfront": "0.343",
						"yrTerm3Convertible.noUpfront": "0.407",
						"yrTerm3Convertible.partialUpfront": "0.348",
						"yrTerm3Standard.allUpfront": "0.263",
						"yrTerm3Standard.partialUpfront": "0.280"
					}
				},
				"mswinSQL": {
					"ondemand": "1.378",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.016",
						"yrTerm1Standard.noUpfront": "1.213",
						"yrTerm1Standard.partialUpfront": "1.037",
						"yrTerm3Convertible.allUpfront": "0.998",
						"yrTerm3Convertible.noUpfront": "1.192",
						"yrTerm3Convertible.partialUpfront": "1.019",
						"yrTerm3Standard.allUpfront": "0.873",
						"yrTerm3Standard.partialUpfront": "0.928"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.738",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.435",
						"yrTerm1Standard.noUpfront": "0.519",
						"yrTerm1Standard.partialUpfront": "0.444",
						"yrTerm3Convertible.allUpfront": "0.417",
						"yrTerm3Convertible.noUpfront": "0.498",
						"yrTerm3Convertible.partialUpfront": "0.426",
						"yrTerm3Standard.allUpfront": "0.364",
						"yrTerm3Standard.partialUpfront": "0.387"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 80,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 26,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r3.2xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 61,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "R3 High-Memory Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.798",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.509",
						"yrTerm1Standard.noUpfront": "0.597",
						"yrTerm1Standard.partialUpfront": "0.519",
						"yrTerm3Convertible.allUpfront": "0.458",
						"yrTerm3Convertible.noUpfront": "0.537",
						"yrTerm3Convertible.partialUpfront": "0.467",
						"yrTerm3Standard.allUpfront": "0.335",
						"yrTerm3Standard.partialUpfront": "0.357"
					}
				},
				"mswin": {
					"ondemand": "1.177",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.816",
						"yrTerm1Standard.noUpfront": "0.965",
						"yrTerm1Standard.partialUpfront": "0.833",
						"yrTerm3Convertible.allUpfront": "0.765",
						"yrTerm3Convertible.noUpfront": "0.905",
						"yrTerm3Convertible.partialUpfront": "0.781",
						"yrTerm3Standard.allUpfront": "0.653",
						"yrTerm3Standard.partialUpfront": "0.695"
					}
				},
				"mswinSQL": {
					"ondemand": "2.872",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.075",
						"yrTerm1Standard.noUpfront": "2.478",
						"yrTerm1Standard.partialUpfront": "2.117",
						"yrTerm3Convertible.allUpfront": "2.024",
						"yrTerm3Convertible.noUpfront": "2.418",
						"yrTerm3Convertible.partialUpfront": "2.065",
						"yrTerm3Standard.allUpfront": "1.782",
						"yrTerm3Standard.partialUpfront": "1.896"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.618",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.931",
						"yrTerm1Standard.noUpfront": "1.112",
						"yrTerm1Standard.partialUpfront": "0.949",
						"yrTerm3Convertible.allUpfront": "0.880",
						"yrTerm3Convertible.noUpfront": "1.052",
						"yrTerm3Convertible.partialUpfront": "0.897",
						"yrTerm3Standard.allUpfront": "0.779",
						"yrTerm3Standard.partialUpfront": "0.829"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.798",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.509",
						"yrTerm1Standard.noUpfront": "0.607",
						"yrTerm1Standard.partialUpfront": "0.519",
						"yrTerm3Convertible.allUpfront": "0.458",
						"yrTerm3Convertible.noUpfront": "0.546",
						"yrTerm3Convertible.partialUpfront": "0.467",
						"yrTerm3Standard.allUpfront": "0.336",
						"yrTerm3Standard.partialUpfront": "0.357"
					}
				},
				"mswin": {
					"ondemand": "1.166",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.877",
						"yrTerm1Standard.noUpfront": "0.975",
						"yrTerm1Standard.partialUpfront": "0.887",
						"yrTerm3Convertible.allUpfront": "0.826",
						"yrTerm3Convertible.noUpfront": "0.914",
						"yrTerm3Convertible.partialUpfront": "0.835",
						"yrTerm3Standard.allUpfront": "0.704",
						"yrTerm3Standard.partialUpfront": "0.725"
					}
				},
				"mswinSQL": {
					"ondemand": "2.582",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.293",
						"yrTerm1Standard.noUpfront": "2.391",
						"yrTerm1Standard.partialUpfront": "2.303",
						"yrTerm3Convertible.allUpfront": "2.242",
						"yrTerm3Convertible.noUpfront": "2.330",
						"yrTerm3Convertible.partialUpfront": "2.251",
						"yrTerm3Standard.allUpfront": "2.120",
						"yrTerm3Standard.partialUpfront": "2.141"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.312",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.023",
						"yrTerm1Standard.noUpfront": "1.121",
						"yrTerm1Standard.partialUpfront": "1.033",
						"yrTerm3Convertible.allUpfront": "0.972",
						"yrTerm3Convertible.noUpfront": "1.060",
						"yrTerm3Convertible.partialUpfront": "0.981",
						"yrTerm3Standard.allUpfront": "0.850",
						"yrTerm3Standard.partialUpfront": "0.871"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.758",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.483",
						"yrTerm1Standard.noUpfront": "0.577",
						"yrTerm1Standard.partialUpfront": "0.493",
						"yrTerm3Convertible.allUpfront": "0.435",
						"yrTerm3Convertible.noUpfront": "0.519",
						"yrTerm3Convertible.partialUpfront": "0.444",
						"yrTerm3Standard.allUpfront": "0.319",
						"yrTerm3Standard.partialUpfront": "0.339"
					}
				},
				"mswin": {
					"ondemand": "1.126",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.851",
						"yrTerm1Standard.noUpfront": "0.945",
						"yrTerm1Standard.partialUpfront": "0.861",
						"yrTerm3Convertible.allUpfront": "0.803",
						"yrTerm3Convertible.noUpfront": "0.887",
						"yrTerm3Convertible.partialUpfront": "0.812",
						"yrTerm3Standard.allUpfront": "0.687",
						"yrTerm3Standard.partialUpfront": "0.707"
					}
				},
				"mswinSQL": {
					"ondemand": "2.542",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.267",
						"yrTerm1Standard.noUpfront": "2.361",
						"yrTerm1Standard.partialUpfront": "2.277",
						"yrTerm3Convertible.allUpfront": "2.219",
						"yrTerm3Convertible.noUpfront": "2.303",
						"yrTerm3Convertible.partialUpfront": "2.228",
						"yrTerm3Standard.allUpfront": "2.103",
						"yrTerm3Standard.partialUpfront": "2.123"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.272",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.997",
						"yrTerm1Standard.noUpfront": "1.091",
						"yrTerm1Standard.partialUpfront": "1.007",
						"yrTerm3Convertible.allUpfront": "0.949",
						"yrTerm3Convertible.noUpfront": "1.033",
						"yrTerm3Convertible.partialUpfront": "0.958",
						"yrTerm3Standard.allUpfront": "0.833",
						"yrTerm3Standard.partialUpfront": "0.853"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.798",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.509",
						"yrTerm1Standard.noUpfront": "0.597",
						"yrTerm1Standard.partialUpfront": "0.519",
						"yrTerm3Convertible.allUpfront": "0.458",
						"yrTerm3Convertible.noUpfront": "0.537",
						"yrTerm3Convertible.partialUpfront": "0.467",
						"yrTerm3Standard.allUpfront": "0.335",
						"yrTerm3Standard.partialUpfront": "0.357"
					}
				},
				"mswin": {
					"ondemand": "1.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.871",
						"yrTerm1Standard.noUpfront": "1.009",
						"yrTerm1Standard.partialUpfront": "0.887",
						"yrTerm3Convertible.allUpfront": "0.820",
						"yrTerm3Convertible.noUpfront": "0.949",
						"yrTerm3Convertible.partialUpfront": "0.835",
						"yrTerm3Standard.allUpfront": "0.686",
						"yrTerm3Standard.partialUpfront": "0.725"
					}
				},
				"mswinSQL": {
					"ondemand": "2.914",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.146",
						"yrTerm1Standard.noUpfront": "2.563",
						"yrTerm1Standard.partialUpfront": "2.189",
						"yrTerm3Convertible.allUpfront": "2.095",
						"yrTerm3Convertible.noUpfront": "2.503",
						"yrTerm3Convertible.partialUpfront": "2.137",
						"yrTerm3Standard.allUpfront": "1.844",
						"yrTerm3Standard.partialUpfront": "1.962"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.643",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.964",
						"yrTerm1Standard.noUpfront": "1.152",
						"yrTerm1Standard.partialUpfront": "0.984",
						"yrTerm3Convertible.allUpfront": "0.913",
						"yrTerm3Convertible.noUpfront": "1.092",
						"yrTerm3Convertible.partialUpfront": "0.932",
						"yrTerm3Standard.allUpfront": "0.806",
						"yrTerm3Standard.partialUpfront": "0.858"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.798",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.509",
						"yrTerm1Standard.noUpfront": "0.597",
						"yrTerm1Standard.partialUpfront": "0.519",
						"yrTerm3Convertible.allUpfront": "0.458",
						"yrTerm3Convertible.noUpfront": "0.537",
						"yrTerm3Convertible.partialUpfront": "0.467",
						"yrTerm3Standard.allUpfront": "0.335",
						"yrTerm3Standard.partialUpfront": "0.357"
					}
				},
				"mswin": {
					"ondemand": "1.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.871",
						"yrTerm1Standard.noUpfront": "1.009",
						"yrTerm1Standard.partialUpfront": "0.887",
						"yrTerm3Convertible.allUpfront": "0.820",
						"yrTerm3Convertible.noUpfront": "0.949",
						"yrTerm3Convertible.partialUpfront": "0.835",
						"yrTerm3Standard.allUpfront": "0.686",
						"yrTerm3Standard.partialUpfront": "0.725"
					}
				},
				"mswinSQL": {
					"ondemand": "2.914",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.146",
						"yrTerm1Standard.noUpfront": "2.563",
						"yrTerm1Standard.partialUpfront": "2.189",
						"yrTerm3Convertible.allUpfront": "2.095",
						"yrTerm3Convertible.noUpfront": "2.503",
						"yrTerm3Convertible.partialUpfront": "2.137",
						"yrTerm3Standard.allUpfront": "1.844",
						"yrTerm3Standard.partialUpfront": "1.962"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.643",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.964",
						"yrTerm1Standard.noUpfront": "1.152",
						"yrTerm1Standard.partialUpfront": "0.984",
						"yrTerm3Convertible.allUpfront": "0.913",
						"yrTerm3Convertible.noUpfront": "1.092",
						"yrTerm3Convertible.partialUpfront": "0.932",
						"yrTerm3Standard.allUpfront": "0.806",
						"yrTerm3Standard.partialUpfront": "0.858"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.493",
						"yrTerm1Standard.noUpfront": "0.585",
						"yrTerm1Standard.partialUpfront": "0.503",
						"yrTerm3Convertible.allUpfront": "0.444",
						"yrTerm3Convertible.noUpfront": "0.527",
						"yrTerm3Convertible.partialUpfront": "0.452",
						"yrTerm3Standard.allUpfront": "0.327",
						"yrTerm3Standard.partialUpfront": "0.347"
					}
				},
				"mswin": {
					"ondemand": "1.18",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.857",
						"yrTerm1Standard.noUpfront": "0.992",
						"yrTerm1Standard.partialUpfront": "0.865",
						"yrTerm3Convertible.allUpfront": "0.807",
						"yrTerm3Convertible.noUpfront": "0.934",
						"yrTerm3Convertible.partialUpfront": "0.815",
						"yrTerm3Standard.allUpfront": "0.640",
						"yrTerm3Standard.partialUpfront": "0.681"
					}
				},
				"mswinSQL": {
					"ondemand": "3.705",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.161",
						"yrTerm1Standard.noUpfront": "2.580",
						"yrTerm1Standard.partialUpfront": "2.205",
						"yrTerm3Convertible.allUpfront": "2.112",
						"yrTerm3Convertible.noUpfront": "2.522",
						"yrTerm3Convertible.partialUpfront": "2.154",
						"yrTerm3Standard.allUpfront": "1.829",
						"yrTerm3Standard.partialUpfront": "1.946"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.997",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.036",
						"yrTerm1Standard.noUpfront": "1.237",
						"yrTerm1Standard.partialUpfront": "1.057",
						"yrTerm3Convertible.allUpfront": "0.987",
						"yrTerm3Convertible.noUpfront": "1.179",
						"yrTerm3Convertible.partialUpfront": "1.006",
						"yrTerm3Standard.allUpfront": "0.842",
						"yrTerm3Standard.partialUpfront": "0.895"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.741",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.457",
						"yrTerm1Standard.noUpfront": "0.543",
						"yrTerm1Standard.partialUpfront": "0.466",
						"yrTerm3Convertible.allUpfront": "0.411",
						"yrTerm3Convertible.noUpfront": "0.489",
						"yrTerm3Convertible.partialUpfront": "0.419",
						"yrTerm3Standard.allUpfront": "0.303",
						"yrTerm3Standard.partialUpfront": "0.322"
					}
				},
				"mswin": {
					"ondemand": "1.08",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.754",
						"yrTerm1Standard.noUpfront": "0.900",
						"yrTerm1Standard.partialUpfront": "0.769",
						"yrTerm3Convertible.allUpfront": "0.708",
						"yrTerm3Convertible.noUpfront": "0.846",
						"yrTerm3Convertible.partialUpfront": "0.723",
						"yrTerm3Standard.allUpfront": "0.635",
						"yrTerm3Standard.partialUpfront": "0.675"
					}
				},
				"mswinSQL": {
					"ondemand": "2.736",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.015",
						"yrTerm1Standard.noUpfront": "2.405",
						"yrTerm1Standard.partialUpfront": "2.056",
						"yrTerm3Convertible.allUpfront": "1.969",
						"yrTerm3Convertible.noUpfront": "2.351",
						"yrTerm3Convertible.partialUpfront": "2.009",
						"yrTerm3Standard.allUpfront": "1.732",
						"yrTerm3Standard.partialUpfront": "1.842"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.516",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.890",
						"yrTerm1Standard.noUpfront": "1.062",
						"yrTerm1Standard.partialUpfront": "0.908",
						"yrTerm3Convertible.allUpfront": "0.844",
						"yrTerm3Convertible.noUpfront": "1.008",
						"yrTerm3Convertible.partialUpfront": "0.861",
						"yrTerm3Standard.allUpfront": "0.744",
						"yrTerm3Standard.partialUpfront": "0.792"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "1.399",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.894",
						"yrTerm1Standard.noUpfront": "1.067",
						"yrTerm1Standard.partialUpfront": "0.912",
						"yrTerm3Convertible.allUpfront": "0.805",
						"yrTerm3Convertible.noUpfront": "0.960",
						"yrTerm3Convertible.partialUpfront": "0.821",
						"yrTerm3Standard.allUpfront": "0.589",
						"yrTerm3Standard.partialUpfront": "0.627"
					}
				},
				"mswin": {
					"ondemand": "1.767",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.262",
						"yrTerm1Standard.noUpfront": "1.435",
						"yrTerm1Standard.partialUpfront": "1.280",
						"yrTerm3Convertible.allUpfront": "1.173",
						"yrTerm3Convertible.noUpfront": "1.328",
						"yrTerm3Convertible.partialUpfront": "1.189",
						"yrTerm3Standard.allUpfront": "0.957",
						"yrTerm3Standard.partialUpfront": "0.995"
					}
				},
				"mswinSQL": {
					"ondemand": "3.183",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.678",
						"yrTerm1Standard.noUpfront": "2.851",
						"yrTerm1Standard.partialUpfront": "2.696",
						"yrTerm3Convertible.allUpfront": "2.589",
						"yrTerm3Convertible.noUpfront": "2.744",
						"yrTerm3Convertible.partialUpfront": "2.605",
						"yrTerm3Standard.allUpfront": "2.373",
						"yrTerm3Standard.partialUpfront": "2.411"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.913",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.408",
						"yrTerm1Standard.noUpfront": "1.581",
						"yrTerm1Standard.partialUpfront": "1.426",
						"yrTerm3Convertible.allUpfront": "1.319",
						"yrTerm3Convertible.noUpfront": "1.474",
						"yrTerm3Convertible.partialUpfront": "1.335",
						"yrTerm3Standard.allUpfront": "1.103",
						"yrTerm3Standard.partialUpfront": "1.141"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.665",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.353",
						"yrTerm1Standard.noUpfront": "0.418",
						"yrTerm1Standard.partialUpfront": "0.360",
						"yrTerm3Convertible.allUpfront": "0.317",
						"yrTerm3Convertible.noUpfront": "0.376",
						"yrTerm3Convertible.partialUpfront": "0.324",
						"yrTerm3Standard.allUpfront": "0.233",
						"yrTerm3Standard.partialUpfront": "0.248"
					}
				},
				"mswin": {
					"ondemand": "1.045",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.709",
						"yrTerm1Standard.noUpfront": "0.824",
						"yrTerm1Standard.partialUpfront": "0.723",
						"yrTerm3Convertible.allUpfront": "0.674",
						"yrTerm3Convertible.noUpfront": "0.782",
						"yrTerm3Convertible.partialUpfront": "0.687",
						"yrTerm3Standard.allUpfront": "0.508",
						"yrTerm3Standard.partialUpfront": "0.540"
					}
				},
				"mswinSQL": {
					"ondemand": "2.74",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.020",
						"yrTerm1Standard.noUpfront": "2.412",
						"yrTerm1Standard.partialUpfront": "2.061",
						"yrTerm3Convertible.allUpfront": "1.985",
						"yrTerm3Convertible.noUpfront": "2.370",
						"yrTerm3Convertible.partialUpfront": "2.025",
						"yrTerm3Standard.allUpfront": "1.736",
						"yrTerm3Standard.partialUpfront": "1.847"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.52",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.895",
						"yrTerm1Standard.noUpfront": "1.069",
						"yrTerm1Standard.partialUpfront": "0.913",
						"yrTerm3Convertible.allUpfront": "0.860",
						"yrTerm3Convertible.noUpfront": "1.027",
						"yrTerm3Convertible.partialUpfront": "0.877",
						"yrTerm3Standard.allUpfront": "0.748",
						"yrTerm3Standard.partialUpfront": "0.796"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.665",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.353",
						"yrTerm1Standard.noUpfront": "0.418",
						"yrTerm1Standard.partialUpfront": "0.360",
						"yrTerm3Convertible.allUpfront": "0.317",
						"yrTerm3Convertible.noUpfront": "0.376",
						"yrTerm3Convertible.partialUpfront": "0.324",
						"yrTerm3Standard.allUpfront": "0.233",
						"yrTerm3Standard.partialUpfront": "0.248"
					}
				},
				"mswin": {
					"ondemand": "1.045",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.709",
						"yrTerm1Standard.noUpfront": "0.824",
						"yrTerm1Standard.partialUpfront": "0.723",
						"yrTerm3Convertible.allUpfront": "0.674",
						"yrTerm3Convertible.noUpfront": "0.782",
						"yrTerm3Convertible.partialUpfront": "0.687",
						"yrTerm3Standard.allUpfront": "0.508",
						"yrTerm3Standard.partialUpfront": "0.540"
					}
				},
				"mswinSQL": {
					"ondemand": "2.74",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.020",
						"yrTerm1Standard.noUpfront": "2.412",
						"yrTerm1Standard.partialUpfront": "2.061",
						"yrTerm3Convertible.allUpfront": "1.985",
						"yrTerm3Convertible.noUpfront": "2.370",
						"yrTerm3Convertible.partialUpfront": "2.025",
						"yrTerm3Standard.allUpfront": "1.736",
						"yrTerm3Standard.partialUpfront": "1.847"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.52",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.895",
						"yrTerm1Standard.noUpfront": "1.069",
						"yrTerm1Standard.partialUpfront": "0.913",
						"yrTerm3Convertible.allUpfront": "0.860",
						"yrTerm3Convertible.noUpfront": "1.027",
						"yrTerm3Convertible.partialUpfront": "0.877",
						"yrTerm3Standard.allUpfront": "0.748",
						"yrTerm3Standard.partialUpfront": "0.796"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.798",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.423",
						"yrTerm1Standard.noUpfront": "0.502",
						"yrTerm1Standard.partialUpfront": "0.432",
						"yrTerm3Convertible.allUpfront": "0.381",
						"yrTerm3Convertible.noUpfront": "0.452",
						"yrTerm3Convertible.partialUpfront": "0.388",
						"yrTerm3Standard.allUpfront": "0.280",
						"yrTerm3Standard.partialUpfront": "0.297"
					}
				},
				"mswin": {
					"ondemand": "1.178",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.784",
						"yrTerm1Standard.noUpfront": "0.910",
						"yrTerm1Standard.partialUpfront": "0.799",
						"yrTerm3Convertible.allUpfront": "0.741",
						"yrTerm3Convertible.noUpfront": "0.860",
						"yrTerm3Convertible.partialUpfront": "0.755",
						"yrTerm3Standard.allUpfront": "0.557",
						"yrTerm3Standard.partialUpfront": "0.592"
					}
				},
				"mswinSQL": {
					"ondemand": "2.873",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.091",
						"yrTerm1Standard.noUpfront": "2.498",
						"yrTerm1Standard.partialUpfront": "2.134",
						"yrTerm3Convertible.allUpfront": "2.049",
						"yrTerm3Convertible.noUpfront": "2.448",
						"yrTerm3Convertible.partialUpfront": "2.091",
						"yrTerm3Standard.allUpfront": "1.783",
						"yrTerm3Standard.partialUpfront": "1.897"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.653",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.966",
						"yrTerm1Standard.noUpfront": "1.154",
						"yrTerm1Standard.partialUpfront": "0.986",
						"yrTerm3Convertible.allUpfront": "0.924",
						"yrTerm3Convertible.noUpfront": "1.104",
						"yrTerm3Convertible.partialUpfront": "0.943",
						"yrTerm3Standard.allUpfront": "0.795",
						"yrTerm3Standard.partialUpfront": "0.846"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.741",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.457",
						"yrTerm1Standard.noUpfront": "0.543",
						"yrTerm1Standard.partialUpfront": "0.466",
						"yrTerm3Convertible.allUpfront": "0.411",
						"yrTerm3Convertible.noUpfront": "0.489",
						"yrTerm3Convertible.partialUpfront": "0.419",
						"yrTerm3Standard.allUpfront": "0.303",
						"yrTerm3Standard.partialUpfront": "0.322"
					}
				},
				"mswin": {
					"ondemand": "1.134",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.754",
						"yrTerm1Standard.noUpfront": "0.900",
						"yrTerm1Standard.partialUpfront": "0.769",
						"yrTerm3Convertible.allUpfront": "0.708",
						"yrTerm3Convertible.noUpfront": "0.846",
						"yrTerm3Convertible.partialUpfront": "0.723",
						"yrTerm3Standard.allUpfront": "0.635",
						"yrTerm3Standard.partialUpfront": "0.675"
					}
				},
				"mswinSQL": {
					"ondemand": "2.829",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.084",
						"yrTerm1Standard.noUpfront": "2.488",
						"yrTerm1Standard.partialUpfront": "2.126",
						"yrTerm3Convertible.allUpfront": "2.038",
						"yrTerm3Convertible.noUpfront": "2.434",
						"yrTerm3Convertible.partialUpfront": "2.080",
						"yrTerm3Standard.allUpfront": "1.791",
						"yrTerm3Standard.partialUpfront": "1.905"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.609",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.945",
						"yrTerm1Standard.noUpfront": "1.128",
						"yrTerm1Standard.partialUpfront": "0.964",
						"yrTerm3Convertible.allUpfront": "0.899",
						"yrTerm3Convertible.noUpfront": "1.074",
						"yrTerm3Convertible.partialUpfront": "0.917",
						"yrTerm3Standard.allUpfront": "0.790",
						"yrTerm3Standard.partialUpfront": "0.840"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.05",
				"linux": {
					"ondemand": "0.665",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.353",
						"yrTerm1Standard.noUpfront": "0.418",
						"yrTerm1Standard.partialUpfront": "0.360",
						"yrTerm3Convertible.allUpfront": "0.317",
						"yrTerm3Convertible.noUpfront": "0.376",
						"yrTerm3Convertible.partialUpfront": "0.324",
						"yrTerm3Standard.allUpfront": "0.233",
						"yrTerm3Standard.partialUpfront": "0.248"
					}
				},
				"mswin": {
					"ondemand": "1.045",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.709",
						"yrTerm1Standard.noUpfront": "0.824",
						"yrTerm1Standard.partialUpfront": "0.723",
						"yrTerm3Convertible.allUpfront": "0.674",
						"yrTerm3Convertible.noUpfront": "0.782",
						"yrTerm3Convertible.partialUpfront": "0.687",
						"yrTerm3Standard.allUpfront": "0.508",
						"yrTerm3Standard.partialUpfront": "0.540"
					}
				},
				"mswinSQL": {
					"ondemand": "2.74",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.020",
						"yrTerm1Standard.noUpfront": "2.412",
						"yrTerm1Standard.partialUpfront": "2.061",
						"yrTerm3Convertible.allUpfront": "1.985",
						"yrTerm3Convertible.noUpfront": "2.370",
						"yrTerm3Convertible.partialUpfront": "2.025",
						"yrTerm3Standard.allUpfront": "1.736",
						"yrTerm3Standard.partialUpfront": "1.847"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.52",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.895",
						"yrTerm1Standard.noUpfront": "1.069",
						"yrTerm1Standard.partialUpfront": "0.913",
						"yrTerm3Convertible.allUpfront": "0.860",
						"yrTerm3Convertible.noUpfront": "1.027",
						"yrTerm3Convertible.partialUpfront": "0.877",
						"yrTerm3Standard.allUpfront": "0.748",
						"yrTerm3Standard.partialUpfront": "0.796"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 160,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 52,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 16000,
		"ebs_max_bandwidth": 2000,
		"ebs_optimized": true,
		"ebs_throughput": 250,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r3.4xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 122,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "R3 High-Memory Quadruple Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.596",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.018",
						"yrTerm1Standard.noUpfront": "1.193",
						"yrTerm1Standard.partialUpfront": "1.039",
						"yrTerm3Convertible.allUpfront": "0.916",
						"yrTerm3Convertible.noUpfront": "1.074",
						"yrTerm3Convertible.partialUpfront": "0.935",
						"yrTerm3Standard.allUpfront": "0.671",
						"yrTerm3Standard.partialUpfront": "0.714"
					}
				},
				"mswin": {
					"ondemand": "2.276",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.437",
						"yrTerm1Standard.noUpfront": "1.715",
						"yrTerm1Standard.partialUpfront": "1.466",
						"yrTerm3Convertible.allUpfront": "1.335",
						"yrTerm3Convertible.noUpfront": "1.596",
						"yrTerm3Convertible.partialUpfront": "1.362",
						"yrTerm3Standard.allUpfront": "1.149",
						"yrTerm3Standard.partialUpfront": "1.222"
					}
				},
				"mswinSQL": {
					"ondemand": "4.903",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.438",
						"yrTerm1Standard.noUpfront": "4.105",
						"yrTerm1Standard.partialUpfront": "3.508",
						"yrTerm3Convertible.allUpfront": "3.336",
						"yrTerm3Convertible.noUpfront": "3.986",
						"yrTerm3Convertible.partialUpfront": "3.404",
						"yrTerm3Standard.allUpfront": "2.955",
						"yrTerm3Standard.partialUpfront": "3.144"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.613",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.456",
						"yrTerm1Standard.noUpfront": "1.739",
						"yrTerm1Standard.partialUpfront": "1.486",
						"yrTerm3Convertible.allUpfront": "1.354",
						"yrTerm3Convertible.noUpfront": "1.620",
						"yrTerm3Convertible.partialUpfront": "1.382",
						"yrTerm3Standard.allUpfront": "1.221",
						"yrTerm3Standard.partialUpfront": "1.298"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.596",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.018",
						"yrTerm1Standard.noUpfront": "1.216",
						"yrTerm1Standard.partialUpfront": "1.039",
						"yrTerm3Convertible.allUpfront": "0.916",
						"yrTerm3Convertible.noUpfront": "1.094",
						"yrTerm3Convertible.partialUpfront": "0.935",
						"yrTerm3Standard.allUpfront": "0.671",
						"yrTerm3Standard.partialUpfront": "0.714"
					}
				},
				"mswin": {
					"ondemand": "2.332",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.754",
						"yrTerm1Standard.noUpfront": "1.952",
						"yrTerm1Standard.partialUpfront": "1.775",
						"yrTerm3Convertible.allUpfront": "1.652",
						"yrTerm3Convertible.noUpfront": "1.830",
						"yrTerm3Convertible.partialUpfront": "1.671",
						"yrTerm3Standard.allUpfront": "1.407",
						"yrTerm3Standard.partialUpfront": "1.450"
					}
				},
				"mswinSQL": {
					"ondemand": "5.164",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.586",
						"yrTerm1Standard.noUpfront": "4.784",
						"yrTerm1Standard.partialUpfront": "4.607",
						"yrTerm3Convertible.allUpfront": "4.484",
						"yrTerm3Convertible.noUpfront": "4.662",
						"yrTerm3Convertible.partialUpfront": "4.503",
						"yrTerm3Standard.allUpfront": "4.239",
						"yrTerm3Standard.partialUpfront": "4.282"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.046",
						"yrTerm1Standard.noUpfront": "2.244",
						"yrTerm1Standard.partialUpfront": "2.067",
						"yrTerm3Convertible.allUpfront": "1.944",
						"yrTerm3Convertible.noUpfront": "2.122",
						"yrTerm3Convertible.partialUpfront": "1.963",
						"yrTerm3Standard.allUpfront": "1.699",
						"yrTerm3Standard.partialUpfront": "1.742"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.516",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.967",
						"yrTerm1Standard.noUpfront": "1.155",
						"yrTerm1Standard.partialUpfront": "0.987",
						"yrTerm3Convertible.allUpfront": "0.870",
						"yrTerm3Convertible.noUpfront": "1.040",
						"yrTerm3Convertible.partialUpfront": "0.888",
						"yrTerm3Standard.allUpfront": "0.637",
						"yrTerm3Standard.partialUpfront": "0.678"
					}
				},
				"mswin": {
					"ondemand": "2.252",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.703",
						"yrTerm1Standard.noUpfront": "1.891",
						"yrTerm1Standard.partialUpfront": "1.723",
						"yrTerm3Convertible.allUpfront": "1.606",
						"yrTerm3Convertible.noUpfront": "1.776",
						"yrTerm3Convertible.partialUpfront": "1.624",
						"yrTerm3Standard.allUpfront": "1.373",
						"yrTerm3Standard.partialUpfront": "1.414"
					}
				},
				"mswinSQL": {
					"ondemand": "5.084",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.535",
						"yrTerm1Standard.noUpfront": "4.723",
						"yrTerm1Standard.partialUpfront": "4.555",
						"yrTerm3Convertible.allUpfront": "4.438",
						"yrTerm3Convertible.noUpfront": "4.608",
						"yrTerm3Convertible.partialUpfront": "4.456",
						"yrTerm3Standard.allUpfront": "4.205",
						"yrTerm3Standard.partialUpfront": "4.246"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.544",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.995",
						"yrTerm1Standard.noUpfront": "2.183",
						"yrTerm1Standard.partialUpfront": "2.015",
						"yrTerm3Convertible.allUpfront": "1.898",
						"yrTerm3Convertible.noUpfront": "2.068",
						"yrTerm3Convertible.partialUpfront": "1.916",
						"yrTerm3Standard.allUpfront": "1.665",
						"yrTerm3Standard.partialUpfront": "1.706"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.596",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.018",
						"yrTerm1Standard.noUpfront": "1.193",
						"yrTerm1Standard.partialUpfront": "1.039",
						"yrTerm3Convertible.allUpfront": "0.916",
						"yrTerm3Convertible.noUpfront": "1.074",
						"yrTerm3Convertible.partialUpfront": "0.935",
						"yrTerm3Standard.allUpfront": "0.671",
						"yrTerm3Standard.partialUpfront": "0.714"
					}
				},
				"mswin": {
					"ondemand": "2.363",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.534",
						"yrTerm1Standard.noUpfront": "1.832",
						"yrTerm1Standard.partialUpfront": "1.566",
						"yrTerm3Convertible.allUpfront": "1.432",
						"yrTerm3Convertible.noUpfront": "1.713",
						"yrTerm3Convertible.partialUpfront": "1.462",
						"yrTerm3Standard.allUpfront": "1.206",
						"yrTerm3Standard.partialUpfront": "1.283"
					}
				},
				"mswinSQL": {
					"ondemand": "5.073",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.737",
						"yrTerm1Standard.noUpfront": "4.463",
						"yrTerm1Standard.partialUpfront": "3.814",
						"yrTerm3Convertible.allUpfront": "3.635",
						"yrTerm3Convertible.noUpfront": "4.344",
						"yrTerm3Convertible.partialUpfront": "3.710",
						"yrTerm3Standard.allUpfront": "3.212",
						"yrTerm3Standard.partialUpfront": "3.417"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.783",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.632",
						"yrTerm1Standard.noUpfront": "1.949",
						"yrTerm1Standard.partialUpfront": "1.666",
						"yrTerm3Convertible.allUpfront": "1.530",
						"yrTerm3Convertible.noUpfront": "1.830",
						"yrTerm3Convertible.partialUpfront": "1.562",
						"yrTerm3Standard.allUpfront": "1.366",
						"yrTerm3Standard.partialUpfront": "1.454"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.596",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.018",
						"yrTerm1Standard.noUpfront": "1.193",
						"yrTerm1Standard.partialUpfront": "1.039",
						"yrTerm3Convertible.allUpfront": "0.916",
						"yrTerm3Convertible.noUpfront": "1.074",
						"yrTerm3Convertible.partialUpfront": "0.935",
						"yrTerm3Standard.allUpfront": "0.671",
						"yrTerm3Standard.partialUpfront": "0.714"
					}
				},
				"mswin": {
					"ondemand": "2.363",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.534",
						"yrTerm1Standard.noUpfront": "1.832",
						"yrTerm1Standard.partialUpfront": "1.566",
						"yrTerm3Convertible.allUpfront": "1.432",
						"yrTerm3Convertible.noUpfront": "1.713",
						"yrTerm3Convertible.partialUpfront": "1.462",
						"yrTerm3Standard.allUpfront": "1.206",
						"yrTerm3Standard.partialUpfront": "1.283"
					}
				},
				"mswinSQL": {
					"ondemand": "5.073",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.737",
						"yrTerm1Standard.noUpfront": "4.463",
						"yrTerm1Standard.partialUpfront": "3.814",
						"yrTerm3Convertible.allUpfront": "3.635",
						"yrTerm3Convertible.noUpfront": "4.344",
						"yrTerm3Convertible.partialUpfront": "3.710",
						"yrTerm3Standard.allUpfront": "3.212",
						"yrTerm3Standard.partialUpfront": "3.417"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.783",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.632",
						"yrTerm1Standard.noUpfront": "1.949",
						"yrTerm1Standard.partialUpfront": "1.666",
						"yrTerm3Convertible.allUpfront": "1.530",
						"yrTerm3Convertible.noUpfront": "1.830",
						"yrTerm3Convertible.partialUpfront": "1.562",
						"yrTerm3Standard.allUpfront": "1.366",
						"yrTerm3Standard.partialUpfront": "1.454"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.986",
						"yrTerm1Standard.noUpfront": "1.170",
						"yrTerm1Standard.partialUpfront": "1.007",
						"yrTerm3Convertible.allUpfront": "0.888",
						"yrTerm3Convertible.noUpfront": "1.053",
						"yrTerm3Convertible.partialUpfront": "0.906",
						"yrTerm3Standard.allUpfront": "0.654",
						"yrTerm3Standard.partialUpfront": "0.695"
					}
				},
				"mswin": {
					"ondemand": "2.228",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.544",
						"yrTerm1Standard.noUpfront": "1.843",
						"yrTerm1Standard.partialUpfront": "1.575",
						"yrTerm3Convertible.allUpfront": "1.445",
						"yrTerm3Convertible.noUpfront": "1.726",
						"yrTerm3Convertible.partialUpfront": "1.475",
						"yrTerm3Standard.allUpfront": "1.139",
						"yrTerm3Standard.partialUpfront": "1.212"
					}
				},
				"mswinSQL": {
					"ondemand": "6.157",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.664",
						"yrTerm1Standard.noUpfront": "4.375",
						"yrTerm1Standard.partialUpfront": "3.739",
						"yrTerm3Convertible.allUpfront": "3.566",
						"yrTerm3Convertible.noUpfront": "4.258",
						"yrTerm3Convertible.partialUpfront": "3.639",
						"yrTerm3Standard.allUpfront": "3.094",
						"yrTerm3Standard.partialUpfront": "3.291"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.951",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.635",
						"yrTerm1Standard.noUpfront": "1.952",
						"yrTerm1Standard.partialUpfront": "1.668",
						"yrTerm3Convertible.allUpfront": "1.536",
						"yrTerm3Convertible.noUpfront": "1.835",
						"yrTerm3Convertible.partialUpfront": "1.568",
						"yrTerm3Standard.allUpfront": "1.318",
						"yrTerm3Standard.partialUpfront": "1.402"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.482",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.913",
						"yrTerm1Standard.noUpfront": "1.087",
						"yrTerm1Standard.partialUpfront": "0.932",
						"yrTerm3Convertible.allUpfront": "0.822",
						"yrTerm3Convertible.noUpfront": "0.978",
						"yrTerm3Convertible.partialUpfront": "0.839",
						"yrTerm3Standard.allUpfront": "0.605",
						"yrTerm3Standard.partialUpfront": "0.643"
					}
				},
				"mswin": {
					"ondemand": "1.944",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.327",
						"yrTerm1Standard.noUpfront": "1.584",
						"yrTerm1Standard.partialUpfront": "1.354",
						"yrTerm3Convertible.allUpfront": "1.235",
						"yrTerm3Convertible.noUpfront": "1.475",
						"yrTerm3Convertible.partialUpfront": "1.261",
						"yrTerm3Standard.allUpfront": "1.116",
						"yrTerm3Standard.partialUpfront": "1.188"
					}
				},
				"mswinSQL": {
					"ondemand": "4.577",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.373",
						"yrTerm1Standard.noUpfront": "4.028",
						"yrTerm1Standard.partialUpfront": "3.442",
						"yrTerm3Convertible.allUpfront": "3.282",
						"yrTerm3Convertible.noUpfront": "3.919",
						"yrTerm3Convertible.partialUpfront": "3.349",
						"yrTerm3Standard.allUpfront": "2.900",
						"yrTerm3Standard.partialUpfront": "3.085"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.287",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.343",
						"yrTerm1Standard.noUpfront": "1.604",
						"yrTerm1Standard.partialUpfront": "1.371",
						"yrTerm3Convertible.allUpfront": "1.252",
						"yrTerm3Convertible.noUpfront": "1.495",
						"yrTerm3Convertible.partialUpfront": "1.277",
						"yrTerm3Standard.allUpfront": "1.124",
						"yrTerm3Standard.partialUpfront": "1.195"
					}
				}
			},
			"sa-east-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "2.799",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.788",
						"yrTerm1Standard.noUpfront": "2.134",
						"yrTerm1Standard.partialUpfront": "1.824",
						"yrTerm3Convertible.allUpfront": "1.609",
						"yrTerm3Convertible.noUpfront": "1.921",
						"yrTerm3Convertible.partialUpfront": "1.642",
						"yrTerm3Standard.allUpfront": "1.179",
						"yrTerm3Standard.partialUpfront": "1.254"
					}
				},
				"mswin": {
					"ondemand": "3.394",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.321",
						"yrTerm1Standard.noUpfront": "2.771",
						"yrTerm1Standard.partialUpfront": "2.368",
						"yrTerm3Convertible.allUpfront": "2.142",
						"yrTerm3Convertible.noUpfront": "2.558",
						"yrTerm3Convertible.partialUpfront": "2.186",
						"yrTerm3Standard.allUpfront": "1.662",
						"yrTerm3Standard.partialUpfront": "1.768"
					}
				},
				"mswinSQL": {
					"ondemand": "6.435",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.457",
						"yrTerm1Standard.noUpfront": "5.321",
						"yrTerm1Standard.partialUpfront": "4.548",
						"yrTerm3Convertible.allUpfront": "4.278",
						"yrTerm3Convertible.noUpfront": "5.108",
						"yrTerm3Convertible.partialUpfront": "4.366",
						"yrTerm3Standard.allUpfront": "3.739",
						"yrTerm3Standard.partialUpfront": "3.978"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.635",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.364",
						"yrTerm1Standard.noUpfront": "2.822",
						"yrTerm1Standard.partialUpfront": "2.412",
						"yrTerm3Convertible.allUpfront": "2.185",
						"yrTerm3Convertible.noUpfront": "2.609",
						"yrTerm3Convertible.partialUpfront": "2.230",
						"yrTerm3Standard.allUpfront": "1.732",
						"yrTerm3Standard.partialUpfront": "1.842"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.33",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.706",
						"yrTerm1Standard.noUpfront": "0.836",
						"yrTerm1Standard.partialUpfront": "0.720",
						"yrTerm3Convertible.allUpfront": "0.635",
						"yrTerm3Convertible.noUpfront": "0.752",
						"yrTerm3Convertible.partialUpfront": "0.648",
						"yrTerm3Standard.allUpfront": "0.467",
						"yrTerm3Standard.partialUpfront": "0.497"
					}
				},
				"mswin": {
					"ondemand": "1.944",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.248",
						"yrTerm1Standard.noUpfront": "1.490",
						"yrTerm1Standard.partialUpfront": "1.273",
						"yrTerm3Convertible.allUpfront": "1.177",
						"yrTerm3Convertible.noUpfront": "1.406",
						"yrTerm3Convertible.partialUpfront": "1.201",
						"yrTerm3Standard.allUpfront": "0.893",
						"yrTerm3Standard.partialUpfront": "0.950"
					}
				},
				"mswinSQL": {
					"ondemand": "4.585",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.384",
						"yrTerm1Standard.noUpfront": "4.041",
						"yrTerm1Standard.partialUpfront": "3.454",
						"yrTerm3Convertible.allUpfront": "3.314",
						"yrTerm3Convertible.noUpfront": "3.957",
						"yrTerm3Convertible.partialUpfront": "3.381",
						"yrTerm3Standard.allUpfront": "2.908",
						"yrTerm3Standard.partialUpfront": "3.094"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.295",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.354",
						"yrTerm1Standard.noUpfront": "1.617",
						"yrTerm1Standard.partialUpfront": "1.382",
						"yrTerm3Convertible.allUpfront": "1.283",
						"yrTerm3Convertible.noUpfront": "1.533",
						"yrTerm3Convertible.partialUpfront": "1.310",
						"yrTerm3Standard.allUpfront": "1.131",
						"yrTerm3Standard.partialUpfront": "1.204"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.33",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.706",
						"yrTerm1Standard.noUpfront": "0.836",
						"yrTerm1Standard.partialUpfront": "0.720",
						"yrTerm3Convertible.allUpfront": "0.635",
						"yrTerm3Convertible.noUpfront": "0.752",
						"yrTerm3Convertible.partialUpfront": "0.648",
						"yrTerm3Standard.allUpfront": "0.467",
						"yrTerm3Standard.partialUpfront": "0.497"
					}
				},
				"mswin": {
					"ondemand": "1.944",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.248",
						"yrTerm1Standard.noUpfront": "1.490",
						"yrTerm1Standard.partialUpfront": "1.273",
						"yrTerm3Convertible.allUpfront": "1.177",
						"yrTerm3Convertible.noUpfront": "1.406",
						"yrTerm3Convertible.partialUpfront": "1.201",
						"yrTerm3Standard.allUpfront": "0.893",
						"yrTerm3Standard.partialUpfront": "0.950"
					}
				},
				"mswinSQL": {
					"ondemand": "4.585",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.384",
						"yrTerm1Standard.noUpfront": "4.041",
						"yrTerm1Standard.partialUpfront": "3.454",
						"yrTerm3Convertible.allUpfront": "3.314",
						"yrTerm3Convertible.noUpfront": "3.957",
						"yrTerm3Convertible.partialUpfront": "3.381",
						"yrTerm3Standard.allUpfront": "2.908",
						"yrTerm3Standard.partialUpfront": "3.094"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.295",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.354",
						"yrTerm1Standard.noUpfront": "1.617",
						"yrTerm1Standard.partialUpfront": "1.382",
						"yrTerm3Convertible.allUpfront": "1.283",
						"yrTerm3Convertible.noUpfront": "1.533",
						"yrTerm3Convertible.partialUpfront": "1.310",
						"yrTerm3Standard.allUpfront": "1.131",
						"yrTerm3Standard.partialUpfront": "1.204"
					}
				}
			},
			"us-gov-west-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.596",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.847",
						"yrTerm1Standard.noUpfront": "1.003",
						"yrTerm1Standard.partialUpfront": "0.863",
						"yrTerm3Convertible.allUpfront": "0.762",
						"yrTerm3Convertible.noUpfront": "0.903",
						"yrTerm3Convertible.partialUpfront": "0.777",
						"yrTerm3Standard.allUpfront": "0.560",
						"yrTerm3Standard.partialUpfront": "0.595"
					}
				},
				"mswin": {
					"ondemand": "2.224",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.397",
						"yrTerm1Standard.noUpfront": "1.668",
						"yrTerm1Standard.partialUpfront": "1.426",
						"yrTerm3Convertible.allUpfront": "1.313",
						"yrTerm3Convertible.noUpfront": "1.568",
						"yrTerm3Convertible.partialUpfront": "1.340",
						"yrTerm3Standard.allUpfront": "0.991",
						"yrTerm3Standard.partialUpfront": "1.055"
					}
				},
				"mswinSQL": {
					"ondemand": "4.851",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.526",
						"yrTerm1Standard.noUpfront": "4.210",
						"yrTerm1Standard.partialUpfront": "3.598",
						"yrTerm3Convertible.allUpfront": "3.442",
						"yrTerm3Convertible.noUpfront": "4.110",
						"yrTerm3Convertible.partialUpfront": "3.512",
						"yrTerm3Standard.allUpfront": "3.001",
						"yrTerm3Standard.partialUpfront": "3.193"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.561",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.496",
						"yrTerm1Standard.noUpfront": "1.786",
						"yrTerm1Standard.partialUpfront": "1.526",
						"yrTerm3Convertible.allUpfront": "1.411",
						"yrTerm3Convertible.noUpfront": "1.686",
						"yrTerm3Convertible.partialUpfront": "1.440",
						"yrTerm3Standard.allUpfront": "1.225",
						"yrTerm3Standard.partialUpfront": "1.304"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.482",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.913",
						"yrTerm1Standard.noUpfront": "1.087",
						"yrTerm1Standard.partialUpfront": "0.932",
						"yrTerm3Convertible.allUpfront": "0.822",
						"yrTerm3Convertible.noUpfront": "0.978",
						"yrTerm3Convertible.partialUpfront": "0.839",
						"yrTerm3Standard.allUpfront": "0.605",
						"yrTerm3Standard.partialUpfront": "0.643"
					}
				},
				"mswin": {
					"ondemand": "2.111",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.327",
						"yrTerm1Standard.noUpfront": "1.584",
						"yrTerm1Standard.partialUpfront": "1.354",
						"yrTerm3Convertible.allUpfront": "1.235",
						"yrTerm3Convertible.noUpfront": "1.475",
						"yrTerm3Convertible.partialUpfront": "1.261",
						"yrTerm3Standard.allUpfront": "1.116",
						"yrTerm3Standard.partialUpfront": "1.188"
					}
				},
				"mswinSQL": {
					"ondemand": "4.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.497",
						"yrTerm1Standard.noUpfront": "4.175",
						"yrTerm1Standard.partialUpfront": "3.568",
						"yrTerm3Convertible.allUpfront": "3.405",
						"yrTerm3Convertible.noUpfront": "4.066",
						"yrTerm3Convertible.partialUpfront": "3.475",
						"yrTerm3Standard.allUpfront": "3.005",
						"yrTerm3Standard.partialUpfront": "3.197"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.454",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.441",
						"yrTerm1Standard.noUpfront": "1.721",
						"yrTerm1Standard.partialUpfront": "1.471",
						"yrTerm3Convertible.allUpfront": "1.350",
						"yrTerm3Convertible.noUpfront": "1.612",
						"yrTerm3Convertible.partialUpfront": "1.377",
						"yrTerm3Standard.allUpfront": "1.206",
						"yrTerm3Standard.partialUpfront": "1.283"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.10",
				"linux": {
					"ondemand": "1.33",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.706",
						"yrTerm1Standard.noUpfront": "0.836",
						"yrTerm1Standard.partialUpfront": "0.720",
						"yrTerm3Convertible.allUpfront": "0.635",
						"yrTerm3Convertible.noUpfront": "0.752",
						"yrTerm3Convertible.partialUpfront": "0.648",
						"yrTerm3Standard.allUpfront": "0.467",
						"yrTerm3Standard.partialUpfront": "0.497"
					}
				},
				"mswin": {
					"ondemand": "1.944",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.248",
						"yrTerm1Standard.noUpfront": "1.490",
						"yrTerm1Standard.partialUpfront": "1.273",
						"yrTerm3Convertible.allUpfront": "1.177",
						"yrTerm3Convertible.noUpfront": "1.406",
						"yrTerm3Convertible.partialUpfront": "1.201",
						"yrTerm3Standard.allUpfront": "0.893",
						"yrTerm3Standard.partialUpfront": "0.950"
					}
				},
				"mswinSQL": {
					"ondemand": "4.585",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.384",
						"yrTerm1Standard.noUpfront": "4.041",
						"yrTerm1Standard.partialUpfront": "3.454",
						"yrTerm3Convertible.allUpfront": "3.314",
						"yrTerm3Convertible.noUpfront": "3.957",
						"yrTerm3Convertible.partialUpfront": "3.381",
						"yrTerm3Standard.allUpfront": "2.908",
						"yrTerm3Standard.partialUpfront": "3.094"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.295",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.354",
						"yrTerm1Standard.noUpfront": "1.617",
						"yrTerm1Standard.partialUpfront": "1.382",
						"yrTerm3Convertible.allUpfront": "1.283",
						"yrTerm3Convertible.noUpfront": "1.533",
						"yrTerm3Convertible.partialUpfront": "1.310",
						"yrTerm3Standard.allUpfront": "1.131",
						"yrTerm3Standard.partialUpfront": "1.204"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 320,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 104,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 0,
		"ebs_max_bandwidth": 0,
		"ebs_optimized": false,
		"ebs_throughput": 0,
		"enhanced_networking": true,
		"family": "Memory optimized",
		"generation": "current",
		"instance_type": "r3.8xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 244,
		"network_performance": "10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "R3 High-Memory Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "3.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.036",
						"yrTerm1Standard.noUpfront": "2.386",
						"yrTerm1Standard.partialUpfront": "2.078",
						"yrTerm3Convertible.allUpfront": "1.833",
						"yrTerm3Convertible.noUpfront": "2.147",
						"yrTerm3Convertible.partialUpfront": "1.870",
						"yrTerm3Standard.allUpfront": "1.342",
						"yrTerm3Standard.partialUpfront": "1.427"
					}
				},
				"mswin": {
					"ondemand": "4.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.240",
						"yrTerm1Standard.noUpfront": "2.674",
						"yrTerm1Standard.partialUpfront": "2.286",
						"yrTerm3Convertible.allUpfront": "2.036",
						"yrTerm3Convertible.noUpfront": "2.435",
						"yrTerm3Convertible.partialUpfront": "2.078",
						"yrTerm3Standard.allUpfront": "1.486",
						"yrTerm3Standard.partialUpfront": "1.581"
					}
				},
				"mswinSQL": {
					"ondemand": "9.337",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.546",
						"yrTerm1Standard.noUpfront": "7.817",
						"yrTerm1Standard.partialUpfront": "6.680",
						"yrTerm3Convertible.allUpfront": "6.343",
						"yrTerm3Convertible.noUpfront": "7.578",
						"yrTerm3Convertible.partialUpfront": "6.472",
						"yrTerm3Standard.allUpfront": "5.631",
						"yrTerm3Standard.partialUpfront": "5.990"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.577",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.550",
						"yrTerm1Standard.noUpfront": "3.046",
						"yrTerm1Standard.partialUpfront": "2.602",
						"yrTerm3Convertible.allUpfront": "2.346",
						"yrTerm3Convertible.noUpfront": "2.807",
						"yrTerm3Convertible.partialUpfront": "2.395",
						"yrTerm3Standard.allUpfront": "2.138",
						"yrTerm3Standard.partialUpfront": "2.274"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "3.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.036",
						"yrTerm1Standard.noUpfront": "2.431",
						"yrTerm1Standard.partialUpfront": "2.078",
						"yrTerm3Convertible.allUpfront": "1.833",
						"yrTerm3Convertible.noUpfront": "2.188",
						"yrTerm3Convertible.partialUpfront": "1.870",
						"yrTerm3Standard.allUpfront": "1.341",
						"yrTerm3Standard.partialUpfront": "1.427"
					}
				},
				"mswin": {
					"ondemand": "4.664",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.508",
						"yrTerm1Standard.noUpfront": "3.903",
						"yrTerm1Standard.partialUpfront": "3.550",
						"yrTerm3Convertible.allUpfront": "3.305",
						"yrTerm3Convertible.noUpfront": "3.660",
						"yrTerm3Convertible.partialUpfront": "3.342",
						"yrTerm3Standard.allUpfront": "2.813",
						"yrTerm3Standard.partialUpfront": "2.899"
					}
				},
				"mswinSQL": {
					"ondemand": "10.328",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.172",
						"yrTerm1Standard.noUpfront": "9.567",
						"yrTerm1Standard.partialUpfront": "9.214",
						"yrTerm3Convertible.allUpfront": "8.969",
						"yrTerm3Convertible.noUpfront": "9.324",
						"yrTerm3Convertible.partialUpfront": "9.006",
						"yrTerm3Standard.allUpfront": "8.477",
						"yrTerm3Standard.partialUpfront": "8.563"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.248",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.092",
						"yrTerm1Standard.noUpfront": "4.487",
						"yrTerm1Standard.partialUpfront": "4.134",
						"yrTerm3Convertible.allUpfront": "3.889",
						"yrTerm3Convertible.noUpfront": "4.244",
						"yrTerm3Convertible.partialUpfront": "3.926",
						"yrTerm3Standard.allUpfront": "3.397",
						"yrTerm3Standard.partialUpfront": "3.483"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "3.032",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.935",
						"yrTerm1Standard.noUpfront": "2.310",
						"yrTerm1Standard.partialUpfront": "1.974",
						"yrTerm3Convertible.allUpfront": "1.742",
						"yrTerm3Convertible.noUpfront": "2.079",
						"yrTerm3Convertible.partialUpfront": "1.777",
						"yrTerm3Standard.allUpfront": "1.274",
						"yrTerm3Standard.partialUpfront": "1.356"
					}
				},
				"mswin": {
					"ondemand": "4.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.407",
						"yrTerm1Standard.noUpfront": "3.782",
						"yrTerm1Standard.partialUpfront": "3.446",
						"yrTerm3Convertible.allUpfront": "3.214",
						"yrTerm3Convertible.noUpfront": "3.551",
						"yrTerm3Convertible.partialUpfront": "3.249",
						"yrTerm3Standard.allUpfront": "2.746",
						"yrTerm3Standard.partialUpfront": "2.828"
					}
				},
				"mswinSQL": {
					"ondemand": "10.168",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.071",
						"yrTerm1Standard.noUpfront": "9.446",
						"yrTerm1Standard.partialUpfront": "9.110",
						"yrTerm3Convertible.allUpfront": "8.878",
						"yrTerm3Convertible.noUpfront": "9.215",
						"yrTerm3Convertible.partialUpfront": "8.913",
						"yrTerm3Standard.allUpfront": "8.410",
						"yrTerm3Standard.partialUpfront": "8.492"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.088",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.991",
						"yrTerm1Standard.noUpfront": "4.366",
						"yrTerm1Standard.partialUpfront": "4.030",
						"yrTerm3Convertible.allUpfront": "3.798",
						"yrTerm3Convertible.noUpfront": "4.135",
						"yrTerm3Convertible.partialUpfront": "3.833",
						"yrTerm3Standard.allUpfront": "3.330",
						"yrTerm3Standard.partialUpfront": "3.412"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "3.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.036",
						"yrTerm1Standard.noUpfront": "2.386",
						"yrTerm1Standard.partialUpfront": "2.078",
						"yrTerm3Convertible.allUpfront": "1.833",
						"yrTerm3Convertible.noUpfront": "2.147",
						"yrTerm3Convertible.partialUpfront": "1.870",
						"yrTerm3Standard.allUpfront": "1.342",
						"yrTerm3Standard.partialUpfront": "1.427"
					}
				},
				"mswin": {
					"ondemand": "4.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.450",
						"yrTerm1Standard.noUpfront": "2.925",
						"yrTerm1Standard.partialUpfront": "2.500",
						"yrTerm3Convertible.allUpfront": "2.246",
						"yrTerm3Convertible.noUpfront": "2.686",
						"yrTerm3Convertible.partialUpfront": "2.292",
						"yrTerm3Standard.allUpfront": "1.561",
						"yrTerm3Standard.partialUpfront": "1.661"
					}
				},
				"mswinSQL": {
					"ondemand": "9.687",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.136",
						"yrTerm1Standard.noUpfront": "8.522",
						"yrTerm1Standard.partialUpfront": "7.282",
						"yrTerm3Convertible.allUpfront": "6.932",
						"yrTerm3Convertible.noUpfront": "8.283",
						"yrTerm3Convertible.partialUpfront": "7.074",
						"yrTerm3Standard.allUpfront": "6.136",
						"yrTerm3Standard.partialUpfront": "6.528"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.927",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.889",
						"yrTerm1Standard.noUpfront": "3.451",
						"yrTerm1Standard.partialUpfront": "2.948",
						"yrTerm3Convertible.allUpfront": "2.685",
						"yrTerm3Convertible.noUpfront": "3.212",
						"yrTerm3Convertible.partialUpfront": "2.740",
						"yrTerm3Standard.allUpfront": "2.419",
						"yrTerm3Standard.partialUpfront": "2.574"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "3.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.036",
						"yrTerm1Standard.noUpfront": "2.386",
						"yrTerm1Standard.partialUpfront": "2.078",
						"yrTerm3Convertible.allUpfront": "1.833",
						"yrTerm3Convertible.noUpfront": "2.147",
						"yrTerm3Convertible.partialUpfront": "1.870",
						"yrTerm3Standard.allUpfront": "1.342",
						"yrTerm3Standard.partialUpfront": "1.427"
					}
				},
				"mswin": {
					"ondemand": "4.6",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.450",
						"yrTerm1Standard.noUpfront": "2.925",
						"yrTerm1Standard.partialUpfront": "2.500",
						"yrTerm3Convertible.allUpfront": "2.246",
						"yrTerm3Convertible.noUpfront": "2.686",
						"yrTerm3Convertible.partialUpfront": "2.292",
						"yrTerm3Standard.allUpfront": "1.561",
						"yrTerm3Standard.partialUpfront": "1.661"
					}
				},
				"mswinSQL": {
					"ondemand": "9.687",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.136",
						"yrTerm1Standard.noUpfront": "8.522",
						"yrTerm1Standard.partialUpfront": "7.282",
						"yrTerm3Convertible.allUpfront": "6.932",
						"yrTerm3Convertible.noUpfront": "8.283",
						"yrTerm3Convertible.partialUpfront": "7.074",
						"yrTerm3Standard.allUpfront": "6.136",
						"yrTerm3Standard.partialUpfront": "6.528"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.927",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.889",
						"yrTerm1Standard.noUpfront": "3.451",
						"yrTerm1Standard.partialUpfront": "2.948",
						"yrTerm3Convertible.allUpfront": "2.685",
						"yrTerm3Convertible.noUpfront": "3.212",
						"yrTerm3Convertible.partialUpfront": "2.740",
						"yrTerm3Standard.allUpfront": "2.419",
						"yrTerm3Standard.partialUpfront": "2.574"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "3.201",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.973",
						"yrTerm1Standard.noUpfront": "2.341",
						"yrTerm1Standard.partialUpfront": "2.013",
						"yrTerm3Convertible.allUpfront": "1.775",
						"yrTerm3Convertible.noUpfront": "2.107",
						"yrTerm3Convertible.partialUpfront": "1.812",
						"yrTerm3Standard.allUpfront": "1.307",
						"yrTerm3Standard.partialUpfront": "1.391"
					}
				},
				"mswin": {
					"ondemand": "4.069",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.257",
						"yrTerm1Standard.noUpfront": "2.694",
						"yrTerm1Standard.partialUpfront": "2.303",
						"yrTerm3Convertible.allUpfront": "2.059",
						"yrTerm3Convertible.noUpfront": "2.460",
						"yrTerm3Convertible.partialUpfront": "2.101",
						"yrTerm3Standard.allUpfront": "1.549",
						"yrTerm3Standard.partialUpfront": "1.648"
					}
				},
				"mswinSQL": {
					"ondemand": "11.538",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.922",
						"yrTerm1Standard.noUpfront": "8.264",
						"yrTerm1Standard.partialUpfront": "7.063",
						"yrTerm3Convertible.allUpfront": "6.724",
						"yrTerm3Convertible.noUpfront": "8.030",
						"yrTerm3Convertible.partialUpfront": "6.862",
						"yrTerm3Standard.allUpfront": "5.839",
						"yrTerm3Standard.partialUpfront": "6.212"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.874",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.836",
						"yrTerm1Standard.noUpfront": "3.387",
						"yrTerm1Standard.partialUpfront": "2.894",
						"yrTerm3Convertible.allUpfront": "2.639",
						"yrTerm3Convertible.noUpfront": "3.153",
						"yrTerm3Convertible.partialUpfront": "2.693",
						"yrTerm3Standard.allUpfront": "2.278",
						"yrTerm3Standard.partialUpfront": "2.423"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "2.964",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.827",
						"yrTerm1Standard.noUpfront": "2.174",
						"yrTerm1Standard.partialUpfront": "1.864",
						"yrTerm3Convertible.allUpfront": "1.644",
						"yrTerm3Convertible.noUpfront": "1.957",
						"yrTerm3Convertible.partialUpfront": "1.678",
						"yrTerm3Standard.allUpfront": "1.210",
						"yrTerm3Standard.partialUpfront": "1.288"
					}
				},
				"mswin": {
					"ondemand": "3.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.109",
						"yrTerm1Standard.noUpfront": "2.518",
						"yrTerm1Standard.partialUpfront": "2.152",
						"yrTerm3Convertible.allUpfront": "1.926",
						"yrTerm3Convertible.noUpfront": "2.301",
						"yrTerm3Convertible.partialUpfront": "1.966",
						"yrTerm3Standard.allUpfront": "1.445",
						"yrTerm3Standard.partialUpfront": "1.538"
					}
				},
				"mswinSQL": {
					"ondemand": "8.599",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.339",
						"yrTerm1Standard.noUpfront": "7.568",
						"yrTerm1Standard.partialUpfront": "6.468",
						"yrTerm3Convertible.allUpfront": "6.156",
						"yrTerm3Convertible.noUpfront": "7.351",
						"yrTerm3Convertible.partialUpfront": "6.282",
						"yrTerm3Standard.allUpfront": "5.450",
						"yrTerm3Standard.partialUpfront": "5.798"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.839",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.253",
						"yrTerm1Standard.noUpfront": "2.691",
						"yrTerm1Standard.partialUpfront": "2.299",
						"yrTerm3Convertible.allUpfront": "2.070",
						"yrTerm3Convertible.noUpfront": "2.474",
						"yrTerm3Convertible.partialUpfront": "2.113",
						"yrTerm3Standard.allUpfront": "1.889",
						"yrTerm3Standard.partialUpfront": "2.010"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "5.597",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.575",
						"yrTerm1Standard.noUpfront": "4.268",
						"yrTerm1Standard.partialUpfront": "3.648",
						"yrTerm3Convertible.allUpfront": "3.218",
						"yrTerm3Convertible.noUpfront": "3.841",
						"yrTerm3Convertible.partialUpfront": "3.283",
						"yrTerm3Standard.allUpfront": "2.358",
						"yrTerm3Standard.partialUpfront": "2.508"
					}
				},
				"mswin": {
					"ondemand": "6.788",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.641",
						"yrTerm1Standard.noUpfront": "5.541",
						"yrTerm1Standard.partialUpfront": "4.736",
						"yrTerm3Convertible.allUpfront": "4.284",
						"yrTerm3Convertible.noUpfront": "5.114",
						"yrTerm3Convertible.partialUpfront": "4.371",
						"yrTerm3Standard.allUpfront": "3.324",
						"yrTerm3Standard.partialUpfront": "3.536"
					}
				},
				"mswinSQL": {
					"ondemand": "15.336",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.912",
						"yrTerm1Standard.noUpfront": "10.640",
						"yrTerm1Standard.partialUpfront": "9.094",
						"yrTerm3Convertible.allUpfront": "8.555",
						"yrTerm3Convertible.noUpfront": "10.213",
						"yrTerm3Convertible.partialUpfront": "8.729",
						"yrTerm3Standard.allUpfront": "7.477",
						"yrTerm3Standard.partialUpfront": "7.954"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "7.758",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.726",
						"yrTerm1Standard.noUpfront": "5.641",
						"yrTerm1Standard.partialUpfront": "4.822",
						"yrTerm3Convertible.allUpfront": "4.368",
						"yrTerm3Convertible.noUpfront": "5.214",
						"yrTerm3Convertible.partialUpfront": "4.457",
						"yrTerm3Standard.allUpfront": "3.461",
						"yrTerm3Standard.partialUpfront": "3.682"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "2.66",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.411",
						"yrTerm1Standard.noUpfront": "1.672",
						"yrTerm1Standard.partialUpfront": "1.441",
						"yrTerm3Convertible.allUpfront": "1.270",
						"yrTerm3Convertible.noUpfront": "1.505",
						"yrTerm3Convertible.partialUpfront": "1.297",
						"yrTerm3Standard.allUpfront": "0.933",
						"yrTerm3Standard.partialUpfront": "0.993"
					}
				},
				"mswin": {
					"ondemand": "3.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.666",
						"yrTerm1Standard.noUpfront": "1.989",
						"yrTerm1Standard.partialUpfront": "1.700",
						"yrTerm3Convertible.allUpfront": "1.525",
						"yrTerm3Convertible.noUpfront": "1.822",
						"yrTerm3Convertible.partialUpfront": "1.556",
						"yrTerm3Standard.allUpfront": "1.156",
						"yrTerm3Standard.partialUpfront": "1.230"
					}
				},
				"mswinSQL": {
					"ondemand": "8.615",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.360",
						"yrTerm1Standard.noUpfront": "7.594",
						"yrTerm1Standard.partialUpfront": "6.491",
						"yrTerm3Convertible.allUpfront": "6.219",
						"yrTerm3Convertible.noUpfront": "7.427",
						"yrTerm3Convertible.partialUpfront": "6.346",
						"yrTerm3Standard.allUpfront": "5.465",
						"yrTerm3Standard.partialUpfront": "5.814"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.855",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.275",
						"yrTerm1Standard.noUpfront": "2.717",
						"yrTerm1Standard.partialUpfront": "2.322",
						"yrTerm3Convertible.allUpfront": "2.134",
						"yrTerm3Convertible.noUpfront": "2.550",
						"yrTerm3Convertible.partialUpfront": "2.178",
						"yrTerm3Standard.allUpfront": "1.903",
						"yrTerm3Standard.partialUpfront": "2.025"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "2.66",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.411",
						"yrTerm1Standard.noUpfront": "1.672",
						"yrTerm1Standard.partialUpfront": "1.441",
						"yrTerm3Convertible.allUpfront": "1.270",
						"yrTerm3Convertible.noUpfront": "1.505",
						"yrTerm3Convertible.partialUpfront": "1.297",
						"yrTerm3Standard.allUpfront": "0.933",
						"yrTerm3Standard.partialUpfront": "0.993"
					}
				},
				"mswin": {
					"ondemand": "3.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.666",
						"yrTerm1Standard.noUpfront": "1.989",
						"yrTerm1Standard.partialUpfront": "1.700",
						"yrTerm3Convertible.allUpfront": "1.525",
						"yrTerm3Convertible.noUpfront": "1.822",
						"yrTerm3Convertible.partialUpfront": "1.556",
						"yrTerm3Standard.allUpfront": "1.156",
						"yrTerm3Standard.partialUpfront": "1.230"
					}
				},
				"mswinSQL": {
					"ondemand": "8.615",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.360",
						"yrTerm1Standard.noUpfront": "7.594",
						"yrTerm1Standard.partialUpfront": "6.491",
						"yrTerm3Convertible.allUpfront": "6.219",
						"yrTerm3Convertible.noUpfront": "7.427",
						"yrTerm3Convertible.partialUpfront": "6.346",
						"yrTerm3Standard.allUpfront": "5.465",
						"yrTerm3Standard.partialUpfront": "5.814"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.855",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.275",
						"yrTerm1Standard.noUpfront": "2.717",
						"yrTerm1Standard.partialUpfront": "2.322",
						"yrTerm3Convertible.allUpfront": "2.134",
						"yrTerm3Convertible.noUpfront": "2.550",
						"yrTerm3Convertible.partialUpfront": "2.178",
						"yrTerm3Standard.allUpfront": "1.903",
						"yrTerm3Standard.partialUpfront": "2.025"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "3.192",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.694",
						"yrTerm1Standard.noUpfront": "2.006",
						"yrTerm1Standard.partialUpfront": "1.728",
						"yrTerm3Convertible.allUpfront": "1.524",
						"yrTerm3Convertible.noUpfront": "1.805",
						"yrTerm3Convertible.partialUpfront": "1.555",
						"yrTerm3Standard.allUpfront": "1.120",
						"yrTerm3Standard.partialUpfront": "1.191"
					}
				},
				"mswin": {
					"ondemand": "4.06",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.964",
						"yrTerm1Standard.noUpfront": "2.345",
						"yrTerm1Standard.partialUpfront": "2.004",
						"yrTerm3Convertible.allUpfront": "1.795",
						"yrTerm3Convertible.noUpfront": "2.144",
						"yrTerm3Convertible.partialUpfront": "1.831",
						"yrTerm3Standard.allUpfront": "1.353",
						"yrTerm3Standard.partialUpfront": "1.439"
					}
				},
				"mswinSQL": {
					"ondemand": "9.147",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.644",
						"yrTerm1Standard.noUpfront": "7.932",
						"yrTerm1Standard.partialUpfront": "6.779",
						"yrTerm3Convertible.allUpfront": "6.474",
						"yrTerm3Convertible.noUpfront": "7.731",
						"yrTerm3Convertible.partialUpfront": "6.606",
						"yrTerm3Standard.allUpfront": "5.652",
						"yrTerm3Standard.partialUpfront": "6.013"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.387",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.558",
						"yrTerm1Standard.noUpfront": "3.054",
						"yrTerm1Standard.partialUpfront": "2.610",
						"yrTerm3Convertible.allUpfront": "2.389",
						"yrTerm3Convertible.noUpfront": "2.853",
						"yrTerm3Convertible.partialUpfront": "2.437",
						"yrTerm3Standard.allUpfront": "2.091",
						"yrTerm3Standard.partialUpfront": "2.224"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "2.964",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.827",
						"yrTerm1Standard.noUpfront": "2.174",
						"yrTerm1Standard.partialUpfront": "1.864",
						"yrTerm3Convertible.allUpfront": "1.644",
						"yrTerm3Convertible.noUpfront": "1.957",
						"yrTerm3Convertible.partialUpfront": "1.678",
						"yrTerm3Standard.allUpfront": "1.210",
						"yrTerm3Standard.partialUpfront": "1.288"
					}
				},
				"mswin": {
					"ondemand": "3.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.109",
						"yrTerm1Standard.noUpfront": "2.518",
						"yrTerm1Standard.partialUpfront": "2.152",
						"yrTerm3Convertible.allUpfront": "1.926",
						"yrTerm3Convertible.noUpfront": "2.301",
						"yrTerm3Convertible.partialUpfront": "1.966",
						"yrTerm3Standard.allUpfront": "1.445",
						"yrTerm3Standard.partialUpfront": "1.538"
					}
				},
				"mswinSQL": {
					"ondemand": "8.899",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.559",
						"yrTerm1Standard.noUpfront": "7.832",
						"yrTerm1Standard.partialUpfront": "6.694",
						"yrTerm3Convertible.allUpfront": "6.377",
						"yrTerm3Convertible.noUpfront": "7.615",
						"yrTerm3Convertible.partialUpfront": "6.507",
						"yrTerm3Standard.allUpfront": "5.639",
						"yrTerm3Standard.partialUpfront": "5.999"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.139",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.429",
						"yrTerm1Standard.noUpfront": "2.901",
						"yrTerm1Standard.partialUpfront": "2.479",
						"yrTerm3Convertible.allUpfront": "2.247",
						"yrTerm3Convertible.noUpfront": "2.684",
						"yrTerm3Convertible.partialUpfront": "2.293",
						"yrTerm3Standard.allUpfront": "2.036",
						"yrTerm3Standard.partialUpfront": "2.166"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "2.66",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.411",
						"yrTerm1Standard.noUpfront": "1.672",
						"yrTerm1Standard.partialUpfront": "1.441",
						"yrTerm3Convertible.allUpfront": "1.270",
						"yrTerm3Convertible.noUpfront": "1.505",
						"yrTerm3Convertible.partialUpfront": "1.297",
						"yrTerm3Standard.allUpfront": "0.933",
						"yrTerm3Standard.partialUpfront": "0.993"
					}
				},
				"mswin": {
					"ondemand": "3.5",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.666",
						"yrTerm1Standard.noUpfront": "1.989",
						"yrTerm1Standard.partialUpfront": "1.700",
						"yrTerm3Convertible.allUpfront": "1.525",
						"yrTerm3Convertible.noUpfront": "1.822",
						"yrTerm3Convertible.partialUpfront": "1.556",
						"yrTerm3Standard.allUpfront": "1.156",
						"yrTerm3Standard.partialUpfront": "1.230"
					}
				},
				"mswinSQL": {
					"ondemand": "8.615",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.360",
						"yrTerm1Standard.noUpfront": "7.594",
						"yrTerm1Standard.partialUpfront": "6.491",
						"yrTerm3Convertible.allUpfront": "6.219",
						"yrTerm3Convertible.noUpfront": "7.427",
						"yrTerm3Convertible.partialUpfront": "6.346",
						"yrTerm3Standard.allUpfront": "5.465",
						"yrTerm3Standard.partialUpfront": "5.814"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.855",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.275",
						"yrTerm1Standard.noUpfront": "2.717",
						"yrTerm1Standard.partialUpfront": "2.322",
						"yrTerm3Convertible.allUpfront": "2.134",
						"yrTerm3Convertible.noUpfront": "2.550",
						"yrTerm3Convertible.partialUpfront": "2.178",
						"yrTerm3Standard.allUpfront": "1.903",
						"yrTerm3Standard.partialUpfront": "2.025"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 320,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 32,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 7,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 3000,
		"ebs_max_bandwidth": 425,
		"ebs_optimized": true,
		"ebs_throughput": 50,
		"enhanced_networking": true,
		"family": "Storage optimized",
		"generation": "current",
		"instance_type": "i3.large",
		"ipv6_support": true,
		"linux_virtualization_types": [],
		"memory": 15.25,
		"network_performance": "Up to 10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "I3 High I/O Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.183",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.117",
						"yrTerm1Standard.noUpfront": "0.124",
						"yrTerm1Standard.partialUpfront": "0.118",
						"yrTerm3Convertible.allUpfront": "0.092",
						"yrTerm3Convertible.noUpfront": "0.102",
						"yrTerm3Convertible.partialUpfront": "0.094",
						"yrTerm3Standard.allUpfront": "0.077",
						"yrTerm3Standard.noUpfront": "0.089",
						"yrTerm3Standard.partialUpfront": "0.082"
					}
				},
				"mswin": {
					"ondemand": "0.275",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.209",
						"yrTerm1Standard.noUpfront": "0.216",
						"yrTerm1Standard.partialUpfront": "0.210",
						"yrTerm3Convertible.allUpfront": "0.184",
						"yrTerm3Convertible.noUpfront": "0.194",
						"yrTerm3Convertible.partialUpfront": "0.186",
						"yrTerm3Standard.allUpfront": "0.169",
						"yrTerm3Standard.noUpfront": "0.181",
						"yrTerm3Standard.partialUpfront": "0.174"
					}
				},
				"mswinSQL": {
					"ondemand": "1.402",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.336",
						"yrTerm1Standard.noUpfront": "1.343",
						"yrTerm1Standard.partialUpfront": "1.338",
						"yrTerm3Convertible.allUpfront": "1.311",
						"yrTerm3Convertible.noUpfront": "1.321",
						"yrTerm3Convertible.partialUpfront": "1.314",
						"yrTerm3Standard.allUpfront": "1.296",
						"yrTerm3Standard.noUpfront": "1.308",
						"yrTerm3Standard.partialUpfront": "1.302"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.346",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.280",
						"yrTerm1Standard.noUpfront": "0.287",
						"yrTerm1Standard.partialUpfront": "0.282",
						"yrTerm3Convertible.allUpfront": "0.255",
						"yrTerm3Convertible.noUpfront": "0.265",
						"yrTerm3Convertible.partialUpfront": "0.258",
						"yrTerm3Standard.allUpfront": "0.240",
						"yrTerm3Standard.noUpfront": "0.252",
						"yrTerm3Standard.partialUpfront": "0.246"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.183",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.117",
						"yrTerm1Standard.noUpfront": "0.124",
						"yrTerm1Standard.partialUpfront": "0.118",
						"yrTerm3Convertible.allUpfront": "0.092",
						"yrTerm3Convertible.noUpfront": "0.102",
						"yrTerm3Convertible.partialUpfront": "0.094",
						"yrTerm3Standard.allUpfront": "0.077",
						"yrTerm3Standard.noUpfront": "0.089",
						"yrTerm3Standard.partialUpfront": "0.082"
					}
				},
				"mswin": {
					"ondemand": "0.275",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.209",
						"yrTerm1Standard.noUpfront": "0.216",
						"yrTerm1Standard.partialUpfront": "0.210",
						"yrTerm3Convertible.allUpfront": "0.184",
						"yrTerm3Convertible.noUpfront": "0.194",
						"yrTerm3Convertible.partialUpfront": "0.186",
						"yrTerm3Standard.allUpfront": "0.169",
						"yrTerm3Standard.noUpfront": "0.181",
						"yrTerm3Standard.partialUpfront": "0.174"
					}
				},
				"mswinSQL": {
					"ondemand": "1.402",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.336",
						"yrTerm1Standard.noUpfront": "1.343",
						"yrTerm1Standard.partialUpfront": "1.338",
						"yrTerm3Convertible.allUpfront": "1.311",
						"yrTerm3Convertible.noUpfront": "1.321",
						"yrTerm3Convertible.partialUpfront": "1.314",
						"yrTerm3Standard.allUpfront": "1.296",
						"yrTerm3Standard.noUpfront": "1.308",
						"yrTerm3Standard.partialUpfront": "1.302"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.346",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.280",
						"yrTerm1Standard.noUpfront": "0.287",
						"yrTerm1Standard.partialUpfront": "0.282",
						"yrTerm3Convertible.allUpfront": "0.255",
						"yrTerm3Convertible.noUpfront": "0.265",
						"yrTerm3Convertible.partialUpfront": "0.258",
						"yrTerm3Standard.allUpfront": "0.240",
						"yrTerm3Standard.noUpfront": "0.252",
						"yrTerm3Standard.partialUpfront": "0.246"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.177",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.113",
						"yrTerm1Standard.noUpfront": "0.122",
						"yrTerm1Standard.partialUpfront": "0.116",
						"yrTerm3Convertible.allUpfront": "0.090",
						"yrTerm3Convertible.noUpfront": "0.099",
						"yrTerm3Convertible.partialUpfront": "0.092",
						"yrTerm3Standard.allUpfront": "0.075",
						"yrTerm3Standard.noUpfront": "0.086",
						"yrTerm3Standard.partialUpfront": "0.080"
					}
				},
				"mswin": {
					"ondemand": "0.269",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.205",
						"yrTerm1Standard.noUpfront": "0.214",
						"yrTerm1Standard.partialUpfront": "0.208",
						"yrTerm3Convertible.allUpfront": "0.182",
						"yrTerm3Convertible.noUpfront": "0.191",
						"yrTerm3Convertible.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.167",
						"yrTerm3Standard.noUpfront": "0.178",
						"yrTerm3Standard.partialUpfront": "0.172"
					}
				},
				"mswinSQL": {
					"ondemand": "1.396",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.332",
						"yrTerm1Standard.noUpfront": "1.341",
						"yrTerm1Standard.partialUpfront": "1.334",
						"yrTerm3Convertible.allUpfront": "1.309",
						"yrTerm3Convertible.noUpfront": "1.318",
						"yrTerm3Convertible.partialUpfront": "1.310",
						"yrTerm3Standard.allUpfront": "1.294",
						"yrTerm3Standard.noUpfront": "1.305",
						"yrTerm3Standard.partialUpfront": "1.298"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.34",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.276",
						"yrTerm1Standard.noUpfront": "0.285",
						"yrTerm1Standard.partialUpfront": "0.278",
						"yrTerm3Convertible.allUpfront": "0.253",
						"yrTerm3Convertible.noUpfront": "0.262",
						"yrTerm3Convertible.partialUpfront": "0.254",
						"yrTerm3Standard.allUpfront": "0.238",
						"yrTerm3Standard.noUpfront": "0.249",
						"yrTerm3Standard.partialUpfront": "0.242"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.187",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.119",
						"yrTerm1Standard.noUpfront": "0.128",
						"yrTerm1Standard.partialUpfront": "0.122",
						"yrTerm3Convertible.allUpfront": "0.095",
						"yrTerm3Convertible.noUpfront": "0.104",
						"yrTerm3Convertible.partialUpfront": "0.096",
						"yrTerm3Standard.allUpfront": "0.079",
						"yrTerm3Standard.noUpfront": "0.091",
						"yrTerm3Standard.partialUpfront": "0.084"
					}
				},
				"mswin": {
					"ondemand": "0.279",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.211",
						"yrTerm1Standard.noUpfront": "0.220",
						"yrTerm1Standard.partialUpfront": "0.214",
						"yrTerm3Convertible.allUpfront": "0.187",
						"yrTerm3Convertible.noUpfront": "0.196",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.171",
						"yrTerm3Standard.noUpfront": "0.183",
						"yrTerm3Standard.partialUpfront": "0.176"
					}
				},
				"mswinSQL": {
					"ondemand": "1.406",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.338",
						"yrTerm1Standard.noUpfront": "1.347",
						"yrTerm1Standard.partialUpfront": "1.340",
						"yrTerm3Convertible.allUpfront": "1.314",
						"yrTerm3Convertible.noUpfront": "1.323",
						"yrTerm3Convertible.partialUpfront": "1.316",
						"yrTerm3Standard.allUpfront": "1.298",
						"yrTerm3Standard.noUpfront": "1.310",
						"yrTerm3Standard.partialUpfront": "1.304"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.282",
						"yrTerm1Standard.noUpfront": "0.291",
						"yrTerm1Standard.partialUpfront": "0.284",
						"yrTerm3Convertible.allUpfront": "0.258",
						"yrTerm3Convertible.noUpfront": "0.267",
						"yrTerm3Convertible.partialUpfront": "0.260",
						"yrTerm3Standard.allUpfront": "0.242",
						"yrTerm3Standard.noUpfront": "0.254",
						"yrTerm3Standard.partialUpfront": "0.248"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.187",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.119",
						"yrTerm1Standard.noUpfront": "0.128",
						"yrTerm1Standard.partialUpfront": "0.122",
						"yrTerm3Convertible.allUpfront": "0.095",
						"yrTerm3Convertible.noUpfront": "0.104",
						"yrTerm3Convertible.partialUpfront": "0.096",
						"yrTerm3Standard.allUpfront": "0.079",
						"yrTerm3Standard.noUpfront": "0.091",
						"yrTerm3Standard.partialUpfront": "0.084"
					}
				},
				"mswin": {
					"ondemand": "0.279",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.211",
						"yrTerm1Standard.noUpfront": "0.220",
						"yrTerm1Standard.partialUpfront": "0.214",
						"yrTerm3Convertible.allUpfront": "0.187",
						"yrTerm3Convertible.noUpfront": "0.196",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.171",
						"yrTerm3Standard.noUpfront": "0.183",
						"yrTerm3Standard.partialUpfront": "0.176"
					}
				},
				"mswinSQL": {
					"ondemand": "1.406",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.338",
						"yrTerm1Standard.noUpfront": "1.347",
						"yrTerm1Standard.partialUpfront": "1.340",
						"yrTerm3Convertible.allUpfront": "1.314",
						"yrTerm3Convertible.noUpfront": "1.323",
						"yrTerm3Convertible.partialUpfront": "1.316",
						"yrTerm3Standard.allUpfront": "1.298",
						"yrTerm3Standard.noUpfront": "1.310",
						"yrTerm3Standard.partialUpfront": "1.304"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.35",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.282",
						"yrTerm1Standard.noUpfront": "0.291",
						"yrTerm1Standard.partialUpfront": "0.284",
						"yrTerm3Convertible.allUpfront": "0.258",
						"yrTerm3Convertible.noUpfront": "0.267",
						"yrTerm3Convertible.partialUpfront": "0.260",
						"yrTerm3Standard.allUpfront": "0.242",
						"yrTerm3Standard.noUpfront": "0.254",
						"yrTerm3Standard.partialUpfront": "0.248"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.172",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.110",
						"yrTerm1Standard.noUpfront": "0.118",
						"yrTerm1Standard.partialUpfront": "0.112",
						"yrTerm3Convertible.allUpfront": "0.088",
						"yrTerm3Convertible.noUpfront": "0.097",
						"yrTerm3Convertible.partialUpfront": "0.090",
						"yrTerm3Standard.allUpfront": "0.073",
						"yrTerm3Standard.noUpfront": "0.084",
						"yrTerm3Standard.partialUpfront": "0.078"
					}
				},
				"mswin": {
					"ondemand": "0.264",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.202",
						"yrTerm1Standard.noUpfront": "0.210",
						"yrTerm1Standard.partialUpfront": "0.204",
						"yrTerm3Convertible.allUpfront": "0.180",
						"yrTerm3Convertible.noUpfront": "0.189",
						"yrTerm3Convertible.partialUpfront": "0.182",
						"yrTerm3Standard.allUpfront": "0.165",
						"yrTerm3Standard.noUpfront": "0.176",
						"yrTerm3Standard.partialUpfront": "0.170"
					}
				},
				"mswinSQL": {
					"ondemand": "1.391",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.329",
						"yrTerm1Standard.noUpfront": "1.337",
						"yrTerm1Standard.partialUpfront": "1.330",
						"yrTerm3Convertible.allUpfront": "1.307",
						"yrTerm3Convertible.noUpfront": "1.316",
						"yrTerm3Convertible.partialUpfront": "1.308",
						"yrTerm3Standard.allUpfront": "1.292",
						"yrTerm3Standard.noUpfront": "1.303",
						"yrTerm3Standard.partialUpfront": "1.296"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.335",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.273",
						"yrTerm1Standard.noUpfront": "0.281",
						"yrTerm1Standard.partialUpfront": "0.274",
						"yrTerm3Convertible.allUpfront": "0.251",
						"yrTerm3Convertible.noUpfront": "0.260",
						"yrTerm3Convertible.partialUpfront": "0.252",
						"yrTerm3Standard.allUpfront": "0.236",
						"yrTerm3Standard.noUpfront": "0.247",
						"yrTerm3Standard.partialUpfront": "0.240"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.186",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.118",
						"yrTerm1Standard.noUpfront": "0.126",
						"yrTerm1Standard.partialUpfront": "0.120",
						"yrTerm3Convertible.allUpfront": "0.095",
						"yrTerm3Convertible.noUpfront": "0.104",
						"yrTerm3Convertible.partialUpfront": "0.096",
						"yrTerm3Standard.allUpfront": "0.079",
						"yrTerm3Standard.noUpfront": "0.091",
						"yrTerm3Standard.partialUpfront": "0.084"
					}
				},
				"mswin": {
					"ondemand": "0.278",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.210",
						"yrTerm1Standard.noUpfront": "0.218",
						"yrTerm1Standard.partialUpfront": "0.212",
						"yrTerm3Convertible.allUpfront": "0.187",
						"yrTerm3Convertible.noUpfront": "0.196",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.171",
						"yrTerm3Standard.noUpfront": "0.183",
						"yrTerm3Standard.partialUpfront": "0.176"
					}
				},
				"mswinSQL": {
					"ondemand": "1.405",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.337",
						"yrTerm1Standard.noUpfront": "1.345",
						"yrTerm1Standard.partialUpfront": "1.340",
						"yrTerm3Convertible.allUpfront": "1.314",
						"yrTerm3Convertible.noUpfront": "1.323",
						"yrTerm3Convertible.partialUpfront": "1.316",
						"yrTerm3Standard.allUpfront": "1.298",
						"yrTerm3Standard.noUpfront": "1.310",
						"yrTerm3Standard.partialUpfront": "1.302"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.349",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.281",
						"yrTerm1Standard.noUpfront": "0.289",
						"yrTerm1Standard.partialUpfront": "0.284",
						"yrTerm3Convertible.allUpfront": "0.258",
						"yrTerm3Convertible.noUpfront": "0.267",
						"yrTerm3Convertible.partialUpfront": "0.260",
						"yrTerm3Standard.allUpfront": "0.242",
						"yrTerm3Standard.noUpfront": "0.254",
						"yrTerm3Standard.partialUpfront": "0.246"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.172",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.110",
						"yrTerm1Standard.noUpfront": "0.118",
						"yrTerm1Standard.partialUpfront": "0.112",
						"yrTerm3Convertible.allUpfront": "0.088",
						"yrTerm3Convertible.noUpfront": "0.097",
						"yrTerm3Convertible.partialUpfront": "0.090",
						"yrTerm3Standard.allUpfront": "0.073",
						"yrTerm3Standard.noUpfront": "0.084",
						"yrTerm3Standard.partialUpfront": "0.078"
					}
				},
				"mswin": {
					"ondemand": "0.264",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.202",
						"yrTerm1Standard.noUpfront": "0.210",
						"yrTerm1Standard.partialUpfront": "0.204",
						"yrTerm3Convertible.allUpfront": "0.180",
						"yrTerm3Convertible.noUpfront": "0.189",
						"yrTerm3Convertible.partialUpfront": "0.182",
						"yrTerm3Standard.allUpfront": "0.165",
						"yrTerm3Standard.noUpfront": "0.176",
						"yrTerm3Standard.partialUpfront": "0.170"
					}
				},
				"mswinSQL": {
					"ondemand": "1.391",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.329",
						"yrTerm1Standard.noUpfront": "1.337",
						"yrTerm1Standard.partialUpfront": "1.330",
						"yrTerm3Convertible.allUpfront": "1.307",
						"yrTerm3Convertible.noUpfront": "1.316",
						"yrTerm3Convertible.partialUpfront": "1.308",
						"yrTerm3Standard.allUpfront": "1.292",
						"yrTerm3Standard.noUpfront": "1.303",
						"yrTerm3Standard.partialUpfront": "1.296"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.335",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.273",
						"yrTerm1Standard.noUpfront": "0.281",
						"yrTerm1Standard.partialUpfront": "0.274",
						"yrTerm3Convertible.allUpfront": "0.251",
						"yrTerm3Convertible.noUpfront": "0.260",
						"yrTerm3Convertible.partialUpfront": "0.252",
						"yrTerm3Standard.allUpfront": "0.236",
						"yrTerm3Standard.noUpfront": "0.247",
						"yrTerm3Standard.partialUpfront": "0.240"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.181",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.115",
						"yrTerm1Standard.noUpfront": "0.124",
						"yrTerm1Standard.partialUpfront": "0.118",
						"yrTerm3Convertible.allUpfront": "0.092",
						"yrTerm3Convertible.noUpfront": "0.102",
						"yrTerm3Convertible.partialUpfront": "0.094",
						"yrTerm3Standard.allUpfront": "0.077",
						"yrTerm3Standard.noUpfront": "0.089",
						"yrTerm3Standard.partialUpfront": "0.082"
					}
				},
				"mswin": {
					"ondemand": "0.273",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.207",
						"yrTerm1Standard.noUpfront": "0.216",
						"yrTerm1Standard.partialUpfront": "0.210",
						"yrTerm3Convertible.allUpfront": "0.184",
						"yrTerm3Convertible.noUpfront": "0.194",
						"yrTerm3Convertible.partialUpfront": "0.186",
						"yrTerm3Standard.allUpfront": "0.169",
						"yrTerm3Standard.noUpfront": "0.181",
						"yrTerm3Standard.partialUpfront": "0.174"
					}
				},
				"mswinSQL": {
					"ondemand": "1.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.334",
						"yrTerm1Standard.noUpfront": "1.343",
						"yrTerm1Standard.partialUpfront": "1.336",
						"yrTerm3Convertible.allUpfront": "1.311",
						"yrTerm3Convertible.noUpfront": "1.321",
						"yrTerm3Convertible.partialUpfront": "1.314",
						"yrTerm3Standard.allUpfront": "1.296",
						"yrTerm3Standard.noUpfront": "1.308",
						"yrTerm3Standard.partialUpfront": "1.300"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.344",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.278",
						"yrTerm1Standard.noUpfront": "0.287",
						"yrTerm1Standard.partialUpfront": "0.280",
						"yrTerm3Convertible.allUpfront": "0.255",
						"yrTerm3Convertible.noUpfront": "0.265",
						"yrTerm3Convertible.partialUpfront": "0.258",
						"yrTerm3Standard.allUpfront": "0.240",
						"yrTerm3Standard.noUpfront": "0.252",
						"yrTerm3Standard.partialUpfront": "0.244"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.286",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.182",
						"yrTerm1Standard.noUpfront": "0.195",
						"yrTerm1Standard.partialUpfront": "0.186",
						"yrTerm3Convertible.allUpfront": "0.144",
						"yrTerm3Convertible.noUpfront": "0.159",
						"yrTerm3Convertible.partialUpfront": "0.148",
						"yrTerm3Standard.allUpfront": "0.121",
						"yrTerm3Standard.noUpfront": "0.138",
						"yrTerm3Standard.partialUpfront": "0.128"
					}
				},
				"mswin": {
					"ondemand": "0.378",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.274",
						"yrTerm1Standard.noUpfront": "0.287",
						"yrTerm1Standard.partialUpfront": "0.278",
						"yrTerm3Convertible.allUpfront": "0.236",
						"yrTerm3Convertible.noUpfront": "0.251",
						"yrTerm3Convertible.partialUpfront": "0.240",
						"yrTerm3Standard.allUpfront": "0.213",
						"yrTerm3Standard.noUpfront": "0.230",
						"yrTerm3Standard.partialUpfront": "0.220"
					}
				},
				"mswinSQL": {
					"ondemand": "1.505",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.401",
						"yrTerm1Standard.noUpfront": "1.414",
						"yrTerm1Standard.partialUpfront": "1.404",
						"yrTerm3Convertible.allUpfront": "1.363",
						"yrTerm3Convertible.noUpfront": "1.378",
						"yrTerm3Convertible.partialUpfront": "1.366",
						"yrTerm3Standard.allUpfront": "1.340",
						"yrTerm3Standard.noUpfront": "1.357",
						"yrTerm3Standard.partialUpfront": "1.348"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.449",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.345",
						"yrTerm1Standard.noUpfront": "0.358",
						"yrTerm1Standard.partialUpfront": "0.348",
						"yrTerm3Convertible.allUpfront": "0.307",
						"yrTerm3Convertible.noUpfront": "0.322",
						"yrTerm3Convertible.partialUpfront": "0.310",
						"yrTerm3Standard.allUpfront": "0.284",
						"yrTerm3Standard.noUpfront": "0.301",
						"yrTerm3Standard.partialUpfront": "0.292"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.099",
						"yrTerm1Standard.noUpfront": "0.107",
						"yrTerm1Standard.partialUpfront": "0.102",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.087",
						"yrTerm3Convertible.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.066",
						"yrTerm3Standard.noUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.070"
					}
				},
				"mswin": {
					"ondemand": "0.248",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.191",
						"yrTerm1Standard.noUpfront": "0.199",
						"yrTerm1Standard.partialUpfront": "0.194",
						"yrTerm3Convertible.allUpfront": "0.171",
						"yrTerm3Convertible.noUpfront": "0.179",
						"yrTerm3Convertible.partialUpfront": "0.172",
						"yrTerm3Standard.allUpfront": "0.158",
						"yrTerm3Standard.noUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.162"
					}
				},
				"mswinSQL": {
					"ondemand": "1.375",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.318",
						"yrTerm1Standard.noUpfront": "1.326",
						"yrTerm1Standard.partialUpfront": "1.320",
						"yrTerm3Convertible.allUpfront": "1.298",
						"yrTerm3Convertible.noUpfront": "1.306",
						"yrTerm3Convertible.partialUpfront": "1.300",
						"yrTerm3Standard.allUpfront": "1.285",
						"yrTerm3Standard.noUpfront": "1.295",
						"yrTerm3Standard.partialUpfront": "1.290"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.319",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.262",
						"yrTerm1Standard.noUpfront": "0.270",
						"yrTerm1Standard.partialUpfront": "0.264",
						"yrTerm3Convertible.allUpfront": "0.242",
						"yrTerm3Convertible.noUpfront": "0.250",
						"yrTerm3Convertible.partialUpfront": "0.244",
						"yrTerm3Standard.allUpfront": "0.229",
						"yrTerm3Standard.noUpfront": "0.239",
						"yrTerm3Standard.partialUpfront": "0.234"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.099",
						"yrTerm1Standard.noUpfront": "0.107",
						"yrTerm1Standard.partialUpfront": "0.102",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.087",
						"yrTerm3Convertible.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.066",
						"yrTerm3Standard.noUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.070"
					}
				},
				"mswin": {
					"ondemand": "0.248",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.191",
						"yrTerm1Standard.noUpfront": "0.199",
						"yrTerm1Standard.partialUpfront": "0.194",
						"yrTerm3Convertible.allUpfront": "0.171",
						"yrTerm3Convertible.noUpfront": "0.179",
						"yrTerm3Convertible.partialUpfront": "0.172",
						"yrTerm3Standard.allUpfront": "0.158",
						"yrTerm3Standard.noUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.162"
					}
				},
				"mswinSQL": {
					"ondemand": "1.375",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.318",
						"yrTerm1Standard.noUpfront": "1.326",
						"yrTerm1Standard.partialUpfront": "1.320",
						"yrTerm3Convertible.allUpfront": "1.298",
						"yrTerm3Convertible.noUpfront": "1.306",
						"yrTerm3Convertible.partialUpfront": "1.300",
						"yrTerm3Standard.allUpfront": "1.285",
						"yrTerm3Standard.noUpfront": "1.295",
						"yrTerm3Standard.partialUpfront": "1.290"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.319",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.262",
						"yrTerm1Standard.noUpfront": "0.270",
						"yrTerm1Standard.partialUpfront": "0.264",
						"yrTerm3Convertible.allUpfront": "0.242",
						"yrTerm3Convertible.noUpfront": "0.250",
						"yrTerm3Convertible.partialUpfront": "0.244",
						"yrTerm3Standard.allUpfront": "0.229",
						"yrTerm3Standard.noUpfront": "0.239",
						"yrTerm3Standard.partialUpfront": "0.234"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.188",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.120",
						"yrTerm1Standard.noUpfront": "0.128",
						"yrTerm1Standard.partialUpfront": "0.122",
						"yrTerm3Convertible.allUpfront": "0.095",
						"yrTerm3Convertible.noUpfront": "0.104",
						"yrTerm3Convertible.partialUpfront": "0.096",
						"yrTerm3Standard.allUpfront": "0.080",
						"yrTerm3Standard.noUpfront": "0.091",
						"yrTerm3Standard.partialUpfront": "0.084"
					}
				},
				"mswin": {
					"ondemand": "0.28",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.212",
						"yrTerm1Standard.noUpfront": "0.220",
						"yrTerm1Standard.partialUpfront": "0.214",
						"yrTerm3Convertible.allUpfront": "0.187",
						"yrTerm3Convertible.noUpfront": "0.196",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.172",
						"yrTerm3Standard.noUpfront": "0.183",
						"yrTerm3Standard.partialUpfront": "0.176"
					}
				},
				"mswinSQL": {
					"ondemand": "1.407",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.339",
						"yrTerm1Standard.noUpfront": "1.347",
						"yrTerm1Standard.partialUpfront": "1.342",
						"yrTerm3Convertible.allUpfront": "1.314",
						"yrTerm3Convertible.noUpfront": "1.323",
						"yrTerm3Convertible.partialUpfront": "1.316",
						"yrTerm3Standard.allUpfront": "1.299",
						"yrTerm3Standard.noUpfront": "1.310",
						"yrTerm3Standard.partialUpfront": "1.304"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.351",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.283",
						"yrTerm1Standard.noUpfront": "0.291",
						"yrTerm1Standard.partialUpfront": "0.286",
						"yrTerm3Convertible.allUpfront": "0.258",
						"yrTerm3Convertible.noUpfront": "0.267",
						"yrTerm3Convertible.partialUpfront": "0.260",
						"yrTerm3Standard.allUpfront": "0.243",
						"yrTerm3Standard.noUpfront": "0.254",
						"yrTerm3Standard.partialUpfront": "0.248"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.172",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.110",
						"yrTerm1Standard.noUpfront": "0.118",
						"yrTerm1Standard.partialUpfront": "0.112",
						"yrTerm3Convertible.allUpfront": "0.088",
						"yrTerm3Convertible.noUpfront": "0.097",
						"yrTerm3Convertible.partialUpfront": "0.090",
						"yrTerm3Standard.allUpfront": "0.073",
						"yrTerm3Standard.noUpfront": "0.084",
						"yrTerm3Standard.partialUpfront": "0.078"
					}
				},
				"mswin": {
					"ondemand": "0.264",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.202",
						"yrTerm1Standard.noUpfront": "0.210",
						"yrTerm1Standard.partialUpfront": "0.204",
						"yrTerm3Convertible.allUpfront": "0.180",
						"yrTerm3Convertible.noUpfront": "0.189",
						"yrTerm3Convertible.partialUpfront": "0.182",
						"yrTerm3Standard.allUpfront": "0.165",
						"yrTerm3Standard.noUpfront": "0.176",
						"yrTerm3Standard.partialUpfront": "0.170"
					}
				},
				"mswinSQL": {
					"ondemand": "1.391",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.329",
						"yrTerm1Standard.noUpfront": "1.337",
						"yrTerm1Standard.partialUpfront": "1.330",
						"yrTerm3Convertible.allUpfront": "1.307",
						"yrTerm3Convertible.noUpfront": "1.316",
						"yrTerm3Convertible.partialUpfront": "1.308",
						"yrTerm3Standard.allUpfront": "1.292",
						"yrTerm3Standard.noUpfront": "1.303",
						"yrTerm3Standard.partialUpfront": "1.296"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.335",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.273",
						"yrTerm1Standard.noUpfront": "0.281",
						"yrTerm1Standard.partialUpfront": "0.274",
						"yrTerm3Convertible.allUpfront": "0.251",
						"yrTerm3Convertible.noUpfront": "0.260",
						"yrTerm3Convertible.partialUpfront": "0.252",
						"yrTerm3Standard.allUpfront": "0.236",
						"yrTerm3Standard.noUpfront": "0.247",
						"yrTerm3Standard.partialUpfront": "0.240"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.156",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.099",
						"yrTerm1Standard.noUpfront": "0.107",
						"yrTerm1Standard.partialUpfront": "0.102",
						"yrTerm3Convertible.allUpfront": "0.079",
						"yrTerm3Convertible.noUpfront": "0.087",
						"yrTerm3Convertible.partialUpfront": "0.080",
						"yrTerm3Standard.allUpfront": "0.066",
						"yrTerm3Standard.noUpfront": "0.076",
						"yrTerm3Standard.partialUpfront": "0.070"
					}
				},
				"mswin": {
					"ondemand": "0.248",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.191",
						"yrTerm1Standard.noUpfront": "0.199",
						"yrTerm1Standard.partialUpfront": "0.194",
						"yrTerm3Convertible.allUpfront": "0.171",
						"yrTerm3Convertible.noUpfront": "0.179",
						"yrTerm3Convertible.partialUpfront": "0.172",
						"yrTerm3Standard.allUpfront": "0.158",
						"yrTerm3Standard.noUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.162"
					}
				},
				"mswinSQL": {
					"ondemand": "1.375",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.318",
						"yrTerm1Standard.noUpfront": "1.326",
						"yrTerm1Standard.partialUpfront": "1.320",
						"yrTerm3Convertible.allUpfront": "1.298",
						"yrTerm3Convertible.noUpfront": "1.306",
						"yrTerm3Convertible.partialUpfront": "1.300",
						"yrTerm3Standard.allUpfront": "1.285",
						"yrTerm3Standard.noUpfront": "1.295",
						"yrTerm3Standard.partialUpfront": "1.290"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.319",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.262",
						"yrTerm1Standard.noUpfront": "0.270",
						"yrTerm1Standard.partialUpfront": "0.264",
						"yrTerm3Convertible.allUpfront": "0.242",
						"yrTerm3Convertible.noUpfront": "0.250",
						"yrTerm3Convertible.partialUpfront": "0.244",
						"yrTerm3Standard.allUpfront": "0.229",
						"yrTerm3Standard.noUpfront": "0.239",
						"yrTerm3Standard.partialUpfront": "0.234"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": true,
			"size": 475,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 2,
		"vpc": {
			"ips_per_eni": 10,
			"max_enis": 3
		},
		"vpc_only": true
	},
	{
		"ECU": 13,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 6000,
		"ebs_max_bandwidth": 850,
		"ebs_optimized": true,
		"ebs_throughput": 100,
		"enhanced_networking": true,
		"family": "Storage optimized",
		"generation": "current",
		"instance_type": "i3.xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [],
		"memory": 30.5,
		"network_performance": "Up to 10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "I3 High I/O Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.366",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.233",
						"yrTerm1Standard.noUpfront": "0.248",
						"yrTerm1Standard.partialUpfront": "0.238",
						"yrTerm3Convertible.allUpfront": "0.185",
						"yrTerm3Convertible.noUpfront": "0.204",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.155",
						"yrTerm3Standard.noUpfront": "0.177",
						"yrTerm3Standard.partialUpfront": "0.164"
					}
				},
				"mswin": {
					"ondemand": "0.55",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.417",
						"yrTerm1Standard.noUpfront": "0.432",
						"yrTerm1Standard.partialUpfront": "0.422",
						"yrTerm3Convertible.allUpfront": "0.369",
						"yrTerm3Convertible.noUpfront": "0.388",
						"yrTerm3Convertible.partialUpfront": "0.372",
						"yrTerm3Standard.allUpfront": "0.339",
						"yrTerm3Standard.noUpfront": "0.361",
						"yrTerm3Standard.partialUpfront": "0.348"
					}
				},
				"mswinSQL": {
					"ondemand": "1.677",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.544",
						"yrTerm1Standard.noUpfront": "1.559",
						"yrTerm1Standard.partialUpfront": "1.548",
						"yrTerm3Convertible.allUpfront": "1.496",
						"yrTerm3Convertible.noUpfront": "1.515",
						"yrTerm3Convertible.partialUpfront": "1.500",
						"yrTerm3Standard.allUpfront": "1.466",
						"yrTerm3Standard.noUpfront": "1.488",
						"yrTerm3Standard.partialUpfront": "1.476"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.621",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.488",
						"yrTerm1Standard.noUpfront": "0.503",
						"yrTerm1Standard.partialUpfront": "0.492",
						"yrTerm3Convertible.allUpfront": "0.440",
						"yrTerm3Convertible.noUpfront": "0.459",
						"yrTerm3Convertible.partialUpfront": "0.444",
						"yrTerm3Standard.allUpfront": "0.410",
						"yrTerm3Standard.noUpfront": "0.432",
						"yrTerm3Standard.partialUpfront": "0.420"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.366",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.233",
						"yrTerm1Standard.noUpfront": "0.248",
						"yrTerm1Standard.partialUpfront": "0.238",
						"yrTerm3Convertible.allUpfront": "0.185",
						"yrTerm3Convertible.noUpfront": "0.204",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.155",
						"yrTerm3Standard.noUpfront": "0.177",
						"yrTerm3Standard.partialUpfront": "0.164"
					}
				},
				"mswin": {
					"ondemand": "0.55",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.417",
						"yrTerm1Standard.noUpfront": "0.432",
						"yrTerm1Standard.partialUpfront": "0.422",
						"yrTerm3Convertible.allUpfront": "0.369",
						"yrTerm3Convertible.noUpfront": "0.388",
						"yrTerm3Convertible.partialUpfront": "0.372",
						"yrTerm3Standard.allUpfront": "0.339",
						"yrTerm3Standard.noUpfront": "0.361",
						"yrTerm3Standard.partialUpfront": "0.348"
					}
				},
				"mswinSQL": {
					"ondemand": "1.677",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.544",
						"yrTerm1Standard.noUpfront": "1.559",
						"yrTerm1Standard.partialUpfront": "1.548",
						"yrTerm3Convertible.allUpfront": "1.496",
						"yrTerm3Convertible.noUpfront": "1.515",
						"yrTerm3Convertible.partialUpfront": "1.500",
						"yrTerm3Standard.allUpfront": "1.466",
						"yrTerm3Standard.noUpfront": "1.488",
						"yrTerm3Standard.partialUpfront": "1.476"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.621",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.488",
						"yrTerm1Standard.noUpfront": "0.503",
						"yrTerm1Standard.partialUpfront": "0.492",
						"yrTerm3Convertible.allUpfront": "0.440",
						"yrTerm3Convertible.noUpfront": "0.459",
						"yrTerm3Convertible.partialUpfront": "0.444",
						"yrTerm3Standard.allUpfront": "0.410",
						"yrTerm3Standard.noUpfront": "0.432",
						"yrTerm3Standard.partialUpfront": "0.420"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.354",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.225",
						"yrTerm1Standard.noUpfront": "0.244",
						"yrTerm1Standard.partialUpfront": "0.230",
						"yrTerm3Convertible.allUpfront": "0.180",
						"yrTerm3Convertible.noUpfront": "0.199",
						"yrTerm3Convertible.partialUpfront": "0.184",
						"yrTerm3Standard.allUpfront": "0.150",
						"yrTerm3Standard.noUpfront": "0.173",
						"yrTerm3Standard.partialUpfront": "0.160"
					}
				},
				"mswin": {
					"ondemand": "0.538",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.409",
						"yrTerm1Standard.noUpfront": "0.428",
						"yrTerm1Standard.partialUpfront": "0.414",
						"yrTerm3Convertible.allUpfront": "0.364",
						"yrTerm3Convertible.noUpfront": "0.383",
						"yrTerm3Convertible.partialUpfront": "0.368",
						"yrTerm3Standard.allUpfront": "0.334",
						"yrTerm3Standard.noUpfront": "0.357",
						"yrTerm3Standard.partialUpfront": "0.344"
					}
				},
				"mswinSQL": {
					"ondemand": "1.665",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.536",
						"yrTerm1Standard.noUpfront": "1.555",
						"yrTerm1Standard.partialUpfront": "1.542",
						"yrTerm3Convertible.allUpfront": "1.491",
						"yrTerm3Convertible.noUpfront": "1.510",
						"yrTerm3Convertible.partialUpfront": "1.494",
						"yrTerm3Standard.allUpfront": "1.461",
						"yrTerm3Standard.noUpfront": "1.484",
						"yrTerm3Standard.partialUpfront": "1.470"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.609",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.480",
						"yrTerm1Standard.noUpfront": "0.499",
						"yrTerm1Standard.partialUpfront": "0.486",
						"yrTerm3Convertible.allUpfront": "0.435",
						"yrTerm3Convertible.noUpfront": "0.454",
						"yrTerm3Convertible.partialUpfront": "0.438",
						"yrTerm3Standard.allUpfront": "0.405",
						"yrTerm3Standard.noUpfront": "0.428",
						"yrTerm3Standard.partialUpfront": "0.414"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.374",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.238",
						"yrTerm1Standard.noUpfront": "0.256",
						"yrTerm1Standard.partialUpfront": "0.244",
						"yrTerm3Convertible.allUpfront": "0.189",
						"yrTerm3Convertible.noUpfront": "0.209",
						"yrTerm3Convertible.partialUpfront": "0.194",
						"yrTerm3Standard.allUpfront": "0.158",
						"yrTerm3Standard.noUpfront": "0.181",
						"yrTerm3Standard.partialUpfront": "0.168"
					}
				},
				"mswin": {
					"ondemand": "0.558",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.422",
						"yrTerm1Standard.noUpfront": "0.440",
						"yrTerm1Standard.partialUpfront": "0.428",
						"yrTerm3Convertible.allUpfront": "0.373",
						"yrTerm3Convertible.noUpfront": "0.393",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.342",
						"yrTerm3Standard.noUpfront": "0.365",
						"yrTerm3Standard.partialUpfront": "0.352"
					}
				},
				"mswinSQL": {
					"ondemand": "1.685",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.549",
						"yrTerm1Standard.noUpfront": "1.567",
						"yrTerm1Standard.partialUpfront": "1.554",
						"yrTerm3Convertible.allUpfront": "1.500",
						"yrTerm3Convertible.noUpfront": "1.520",
						"yrTerm3Convertible.partialUpfront": "1.504",
						"yrTerm3Standard.allUpfront": "1.469",
						"yrTerm3Standard.noUpfront": "1.492",
						"yrTerm3Standard.partialUpfront": "1.480"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.629",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.493",
						"yrTerm1Standard.noUpfront": "0.511",
						"yrTerm1Standard.partialUpfront": "0.498",
						"yrTerm3Convertible.allUpfront": "0.444",
						"yrTerm3Convertible.noUpfront": "0.464",
						"yrTerm3Convertible.partialUpfront": "0.448",
						"yrTerm3Standard.allUpfront": "0.413",
						"yrTerm3Standard.noUpfront": "0.436",
						"yrTerm3Standard.partialUpfront": "0.424"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.374",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.238",
						"yrTerm1Standard.noUpfront": "0.256",
						"yrTerm1Standard.partialUpfront": "0.244",
						"yrTerm3Convertible.allUpfront": "0.189",
						"yrTerm3Convertible.noUpfront": "0.209",
						"yrTerm3Convertible.partialUpfront": "0.194",
						"yrTerm3Standard.allUpfront": "0.158",
						"yrTerm3Standard.noUpfront": "0.181",
						"yrTerm3Standard.partialUpfront": "0.168"
					}
				},
				"mswin": {
					"ondemand": "0.558",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.422",
						"yrTerm1Standard.noUpfront": "0.440",
						"yrTerm1Standard.partialUpfront": "0.428",
						"yrTerm3Convertible.allUpfront": "0.373",
						"yrTerm3Convertible.noUpfront": "0.393",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.342",
						"yrTerm3Standard.noUpfront": "0.365",
						"yrTerm3Standard.partialUpfront": "0.352"
					}
				},
				"mswinSQL": {
					"ondemand": "1.685",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.549",
						"yrTerm1Standard.noUpfront": "1.567",
						"yrTerm1Standard.partialUpfront": "1.554",
						"yrTerm3Convertible.allUpfront": "1.500",
						"yrTerm3Convertible.noUpfront": "1.520",
						"yrTerm3Convertible.partialUpfront": "1.504",
						"yrTerm3Standard.allUpfront": "1.469",
						"yrTerm3Standard.noUpfront": "1.492",
						"yrTerm3Standard.partialUpfront": "1.480"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.629",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.493",
						"yrTerm1Standard.noUpfront": "0.511",
						"yrTerm1Standard.partialUpfront": "0.498",
						"yrTerm3Convertible.allUpfront": "0.444",
						"yrTerm3Convertible.noUpfront": "0.464",
						"yrTerm3Convertible.partialUpfront": "0.448",
						"yrTerm3Standard.allUpfront": "0.413",
						"yrTerm3Standard.noUpfront": "0.436",
						"yrTerm3Standard.partialUpfront": "0.424"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.344",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.219",
						"yrTerm1Standard.noUpfront": "0.235",
						"yrTerm1Standard.partialUpfront": "0.224",
						"yrTerm3Convertible.allUpfront": "0.176",
						"yrTerm3Convertible.noUpfront": "0.194",
						"yrTerm3Convertible.partialUpfront": "0.180",
						"yrTerm3Standard.allUpfront": "0.146",
						"yrTerm3Standard.noUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.154"
					}
				},
				"mswin": {
					"ondemand": "0.528",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.403",
						"yrTerm1Standard.noUpfront": "0.419",
						"yrTerm1Standard.partialUpfront": "0.408",
						"yrTerm3Convertible.allUpfront": "0.360",
						"yrTerm3Convertible.noUpfront": "0.378",
						"yrTerm3Convertible.partialUpfront": "0.364",
						"yrTerm3Standard.allUpfront": "0.330",
						"yrTerm3Standard.noUpfront": "0.352",
						"yrTerm3Standard.partialUpfront": "0.338"
					}
				},
				"mswinSQL": {
					"ondemand": "1.655",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.530",
						"yrTerm1Standard.noUpfront": "1.546",
						"yrTerm1Standard.partialUpfront": "1.534",
						"yrTerm3Convertible.allUpfront": "1.487",
						"yrTerm3Convertible.noUpfront": "1.505",
						"yrTerm3Convertible.partialUpfront": "1.490",
						"yrTerm3Standard.allUpfront": "1.457",
						"yrTerm3Standard.noUpfront": "1.479",
						"yrTerm3Standard.partialUpfront": "1.466"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.599",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.474",
						"yrTerm1Standard.noUpfront": "0.490",
						"yrTerm1Standard.partialUpfront": "0.478",
						"yrTerm3Convertible.allUpfront": "0.431",
						"yrTerm3Convertible.noUpfront": "0.449",
						"yrTerm3Convertible.partialUpfront": "0.434",
						"yrTerm3Standard.allUpfront": "0.401",
						"yrTerm3Standard.noUpfront": "0.423",
						"yrTerm3Standard.partialUpfront": "0.410"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.372",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.237",
						"yrTerm1Standard.noUpfront": "0.252",
						"yrTerm1Standard.partialUpfront": "0.242",
						"yrTerm3Convertible.allUpfront": "0.189",
						"yrTerm3Convertible.noUpfront": "0.209",
						"yrTerm3Convertible.partialUpfront": "0.194",
						"yrTerm3Standard.allUpfront": "0.157",
						"yrTerm3Standard.noUpfront": "0.181",
						"yrTerm3Standard.partialUpfront": "0.168"
					}
				},
				"mswin": {
					"ondemand": "0.556",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.421",
						"yrTerm1Standard.noUpfront": "0.436",
						"yrTerm1Standard.partialUpfront": "0.426",
						"yrTerm3Convertible.allUpfront": "0.373",
						"yrTerm3Convertible.noUpfront": "0.393",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.341",
						"yrTerm3Standard.noUpfront": "0.365",
						"yrTerm3Standard.partialUpfront": "0.352"
					}
				},
				"mswinSQL": {
					"ondemand": "1.683",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.548",
						"yrTerm1Standard.noUpfront": "1.563",
						"yrTerm1Standard.partialUpfront": "1.552",
						"yrTerm3Convertible.allUpfront": "1.500",
						"yrTerm3Convertible.noUpfront": "1.520",
						"yrTerm3Convertible.partialUpfront": "1.504",
						"yrTerm3Standard.allUpfront": "1.468",
						"yrTerm3Standard.noUpfront": "1.492",
						"yrTerm3Standard.partialUpfront": "1.478"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.627",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.492",
						"yrTerm1Standard.noUpfront": "0.507",
						"yrTerm1Standard.partialUpfront": "0.496",
						"yrTerm3Convertible.allUpfront": "0.444",
						"yrTerm3Convertible.noUpfront": "0.464",
						"yrTerm3Convertible.partialUpfront": "0.448",
						"yrTerm3Standard.allUpfront": "0.412",
						"yrTerm3Standard.noUpfront": "0.436",
						"yrTerm3Standard.partialUpfront": "0.422"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.344",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.219",
						"yrTerm1Standard.noUpfront": "0.235",
						"yrTerm1Standard.partialUpfront": "0.224",
						"yrTerm3Convertible.allUpfront": "0.176",
						"yrTerm3Convertible.noUpfront": "0.194",
						"yrTerm3Convertible.partialUpfront": "0.180",
						"yrTerm3Standard.allUpfront": "0.146",
						"yrTerm3Standard.noUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.154"
					}
				},
				"mswin": {
					"ondemand": "0.528",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.403",
						"yrTerm1Standard.noUpfront": "0.419",
						"yrTerm1Standard.partialUpfront": "0.408",
						"yrTerm3Convertible.allUpfront": "0.360",
						"yrTerm3Convertible.noUpfront": "0.378",
						"yrTerm3Convertible.partialUpfront": "0.364",
						"yrTerm3Standard.allUpfront": "0.330",
						"yrTerm3Standard.noUpfront": "0.352",
						"yrTerm3Standard.partialUpfront": "0.338"
					}
				},
				"mswinSQL": {
					"ondemand": "1.655",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.530",
						"yrTerm1Standard.noUpfront": "1.546",
						"yrTerm1Standard.partialUpfront": "1.534",
						"yrTerm3Convertible.allUpfront": "1.487",
						"yrTerm3Convertible.noUpfront": "1.505",
						"yrTerm3Convertible.partialUpfront": "1.490",
						"yrTerm3Standard.allUpfront": "1.457",
						"yrTerm3Standard.noUpfront": "1.479",
						"yrTerm3Standard.partialUpfront": "1.466"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.599",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.474",
						"yrTerm1Standard.noUpfront": "0.490",
						"yrTerm1Standard.partialUpfront": "0.478",
						"yrTerm3Convertible.allUpfront": "0.431",
						"yrTerm3Convertible.noUpfront": "0.449",
						"yrTerm3Convertible.partialUpfront": "0.434",
						"yrTerm3Standard.allUpfront": "0.401",
						"yrTerm3Standard.noUpfront": "0.423",
						"yrTerm3Standard.partialUpfront": "0.410"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.362",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.231",
						"yrTerm1Standard.noUpfront": "0.248",
						"yrTerm1Standard.partialUpfront": "0.236",
						"yrTerm3Convertible.allUpfront": "0.185",
						"yrTerm3Convertible.noUpfront": "0.204",
						"yrTerm3Convertible.partialUpfront": "0.188",
						"yrTerm3Standard.allUpfront": "0.153",
						"yrTerm3Standard.noUpfront": "0.177",
						"yrTerm3Standard.partialUpfront": "0.162"
					}
				},
				"mswin": {
					"ondemand": "0.546",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.415",
						"yrTerm1Standard.noUpfront": "0.432",
						"yrTerm1Standard.partialUpfront": "0.420",
						"yrTerm3Convertible.allUpfront": "0.369",
						"yrTerm3Convertible.noUpfront": "0.388",
						"yrTerm3Convertible.partialUpfront": "0.372",
						"yrTerm3Standard.allUpfront": "0.337",
						"yrTerm3Standard.noUpfront": "0.361",
						"yrTerm3Standard.partialUpfront": "0.346"
					}
				},
				"mswinSQL": {
					"ondemand": "1.673",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.542",
						"yrTerm1Standard.noUpfront": "1.559",
						"yrTerm1Standard.partialUpfront": "1.546",
						"yrTerm3Convertible.allUpfront": "1.496",
						"yrTerm3Convertible.noUpfront": "1.515",
						"yrTerm3Convertible.partialUpfront": "1.500",
						"yrTerm3Standard.allUpfront": "1.464",
						"yrTerm3Standard.noUpfront": "1.488",
						"yrTerm3Standard.partialUpfront": "1.474"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.617",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.486",
						"yrTerm1Standard.noUpfront": "0.503",
						"yrTerm1Standard.partialUpfront": "0.490",
						"yrTerm3Convertible.allUpfront": "0.440",
						"yrTerm3Convertible.noUpfront": "0.459",
						"yrTerm3Convertible.partialUpfront": "0.444",
						"yrTerm3Standard.allUpfront": "0.408",
						"yrTerm3Standard.noUpfront": "0.432",
						"yrTerm3Standard.partialUpfront": "0.418"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "0.572",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.364",
						"yrTerm1Standard.noUpfront": "0.391",
						"yrTerm1Standard.partialUpfront": "0.372",
						"yrTerm3Convertible.allUpfront": "0.289",
						"yrTerm3Convertible.noUpfront": "0.318",
						"yrTerm3Convertible.partialUpfront": "0.294",
						"yrTerm3Standard.allUpfront": "0.242",
						"yrTerm3Standard.noUpfront": "0.276",
						"yrTerm3Standard.partialUpfront": "0.258"
					}
				},
				"mswin": {
					"ondemand": "0.756",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.548",
						"yrTerm1Standard.noUpfront": "0.575",
						"yrTerm1Standard.partialUpfront": "0.556",
						"yrTerm3Convertible.allUpfront": "0.473",
						"yrTerm3Convertible.noUpfront": "0.502",
						"yrTerm3Convertible.partialUpfront": "0.478",
						"yrTerm3Standard.allUpfront": "0.426",
						"yrTerm3Standard.noUpfront": "0.460",
						"yrTerm3Standard.partialUpfront": "0.442"
					}
				},
				"mswinSQL": {
					"ondemand": "1.883",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.675",
						"yrTerm1Standard.noUpfront": "1.702",
						"yrTerm1Standard.partialUpfront": "1.682",
						"yrTerm3Convertible.allUpfront": "1.600",
						"yrTerm3Convertible.noUpfront": "1.629",
						"yrTerm3Convertible.partialUpfront": "1.606",
						"yrTerm3Standard.allUpfront": "1.553",
						"yrTerm3Standard.noUpfront": "1.587",
						"yrTerm3Standard.partialUpfront": "1.568"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.827",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.619",
						"yrTerm1Standard.noUpfront": "0.646",
						"yrTerm1Standard.partialUpfront": "0.626",
						"yrTerm3Convertible.allUpfront": "0.544",
						"yrTerm3Convertible.noUpfront": "0.573",
						"yrTerm3Convertible.partialUpfront": "0.550",
						"yrTerm3Standard.allUpfront": "0.497",
						"yrTerm3Standard.noUpfront": "0.531",
						"yrTerm3Standard.partialUpfront": "0.512"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.312",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.199",
						"yrTerm1Standard.noUpfront": "0.214",
						"yrTerm1Standard.partialUpfront": "0.202",
						"yrTerm3Convertible.allUpfront": "0.158",
						"yrTerm3Convertible.noUpfront": "0.174",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.132",
						"yrTerm3Standard.noUpfront": "0.151",
						"yrTerm3Standard.partialUpfront": "0.140"
					}
				},
				"mswin": {
					"ondemand": "0.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.383",
						"yrTerm1Standard.noUpfront": "0.398",
						"yrTerm1Standard.partialUpfront": "0.386",
						"yrTerm3Convertible.allUpfront": "0.342",
						"yrTerm3Convertible.noUpfront": "0.358",
						"yrTerm3Convertible.partialUpfront": "0.346",
						"yrTerm3Standard.allUpfront": "0.316",
						"yrTerm3Standard.noUpfront": "0.335",
						"yrTerm3Standard.partialUpfront": "0.324"
					}
				},
				"mswinSQL": {
					"ondemand": "1.623",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.510",
						"yrTerm1Standard.noUpfront": "1.525",
						"yrTerm1Standard.partialUpfront": "1.514",
						"yrTerm3Convertible.allUpfront": "1.469",
						"yrTerm3Convertible.noUpfront": "1.485",
						"yrTerm3Convertible.partialUpfront": "1.472",
						"yrTerm3Standard.allUpfront": "1.443",
						"yrTerm3Standard.noUpfront": "1.462",
						"yrTerm3Standard.partialUpfront": "1.452"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.567",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.454",
						"yrTerm1Standard.noUpfront": "0.469",
						"yrTerm1Standard.partialUpfront": "0.458",
						"yrTerm3Convertible.allUpfront": "0.413",
						"yrTerm3Convertible.noUpfront": "0.429",
						"yrTerm3Convertible.partialUpfront": "0.416",
						"yrTerm3Standard.allUpfront": "0.387",
						"yrTerm3Standard.noUpfront": "0.406",
						"yrTerm3Standard.partialUpfront": "0.396"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.312",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.199",
						"yrTerm1Standard.noUpfront": "0.214",
						"yrTerm1Standard.partialUpfront": "0.202",
						"yrTerm3Convertible.allUpfront": "0.158",
						"yrTerm3Convertible.noUpfront": "0.174",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.132",
						"yrTerm3Standard.noUpfront": "0.151",
						"yrTerm3Standard.partialUpfront": "0.140"
					}
				},
				"mswin": {
					"ondemand": "0.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.383",
						"yrTerm1Standard.noUpfront": "0.398",
						"yrTerm1Standard.partialUpfront": "0.386",
						"yrTerm3Convertible.allUpfront": "0.342",
						"yrTerm3Convertible.noUpfront": "0.358",
						"yrTerm3Convertible.partialUpfront": "0.346",
						"yrTerm3Standard.allUpfront": "0.316",
						"yrTerm3Standard.noUpfront": "0.335",
						"yrTerm3Standard.partialUpfront": "0.324"
					}
				},
				"mswinSQL": {
					"ondemand": "1.623",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.510",
						"yrTerm1Standard.noUpfront": "1.525",
						"yrTerm1Standard.partialUpfront": "1.514",
						"yrTerm3Convertible.allUpfront": "1.469",
						"yrTerm3Convertible.noUpfront": "1.485",
						"yrTerm3Convertible.partialUpfront": "1.472",
						"yrTerm3Standard.allUpfront": "1.443",
						"yrTerm3Standard.noUpfront": "1.462",
						"yrTerm3Standard.partialUpfront": "1.452"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.567",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.454",
						"yrTerm1Standard.noUpfront": "0.469",
						"yrTerm1Standard.partialUpfront": "0.458",
						"yrTerm3Convertible.allUpfront": "0.413",
						"yrTerm3Convertible.noUpfront": "0.429",
						"yrTerm3Convertible.partialUpfront": "0.416",
						"yrTerm3Standard.allUpfront": "0.387",
						"yrTerm3Standard.noUpfront": "0.406",
						"yrTerm3Standard.partialUpfront": "0.396"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.240",
						"yrTerm1Standard.noUpfront": "0.256",
						"yrTerm1Standard.partialUpfront": "0.244",
						"yrTerm3Convertible.allUpfront": "0.189",
						"yrTerm3Convertible.noUpfront": "0.209",
						"yrTerm3Convertible.partialUpfront": "0.194",
						"yrTerm3Standard.allUpfront": "0.159",
						"yrTerm3Standard.noUpfront": "0.181",
						"yrTerm3Standard.partialUpfront": "0.170"
					}
				},
				"mswin": {
					"ondemand": "0.56",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.424",
						"yrTerm1Standard.noUpfront": "0.440",
						"yrTerm1Standard.partialUpfront": "0.428",
						"yrTerm3Convertible.allUpfront": "0.373",
						"yrTerm3Convertible.noUpfront": "0.393",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.343",
						"yrTerm3Standard.noUpfront": "0.365",
						"yrTerm3Standard.partialUpfront": "0.354"
					}
				},
				"mswinSQL": {
					"ondemand": "1.687",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.551",
						"yrTerm1Standard.noUpfront": "1.567",
						"yrTerm1Standard.partialUpfront": "1.556",
						"yrTerm3Convertible.allUpfront": "1.500",
						"yrTerm3Convertible.noUpfront": "1.520",
						"yrTerm3Convertible.partialUpfront": "1.504",
						"yrTerm3Standard.allUpfront": "1.470",
						"yrTerm3Standard.noUpfront": "1.492",
						"yrTerm3Standard.partialUpfront": "1.480"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.631",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.495",
						"yrTerm1Standard.noUpfront": "0.511",
						"yrTerm1Standard.partialUpfront": "0.500",
						"yrTerm3Convertible.allUpfront": "0.444",
						"yrTerm3Convertible.noUpfront": "0.464",
						"yrTerm3Convertible.partialUpfront": "0.448",
						"yrTerm3Standard.allUpfront": "0.414",
						"yrTerm3Standard.noUpfront": "0.436",
						"yrTerm3Standard.partialUpfront": "0.424"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.344",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.219",
						"yrTerm1Standard.noUpfront": "0.235",
						"yrTerm1Standard.partialUpfront": "0.224",
						"yrTerm3Convertible.allUpfront": "0.176",
						"yrTerm3Convertible.noUpfront": "0.194",
						"yrTerm3Convertible.partialUpfront": "0.180",
						"yrTerm3Standard.allUpfront": "0.146",
						"yrTerm3Standard.noUpfront": "0.168",
						"yrTerm3Standard.partialUpfront": "0.154"
					}
				},
				"mswin": {
					"ondemand": "0.528",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.403",
						"yrTerm1Standard.noUpfront": "0.419",
						"yrTerm1Standard.partialUpfront": "0.408",
						"yrTerm3Convertible.allUpfront": "0.360",
						"yrTerm3Convertible.noUpfront": "0.378",
						"yrTerm3Convertible.partialUpfront": "0.364",
						"yrTerm3Standard.allUpfront": "0.330",
						"yrTerm3Standard.noUpfront": "0.352",
						"yrTerm3Standard.partialUpfront": "0.338"
					}
				},
				"mswinSQL": {
					"ondemand": "1.655",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.530",
						"yrTerm1Standard.noUpfront": "1.546",
						"yrTerm1Standard.partialUpfront": "1.534",
						"yrTerm3Convertible.allUpfront": "1.487",
						"yrTerm3Convertible.noUpfront": "1.505",
						"yrTerm3Convertible.partialUpfront": "1.490",
						"yrTerm3Standard.allUpfront": "1.457",
						"yrTerm3Standard.noUpfront": "1.479",
						"yrTerm3Standard.partialUpfront": "1.466"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.599",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.474",
						"yrTerm1Standard.noUpfront": "0.490",
						"yrTerm1Standard.partialUpfront": "0.478",
						"yrTerm3Convertible.allUpfront": "0.431",
						"yrTerm3Convertible.noUpfront": "0.449",
						"yrTerm3Convertible.partialUpfront": "0.434",
						"yrTerm3Standard.allUpfront": "0.401",
						"yrTerm3Standard.noUpfront": "0.423",
						"yrTerm3Standard.partialUpfront": "0.410"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.312",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.199",
						"yrTerm1Standard.noUpfront": "0.214",
						"yrTerm1Standard.partialUpfront": "0.202",
						"yrTerm3Convertible.allUpfront": "0.158",
						"yrTerm3Convertible.noUpfront": "0.174",
						"yrTerm3Convertible.partialUpfront": "0.162",
						"yrTerm3Standard.allUpfront": "0.132",
						"yrTerm3Standard.noUpfront": "0.151",
						"yrTerm3Standard.partialUpfront": "0.140"
					}
				},
				"mswin": {
					"ondemand": "0.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.383",
						"yrTerm1Standard.noUpfront": "0.398",
						"yrTerm1Standard.partialUpfront": "0.386",
						"yrTerm3Convertible.allUpfront": "0.342",
						"yrTerm3Convertible.noUpfront": "0.358",
						"yrTerm3Convertible.partialUpfront": "0.346",
						"yrTerm3Standard.allUpfront": "0.316",
						"yrTerm3Standard.noUpfront": "0.335",
						"yrTerm3Standard.partialUpfront": "0.324"
					}
				},
				"mswinSQL": {
					"ondemand": "1.623",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.510",
						"yrTerm1Standard.noUpfront": "1.525",
						"yrTerm1Standard.partialUpfront": "1.514",
						"yrTerm3Convertible.allUpfront": "1.469",
						"yrTerm3Convertible.noUpfront": "1.485",
						"yrTerm3Convertible.partialUpfront": "1.472",
						"yrTerm3Standard.allUpfront": "1.443",
						"yrTerm3Standard.noUpfront": "1.462",
						"yrTerm3Standard.partialUpfront": "1.452"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "0.567",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.454",
						"yrTerm1Standard.noUpfront": "0.469",
						"yrTerm1Standard.partialUpfront": "0.458",
						"yrTerm3Convertible.allUpfront": "0.413",
						"yrTerm3Convertible.noUpfront": "0.429",
						"yrTerm3Convertible.partialUpfront": "0.416",
						"yrTerm3Standard.allUpfront": "0.387",
						"yrTerm3Standard.noUpfront": "0.406",
						"yrTerm3Standard.partialUpfront": "0.396"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": true,
			"size": 950,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": true
	},
	{
		"ECU": 27,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 12000,
		"ebs_max_bandwidth": 1700,
		"ebs_optimized": true,
		"ebs_throughput": 200,
		"enhanced_networking": true,
		"family": "Storage optimized",
		"generation": "current",
		"instance_type": "i3.2xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [],
		"memory": 61,
		"network_performance": "Up to 10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "I3 High I/O Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "0.732",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.466",
						"yrTerm1Standard.noUpfront": "0.496",
						"yrTerm1Standard.partialUpfront": "0.476",
						"yrTerm3Convertible.allUpfront": "0.370",
						"yrTerm3Convertible.noUpfront": "0.407",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.310",
						"yrTerm3Standard.noUpfront": "0.354",
						"yrTerm3Standard.partialUpfront": "0.330"
					}
				},
				"mswin": {
					"ondemand": "1.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.834",
						"yrTerm1Standard.noUpfront": "0.864",
						"yrTerm1Standard.partialUpfront": "0.844",
						"yrTerm3Convertible.allUpfront": "0.738",
						"yrTerm3Convertible.noUpfront": "0.775",
						"yrTerm3Convertible.partialUpfront": "0.746",
						"yrTerm3Standard.allUpfront": "0.678",
						"yrTerm3Standard.noUpfront": "0.722",
						"yrTerm3Standard.partialUpfront": "0.698"
					}
				},
				"mswinSQL": {
					"ondemand": "3.353",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.087",
						"yrTerm1Standard.noUpfront": "3.117",
						"yrTerm1Standard.partialUpfront": "3.096",
						"yrTerm3Convertible.allUpfront": "2.991",
						"yrTerm3Convertible.noUpfront": "3.028",
						"yrTerm3Convertible.partialUpfront": "2.998",
						"yrTerm3Standard.allUpfront": "2.931",
						"yrTerm3Standard.noUpfront": "2.975",
						"yrTerm3Standard.partialUpfront": "2.950"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.241",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.975",
						"yrTerm1Standard.noUpfront": "1.005",
						"yrTerm1Standard.partialUpfront": "0.984",
						"yrTerm3Convertible.allUpfront": "0.879",
						"yrTerm3Convertible.noUpfront": "0.916",
						"yrTerm3Convertible.partialUpfront": "0.886",
						"yrTerm3Standard.allUpfront": "0.819",
						"yrTerm3Standard.noUpfront": "0.863",
						"yrTerm3Standard.partialUpfront": "0.838"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "0.732",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.466",
						"yrTerm1Standard.noUpfront": "0.496",
						"yrTerm1Standard.partialUpfront": "0.476",
						"yrTerm3Convertible.allUpfront": "0.370",
						"yrTerm3Convertible.noUpfront": "0.407",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.310",
						"yrTerm3Standard.noUpfront": "0.354",
						"yrTerm3Standard.partialUpfront": "0.330"
					}
				},
				"mswin": {
					"ondemand": "1.1",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.834",
						"yrTerm1Standard.noUpfront": "0.864",
						"yrTerm1Standard.partialUpfront": "0.844",
						"yrTerm3Convertible.allUpfront": "0.738",
						"yrTerm3Convertible.noUpfront": "0.775",
						"yrTerm3Convertible.partialUpfront": "0.746",
						"yrTerm3Standard.allUpfront": "0.678",
						"yrTerm3Standard.noUpfront": "0.722",
						"yrTerm3Standard.partialUpfront": "0.698"
					}
				},
				"mswinSQL": {
					"ondemand": "3.353",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.087",
						"yrTerm1Standard.noUpfront": "3.117",
						"yrTerm1Standard.partialUpfront": "3.096",
						"yrTerm3Convertible.allUpfront": "2.991",
						"yrTerm3Convertible.noUpfront": "3.028",
						"yrTerm3Convertible.partialUpfront": "2.998",
						"yrTerm3Standard.allUpfront": "2.931",
						"yrTerm3Standard.noUpfront": "2.975",
						"yrTerm3Standard.partialUpfront": "2.950"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.241",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.975",
						"yrTerm1Standard.noUpfront": "1.005",
						"yrTerm1Standard.partialUpfront": "0.984",
						"yrTerm3Convertible.allUpfront": "0.879",
						"yrTerm3Convertible.noUpfront": "0.916",
						"yrTerm3Convertible.partialUpfront": "0.886",
						"yrTerm3Standard.allUpfront": "0.819",
						"yrTerm3Standard.noUpfront": "0.863",
						"yrTerm3Standard.partialUpfront": "0.838"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "0.708",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.451",
						"yrTerm1Standard.noUpfront": "0.487",
						"yrTerm1Standard.partialUpfront": "0.460",
						"yrTerm3Convertible.allUpfront": "0.361",
						"yrTerm3Convertible.noUpfront": "0.397",
						"yrTerm3Convertible.partialUpfront": "0.368",
						"yrTerm3Standard.allUpfront": "0.299",
						"yrTerm3Standard.noUpfront": "0.346",
						"yrTerm3Standard.partialUpfront": "0.318"
					}
				},
				"mswin": {
					"ondemand": "1.076",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.819",
						"yrTerm1Standard.noUpfront": "0.855",
						"yrTerm1Standard.partialUpfront": "0.828",
						"yrTerm3Convertible.allUpfront": "0.729",
						"yrTerm3Convertible.noUpfront": "0.765",
						"yrTerm3Convertible.partialUpfront": "0.736",
						"yrTerm3Standard.allUpfront": "0.667",
						"yrTerm3Standard.noUpfront": "0.714",
						"yrTerm3Standard.partialUpfront": "0.686"
					}
				},
				"mswinSQL": {
					"ondemand": "3.329",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.072",
						"yrTerm1Standard.noUpfront": "3.108",
						"yrTerm1Standard.partialUpfront": "3.082",
						"yrTerm3Convertible.allUpfront": "2.982",
						"yrTerm3Convertible.noUpfront": "3.018",
						"yrTerm3Convertible.partialUpfront": "2.988",
						"yrTerm3Standard.allUpfront": "2.920",
						"yrTerm3Standard.noUpfront": "2.967",
						"yrTerm3Standard.partialUpfront": "2.940"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.217",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.960",
						"yrTerm1Standard.noUpfront": "0.996",
						"yrTerm1Standard.partialUpfront": "0.970",
						"yrTerm3Convertible.allUpfront": "0.870",
						"yrTerm3Convertible.noUpfront": "0.906",
						"yrTerm3Convertible.partialUpfront": "0.876",
						"yrTerm3Standard.allUpfront": "0.808",
						"yrTerm3Standard.noUpfront": "0.855",
						"yrTerm3Standard.partialUpfront": "0.828"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "0.748",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.476",
						"yrTerm1Standard.noUpfront": "0.512",
						"yrTerm1Standard.partialUpfront": "0.486",
						"yrTerm3Convertible.allUpfront": "0.379",
						"yrTerm3Convertible.noUpfront": "0.417",
						"yrTerm3Convertible.partialUpfront": "0.386",
						"yrTerm3Standard.allUpfront": "0.316",
						"yrTerm3Standard.noUpfront": "0.363",
						"yrTerm3Standard.partialUpfront": "0.336"
					}
				},
				"mswin": {
					"ondemand": "1.116",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.844",
						"yrTerm1Standard.noUpfront": "0.880",
						"yrTerm1Standard.partialUpfront": "0.854",
						"yrTerm3Convertible.allUpfront": "0.747",
						"yrTerm3Convertible.noUpfront": "0.785",
						"yrTerm3Convertible.partialUpfront": "0.754",
						"yrTerm3Standard.allUpfront": "0.684",
						"yrTerm3Standard.noUpfront": "0.731",
						"yrTerm3Standard.partialUpfront": "0.704"
					}
				},
				"mswinSQL": {
					"ondemand": "3.369",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.097",
						"yrTerm1Standard.noUpfront": "3.133",
						"yrTerm1Standard.partialUpfront": "3.108",
						"yrTerm3Convertible.allUpfront": "3.000",
						"yrTerm3Convertible.noUpfront": "3.038",
						"yrTerm3Convertible.partialUpfront": "3.008",
						"yrTerm3Standard.allUpfront": "2.937",
						"yrTerm3Standard.noUpfront": "2.984",
						"yrTerm3Standard.partialUpfront": "2.958"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.257",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.985",
						"yrTerm1Standard.noUpfront": "1.021",
						"yrTerm1Standard.partialUpfront": "0.996",
						"yrTerm3Convertible.allUpfront": "0.888",
						"yrTerm3Convertible.noUpfront": "0.926",
						"yrTerm3Convertible.partialUpfront": "0.896",
						"yrTerm3Standard.allUpfront": "0.825",
						"yrTerm3Standard.noUpfront": "0.872",
						"yrTerm3Standard.partialUpfront": "0.846"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "0.748",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.476",
						"yrTerm1Standard.noUpfront": "0.512",
						"yrTerm1Standard.partialUpfront": "0.486",
						"yrTerm3Convertible.allUpfront": "0.379",
						"yrTerm3Convertible.noUpfront": "0.417",
						"yrTerm3Convertible.partialUpfront": "0.386",
						"yrTerm3Standard.allUpfront": "0.316",
						"yrTerm3Standard.noUpfront": "0.363",
						"yrTerm3Standard.partialUpfront": "0.336"
					}
				},
				"mswin": {
					"ondemand": "1.116",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.844",
						"yrTerm1Standard.noUpfront": "0.880",
						"yrTerm1Standard.partialUpfront": "0.854",
						"yrTerm3Convertible.allUpfront": "0.747",
						"yrTerm3Convertible.noUpfront": "0.785",
						"yrTerm3Convertible.partialUpfront": "0.754",
						"yrTerm3Standard.allUpfront": "0.684",
						"yrTerm3Standard.noUpfront": "0.731",
						"yrTerm3Standard.partialUpfront": "0.704"
					}
				},
				"mswinSQL": {
					"ondemand": "3.369",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.097",
						"yrTerm1Standard.noUpfront": "3.133",
						"yrTerm1Standard.partialUpfront": "3.108",
						"yrTerm3Convertible.allUpfront": "3.000",
						"yrTerm3Convertible.noUpfront": "3.038",
						"yrTerm3Convertible.partialUpfront": "3.008",
						"yrTerm3Standard.allUpfront": "2.937",
						"yrTerm3Standard.noUpfront": "2.984",
						"yrTerm3Standard.partialUpfront": "2.958"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.257",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.985",
						"yrTerm1Standard.noUpfront": "1.021",
						"yrTerm1Standard.partialUpfront": "0.996",
						"yrTerm3Convertible.allUpfront": "0.888",
						"yrTerm3Convertible.noUpfront": "0.926",
						"yrTerm3Convertible.partialUpfront": "0.896",
						"yrTerm3Standard.allUpfront": "0.825",
						"yrTerm3Standard.noUpfront": "0.872",
						"yrTerm3Standard.partialUpfront": "0.846"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "0.688",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.438",
						"yrTerm1Standard.noUpfront": "0.470",
						"yrTerm1Standard.partialUpfront": "0.448",
						"yrTerm3Convertible.allUpfront": "0.352",
						"yrTerm3Convertible.noUpfront": "0.388",
						"yrTerm3Convertible.partialUpfront": "0.358",
						"yrTerm3Standard.allUpfront": "0.291",
						"yrTerm3Standard.noUpfront": "0.337",
						"yrTerm3Standard.partialUpfront": "0.310"
					}
				},
				"mswin": {
					"ondemand": "1.056",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.806",
						"yrTerm1Standard.noUpfront": "0.838",
						"yrTerm1Standard.partialUpfront": "0.816",
						"yrTerm3Convertible.allUpfront": "0.720",
						"yrTerm3Convertible.noUpfront": "0.756",
						"yrTerm3Convertible.partialUpfront": "0.726",
						"yrTerm3Standard.allUpfront": "0.659",
						"yrTerm3Standard.noUpfront": "0.705",
						"yrTerm3Standard.partialUpfront": "0.678"
					}
				},
				"mswinSQL": {
					"ondemand": "3.309",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.059",
						"yrTerm1Standard.noUpfront": "3.091",
						"yrTerm1Standard.partialUpfront": "3.068",
						"yrTerm3Convertible.allUpfront": "2.973",
						"yrTerm3Convertible.noUpfront": "3.009",
						"yrTerm3Convertible.partialUpfront": "2.980",
						"yrTerm3Standard.allUpfront": "2.912",
						"yrTerm3Standard.noUpfront": "2.958",
						"yrTerm3Standard.partialUpfront": "2.930"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.197",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.947",
						"yrTerm1Standard.noUpfront": "0.979",
						"yrTerm1Standard.partialUpfront": "0.956",
						"yrTerm3Convertible.allUpfront": "0.861",
						"yrTerm3Convertible.noUpfront": "0.897",
						"yrTerm3Convertible.partialUpfront": "0.868",
						"yrTerm3Standard.allUpfront": "0.800",
						"yrTerm3Standard.noUpfront": "0.846",
						"yrTerm3Standard.partialUpfront": "0.818"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "0.744",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.474",
						"yrTerm1Standard.noUpfront": "0.504",
						"yrTerm1Standard.partialUpfront": "0.484",
						"yrTerm3Convertible.allUpfront": "0.379",
						"yrTerm3Convertible.noUpfront": "0.417",
						"yrTerm3Convertible.partialUpfront": "0.386",
						"yrTerm3Standard.allUpfront": "0.315",
						"yrTerm3Standard.noUpfront": "0.363",
						"yrTerm3Standard.partialUpfront": "0.334"
					}
				},
				"mswin": {
					"ondemand": "1.112",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.842",
						"yrTerm1Standard.noUpfront": "0.872",
						"yrTerm1Standard.partialUpfront": "0.852",
						"yrTerm3Convertible.allUpfront": "0.747",
						"yrTerm3Convertible.noUpfront": "0.785",
						"yrTerm3Convertible.partialUpfront": "0.754",
						"yrTerm3Standard.allUpfront": "0.683",
						"yrTerm3Standard.noUpfront": "0.731",
						"yrTerm3Standard.partialUpfront": "0.702"
					}
				},
				"mswinSQL": {
					"ondemand": "3.365",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.095",
						"yrTerm1Standard.noUpfront": "3.125",
						"yrTerm1Standard.partialUpfront": "3.104",
						"yrTerm3Convertible.allUpfront": "3.000",
						"yrTerm3Convertible.noUpfront": "3.038",
						"yrTerm3Convertible.partialUpfront": "3.008",
						"yrTerm3Standard.allUpfront": "2.936",
						"yrTerm3Standard.noUpfront": "2.984",
						"yrTerm3Standard.partialUpfront": "2.956"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.253",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.983",
						"yrTerm1Standard.noUpfront": "1.013",
						"yrTerm1Standard.partialUpfront": "0.992",
						"yrTerm3Convertible.allUpfront": "0.888",
						"yrTerm3Convertible.noUpfront": "0.926",
						"yrTerm3Convertible.partialUpfront": "0.896",
						"yrTerm3Standard.allUpfront": "0.824",
						"yrTerm3Standard.noUpfront": "0.872",
						"yrTerm3Standard.partialUpfront": "0.844"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "0.688",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.438",
						"yrTerm1Standard.noUpfront": "0.470",
						"yrTerm1Standard.partialUpfront": "0.448",
						"yrTerm3Convertible.allUpfront": "0.352",
						"yrTerm3Convertible.noUpfront": "0.388",
						"yrTerm3Convertible.partialUpfront": "0.358",
						"yrTerm3Standard.allUpfront": "0.291",
						"yrTerm3Standard.noUpfront": "0.337",
						"yrTerm3Standard.partialUpfront": "0.310"
					}
				},
				"mswin": {
					"ondemand": "1.056",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.806",
						"yrTerm1Standard.noUpfront": "0.838",
						"yrTerm1Standard.partialUpfront": "0.816",
						"yrTerm3Convertible.allUpfront": "0.720",
						"yrTerm3Convertible.noUpfront": "0.756",
						"yrTerm3Convertible.partialUpfront": "0.726",
						"yrTerm3Standard.allUpfront": "0.659",
						"yrTerm3Standard.noUpfront": "0.705",
						"yrTerm3Standard.partialUpfront": "0.678"
					}
				},
				"mswinSQL": {
					"ondemand": "3.309",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.059",
						"yrTerm1Standard.noUpfront": "3.091",
						"yrTerm1Standard.partialUpfront": "3.068",
						"yrTerm3Convertible.allUpfront": "2.973",
						"yrTerm3Convertible.noUpfront": "3.009",
						"yrTerm3Convertible.partialUpfront": "2.980",
						"yrTerm3Standard.allUpfront": "2.912",
						"yrTerm3Standard.noUpfront": "2.958",
						"yrTerm3Standard.partialUpfront": "2.930"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.197",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.947",
						"yrTerm1Standard.noUpfront": "0.979",
						"yrTerm1Standard.partialUpfront": "0.956",
						"yrTerm3Convertible.allUpfront": "0.861",
						"yrTerm3Convertible.noUpfront": "0.897",
						"yrTerm3Convertible.partialUpfront": "0.868",
						"yrTerm3Standard.allUpfront": "0.800",
						"yrTerm3Standard.noUpfront": "0.846",
						"yrTerm3Standard.partialUpfront": "0.818"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "0.724",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.461",
						"yrTerm1Standard.noUpfront": "0.496",
						"yrTerm1Standard.partialUpfront": "0.470",
						"yrTerm3Convertible.allUpfront": "0.370",
						"yrTerm3Convertible.noUpfront": "0.407",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.306",
						"yrTerm3Standard.noUpfront": "0.354",
						"yrTerm3Standard.partialUpfront": "0.326"
					}
				},
				"mswin": {
					"ondemand": "1.092",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.829",
						"yrTerm1Standard.noUpfront": "0.864",
						"yrTerm1Standard.partialUpfront": "0.838",
						"yrTerm3Convertible.allUpfront": "0.738",
						"yrTerm3Convertible.noUpfront": "0.775",
						"yrTerm3Convertible.partialUpfront": "0.746",
						"yrTerm3Standard.allUpfront": "0.674",
						"yrTerm3Standard.noUpfront": "0.722",
						"yrTerm3Standard.partialUpfront": "0.694"
					}
				},
				"mswinSQL": {
					"ondemand": "3.345",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.082",
						"yrTerm1Standard.noUpfront": "3.117",
						"yrTerm1Standard.partialUpfront": "3.092",
						"yrTerm3Convertible.allUpfront": "2.991",
						"yrTerm3Convertible.noUpfront": "3.028",
						"yrTerm3Convertible.partialUpfront": "2.998",
						"yrTerm3Standard.allUpfront": "2.927",
						"yrTerm3Standard.noUpfront": "2.975",
						"yrTerm3Standard.partialUpfront": "2.946"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.233",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.970",
						"yrTerm1Standard.noUpfront": "1.005",
						"yrTerm1Standard.partialUpfront": "0.980",
						"yrTerm3Convertible.allUpfront": "0.879",
						"yrTerm3Convertible.noUpfront": "0.916",
						"yrTerm3Convertible.partialUpfront": "0.886",
						"yrTerm3Standard.allUpfront": "0.815",
						"yrTerm3Standard.noUpfront": "0.863",
						"yrTerm3Standard.partialUpfront": "0.834"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "1.144",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.729",
						"yrTerm1Standard.noUpfront": "0.781",
						"yrTerm1Standard.partialUpfront": "0.744",
						"yrTerm3Convertible.allUpfront": "0.577",
						"yrTerm3Convertible.noUpfront": "0.636",
						"yrTerm3Convertible.partialUpfront": "0.588",
						"yrTerm3Standard.allUpfront": "0.484",
						"yrTerm3Standard.noUpfront": "0.553",
						"yrTerm3Standard.partialUpfront": "0.514"
					}
				},
				"mswin": {
					"ondemand": "1.512",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.097",
						"yrTerm1Standard.noUpfront": "1.149",
						"yrTerm1Standard.partialUpfront": "1.112",
						"yrTerm3Convertible.allUpfront": "0.945",
						"yrTerm3Convertible.noUpfront": "1.004",
						"yrTerm3Convertible.partialUpfront": "0.956",
						"yrTerm3Standard.allUpfront": "0.852",
						"yrTerm3Standard.noUpfront": "0.921",
						"yrTerm3Standard.partialUpfront": "0.882"
					}
				},
				"mswinSQL": {
					"ondemand": "3.765",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.350",
						"yrTerm1Standard.noUpfront": "3.402",
						"yrTerm1Standard.partialUpfront": "3.364",
						"yrTerm3Convertible.allUpfront": "3.198",
						"yrTerm3Convertible.noUpfront": "3.257",
						"yrTerm3Convertible.partialUpfront": "3.210",
						"yrTerm3Standard.allUpfront": "3.105",
						"yrTerm3Standard.noUpfront": "3.174",
						"yrTerm3Standard.partialUpfront": "3.136"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.653",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.238",
						"yrTerm1Standard.noUpfront": "1.290",
						"yrTerm1Standard.partialUpfront": "1.252",
						"yrTerm3Convertible.allUpfront": "1.086",
						"yrTerm3Convertible.noUpfront": "1.145",
						"yrTerm3Convertible.partialUpfront": "1.098",
						"yrTerm3Standard.allUpfront": "0.993",
						"yrTerm3Standard.noUpfront": "1.062",
						"yrTerm3Standard.partialUpfront": "1.024"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "0.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.397",
						"yrTerm1Standard.noUpfront": "0.428",
						"yrTerm1Standard.partialUpfront": "0.406",
						"yrTerm3Convertible.allUpfront": "0.316",
						"yrTerm3Convertible.noUpfront": "0.348",
						"yrTerm3Convertible.partialUpfront": "0.322",
						"yrTerm3Standard.allUpfront": "0.264",
						"yrTerm3Standard.noUpfront": "0.302",
						"yrTerm3Standard.partialUpfront": "0.280"
					}
				},
				"mswin": {
					"ondemand": "0.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.765",
						"yrTerm1Standard.noUpfront": "0.796",
						"yrTerm1Standard.partialUpfront": "0.774",
						"yrTerm3Convertible.allUpfront": "0.684",
						"yrTerm3Convertible.noUpfront": "0.716",
						"yrTerm3Convertible.partialUpfront": "0.690",
						"yrTerm3Standard.allUpfront": "0.632",
						"yrTerm3Standard.noUpfront": "0.670",
						"yrTerm3Standard.partialUpfront": "0.648"
					}
				},
				"mswinSQL": {
					"ondemand": "3.245",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.018",
						"yrTerm1Standard.noUpfront": "3.049",
						"yrTerm1Standard.partialUpfront": "3.026",
						"yrTerm3Convertible.allUpfront": "2.937",
						"yrTerm3Convertible.noUpfront": "2.969",
						"yrTerm3Convertible.partialUpfront": "2.944",
						"yrTerm3Standard.allUpfront": "2.885",
						"yrTerm3Standard.noUpfront": "2.923",
						"yrTerm3Standard.partialUpfront": "2.902"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.133",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.906",
						"yrTerm1Standard.noUpfront": "0.937",
						"yrTerm1Standard.partialUpfront": "0.914",
						"yrTerm3Convertible.allUpfront": "0.825",
						"yrTerm3Convertible.noUpfront": "0.857",
						"yrTerm3Convertible.partialUpfront": "0.832",
						"yrTerm3Standard.allUpfront": "0.773",
						"yrTerm3Standard.noUpfront": "0.811",
						"yrTerm3Standard.partialUpfront": "0.790"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "0.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.397",
						"yrTerm1Standard.noUpfront": "0.428",
						"yrTerm1Standard.partialUpfront": "0.406",
						"yrTerm3Convertible.allUpfront": "0.316",
						"yrTerm3Convertible.noUpfront": "0.348",
						"yrTerm3Convertible.partialUpfront": "0.322",
						"yrTerm3Standard.allUpfront": "0.264",
						"yrTerm3Standard.noUpfront": "0.302",
						"yrTerm3Standard.partialUpfront": "0.280"
					}
				},
				"mswin": {
					"ondemand": "0.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.765",
						"yrTerm1Standard.noUpfront": "0.796",
						"yrTerm1Standard.partialUpfront": "0.774",
						"yrTerm3Convertible.allUpfront": "0.684",
						"yrTerm3Convertible.noUpfront": "0.716",
						"yrTerm3Convertible.partialUpfront": "0.690",
						"yrTerm3Standard.allUpfront": "0.632",
						"yrTerm3Standard.noUpfront": "0.670",
						"yrTerm3Standard.partialUpfront": "0.648"
					}
				},
				"mswinSQL": {
					"ondemand": "3.245",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.018",
						"yrTerm1Standard.noUpfront": "3.049",
						"yrTerm1Standard.partialUpfront": "3.026",
						"yrTerm3Convertible.allUpfront": "2.937",
						"yrTerm3Convertible.noUpfront": "2.969",
						"yrTerm3Convertible.partialUpfront": "2.944",
						"yrTerm3Standard.allUpfront": "2.885",
						"yrTerm3Standard.noUpfront": "2.923",
						"yrTerm3Standard.partialUpfront": "2.902"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.133",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.906",
						"yrTerm1Standard.noUpfront": "0.937",
						"yrTerm1Standard.partialUpfront": "0.914",
						"yrTerm3Convertible.allUpfront": "0.825",
						"yrTerm3Convertible.noUpfront": "0.857",
						"yrTerm3Convertible.partialUpfront": "0.832",
						"yrTerm3Standard.allUpfront": "0.773",
						"yrTerm3Standard.noUpfront": "0.811",
						"yrTerm3Standard.partialUpfront": "0.790"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.479",
						"yrTerm1Standard.noUpfront": "0.512",
						"yrTerm1Standard.partialUpfront": "0.488",
						"yrTerm3Convertible.allUpfront": "0.379",
						"yrTerm3Convertible.noUpfront": "0.417",
						"yrTerm3Convertible.partialUpfront": "0.386",
						"yrTerm3Standard.allUpfront": "0.318",
						"yrTerm3Standard.noUpfront": "0.363",
						"yrTerm3Standard.partialUpfront": "0.338"
					}
				},
				"mswin": {
					"ondemand": "1.12",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.847",
						"yrTerm1Standard.noUpfront": "0.880",
						"yrTerm1Standard.partialUpfront": "0.856",
						"yrTerm3Convertible.allUpfront": "0.747",
						"yrTerm3Convertible.noUpfront": "0.785",
						"yrTerm3Convertible.partialUpfront": "0.754",
						"yrTerm3Standard.allUpfront": "0.686",
						"yrTerm3Standard.noUpfront": "0.731",
						"yrTerm3Standard.partialUpfront": "0.706"
					}
				},
				"mswinSQL": {
					"ondemand": "3.373",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.100",
						"yrTerm1Standard.noUpfront": "3.133",
						"yrTerm1Standard.partialUpfront": "3.110",
						"yrTerm3Convertible.allUpfront": "3.000",
						"yrTerm3Convertible.noUpfront": "3.038",
						"yrTerm3Convertible.partialUpfront": "3.008",
						"yrTerm3Standard.allUpfront": "2.939",
						"yrTerm3Standard.noUpfront": "2.984",
						"yrTerm3Standard.partialUpfront": "2.960"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.261",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.988",
						"yrTerm1Standard.noUpfront": "1.021",
						"yrTerm1Standard.partialUpfront": "0.998",
						"yrTerm3Convertible.allUpfront": "0.888",
						"yrTerm3Convertible.noUpfront": "0.926",
						"yrTerm3Convertible.partialUpfront": "0.896",
						"yrTerm3Standard.allUpfront": "0.827",
						"yrTerm3Standard.noUpfront": "0.872",
						"yrTerm3Standard.partialUpfront": "0.848"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "0.688",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.438",
						"yrTerm1Standard.noUpfront": "0.470",
						"yrTerm1Standard.partialUpfront": "0.448",
						"yrTerm3Convertible.allUpfront": "0.352",
						"yrTerm3Convertible.noUpfront": "0.388",
						"yrTerm3Convertible.partialUpfront": "0.358",
						"yrTerm3Standard.allUpfront": "0.291",
						"yrTerm3Standard.noUpfront": "0.337",
						"yrTerm3Standard.partialUpfront": "0.310"
					}
				},
				"mswin": {
					"ondemand": "1.056",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.806",
						"yrTerm1Standard.noUpfront": "0.838",
						"yrTerm1Standard.partialUpfront": "0.816",
						"yrTerm3Convertible.allUpfront": "0.720",
						"yrTerm3Convertible.noUpfront": "0.756",
						"yrTerm3Convertible.partialUpfront": "0.726",
						"yrTerm3Standard.allUpfront": "0.659",
						"yrTerm3Standard.noUpfront": "0.705",
						"yrTerm3Standard.partialUpfront": "0.678"
					}
				},
				"mswinSQL": {
					"ondemand": "3.309",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.059",
						"yrTerm1Standard.noUpfront": "3.091",
						"yrTerm1Standard.partialUpfront": "3.068",
						"yrTerm3Convertible.allUpfront": "2.973",
						"yrTerm3Convertible.noUpfront": "3.009",
						"yrTerm3Convertible.partialUpfront": "2.980",
						"yrTerm3Standard.allUpfront": "2.912",
						"yrTerm3Standard.noUpfront": "2.958",
						"yrTerm3Standard.partialUpfront": "2.930"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.197",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.947",
						"yrTerm1Standard.noUpfront": "0.979",
						"yrTerm1Standard.partialUpfront": "0.956",
						"yrTerm3Convertible.allUpfront": "0.861",
						"yrTerm3Convertible.noUpfront": "0.897",
						"yrTerm3Convertible.partialUpfront": "0.868",
						"yrTerm3Standard.allUpfront": "0.800",
						"yrTerm3Standard.noUpfront": "0.846",
						"yrTerm3Standard.partialUpfront": "0.818"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "0.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.397",
						"yrTerm1Standard.noUpfront": "0.428",
						"yrTerm1Standard.partialUpfront": "0.406",
						"yrTerm3Convertible.allUpfront": "0.316",
						"yrTerm3Convertible.noUpfront": "0.348",
						"yrTerm3Convertible.partialUpfront": "0.322",
						"yrTerm3Standard.allUpfront": "0.264",
						"yrTerm3Standard.noUpfront": "0.302",
						"yrTerm3Standard.partialUpfront": "0.280"
					}
				},
				"mswin": {
					"ondemand": "0.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.765",
						"yrTerm1Standard.noUpfront": "0.796",
						"yrTerm1Standard.partialUpfront": "0.774",
						"yrTerm3Convertible.allUpfront": "0.684",
						"yrTerm3Convertible.noUpfront": "0.716",
						"yrTerm3Convertible.partialUpfront": "0.690",
						"yrTerm3Standard.allUpfront": "0.632",
						"yrTerm3Standard.noUpfront": "0.670",
						"yrTerm3Standard.partialUpfront": "0.648"
					}
				},
				"mswinSQL": {
					"ondemand": "3.245",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.018",
						"yrTerm1Standard.noUpfront": "3.049",
						"yrTerm1Standard.partialUpfront": "3.026",
						"yrTerm3Convertible.allUpfront": "2.937",
						"yrTerm3Convertible.noUpfront": "2.969",
						"yrTerm3Convertible.partialUpfront": "2.944",
						"yrTerm3Standard.allUpfront": "2.885",
						"yrTerm3Standard.noUpfront": "2.923",
						"yrTerm3Standard.partialUpfront": "2.902"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "1.133",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.906",
						"yrTerm1Standard.noUpfront": "0.937",
						"yrTerm1Standard.partialUpfront": "0.914",
						"yrTerm3Convertible.allUpfront": "0.825",
						"yrTerm3Convertible.noUpfront": "0.857",
						"yrTerm3Convertible.partialUpfront": "0.832",
						"yrTerm3Standard.allUpfront": "0.773",
						"yrTerm3Standard.noUpfront": "0.811",
						"yrTerm3Standard.partialUpfront": "0.790"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": true,
			"size": 1900,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": true
	},
	{
		"ECU": 53,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 16000,
		"ebs_max_bandwidth": 3500,
		"ebs_optimized": true,
		"ebs_throughput": 400,
		"enhanced_networking": true,
		"family": "Storage optimized",
		"generation": "current",
		"instance_type": "i3.4xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [],
		"memory": 122,
		"network_performance": "Up to 10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "I3 High I/O Quadruple Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "1.464",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.933",
						"yrTerm1Standard.noUpfront": "0.991",
						"yrTerm1Standard.partialUpfront": "0.952",
						"yrTerm3Convertible.allUpfront": "0.739",
						"yrTerm3Convertible.noUpfront": "0.815",
						"yrTerm3Convertible.partialUpfront": "0.754",
						"yrTerm3Standard.allUpfront": "0.619",
						"yrTerm3Standard.noUpfront": "0.708",
						"yrTerm3Standard.partialUpfront": "0.658"
					}
				},
				"mswin": {
					"ondemand": "2.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.669",
						"yrTerm1Standard.noUpfront": "1.727",
						"yrTerm1Standard.partialUpfront": "1.688",
						"yrTerm3Convertible.allUpfront": "1.475",
						"yrTerm3Convertible.noUpfront": "1.551",
						"yrTerm3Convertible.partialUpfront": "1.490",
						"yrTerm3Standard.allUpfront": "1.355",
						"yrTerm3Standard.noUpfront": "1.444",
						"yrTerm3Standard.partialUpfront": "1.394"
					}
				},
				"mswinSQL": {
					"ondemand": "6.706",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.175",
						"yrTerm1Standard.noUpfront": "6.233",
						"yrTerm1Standard.partialUpfront": "6.194",
						"yrTerm3Convertible.allUpfront": "5.981",
						"yrTerm3Convertible.noUpfront": "6.057",
						"yrTerm3Convertible.partialUpfront": "5.996",
						"yrTerm3Standard.allUpfront": "5.861",
						"yrTerm3Standard.noUpfront": "5.950",
						"yrTerm3Standard.partialUpfront": "5.900"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.482",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.951",
						"yrTerm1Standard.noUpfront": "2.009",
						"yrTerm1Standard.partialUpfront": "1.970",
						"yrTerm3Convertible.allUpfront": "1.757",
						"yrTerm3Convertible.noUpfront": "1.833",
						"yrTerm3Convertible.partialUpfront": "1.772",
						"yrTerm3Standard.allUpfront": "1.637",
						"yrTerm3Standard.noUpfront": "1.726",
						"yrTerm3Standard.partialUpfront": "1.676"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "1.464",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.933",
						"yrTerm1Standard.noUpfront": "0.991",
						"yrTerm1Standard.partialUpfront": "0.952",
						"yrTerm3Convertible.allUpfront": "0.739",
						"yrTerm3Convertible.noUpfront": "0.815",
						"yrTerm3Convertible.partialUpfront": "0.754",
						"yrTerm3Standard.allUpfront": "0.619",
						"yrTerm3Standard.noUpfront": "0.708",
						"yrTerm3Standard.partialUpfront": "0.658"
					}
				},
				"mswin": {
					"ondemand": "2.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.669",
						"yrTerm1Standard.noUpfront": "1.727",
						"yrTerm1Standard.partialUpfront": "1.688",
						"yrTerm3Convertible.allUpfront": "1.475",
						"yrTerm3Convertible.noUpfront": "1.551",
						"yrTerm3Convertible.partialUpfront": "1.490",
						"yrTerm3Standard.allUpfront": "1.355",
						"yrTerm3Standard.noUpfront": "1.444",
						"yrTerm3Standard.partialUpfront": "1.394"
					}
				},
				"mswinSQL": {
					"ondemand": "6.706",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.175",
						"yrTerm1Standard.noUpfront": "6.233",
						"yrTerm1Standard.partialUpfront": "6.194",
						"yrTerm3Convertible.allUpfront": "5.981",
						"yrTerm3Convertible.noUpfront": "6.057",
						"yrTerm3Convertible.partialUpfront": "5.996",
						"yrTerm3Standard.allUpfront": "5.861",
						"yrTerm3Standard.noUpfront": "5.950",
						"yrTerm3Standard.partialUpfront": "5.900"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.482",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.951",
						"yrTerm1Standard.noUpfront": "2.009",
						"yrTerm1Standard.partialUpfront": "1.970",
						"yrTerm3Convertible.allUpfront": "1.757",
						"yrTerm3Convertible.noUpfront": "1.833",
						"yrTerm3Convertible.partialUpfront": "1.772",
						"yrTerm3Standard.allUpfront": "1.637",
						"yrTerm3Standard.noUpfront": "1.726",
						"yrTerm3Standard.partialUpfront": "1.676"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "1.416",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.902",
						"yrTerm1Standard.noUpfront": "0.974",
						"yrTerm1Standard.partialUpfront": "0.920",
						"yrTerm3Convertible.allUpfront": "0.721",
						"yrTerm3Convertible.noUpfront": "0.795",
						"yrTerm3Convertible.partialUpfront": "0.736",
						"yrTerm3Standard.allUpfront": "0.599",
						"yrTerm3Standard.noUpfront": "0.691",
						"yrTerm3Standard.partialUpfront": "0.638"
					}
				},
				"mswin": {
					"ondemand": "2.152",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.638",
						"yrTerm1Standard.noUpfront": "1.710",
						"yrTerm1Standard.partialUpfront": "1.656",
						"yrTerm3Convertible.allUpfront": "1.457",
						"yrTerm3Convertible.noUpfront": "1.531",
						"yrTerm3Convertible.partialUpfront": "1.472",
						"yrTerm3Standard.allUpfront": "1.335",
						"yrTerm3Standard.noUpfront": "1.427",
						"yrTerm3Standard.partialUpfront": "1.374"
					}
				},
				"mswinSQL": {
					"ondemand": "6.658",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.144",
						"yrTerm1Standard.noUpfront": "6.216",
						"yrTerm1Standard.partialUpfront": "6.162",
						"yrTerm3Convertible.allUpfront": "5.963",
						"yrTerm3Convertible.noUpfront": "6.037",
						"yrTerm3Convertible.partialUpfront": "5.978",
						"yrTerm3Standard.allUpfront": "5.841",
						"yrTerm3Standard.noUpfront": "5.933",
						"yrTerm3Standard.partialUpfront": "5.880"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.434",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.920",
						"yrTerm1Standard.noUpfront": "1.992",
						"yrTerm1Standard.partialUpfront": "1.938",
						"yrTerm3Convertible.allUpfront": "1.739",
						"yrTerm3Convertible.noUpfront": "1.813",
						"yrTerm3Convertible.partialUpfront": "1.754",
						"yrTerm3Standard.allUpfront": "1.617",
						"yrTerm3Standard.noUpfront": "1.709",
						"yrTerm3Standard.partialUpfront": "1.656"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "1.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.953",
						"yrTerm1Standard.noUpfront": "1.025",
						"yrTerm1Standard.partialUpfront": "0.972",
						"yrTerm3Convertible.allUpfront": "0.757",
						"yrTerm3Convertible.noUpfront": "0.835",
						"yrTerm3Convertible.partialUpfront": "0.772",
						"yrTerm3Standard.allUpfront": "0.633",
						"yrTerm3Standard.noUpfront": "0.726",
						"yrTerm3Standard.partialUpfront": "0.674"
					}
				},
				"mswin": {
					"ondemand": "2.232",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.689",
						"yrTerm1Standard.noUpfront": "1.761",
						"yrTerm1Standard.partialUpfront": "1.708",
						"yrTerm3Convertible.allUpfront": "1.493",
						"yrTerm3Convertible.noUpfront": "1.571",
						"yrTerm3Convertible.partialUpfront": "1.508",
						"yrTerm3Standard.allUpfront": "1.369",
						"yrTerm3Standard.noUpfront": "1.462",
						"yrTerm3Standard.partialUpfront": "1.410"
					}
				},
				"mswinSQL": {
					"ondemand": "6.738",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.195",
						"yrTerm1Standard.noUpfront": "6.267",
						"yrTerm1Standard.partialUpfront": "6.214",
						"yrTerm3Convertible.allUpfront": "5.999",
						"yrTerm3Convertible.noUpfront": "6.077",
						"yrTerm3Convertible.partialUpfront": "6.014",
						"yrTerm3Standard.allUpfront": "5.875",
						"yrTerm3Standard.noUpfront": "5.968",
						"yrTerm3Standard.partialUpfront": "5.916"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.514",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.971",
						"yrTerm1Standard.noUpfront": "2.043",
						"yrTerm1Standard.partialUpfront": "1.990",
						"yrTerm3Convertible.allUpfront": "1.775",
						"yrTerm3Convertible.noUpfront": "1.853",
						"yrTerm3Convertible.partialUpfront": "1.790",
						"yrTerm3Standard.allUpfront": "1.651",
						"yrTerm3Standard.noUpfront": "1.744",
						"yrTerm3Standard.partialUpfront": "1.692"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "1.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.953",
						"yrTerm1Standard.noUpfront": "1.025",
						"yrTerm1Standard.partialUpfront": "0.972",
						"yrTerm3Convertible.allUpfront": "0.757",
						"yrTerm3Convertible.noUpfront": "0.835",
						"yrTerm3Convertible.partialUpfront": "0.772",
						"yrTerm3Standard.allUpfront": "0.633",
						"yrTerm3Standard.noUpfront": "0.726",
						"yrTerm3Standard.partialUpfront": "0.674"
					}
				},
				"mswin": {
					"ondemand": "2.232",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.689",
						"yrTerm1Standard.noUpfront": "1.761",
						"yrTerm1Standard.partialUpfront": "1.708",
						"yrTerm3Convertible.allUpfront": "1.493",
						"yrTerm3Convertible.noUpfront": "1.571",
						"yrTerm3Convertible.partialUpfront": "1.508",
						"yrTerm3Standard.allUpfront": "1.369",
						"yrTerm3Standard.noUpfront": "1.462",
						"yrTerm3Standard.partialUpfront": "1.410"
					}
				},
				"mswinSQL": {
					"ondemand": "6.738",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.195",
						"yrTerm1Standard.noUpfront": "6.267",
						"yrTerm1Standard.partialUpfront": "6.214",
						"yrTerm3Convertible.allUpfront": "5.999",
						"yrTerm3Convertible.noUpfront": "6.077",
						"yrTerm3Convertible.partialUpfront": "6.014",
						"yrTerm3Standard.allUpfront": "5.875",
						"yrTerm3Standard.noUpfront": "5.968",
						"yrTerm3Standard.partialUpfront": "5.916"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.514",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.971",
						"yrTerm1Standard.noUpfront": "2.043",
						"yrTerm1Standard.partialUpfront": "1.990",
						"yrTerm3Convertible.allUpfront": "1.775",
						"yrTerm3Convertible.noUpfront": "1.853",
						"yrTerm3Convertible.partialUpfront": "1.790",
						"yrTerm3Standard.allUpfront": "1.651",
						"yrTerm3Standard.noUpfront": "1.744",
						"yrTerm3Standard.partialUpfront": "1.692"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "1.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.877",
						"yrTerm1Standard.noUpfront": "0.941",
						"yrTerm1Standard.partialUpfront": "0.894",
						"yrTerm3Convertible.allUpfront": "0.703",
						"yrTerm3Convertible.noUpfront": "0.775",
						"yrTerm3Convertible.partialUpfront": "0.718",
						"yrTerm3Standard.allUpfront": "0.582",
						"yrTerm3Standard.noUpfront": "0.674",
						"yrTerm3Standard.partialUpfront": "0.620"
					}
				},
				"mswin": {
					"ondemand": "2.112",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.613",
						"yrTerm1Standard.noUpfront": "1.677",
						"yrTerm1Standard.partialUpfront": "1.630",
						"yrTerm3Convertible.allUpfront": "1.439",
						"yrTerm3Convertible.noUpfront": "1.511",
						"yrTerm3Convertible.partialUpfront": "1.454",
						"yrTerm3Standard.allUpfront": "1.318",
						"yrTerm3Standard.noUpfront": "1.410",
						"yrTerm3Standard.partialUpfront": "1.356"
					}
				},
				"mswinSQL": {
					"ondemand": "6.618",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.119",
						"yrTerm1Standard.noUpfront": "6.183",
						"yrTerm1Standard.partialUpfront": "6.136",
						"yrTerm3Convertible.allUpfront": "5.945",
						"yrTerm3Convertible.noUpfront": "6.017",
						"yrTerm3Convertible.partialUpfront": "5.960",
						"yrTerm3Standard.allUpfront": "5.824",
						"yrTerm3Standard.noUpfront": "5.916",
						"yrTerm3Standard.partialUpfront": "5.862"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.394",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.895",
						"yrTerm1Standard.noUpfront": "1.959",
						"yrTerm1Standard.partialUpfront": "1.912",
						"yrTerm3Convertible.allUpfront": "1.721",
						"yrTerm3Convertible.noUpfront": "1.793",
						"yrTerm3Convertible.partialUpfront": "1.736",
						"yrTerm3Standard.allUpfront": "1.600",
						"yrTerm3Standard.noUpfront": "1.692",
						"yrTerm3Standard.partialUpfront": "1.638"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "1.488",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.948",
						"yrTerm1Standard.noUpfront": "1.008",
						"yrTerm1Standard.partialUpfront": "0.968",
						"yrTerm3Convertible.allUpfront": "0.757",
						"yrTerm3Convertible.noUpfront": "0.835",
						"yrTerm3Convertible.partialUpfront": "0.772",
						"yrTerm3Standard.allUpfront": "0.629",
						"yrTerm3Standard.noUpfront": "0.726",
						"yrTerm3Standard.partialUpfront": "0.670"
					}
				},
				"mswin": {
					"ondemand": "2.224",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.684",
						"yrTerm1Standard.noUpfront": "1.744",
						"yrTerm1Standard.partialUpfront": "1.704",
						"yrTerm3Convertible.allUpfront": "1.493",
						"yrTerm3Convertible.noUpfront": "1.571",
						"yrTerm3Convertible.partialUpfront": "1.508",
						"yrTerm3Standard.allUpfront": "1.365",
						"yrTerm3Standard.noUpfront": "1.462",
						"yrTerm3Standard.partialUpfront": "1.406"
					}
				},
				"mswinSQL": {
					"ondemand": "6.73",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.190",
						"yrTerm1Standard.noUpfront": "6.250",
						"yrTerm1Standard.partialUpfront": "6.210",
						"yrTerm3Convertible.allUpfront": "5.999",
						"yrTerm3Convertible.noUpfront": "6.077",
						"yrTerm3Convertible.partialUpfront": "6.014",
						"yrTerm3Standard.allUpfront": "5.871",
						"yrTerm3Standard.noUpfront": "5.968",
						"yrTerm3Standard.partialUpfront": "5.912"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.506",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.966",
						"yrTerm1Standard.noUpfront": "2.026",
						"yrTerm1Standard.partialUpfront": "1.986",
						"yrTerm3Convertible.allUpfront": "1.775",
						"yrTerm3Convertible.noUpfront": "1.853",
						"yrTerm3Convertible.partialUpfront": "1.790",
						"yrTerm3Standard.allUpfront": "1.647",
						"yrTerm3Standard.noUpfront": "1.744",
						"yrTerm3Standard.partialUpfront": "1.688"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "1.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.877",
						"yrTerm1Standard.noUpfront": "0.941",
						"yrTerm1Standard.partialUpfront": "0.894",
						"yrTerm3Convertible.allUpfront": "0.703",
						"yrTerm3Convertible.noUpfront": "0.775",
						"yrTerm3Convertible.partialUpfront": "0.718",
						"yrTerm3Standard.allUpfront": "0.582",
						"yrTerm3Standard.noUpfront": "0.674",
						"yrTerm3Standard.partialUpfront": "0.620"
					}
				},
				"mswin": {
					"ondemand": "2.112",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.613",
						"yrTerm1Standard.noUpfront": "1.677",
						"yrTerm1Standard.partialUpfront": "1.630",
						"yrTerm3Convertible.allUpfront": "1.439",
						"yrTerm3Convertible.noUpfront": "1.511",
						"yrTerm3Convertible.partialUpfront": "1.454",
						"yrTerm3Standard.allUpfront": "1.318",
						"yrTerm3Standard.noUpfront": "1.410",
						"yrTerm3Standard.partialUpfront": "1.356"
					}
				},
				"mswinSQL": {
					"ondemand": "6.618",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.119",
						"yrTerm1Standard.noUpfront": "6.183",
						"yrTerm1Standard.partialUpfront": "6.136",
						"yrTerm3Convertible.allUpfront": "5.945",
						"yrTerm3Convertible.noUpfront": "6.017",
						"yrTerm3Convertible.partialUpfront": "5.960",
						"yrTerm3Standard.allUpfront": "5.824",
						"yrTerm3Standard.noUpfront": "5.916",
						"yrTerm3Standard.partialUpfront": "5.862"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.394",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.895",
						"yrTerm1Standard.noUpfront": "1.959",
						"yrTerm1Standard.partialUpfront": "1.912",
						"yrTerm3Convertible.allUpfront": "1.721",
						"yrTerm3Convertible.noUpfront": "1.793",
						"yrTerm3Convertible.partialUpfront": "1.736",
						"yrTerm3Standard.allUpfront": "1.600",
						"yrTerm3Standard.noUpfront": "1.692",
						"yrTerm3Standard.partialUpfront": "1.638"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "1.448",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.922",
						"yrTerm1Standard.noUpfront": "0.991",
						"yrTerm1Standard.partialUpfront": "0.942",
						"yrTerm3Convertible.allUpfront": "0.739",
						"yrTerm3Convertible.noUpfront": "0.815",
						"yrTerm3Convertible.partialUpfront": "0.754",
						"yrTerm3Standard.allUpfront": "0.613",
						"yrTerm3Standard.noUpfront": "0.708",
						"yrTerm3Standard.partialUpfront": "0.652"
					}
				},
				"mswin": {
					"ondemand": "2.184",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.658",
						"yrTerm1Standard.noUpfront": "1.727",
						"yrTerm1Standard.partialUpfront": "1.678",
						"yrTerm3Convertible.allUpfront": "1.475",
						"yrTerm3Convertible.noUpfront": "1.551",
						"yrTerm3Convertible.partialUpfront": "1.490",
						"yrTerm3Standard.allUpfront": "1.349",
						"yrTerm3Standard.noUpfront": "1.444",
						"yrTerm3Standard.partialUpfront": "1.388"
					}
				},
				"mswinSQL": {
					"ondemand": "6.69",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.164",
						"yrTerm1Standard.noUpfront": "6.233",
						"yrTerm1Standard.partialUpfront": "6.184",
						"yrTerm3Convertible.allUpfront": "5.981",
						"yrTerm3Convertible.noUpfront": "6.057",
						"yrTerm3Convertible.partialUpfront": "5.996",
						"yrTerm3Standard.allUpfront": "5.855",
						"yrTerm3Standard.noUpfront": "5.950",
						"yrTerm3Standard.partialUpfront": "5.894"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.466",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.940",
						"yrTerm1Standard.noUpfront": "2.009",
						"yrTerm1Standard.partialUpfront": "1.960",
						"yrTerm3Convertible.allUpfront": "1.757",
						"yrTerm3Convertible.noUpfront": "1.833",
						"yrTerm3Convertible.partialUpfront": "1.772",
						"yrTerm3Standard.allUpfront": "1.631",
						"yrTerm3Standard.noUpfront": "1.726",
						"yrTerm3Standard.partialUpfront": "1.670"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "2.288",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.457",
						"yrTerm1Standard.noUpfront": "1.562",
						"yrTerm1Standard.partialUpfront": "1.488",
						"yrTerm3Convertible.allUpfront": "1.154",
						"yrTerm3Convertible.noUpfront": "1.272",
						"yrTerm3Convertible.partialUpfront": "1.178",
						"yrTerm3Standard.allUpfront": "0.968",
						"yrTerm3Standard.noUpfront": "1.106",
						"yrTerm3Standard.partialUpfront": "1.030"
					}
				},
				"mswin": {
					"ondemand": "3.024",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.193",
						"yrTerm1Standard.noUpfront": "2.298",
						"yrTerm1Standard.partialUpfront": "2.224",
						"yrTerm3Convertible.allUpfront": "1.890",
						"yrTerm3Convertible.noUpfront": "2.008",
						"yrTerm3Convertible.partialUpfront": "1.914",
						"yrTerm3Standard.allUpfront": "1.704",
						"yrTerm3Standard.noUpfront": "1.842",
						"yrTerm3Standard.partialUpfront": "1.766"
					}
				},
				"mswinSQL": {
					"ondemand": "7.53",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.699",
						"yrTerm1Standard.noUpfront": "6.804",
						"yrTerm1Standard.partialUpfront": "6.730",
						"yrTerm3Convertible.allUpfront": "6.396",
						"yrTerm3Convertible.noUpfront": "6.514",
						"yrTerm3Convertible.partialUpfront": "6.420",
						"yrTerm3Standard.allUpfront": "6.210",
						"yrTerm3Standard.noUpfront": "6.348",
						"yrTerm3Standard.partialUpfront": "6.272"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "3.306",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.475",
						"yrTerm1Standard.noUpfront": "2.580",
						"yrTerm1Standard.partialUpfront": "2.506",
						"yrTerm3Convertible.allUpfront": "2.172",
						"yrTerm3Convertible.noUpfront": "2.290",
						"yrTerm3Convertible.partialUpfront": "2.196",
						"yrTerm3Standard.allUpfront": "1.986",
						"yrTerm3Standard.noUpfront": "2.124",
						"yrTerm3Standard.partialUpfront": "2.048"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "1.248",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.795",
						"yrTerm1Standard.noUpfront": "0.857",
						"yrTerm1Standard.partialUpfront": "0.812",
						"yrTerm3Convertible.allUpfront": "0.631",
						"yrTerm3Convertible.noUpfront": "0.696",
						"yrTerm3Convertible.partialUpfront": "0.644",
						"yrTerm3Standard.allUpfront": "0.528",
						"yrTerm3Standard.noUpfront": "0.605",
						"yrTerm3Standard.partialUpfront": "0.562"
					}
				},
				"mswin": {
					"ondemand": "1.984",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.531",
						"yrTerm1Standard.noUpfront": "1.593",
						"yrTerm1Standard.partialUpfront": "1.548",
						"yrTerm3Convertible.allUpfront": "1.367",
						"yrTerm3Convertible.noUpfront": "1.432",
						"yrTerm3Convertible.partialUpfront": "1.380",
						"yrTerm3Standard.allUpfront": "1.264",
						"yrTerm3Standard.noUpfront": "1.341",
						"yrTerm3Standard.partialUpfront": "1.298"
					}
				},
				"mswinSQL": {
					"ondemand": "6.49",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.037",
						"yrTerm1Standard.noUpfront": "6.099",
						"yrTerm1Standard.partialUpfront": "6.054",
						"yrTerm3Convertible.allUpfront": "5.873",
						"yrTerm3Convertible.noUpfront": "5.938",
						"yrTerm3Convertible.partialUpfront": "5.886",
						"yrTerm3Standard.allUpfront": "5.770",
						"yrTerm3Standard.noUpfront": "5.847",
						"yrTerm3Standard.partialUpfront": "5.804"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.813",
						"yrTerm1Standard.noUpfront": "1.875",
						"yrTerm1Standard.partialUpfront": "1.830",
						"yrTerm3Convertible.allUpfront": "1.649",
						"yrTerm3Convertible.noUpfront": "1.714",
						"yrTerm3Convertible.partialUpfront": "1.662",
						"yrTerm3Standard.allUpfront": "1.546",
						"yrTerm3Standard.noUpfront": "1.623",
						"yrTerm3Standard.partialUpfront": "1.580"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "1.248",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.795",
						"yrTerm1Standard.noUpfront": "0.857",
						"yrTerm1Standard.partialUpfront": "0.812",
						"yrTerm3Convertible.allUpfront": "0.631",
						"yrTerm3Convertible.noUpfront": "0.696",
						"yrTerm3Convertible.partialUpfront": "0.644",
						"yrTerm3Standard.allUpfront": "0.528",
						"yrTerm3Standard.noUpfront": "0.605",
						"yrTerm3Standard.partialUpfront": "0.562"
					}
				},
				"mswin": {
					"ondemand": "1.984",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.531",
						"yrTerm1Standard.noUpfront": "1.593",
						"yrTerm1Standard.partialUpfront": "1.548",
						"yrTerm3Convertible.allUpfront": "1.367",
						"yrTerm3Convertible.noUpfront": "1.432",
						"yrTerm3Convertible.partialUpfront": "1.380",
						"yrTerm3Standard.allUpfront": "1.264",
						"yrTerm3Standard.noUpfront": "1.341",
						"yrTerm3Standard.partialUpfront": "1.298"
					}
				},
				"mswinSQL": {
					"ondemand": "6.49",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.037",
						"yrTerm1Standard.noUpfront": "6.099",
						"yrTerm1Standard.partialUpfront": "6.054",
						"yrTerm3Convertible.allUpfront": "5.873",
						"yrTerm3Convertible.noUpfront": "5.938",
						"yrTerm3Convertible.partialUpfront": "5.886",
						"yrTerm3Standard.allUpfront": "5.770",
						"yrTerm3Standard.noUpfront": "5.847",
						"yrTerm3Standard.partialUpfront": "5.804"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.813",
						"yrTerm1Standard.noUpfront": "1.875",
						"yrTerm1Standard.partialUpfront": "1.830",
						"yrTerm3Convertible.allUpfront": "1.649",
						"yrTerm3Convertible.noUpfront": "1.714",
						"yrTerm3Convertible.partialUpfront": "1.662",
						"yrTerm3Standard.allUpfront": "1.546",
						"yrTerm3Standard.noUpfront": "1.623",
						"yrTerm3Standard.partialUpfront": "1.580"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "1.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.958",
						"yrTerm1Standard.noUpfront": "1.025",
						"yrTerm1Standard.partialUpfront": "0.978",
						"yrTerm3Convertible.allUpfront": "0.757",
						"yrTerm3Convertible.noUpfront": "0.835",
						"yrTerm3Convertible.partialUpfront": "0.772",
						"yrTerm3Standard.allUpfront": "0.636",
						"yrTerm3Standard.noUpfront": "0.726",
						"yrTerm3Standard.partialUpfront": "0.676"
					}
				},
				"mswin": {
					"ondemand": "2.24",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.694",
						"yrTerm1Standard.noUpfront": "1.761",
						"yrTerm1Standard.partialUpfront": "1.714",
						"yrTerm3Convertible.allUpfront": "1.493",
						"yrTerm3Convertible.noUpfront": "1.571",
						"yrTerm3Convertible.partialUpfront": "1.508",
						"yrTerm3Standard.allUpfront": "1.372",
						"yrTerm3Standard.noUpfront": "1.462",
						"yrTerm3Standard.partialUpfront": "1.412"
					}
				},
				"mswinSQL": {
					"ondemand": "6.746",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.200",
						"yrTerm1Standard.noUpfront": "6.267",
						"yrTerm1Standard.partialUpfront": "6.220",
						"yrTerm3Convertible.allUpfront": "5.999",
						"yrTerm3Convertible.noUpfront": "6.077",
						"yrTerm3Convertible.partialUpfront": "6.014",
						"yrTerm3Standard.allUpfront": "5.878",
						"yrTerm3Standard.noUpfront": "5.968",
						"yrTerm3Standard.partialUpfront": "5.918"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.522",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.976",
						"yrTerm1Standard.noUpfront": "2.043",
						"yrTerm1Standard.partialUpfront": "1.996",
						"yrTerm3Convertible.allUpfront": "1.775",
						"yrTerm3Convertible.noUpfront": "1.853",
						"yrTerm3Convertible.partialUpfront": "1.790",
						"yrTerm3Standard.allUpfront": "1.654",
						"yrTerm3Standard.noUpfront": "1.744",
						"yrTerm3Standard.partialUpfront": "1.694"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "1.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.877",
						"yrTerm1Standard.noUpfront": "0.941",
						"yrTerm1Standard.partialUpfront": "0.894",
						"yrTerm3Convertible.allUpfront": "0.703",
						"yrTerm3Convertible.noUpfront": "0.775",
						"yrTerm3Convertible.partialUpfront": "0.718",
						"yrTerm3Standard.allUpfront": "0.582",
						"yrTerm3Standard.noUpfront": "0.674",
						"yrTerm3Standard.partialUpfront": "0.620"
					}
				},
				"mswin": {
					"ondemand": "2.112",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.613",
						"yrTerm1Standard.noUpfront": "1.677",
						"yrTerm1Standard.partialUpfront": "1.630",
						"yrTerm3Convertible.allUpfront": "1.439",
						"yrTerm3Convertible.noUpfront": "1.511",
						"yrTerm3Convertible.partialUpfront": "1.454",
						"yrTerm3Standard.allUpfront": "1.318",
						"yrTerm3Standard.noUpfront": "1.410",
						"yrTerm3Standard.partialUpfront": "1.356"
					}
				},
				"mswinSQL": {
					"ondemand": "6.618",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.119",
						"yrTerm1Standard.noUpfront": "6.183",
						"yrTerm1Standard.partialUpfront": "6.136",
						"yrTerm3Convertible.allUpfront": "5.945",
						"yrTerm3Convertible.noUpfront": "6.017",
						"yrTerm3Convertible.partialUpfront": "5.960",
						"yrTerm3Standard.allUpfront": "5.824",
						"yrTerm3Standard.noUpfront": "5.916",
						"yrTerm3Standard.partialUpfront": "5.862"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.394",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.895",
						"yrTerm1Standard.noUpfront": "1.959",
						"yrTerm1Standard.partialUpfront": "1.912",
						"yrTerm3Convertible.allUpfront": "1.721",
						"yrTerm3Convertible.noUpfront": "1.793",
						"yrTerm3Convertible.partialUpfront": "1.736",
						"yrTerm3Standard.allUpfront": "1.600",
						"yrTerm3Standard.noUpfront": "1.692",
						"yrTerm3Standard.partialUpfront": "1.638"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "1.248",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.795",
						"yrTerm1Standard.noUpfront": "0.857",
						"yrTerm1Standard.partialUpfront": "0.812",
						"yrTerm3Convertible.allUpfront": "0.631",
						"yrTerm3Convertible.noUpfront": "0.696",
						"yrTerm3Convertible.partialUpfront": "0.644",
						"yrTerm3Standard.allUpfront": "0.528",
						"yrTerm3Standard.noUpfront": "0.605",
						"yrTerm3Standard.partialUpfront": "0.562"
					}
				},
				"mswin": {
					"ondemand": "1.984",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.531",
						"yrTerm1Standard.noUpfront": "1.593",
						"yrTerm1Standard.partialUpfront": "1.548",
						"yrTerm3Convertible.allUpfront": "1.367",
						"yrTerm3Convertible.noUpfront": "1.432",
						"yrTerm3Convertible.partialUpfront": "1.380",
						"yrTerm3Standard.allUpfront": "1.264",
						"yrTerm3Standard.noUpfront": "1.341",
						"yrTerm3Standard.partialUpfront": "1.298"
					}
				},
				"mswinSQL": {
					"ondemand": "6.49",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.037",
						"yrTerm1Standard.noUpfront": "6.099",
						"yrTerm1Standard.partialUpfront": "6.054",
						"yrTerm3Convertible.allUpfront": "5.873",
						"yrTerm3Convertible.noUpfront": "5.938",
						"yrTerm3Convertible.partialUpfront": "5.886",
						"yrTerm3Standard.allUpfront": "5.770",
						"yrTerm3Standard.noUpfront": "5.847",
						"yrTerm3Standard.partialUpfront": "5.804"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "2.266",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.813",
						"yrTerm1Standard.noUpfront": "1.875",
						"yrTerm1Standard.partialUpfront": "1.830",
						"yrTerm3Convertible.allUpfront": "1.649",
						"yrTerm3Convertible.noUpfront": "1.714",
						"yrTerm3Convertible.partialUpfront": "1.662",
						"yrTerm3Standard.allUpfront": "1.546",
						"yrTerm3Standard.noUpfront": "1.623",
						"yrTerm3Standard.partialUpfront": "1.580"
					}
				}
			}
		},
		"storage": {
			"devices": 2,
			"includes_swap_partition": false,
			"nvme_ssd": true,
			"size": 1900,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 99,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 32500,
		"ebs_max_bandwidth": 7000,
		"ebs_optimized": true,
		"ebs_throughput": 850,
		"enhanced_networking": true,
		"family": "Storage optimized",
		"generation": "current",
		"instance_type": "i3.8xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [],
		"memory": 244,
		"network_performance": "10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "I3 High I/O Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "2.928",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.865",
						"yrTerm1Standard.noUpfront": "1.982",
						"yrTerm1Standard.partialUpfront": "1.904",
						"yrTerm3Convertible.allUpfront": "1.479",
						"yrTerm3Convertible.noUpfront": "1.630",
						"yrTerm3Convertible.partialUpfront": "1.508",
						"yrTerm3Standard.allUpfront": "1.239",
						"yrTerm3Standard.noUpfront": "1.417",
						"yrTerm3Standard.partialUpfront": "1.318"
					}
				},
				"mswin": {
					"ondemand": "4.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.337",
						"yrTerm1Standard.noUpfront": "3.454",
						"yrTerm1Standard.partialUpfront": "3.376",
						"yrTerm3Convertible.allUpfront": "2.951",
						"yrTerm3Convertible.noUpfront": "3.102",
						"yrTerm3Convertible.partialUpfront": "2.980",
						"yrTerm3Standard.allUpfront": "2.711",
						"yrTerm3Standard.noUpfront": "2.889",
						"yrTerm3Standard.partialUpfront": "2.790"
					}
				},
				"mswinSQL": {
					"ondemand": "13.411",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.348",
						"yrTerm1Standard.noUpfront": "12.465",
						"yrTerm1Standard.partialUpfront": "12.386",
						"yrTerm3Convertible.allUpfront": "11.962",
						"yrTerm3Convertible.noUpfront": "12.113",
						"yrTerm3Convertible.partialUpfront": "11.992",
						"yrTerm3Standard.allUpfront": "11.722",
						"yrTerm3Standard.noUpfront": "11.900",
						"yrTerm3Standard.partialUpfront": "11.800"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.964",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.901",
						"yrTerm1Standard.noUpfront": "4.018",
						"yrTerm1Standard.partialUpfront": "3.940",
						"yrTerm3Convertible.allUpfront": "3.515",
						"yrTerm3Convertible.noUpfront": "3.666",
						"yrTerm3Convertible.partialUpfront": "3.544",
						"yrTerm3Standard.allUpfront": "3.275",
						"yrTerm3Standard.noUpfront": "3.453",
						"yrTerm3Standard.partialUpfront": "3.354"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "2.928",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.865",
						"yrTerm1Standard.noUpfront": "1.982",
						"yrTerm1Standard.partialUpfront": "1.904",
						"yrTerm3Convertible.allUpfront": "1.479",
						"yrTerm3Convertible.noUpfront": "1.630",
						"yrTerm3Convertible.partialUpfront": "1.508",
						"yrTerm3Standard.allUpfront": "1.239",
						"yrTerm3Standard.noUpfront": "1.417",
						"yrTerm3Standard.partialUpfront": "1.318"
					}
				},
				"mswin": {
					"ondemand": "4.4",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.337",
						"yrTerm1Standard.noUpfront": "3.454",
						"yrTerm1Standard.partialUpfront": "3.376",
						"yrTerm3Convertible.allUpfront": "2.951",
						"yrTerm3Convertible.noUpfront": "3.102",
						"yrTerm3Convertible.partialUpfront": "2.980",
						"yrTerm3Standard.allUpfront": "2.711",
						"yrTerm3Standard.noUpfront": "2.889",
						"yrTerm3Standard.partialUpfront": "2.790"
					}
				},
				"mswinSQL": {
					"ondemand": "13.411",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.348",
						"yrTerm1Standard.noUpfront": "12.465",
						"yrTerm1Standard.partialUpfront": "12.386",
						"yrTerm3Convertible.allUpfront": "11.962",
						"yrTerm3Convertible.noUpfront": "12.113",
						"yrTerm3Convertible.partialUpfront": "11.992",
						"yrTerm3Standard.allUpfront": "11.722",
						"yrTerm3Standard.noUpfront": "11.900",
						"yrTerm3Standard.partialUpfront": "11.800"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.964",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.901",
						"yrTerm1Standard.noUpfront": "4.018",
						"yrTerm1Standard.partialUpfront": "3.940",
						"yrTerm3Convertible.allUpfront": "3.515",
						"yrTerm3Convertible.noUpfront": "3.666",
						"yrTerm3Convertible.partialUpfront": "3.544",
						"yrTerm3Standard.allUpfront": "3.275",
						"yrTerm3Standard.noUpfront": "3.453",
						"yrTerm3Standard.partialUpfront": "3.354"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "2.832",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.804",
						"yrTerm1Standard.noUpfront": "1.949",
						"yrTerm1Standard.partialUpfront": "1.840",
						"yrTerm3Convertible.allUpfront": "1.443",
						"yrTerm3Convertible.noUpfront": "1.590",
						"yrTerm3Convertible.partialUpfront": "1.472",
						"yrTerm3Standard.allUpfront": "1.198",
						"yrTerm3Standard.noUpfront": "1.382",
						"yrTerm3Standard.partialUpfront": "1.274"
					}
				},
				"mswin": {
					"ondemand": "4.304",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.276",
						"yrTerm1Standard.noUpfront": "3.421",
						"yrTerm1Standard.partialUpfront": "3.312",
						"yrTerm3Convertible.allUpfront": "2.915",
						"yrTerm3Convertible.noUpfront": "3.062",
						"yrTerm3Convertible.partialUpfront": "2.944",
						"yrTerm3Standard.allUpfront": "2.670",
						"yrTerm3Standard.noUpfront": "2.854",
						"yrTerm3Standard.partialUpfront": "2.746"
					}
				},
				"mswinSQL": {
					"ondemand": "13.315",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.287",
						"yrTerm1Standard.noUpfront": "12.432",
						"yrTerm1Standard.partialUpfront": "12.324",
						"yrTerm3Convertible.allUpfront": "11.926",
						"yrTerm3Convertible.noUpfront": "12.073",
						"yrTerm3Convertible.partialUpfront": "11.954",
						"yrTerm3Standard.allUpfront": "11.681",
						"yrTerm3Standard.noUpfront": "11.865",
						"yrTerm3Standard.partialUpfront": "11.758"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.868",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.840",
						"yrTerm1Standard.noUpfront": "3.985",
						"yrTerm1Standard.partialUpfront": "3.876",
						"yrTerm3Convertible.allUpfront": "3.479",
						"yrTerm3Convertible.noUpfront": "3.626",
						"yrTerm3Convertible.partialUpfront": "3.508",
						"yrTerm3Standard.allUpfront": "3.234",
						"yrTerm3Standard.noUpfront": "3.418",
						"yrTerm3Standard.partialUpfront": "3.310"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "2.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.906",
						"yrTerm1Standard.noUpfront": "2.050",
						"yrTerm1Standard.partialUpfront": "1.944",
						"yrTerm3Convertible.allUpfront": "1.515",
						"yrTerm3Convertible.noUpfront": "1.669",
						"yrTerm3Convertible.partialUpfront": "1.546",
						"yrTerm3Standard.allUpfront": "1.266",
						"yrTerm3Standard.noUpfront": "1.452",
						"yrTerm3Standard.partialUpfront": "1.346"
					}
				},
				"mswin": {
					"ondemand": "4.464",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.378",
						"yrTerm1Standard.noUpfront": "3.522",
						"yrTerm1Standard.partialUpfront": "3.416",
						"yrTerm3Convertible.allUpfront": "2.987",
						"yrTerm3Convertible.noUpfront": "3.141",
						"yrTerm3Convertible.partialUpfront": "3.018",
						"yrTerm3Standard.allUpfront": "2.738",
						"yrTerm3Standard.noUpfront": "2.924",
						"yrTerm3Standard.partialUpfront": "2.818"
					}
				},
				"mswinSQL": {
					"ondemand": "13.475",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.389",
						"yrTerm1Standard.noUpfront": "12.533",
						"yrTerm1Standard.partialUpfront": "12.428",
						"yrTerm3Convertible.allUpfront": "11.998",
						"yrTerm3Convertible.noUpfront": "12.152",
						"yrTerm3Convertible.partialUpfront": "12.028",
						"yrTerm3Standard.allUpfront": "11.749",
						"yrTerm3Standard.noUpfront": "11.935",
						"yrTerm3Standard.partialUpfront": "11.830"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.028",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.942",
						"yrTerm1Standard.noUpfront": "4.086",
						"yrTerm1Standard.partialUpfront": "3.980",
						"yrTerm3Convertible.allUpfront": "3.551",
						"yrTerm3Convertible.noUpfront": "3.705",
						"yrTerm3Convertible.partialUpfront": "3.582",
						"yrTerm3Standard.allUpfront": "3.302",
						"yrTerm3Standard.noUpfront": "3.488",
						"yrTerm3Standard.partialUpfront": "3.382"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "2.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.906",
						"yrTerm1Standard.noUpfront": "2.050",
						"yrTerm1Standard.partialUpfront": "1.944",
						"yrTerm3Convertible.allUpfront": "1.515",
						"yrTerm3Convertible.noUpfront": "1.669",
						"yrTerm3Convertible.partialUpfront": "1.546",
						"yrTerm3Standard.allUpfront": "1.266",
						"yrTerm3Standard.noUpfront": "1.452",
						"yrTerm3Standard.partialUpfront": "1.346"
					}
				},
				"mswin": {
					"ondemand": "4.464",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.378",
						"yrTerm1Standard.noUpfront": "3.522",
						"yrTerm1Standard.partialUpfront": "3.416",
						"yrTerm3Convertible.allUpfront": "2.987",
						"yrTerm3Convertible.noUpfront": "3.141",
						"yrTerm3Convertible.partialUpfront": "3.018",
						"yrTerm3Standard.allUpfront": "2.738",
						"yrTerm3Standard.noUpfront": "2.924",
						"yrTerm3Standard.partialUpfront": "2.818"
					}
				},
				"mswinSQL": {
					"ondemand": "13.475",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.389",
						"yrTerm1Standard.noUpfront": "12.533",
						"yrTerm1Standard.partialUpfront": "12.428",
						"yrTerm3Convertible.allUpfront": "11.998",
						"yrTerm3Convertible.noUpfront": "12.152",
						"yrTerm3Convertible.partialUpfront": "12.028",
						"yrTerm3Standard.allUpfront": "11.749",
						"yrTerm3Standard.noUpfront": "11.935",
						"yrTerm3Standard.partialUpfront": "11.830"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.028",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.942",
						"yrTerm1Standard.noUpfront": "4.086",
						"yrTerm1Standard.partialUpfront": "3.980",
						"yrTerm3Convertible.allUpfront": "3.551",
						"yrTerm3Convertible.noUpfront": "3.705",
						"yrTerm3Convertible.partialUpfront": "3.582",
						"yrTerm3Standard.allUpfront": "3.302",
						"yrTerm3Standard.noUpfront": "3.488",
						"yrTerm3Standard.partialUpfront": "3.382"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "2.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.753",
						"yrTerm1Standard.noUpfront": "1.882",
						"yrTerm1Standard.partialUpfront": "1.788",
						"yrTerm3Convertible.allUpfront": "1.406",
						"yrTerm3Convertible.noUpfront": "1.550",
						"yrTerm3Convertible.partialUpfront": "1.436",
						"yrTerm3Standard.allUpfront": "1.164",
						"yrTerm3Standard.noUpfront": "1.348",
						"yrTerm3Standard.partialUpfront": "1.238"
					}
				},
				"mswin": {
					"ondemand": "4.224",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.225",
						"yrTerm1Standard.noUpfront": "3.354",
						"yrTerm1Standard.partialUpfront": "3.260",
						"yrTerm3Convertible.allUpfront": "2.878",
						"yrTerm3Convertible.noUpfront": "3.022",
						"yrTerm3Convertible.partialUpfront": "2.908",
						"yrTerm3Standard.allUpfront": "2.636",
						"yrTerm3Standard.noUpfront": "2.820",
						"yrTerm3Standard.partialUpfront": "2.710"
					}
				},
				"mswinSQL": {
					"ondemand": "13.235",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.236",
						"yrTerm1Standard.noUpfront": "12.365",
						"yrTerm1Standard.partialUpfront": "12.272",
						"yrTerm3Convertible.allUpfront": "11.889",
						"yrTerm3Convertible.noUpfront": "12.033",
						"yrTerm3Convertible.partialUpfront": "11.918",
						"yrTerm3Standard.allUpfront": "11.647",
						"yrTerm3Standard.noUpfront": "11.831",
						"yrTerm3Standard.partialUpfront": "11.722"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.788",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.789",
						"yrTerm1Standard.noUpfront": "3.918",
						"yrTerm1Standard.partialUpfront": "3.824",
						"yrTerm3Convertible.allUpfront": "3.442",
						"yrTerm3Convertible.noUpfront": "3.586",
						"yrTerm3Convertible.partialUpfront": "3.472",
						"yrTerm3Standard.allUpfront": "3.200",
						"yrTerm3Standard.noUpfront": "3.384",
						"yrTerm3Standard.partialUpfront": "3.274"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "2.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.896",
						"yrTerm1Standard.noUpfront": "2.016",
						"yrTerm1Standard.partialUpfront": "1.934",
						"yrTerm3Convertible.allUpfront": "1.515",
						"yrTerm3Convertible.noUpfront": "1.669",
						"yrTerm3Convertible.partialUpfront": "1.546",
						"yrTerm3Standard.allUpfront": "1.259",
						"yrTerm3Standard.noUpfront": "1.452",
						"yrTerm3Standard.partialUpfront": "1.340"
					}
				},
				"mswin": {
					"ondemand": "4.448",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.368",
						"yrTerm1Standard.noUpfront": "3.488",
						"yrTerm1Standard.partialUpfront": "3.406",
						"yrTerm3Convertible.allUpfront": "2.987",
						"yrTerm3Convertible.noUpfront": "3.141",
						"yrTerm3Convertible.partialUpfront": "3.018",
						"yrTerm3Standard.allUpfront": "2.731",
						"yrTerm3Standard.noUpfront": "2.924",
						"yrTerm3Standard.partialUpfront": "2.812"
					}
				},
				"mswinSQL": {
					"ondemand": "13.459",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.379",
						"yrTerm1Standard.noUpfront": "12.499",
						"yrTerm1Standard.partialUpfront": "12.418",
						"yrTerm3Convertible.allUpfront": "11.998",
						"yrTerm3Convertible.noUpfront": "12.152",
						"yrTerm3Convertible.partialUpfront": "12.028",
						"yrTerm3Standard.allUpfront": "11.742",
						"yrTerm3Standard.noUpfront": "11.935",
						"yrTerm3Standard.partialUpfront": "11.822"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.012",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.932",
						"yrTerm1Standard.noUpfront": "4.052",
						"yrTerm1Standard.partialUpfront": "3.970",
						"yrTerm3Convertible.allUpfront": "3.551",
						"yrTerm3Convertible.noUpfront": "3.705",
						"yrTerm3Convertible.partialUpfront": "3.582",
						"yrTerm3Standard.allUpfront": "3.295",
						"yrTerm3Standard.noUpfront": "3.488",
						"yrTerm3Standard.partialUpfront": "3.376"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "2.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.753",
						"yrTerm1Standard.noUpfront": "1.882",
						"yrTerm1Standard.partialUpfront": "1.788",
						"yrTerm3Convertible.allUpfront": "1.406",
						"yrTerm3Convertible.noUpfront": "1.550",
						"yrTerm3Convertible.partialUpfront": "1.436",
						"yrTerm3Standard.allUpfront": "1.164",
						"yrTerm3Standard.noUpfront": "1.348",
						"yrTerm3Standard.partialUpfront": "1.238"
					}
				},
				"mswin": {
					"ondemand": "4.224",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.225",
						"yrTerm1Standard.noUpfront": "3.354",
						"yrTerm1Standard.partialUpfront": "3.260",
						"yrTerm3Convertible.allUpfront": "2.878",
						"yrTerm3Convertible.noUpfront": "3.022",
						"yrTerm3Convertible.partialUpfront": "2.908",
						"yrTerm3Standard.allUpfront": "2.636",
						"yrTerm3Standard.noUpfront": "2.820",
						"yrTerm3Standard.partialUpfront": "2.710"
					}
				},
				"mswinSQL": {
					"ondemand": "13.235",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.236",
						"yrTerm1Standard.noUpfront": "12.365",
						"yrTerm1Standard.partialUpfront": "12.272",
						"yrTerm3Convertible.allUpfront": "11.889",
						"yrTerm3Convertible.noUpfront": "12.033",
						"yrTerm3Convertible.partialUpfront": "11.918",
						"yrTerm3Standard.allUpfront": "11.647",
						"yrTerm3Standard.noUpfront": "11.831",
						"yrTerm3Standard.partialUpfront": "11.722"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.788",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.789",
						"yrTerm1Standard.noUpfront": "3.918",
						"yrTerm1Standard.partialUpfront": "3.824",
						"yrTerm3Convertible.allUpfront": "3.442",
						"yrTerm3Convertible.noUpfront": "3.586",
						"yrTerm3Convertible.partialUpfront": "3.472",
						"yrTerm3Standard.allUpfront": "3.200",
						"yrTerm3Standard.noUpfront": "3.384",
						"yrTerm3Standard.partialUpfront": "3.274"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "2.896",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.845",
						"yrTerm1Standard.noUpfront": "1.982",
						"yrTerm1Standard.partialUpfront": "1.882",
						"yrTerm3Convertible.allUpfront": "1.479",
						"yrTerm3Convertible.noUpfront": "1.629",
						"yrTerm3Convertible.partialUpfront": "1.508",
						"yrTerm3Standard.allUpfront": "1.225",
						"yrTerm3Standard.noUpfront": "1.417",
						"yrTerm3Standard.partialUpfront": "1.304"
					}
				},
				"mswin": {
					"ondemand": "4.368",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.317",
						"yrTerm1Standard.noUpfront": "3.454",
						"yrTerm1Standard.partialUpfront": "3.354",
						"yrTerm3Convertible.allUpfront": "2.951",
						"yrTerm3Convertible.noUpfront": "3.101",
						"yrTerm3Convertible.partialUpfront": "2.980",
						"yrTerm3Standard.allUpfront": "2.697",
						"yrTerm3Standard.noUpfront": "2.889",
						"yrTerm3Standard.partialUpfront": "2.776"
					}
				},
				"mswinSQL": {
					"ondemand": "13.379",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.328",
						"yrTerm1Standard.noUpfront": "12.465",
						"yrTerm1Standard.partialUpfront": "12.366",
						"yrTerm3Convertible.allUpfront": "11.962",
						"yrTerm3Convertible.noUpfront": "12.112",
						"yrTerm3Convertible.partialUpfront": "11.992",
						"yrTerm3Standard.allUpfront": "11.708",
						"yrTerm3Standard.noUpfront": "11.900",
						"yrTerm3Standard.partialUpfront": "11.786"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.932",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.881",
						"yrTerm1Standard.noUpfront": "4.018",
						"yrTerm1Standard.partialUpfront": "3.918",
						"yrTerm3Convertible.allUpfront": "3.515",
						"yrTerm3Convertible.noUpfront": "3.665",
						"yrTerm3Convertible.partialUpfront": "3.544",
						"yrTerm3Standard.allUpfront": "3.261",
						"yrTerm3Standard.noUpfront": "3.453",
						"yrTerm3Standard.partialUpfront": "3.340"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "4.576",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.915",
						"yrTerm1Standard.noUpfront": "3.125",
						"yrTerm1Standard.partialUpfront": "2.974",
						"yrTerm3Convertible.allUpfront": "2.308",
						"yrTerm3Convertible.noUpfront": "2.544",
						"yrTerm3Convertible.partialUpfront": "2.356",
						"yrTerm3Standard.allUpfront": "1.936",
						"yrTerm3Standard.noUpfront": "2.212",
						"yrTerm3Standard.partialUpfront": "2.060"
					}
				},
				"mswin": {
					"ondemand": "6.048",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.387",
						"yrTerm1Standard.noUpfront": "4.597",
						"yrTerm1Standard.partialUpfront": "4.446",
						"yrTerm3Convertible.allUpfront": "3.780",
						"yrTerm3Convertible.noUpfront": "4.016",
						"yrTerm3Convertible.partialUpfront": "3.828",
						"yrTerm3Standard.allUpfront": "3.408",
						"yrTerm3Standard.noUpfront": "3.684",
						"yrTerm3Standard.partialUpfront": "3.532"
					}
				},
				"mswinSQL": {
					"ondemand": "15.059",
					"reserved": {
						"yrTerm1Standard.allUpfront": "13.398",
						"yrTerm1Standard.noUpfront": "13.608",
						"yrTerm1Standard.partialUpfront": "13.458",
						"yrTerm3Convertible.allUpfront": "12.791",
						"yrTerm3Convertible.noUpfront": "13.027",
						"yrTerm3Convertible.partialUpfront": "12.838",
						"yrTerm3Standard.allUpfront": "12.419",
						"yrTerm3Standard.noUpfront": "12.695",
						"yrTerm3Standard.partialUpfront": "12.542"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "6.612",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.951",
						"yrTerm1Standard.noUpfront": "5.161",
						"yrTerm1Standard.partialUpfront": "5.010",
						"yrTerm3Convertible.allUpfront": "4.344",
						"yrTerm3Convertible.noUpfront": "4.580",
						"yrTerm3Convertible.partialUpfront": "4.392",
						"yrTerm3Standard.allUpfront": "3.972",
						"yrTerm3Standard.noUpfront": "4.248",
						"yrTerm3Standard.partialUpfront": "4.096"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "2.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.590",
						"yrTerm1Standard.noUpfront": "1.714",
						"yrTerm1Standard.partialUpfront": "1.622",
						"yrTerm3Convertible.allUpfront": "1.262",
						"yrTerm3Convertible.noUpfront": "1.391",
						"yrTerm3Convertible.partialUpfront": "1.288",
						"yrTerm3Standard.allUpfront": "1.056",
						"yrTerm3Standard.noUpfront": "1.210",
						"yrTerm3Standard.partialUpfront": "1.124"
					}
				},
				"mswin": {
					"ondemand": "3.968",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.062",
						"yrTerm1Standard.noUpfront": "3.186",
						"yrTerm1Standard.partialUpfront": "3.094",
						"yrTerm3Convertible.allUpfront": "2.734",
						"yrTerm3Convertible.noUpfront": "2.863",
						"yrTerm3Convertible.partialUpfront": "2.760",
						"yrTerm3Standard.allUpfront": "2.528",
						"yrTerm3Standard.noUpfront": "2.682",
						"yrTerm3Standard.partialUpfront": "2.596"
					}
				},
				"mswinSQL": {
					"ondemand": "12.979",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.073",
						"yrTerm1Standard.noUpfront": "12.197",
						"yrTerm1Standard.partialUpfront": "12.106",
						"yrTerm3Convertible.allUpfront": "11.745",
						"yrTerm3Convertible.noUpfront": "11.874",
						"yrTerm3Convertible.partialUpfront": "11.772",
						"yrTerm3Standard.allUpfront": "11.539",
						"yrTerm3Standard.noUpfront": "11.693",
						"yrTerm3Standard.partialUpfront": "11.606"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.626",
						"yrTerm1Standard.noUpfront": "3.750",
						"yrTerm1Standard.partialUpfront": "3.658",
						"yrTerm3Convertible.allUpfront": "3.298",
						"yrTerm3Convertible.noUpfront": "3.427",
						"yrTerm3Convertible.partialUpfront": "3.324",
						"yrTerm3Standard.allUpfront": "3.092",
						"yrTerm3Standard.noUpfront": "3.246",
						"yrTerm3Standard.partialUpfront": "3.160"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "2.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.590",
						"yrTerm1Standard.noUpfront": "1.714",
						"yrTerm1Standard.partialUpfront": "1.622",
						"yrTerm3Convertible.allUpfront": "1.262",
						"yrTerm3Convertible.noUpfront": "1.391",
						"yrTerm3Convertible.partialUpfront": "1.288",
						"yrTerm3Standard.allUpfront": "1.056",
						"yrTerm3Standard.noUpfront": "1.210",
						"yrTerm3Standard.partialUpfront": "1.124"
					}
				},
				"mswin": {
					"ondemand": "3.968",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.062",
						"yrTerm1Standard.noUpfront": "3.186",
						"yrTerm1Standard.partialUpfront": "3.094",
						"yrTerm3Convertible.allUpfront": "2.734",
						"yrTerm3Convertible.noUpfront": "2.863",
						"yrTerm3Convertible.partialUpfront": "2.760",
						"yrTerm3Standard.allUpfront": "2.528",
						"yrTerm3Standard.noUpfront": "2.682",
						"yrTerm3Standard.partialUpfront": "2.596"
					}
				},
				"mswinSQL": {
					"ondemand": "12.979",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.073",
						"yrTerm1Standard.noUpfront": "12.197",
						"yrTerm1Standard.partialUpfront": "12.106",
						"yrTerm3Convertible.allUpfront": "11.745",
						"yrTerm3Convertible.noUpfront": "11.874",
						"yrTerm3Convertible.partialUpfront": "11.772",
						"yrTerm3Standard.allUpfront": "11.539",
						"yrTerm3Standard.noUpfront": "11.693",
						"yrTerm3Standard.partialUpfront": "11.606"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.626",
						"yrTerm1Standard.noUpfront": "3.750",
						"yrTerm1Standard.partialUpfront": "3.658",
						"yrTerm3Convertible.allUpfront": "3.298",
						"yrTerm3Convertible.noUpfront": "3.427",
						"yrTerm3Convertible.partialUpfront": "3.324",
						"yrTerm3Standard.allUpfront": "3.092",
						"yrTerm3Standard.noUpfront": "3.246",
						"yrTerm3Standard.partialUpfront": "3.160"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "3.008",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.916",
						"yrTerm1Standard.noUpfront": "2.050",
						"yrTerm1Standard.partialUpfront": "1.956",
						"yrTerm3Convertible.allUpfront": "1.515",
						"yrTerm3Convertible.noUpfront": "1.669",
						"yrTerm3Convertible.partialUpfront": "1.546",
						"yrTerm3Standard.allUpfront": "1.272",
						"yrTerm3Standard.noUpfront": "1.452",
						"yrTerm3Standard.partialUpfront": "1.354"
					}
				},
				"mswin": {
					"ondemand": "4.48",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.388",
						"yrTerm1Standard.noUpfront": "3.522",
						"yrTerm1Standard.partialUpfront": "3.428",
						"yrTerm3Convertible.allUpfront": "2.987",
						"yrTerm3Convertible.noUpfront": "3.141",
						"yrTerm3Convertible.partialUpfront": "3.018",
						"yrTerm3Standard.allUpfront": "2.744",
						"yrTerm3Standard.noUpfront": "2.924",
						"yrTerm3Standard.partialUpfront": "2.826"
					}
				},
				"mswinSQL": {
					"ondemand": "13.491",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.399",
						"yrTerm1Standard.noUpfront": "12.533",
						"yrTerm1Standard.partialUpfront": "12.438",
						"yrTerm3Convertible.allUpfront": "11.998",
						"yrTerm3Convertible.noUpfront": "12.152",
						"yrTerm3Convertible.partialUpfront": "12.028",
						"yrTerm3Standard.allUpfront": "11.755",
						"yrTerm3Standard.noUpfront": "11.935",
						"yrTerm3Standard.partialUpfront": "11.836"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "5.044",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.952",
						"yrTerm1Standard.noUpfront": "4.086",
						"yrTerm1Standard.partialUpfront": "3.992",
						"yrTerm3Convertible.allUpfront": "3.551",
						"yrTerm3Convertible.noUpfront": "3.705",
						"yrTerm3Convertible.partialUpfront": "3.582",
						"yrTerm3Standard.allUpfront": "3.308",
						"yrTerm3Standard.noUpfront": "3.488",
						"yrTerm3Standard.partialUpfront": "3.390"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "2.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.753",
						"yrTerm1Standard.noUpfront": "1.882",
						"yrTerm1Standard.partialUpfront": "1.788",
						"yrTerm3Convertible.allUpfront": "1.406",
						"yrTerm3Convertible.noUpfront": "1.550",
						"yrTerm3Convertible.partialUpfront": "1.436",
						"yrTerm3Standard.allUpfront": "1.164",
						"yrTerm3Standard.noUpfront": "1.348",
						"yrTerm3Standard.partialUpfront": "1.238"
					}
				},
				"mswin": {
					"ondemand": "4.224",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.225",
						"yrTerm1Standard.noUpfront": "3.354",
						"yrTerm1Standard.partialUpfront": "3.260",
						"yrTerm3Convertible.allUpfront": "2.878",
						"yrTerm3Convertible.noUpfront": "3.022",
						"yrTerm3Convertible.partialUpfront": "2.908",
						"yrTerm3Standard.allUpfront": "2.636",
						"yrTerm3Standard.noUpfront": "2.820",
						"yrTerm3Standard.partialUpfront": "2.710"
					}
				},
				"mswinSQL": {
					"ondemand": "13.235",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.236",
						"yrTerm1Standard.noUpfront": "12.365",
						"yrTerm1Standard.partialUpfront": "12.272",
						"yrTerm3Convertible.allUpfront": "11.889",
						"yrTerm3Convertible.noUpfront": "12.033",
						"yrTerm3Convertible.partialUpfront": "11.918",
						"yrTerm3Standard.allUpfront": "11.647",
						"yrTerm3Standard.noUpfront": "11.831",
						"yrTerm3Standard.partialUpfront": "11.722"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.788",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.789",
						"yrTerm1Standard.noUpfront": "3.918",
						"yrTerm1Standard.partialUpfront": "3.824",
						"yrTerm3Convertible.allUpfront": "3.442",
						"yrTerm3Convertible.noUpfront": "3.586",
						"yrTerm3Convertible.partialUpfront": "3.472",
						"yrTerm3Standard.allUpfront": "3.200",
						"yrTerm3Standard.noUpfront": "3.384",
						"yrTerm3Standard.partialUpfront": "3.274"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "2.496",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.590",
						"yrTerm1Standard.noUpfront": "1.714",
						"yrTerm1Standard.partialUpfront": "1.622",
						"yrTerm3Convertible.allUpfront": "1.262",
						"yrTerm3Convertible.noUpfront": "1.391",
						"yrTerm3Convertible.partialUpfront": "1.288",
						"yrTerm3Standard.allUpfront": "1.056",
						"yrTerm3Standard.noUpfront": "1.210",
						"yrTerm3Standard.partialUpfront": "1.124"
					}
				},
				"mswin": {
					"ondemand": "3.968",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.062",
						"yrTerm1Standard.noUpfront": "3.186",
						"yrTerm1Standard.partialUpfront": "3.094",
						"yrTerm3Convertible.allUpfront": "2.734",
						"yrTerm3Convertible.noUpfront": "2.863",
						"yrTerm3Convertible.partialUpfront": "2.760",
						"yrTerm3Standard.allUpfront": "2.528",
						"yrTerm3Standard.noUpfront": "2.682",
						"yrTerm3Standard.partialUpfront": "2.596"
					}
				},
				"mswinSQL": {
					"ondemand": "12.979",
					"reserved": {
						"yrTerm1Standard.allUpfront": "12.073",
						"yrTerm1Standard.noUpfront": "12.197",
						"yrTerm1Standard.partialUpfront": "12.106",
						"yrTerm3Convertible.allUpfront": "11.745",
						"yrTerm3Convertible.noUpfront": "11.874",
						"yrTerm3Convertible.partialUpfront": "11.772",
						"yrTerm3Standard.allUpfront": "11.539",
						"yrTerm3Standard.noUpfront": "11.693",
						"yrTerm3Standard.partialUpfront": "11.606"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "4.532",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.626",
						"yrTerm1Standard.noUpfront": "3.750",
						"yrTerm1Standard.partialUpfront": "3.658",
						"yrTerm3Convertible.allUpfront": "3.298",
						"yrTerm3Convertible.noUpfront": "3.427",
						"yrTerm3Convertible.partialUpfront": "3.324",
						"yrTerm3Standard.allUpfront": "3.092",
						"yrTerm3Standard.noUpfront": "3.246",
						"yrTerm3Standard.partialUpfront": "3.160"
					}
				}
			}
		},
		"storage": {
			"devices": 4,
			"includes_swap_partition": false,
			"nvme_ssd": true,
			"size": 1900,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 32,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": true
	},
	{
		"ECU": 200,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 65000,
		"ebs_max_bandwidth": 14000,
		"ebs_optimized": true,
		"ebs_throughput": 1750,
		"enhanced_networking": true,
		"family": "Storage optimized",
		"generation": "current",
		"instance_type": "i3.16xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [],
		"memory": 488,
		"network_performance": "20 Gigabit",
		"placement_group_support": true,
		"pretty_name": "I3 High I/O 16xlarge",
		"pricing": {
			"ap-northeast-1": {
				"linux": {
					"ondemand": "5.856",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.730",
						"yrTerm1Standard.noUpfront": "3.965",
						"yrTerm1Standard.partialUpfront": "3.806",
						"yrTerm3Convertible.allUpfront": "2.957",
						"yrTerm3Convertible.noUpfront": "3.259",
						"yrTerm3Convertible.partialUpfront": "3.018",
						"yrTerm3Standard.allUpfront": "2.477",
						"yrTerm3Standard.noUpfront": "2.834",
						"yrTerm3Standard.partialUpfront": "2.636"
					}
				},
				"mswin": {
					"ondemand": "8.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.674",
						"yrTerm1Standard.noUpfront": "6.909",
						"yrTerm1Standard.partialUpfront": "6.750",
						"yrTerm3Convertible.allUpfront": "5.901",
						"yrTerm3Convertible.noUpfront": "6.203",
						"yrTerm3Convertible.partialUpfront": "5.962",
						"yrTerm3Standard.allUpfront": "5.421",
						"yrTerm3Standard.noUpfront": "5.778",
						"yrTerm3Standard.partialUpfront": "5.580"
					}
				},
				"mswinSQL": {
					"ondemand": "26.822",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.696",
						"yrTerm1Standard.noUpfront": "24.931",
						"yrTerm1Standard.partialUpfront": "24.772",
						"yrTerm3Convertible.allUpfront": "23.923",
						"yrTerm3Convertible.noUpfront": "24.225",
						"yrTerm3Convertible.partialUpfront": "23.984",
						"yrTerm3Standard.allUpfront": "23.443",
						"yrTerm3Standard.noUpfront": "23.800",
						"yrTerm3Standard.partialUpfront": "23.602"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.927",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.801",
						"yrTerm1Standard.noUpfront": "8.036",
						"yrTerm1Standard.partialUpfront": "7.878",
						"yrTerm3Convertible.allUpfront": "7.028",
						"yrTerm3Convertible.noUpfront": "7.330",
						"yrTerm3Convertible.partialUpfront": "7.088",
						"yrTerm3Standard.allUpfront": "6.548",
						"yrTerm3Standard.noUpfront": "6.905",
						"yrTerm3Standard.partialUpfront": "6.706"
					}
				}
			},
			"ap-northeast-2": {
				"linux": {
					"ondemand": "5.856",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.730",
						"yrTerm1Standard.noUpfront": "3.965",
						"yrTerm1Standard.partialUpfront": "3.806",
						"yrTerm3Convertible.allUpfront": "2.957",
						"yrTerm3Convertible.noUpfront": "3.259",
						"yrTerm3Convertible.partialUpfront": "3.018",
						"yrTerm3Standard.allUpfront": "2.477",
						"yrTerm3Standard.noUpfront": "2.834",
						"yrTerm3Standard.partialUpfront": "2.636"
					}
				},
				"mswin": {
					"ondemand": "8.8",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.674",
						"yrTerm1Standard.noUpfront": "6.909",
						"yrTerm1Standard.partialUpfront": "6.750",
						"yrTerm3Convertible.allUpfront": "5.901",
						"yrTerm3Convertible.noUpfront": "6.203",
						"yrTerm3Convertible.partialUpfront": "5.962",
						"yrTerm3Standard.allUpfront": "5.421",
						"yrTerm3Standard.noUpfront": "5.778",
						"yrTerm3Standard.partialUpfront": "5.580"
					}
				},
				"mswinSQL": {
					"ondemand": "26.822",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.696",
						"yrTerm1Standard.noUpfront": "24.931",
						"yrTerm1Standard.partialUpfront": "24.772",
						"yrTerm3Convertible.allUpfront": "23.923",
						"yrTerm3Convertible.noUpfront": "24.225",
						"yrTerm3Convertible.partialUpfront": "23.984",
						"yrTerm3Standard.allUpfront": "23.443",
						"yrTerm3Standard.noUpfront": "23.800",
						"yrTerm3Standard.partialUpfront": "23.602"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.927",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.801",
						"yrTerm1Standard.noUpfront": "8.036",
						"yrTerm1Standard.partialUpfront": "7.878",
						"yrTerm3Convertible.allUpfront": "7.028",
						"yrTerm3Convertible.noUpfront": "7.330",
						"yrTerm3Convertible.partialUpfront": "7.088",
						"yrTerm3Standard.allUpfront": "6.548",
						"yrTerm3Standard.noUpfront": "6.905",
						"yrTerm3Standard.partialUpfront": "6.706"
					}
				}
			},
			"ap-south-1": {
				"linux": {
					"ondemand": "5.664",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.608",
						"yrTerm1Standard.noUpfront": "3.898",
						"yrTerm1Standard.partialUpfront": "3.682",
						"yrTerm3Convertible.allUpfront": "2.885",
						"yrTerm3Convertible.noUpfront": "3.179",
						"yrTerm3Convertible.partialUpfront": "2.944",
						"yrTerm3Standard.allUpfront": "2.396",
						"yrTerm3Standard.noUpfront": "2.765",
						"yrTerm3Standard.partialUpfront": "2.548"
					}
				},
				"mswin": {
					"ondemand": "8.608",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.552",
						"yrTerm1Standard.noUpfront": "6.842",
						"yrTerm1Standard.partialUpfront": "6.626",
						"yrTerm3Convertible.allUpfront": "5.829",
						"yrTerm3Convertible.noUpfront": "6.123",
						"yrTerm3Convertible.partialUpfront": "5.888",
						"yrTerm3Standard.allUpfront": "5.340",
						"yrTerm3Standard.noUpfront": "5.709",
						"yrTerm3Standard.partialUpfront": "5.492"
					}
				},
				"mswinSQL": {
					"ondemand": "26.63",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.574",
						"yrTerm1Standard.noUpfront": "24.864",
						"yrTerm1Standard.partialUpfront": "24.648",
						"yrTerm3Convertible.allUpfront": "23.851",
						"yrTerm3Convertible.noUpfront": "24.145",
						"yrTerm3Convertible.partialUpfront": "23.910",
						"yrTerm3Standard.allUpfront": "23.362",
						"yrTerm3Standard.noUpfront": "23.731",
						"yrTerm3Standard.partialUpfront": "23.514"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.735",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.679",
						"yrTerm1Standard.noUpfront": "7.969",
						"yrTerm1Standard.partialUpfront": "7.752",
						"yrTerm3Convertible.allUpfront": "6.956",
						"yrTerm3Convertible.noUpfront": "7.250",
						"yrTerm3Convertible.partialUpfront": "7.014",
						"yrTerm3Standard.allUpfront": "6.467",
						"yrTerm3Standard.noUpfront": "6.836",
						"yrTerm3Standard.partialUpfront": "6.620"
					}
				}
			},
			"ap-southeast-1": {
				"linux": {
					"ondemand": "5.984",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.812",
						"yrTerm1Standard.noUpfront": "4.099",
						"yrTerm1Standard.partialUpfront": "3.890",
						"yrTerm3Convertible.allUpfront": "3.029",
						"yrTerm3Convertible.noUpfront": "3.339",
						"yrTerm3Convertible.partialUpfront": "3.092",
						"yrTerm3Standard.allUpfront": "2.531",
						"yrTerm3Standard.noUpfront": "2.903",
						"yrTerm3Standard.partialUpfront": "2.692"
					}
				},
				"mswin": {
					"ondemand": "8.928",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.756",
						"yrTerm1Standard.noUpfront": "7.043",
						"yrTerm1Standard.partialUpfront": "6.834",
						"yrTerm3Convertible.allUpfront": "5.973",
						"yrTerm3Convertible.noUpfront": "6.283",
						"yrTerm3Convertible.partialUpfront": "6.036",
						"yrTerm3Standard.allUpfront": "5.475",
						"yrTerm3Standard.noUpfront": "5.847",
						"yrTerm3Standard.partialUpfront": "5.636"
					}
				},
				"mswinSQL": {
					"ondemand": "26.95",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.778",
						"yrTerm1Standard.noUpfront": "25.065",
						"yrTerm1Standard.partialUpfront": "24.856",
						"yrTerm3Convertible.allUpfront": "23.995",
						"yrTerm3Convertible.noUpfront": "24.305",
						"yrTerm3Convertible.partialUpfront": "24.058",
						"yrTerm3Standard.allUpfront": "23.497",
						"yrTerm3Standard.noUpfront": "23.869",
						"yrTerm3Standard.partialUpfront": "23.658"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "10.055",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.883",
						"yrTerm1Standard.noUpfront": "8.170",
						"yrTerm1Standard.partialUpfront": "7.960",
						"yrTerm3Convertible.allUpfront": "7.100",
						"yrTerm3Convertible.noUpfront": "7.410",
						"yrTerm3Convertible.partialUpfront": "7.162",
						"yrTerm3Standard.allUpfront": "6.602",
						"yrTerm3Standard.noUpfront": "6.974",
						"yrTerm3Standard.partialUpfront": "6.764"
					}
				}
			},
			"ap-southeast-2": {
				"linux": {
					"ondemand": "5.984",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.812",
						"yrTerm1Standard.noUpfront": "4.099",
						"yrTerm1Standard.partialUpfront": "3.890",
						"yrTerm3Convertible.allUpfront": "3.029",
						"yrTerm3Convertible.noUpfront": "3.339",
						"yrTerm3Convertible.partialUpfront": "3.092",
						"yrTerm3Standard.allUpfront": "2.531",
						"yrTerm3Standard.noUpfront": "2.903",
						"yrTerm3Standard.partialUpfront": "2.692"
					}
				},
				"mswin": {
					"ondemand": "8.928",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.756",
						"yrTerm1Standard.noUpfront": "7.043",
						"yrTerm1Standard.partialUpfront": "6.834",
						"yrTerm3Convertible.allUpfront": "5.973",
						"yrTerm3Convertible.noUpfront": "6.283",
						"yrTerm3Convertible.partialUpfront": "6.036",
						"yrTerm3Standard.allUpfront": "5.475",
						"yrTerm3Standard.noUpfront": "5.847",
						"yrTerm3Standard.partialUpfront": "5.636"
					}
				},
				"mswinSQL": {
					"ondemand": "26.95",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.778",
						"yrTerm1Standard.noUpfront": "25.065",
						"yrTerm1Standard.partialUpfront": "24.856",
						"yrTerm3Convertible.allUpfront": "23.995",
						"yrTerm3Convertible.noUpfront": "24.305",
						"yrTerm3Convertible.partialUpfront": "24.058",
						"yrTerm3Standard.allUpfront": "23.497",
						"yrTerm3Standard.noUpfront": "23.869",
						"yrTerm3Standard.partialUpfront": "23.658"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "10.055",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.883",
						"yrTerm1Standard.noUpfront": "8.170",
						"yrTerm1Standard.partialUpfront": "7.960",
						"yrTerm3Convertible.allUpfront": "7.100",
						"yrTerm3Convertible.noUpfront": "7.410",
						"yrTerm3Convertible.partialUpfront": "7.162",
						"yrTerm3Standard.allUpfront": "6.602",
						"yrTerm3Standard.noUpfront": "6.974",
						"yrTerm3Standard.partialUpfront": "6.764"
					}
				}
			},
			"ca-central-1": {
				"linux": {
					"ondemand": "5.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.506",
						"yrTerm1Standard.noUpfront": "3.763",
						"yrTerm1Standard.partialUpfront": "3.578",
						"yrTerm3Convertible.allUpfront": "2.813",
						"yrTerm3Convertible.noUpfront": "3.100",
						"yrTerm3Convertible.partialUpfront": "2.870",
						"yrTerm3Standard.allUpfront": "2.328",
						"yrTerm3Standard.noUpfront": "2.696",
						"yrTerm3Standard.partialUpfront": "2.476"
					}
				},
				"mswin": {
					"ondemand": "8.448",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.450",
						"yrTerm1Standard.noUpfront": "6.707",
						"yrTerm1Standard.partialUpfront": "6.522",
						"yrTerm3Convertible.allUpfront": "5.757",
						"yrTerm3Convertible.noUpfront": "6.044",
						"yrTerm3Convertible.partialUpfront": "5.814",
						"yrTerm3Standard.allUpfront": "5.272",
						"yrTerm3Standard.noUpfront": "5.640",
						"yrTerm3Standard.partialUpfront": "5.420"
					}
				},
				"mswinSQL": {
					"ondemand": "26.47",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.472",
						"yrTerm1Standard.noUpfront": "24.729",
						"yrTerm1Standard.partialUpfront": "24.544",
						"yrTerm3Convertible.allUpfront": "23.779",
						"yrTerm3Convertible.noUpfront": "24.066",
						"yrTerm3Convertible.partialUpfront": "23.836",
						"yrTerm3Standard.allUpfront": "23.294",
						"yrTerm3Standard.noUpfront": "23.662",
						"yrTerm3Standard.partialUpfront": "23.442"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.575",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.577",
						"yrTerm1Standard.noUpfront": "7.834",
						"yrTerm1Standard.partialUpfront": "7.648",
						"yrTerm3Convertible.allUpfront": "6.884",
						"yrTerm3Convertible.noUpfront": "7.171",
						"yrTerm3Convertible.partialUpfront": "6.942",
						"yrTerm3Standard.allUpfront": "6.399",
						"yrTerm3Standard.noUpfront": "6.767",
						"yrTerm3Standard.partialUpfront": "6.548"
					}
				}
			},
			"eu-central-1": {
				"linux": {
					"ondemand": "5.952",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.791",
						"yrTerm1Standard.noUpfront": "4.032",
						"yrTerm1Standard.partialUpfront": "3.868",
						"yrTerm3Convertible.allUpfront": "3.029",
						"yrTerm3Convertible.noUpfront": "3.338",
						"yrTerm3Convertible.partialUpfront": "3.092",
						"yrTerm3Standard.allUpfront": "2.518",
						"yrTerm3Standard.noUpfront": "2.903",
						"yrTerm3Standard.partialUpfront": "2.678"
					}
				},
				"mswin": {
					"ondemand": "8.896",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.735",
						"yrTerm1Standard.noUpfront": "6.976",
						"yrTerm1Standard.partialUpfront": "6.812",
						"yrTerm3Convertible.allUpfront": "5.973",
						"yrTerm3Convertible.noUpfront": "6.282",
						"yrTerm3Convertible.partialUpfront": "6.036",
						"yrTerm3Standard.allUpfront": "5.462",
						"yrTerm3Standard.noUpfront": "5.847",
						"yrTerm3Standard.partialUpfront": "5.622"
					}
				},
				"mswinSQL": {
					"ondemand": "26.918",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.757",
						"yrTerm1Standard.noUpfront": "24.998",
						"yrTerm1Standard.partialUpfront": "24.834",
						"yrTerm3Convertible.allUpfront": "23.995",
						"yrTerm3Convertible.noUpfront": "24.304",
						"yrTerm3Convertible.partialUpfront": "24.058",
						"yrTerm3Standard.allUpfront": "23.484",
						"yrTerm3Standard.noUpfront": "23.869",
						"yrTerm3Standard.partialUpfront": "23.644"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "10.023",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.862",
						"yrTerm1Standard.noUpfront": "8.103",
						"yrTerm1Standard.partialUpfront": "7.940",
						"yrTerm3Convertible.allUpfront": "7.100",
						"yrTerm3Convertible.noUpfront": "7.409",
						"yrTerm3Convertible.partialUpfront": "7.162",
						"yrTerm3Standard.allUpfront": "6.589",
						"yrTerm3Standard.noUpfront": "6.974",
						"yrTerm3Standard.partialUpfront": "6.750"
					}
				}
			},
			"eu-west-1": {
				"linux": {
					"ondemand": "5.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.506",
						"yrTerm1Standard.noUpfront": "3.763",
						"yrTerm1Standard.partialUpfront": "3.578",
						"yrTerm3Convertible.allUpfront": "2.813",
						"yrTerm3Convertible.noUpfront": "3.100",
						"yrTerm3Convertible.partialUpfront": "2.870",
						"yrTerm3Standard.allUpfront": "2.328",
						"yrTerm3Standard.noUpfront": "2.696",
						"yrTerm3Standard.partialUpfront": "2.476"
					}
				},
				"mswin": {
					"ondemand": "8.448",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.450",
						"yrTerm1Standard.noUpfront": "6.707",
						"yrTerm1Standard.partialUpfront": "6.522",
						"yrTerm3Convertible.allUpfront": "5.757",
						"yrTerm3Convertible.noUpfront": "6.044",
						"yrTerm3Convertible.partialUpfront": "5.814",
						"yrTerm3Standard.allUpfront": "5.272",
						"yrTerm3Standard.noUpfront": "5.640",
						"yrTerm3Standard.partialUpfront": "5.420"
					}
				},
				"mswinSQL": {
					"ondemand": "26.47",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.472",
						"yrTerm1Standard.noUpfront": "24.729",
						"yrTerm1Standard.partialUpfront": "24.544",
						"yrTerm3Convertible.allUpfront": "23.779",
						"yrTerm3Convertible.noUpfront": "24.066",
						"yrTerm3Convertible.partialUpfront": "23.836",
						"yrTerm3Standard.allUpfront": "23.294",
						"yrTerm3Standard.noUpfront": "23.662",
						"yrTerm3Standard.partialUpfront": "23.442"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.575",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.577",
						"yrTerm1Standard.noUpfront": "7.834",
						"yrTerm1Standard.partialUpfront": "7.648",
						"yrTerm3Convertible.allUpfront": "6.884",
						"yrTerm3Convertible.noUpfront": "7.171",
						"yrTerm3Convertible.partialUpfront": "6.942",
						"yrTerm3Standard.allUpfront": "6.399",
						"yrTerm3Standard.noUpfront": "6.767",
						"yrTerm3Standard.partialUpfront": "6.548"
					}
				}
			},
			"eu-west-2": {
				"linux": {
					"ondemand": "5.792",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.690",
						"yrTerm1Standard.noUpfront": "3.965",
						"yrTerm1Standard.partialUpfront": "3.764",
						"yrTerm3Convertible.allUpfront": "2.957",
						"yrTerm3Convertible.noUpfront": "3.259",
						"yrTerm3Convertible.partialUpfront": "3.018",
						"yrTerm3Standard.allUpfront": "2.450",
						"yrTerm3Standard.noUpfront": "2.834",
						"yrTerm3Standard.partialUpfront": "2.606"
					}
				},
				"mswin": {
					"ondemand": "8.736",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.634",
						"yrTerm1Standard.noUpfront": "6.909",
						"yrTerm1Standard.partialUpfront": "6.708",
						"yrTerm3Convertible.allUpfront": "5.901",
						"yrTerm3Convertible.noUpfront": "6.203",
						"yrTerm3Convertible.partialUpfront": "5.962",
						"yrTerm3Standard.allUpfront": "5.394",
						"yrTerm3Standard.noUpfront": "5.778",
						"yrTerm3Standard.partialUpfront": "5.550"
					}
				},
				"mswinSQL": {
					"ondemand": "26.758",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.656",
						"yrTerm1Standard.noUpfront": "24.931",
						"yrTerm1Standard.partialUpfront": "24.730",
						"yrTerm3Convertible.allUpfront": "23.923",
						"yrTerm3Convertible.noUpfront": "24.225",
						"yrTerm3Convertible.partialUpfront": "23.984",
						"yrTerm3Standard.allUpfront": "23.416",
						"yrTerm3Standard.noUpfront": "23.800",
						"yrTerm3Standard.partialUpfront": "23.572"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.863",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.761",
						"yrTerm1Standard.noUpfront": "8.036",
						"yrTerm1Standard.partialUpfront": "7.836",
						"yrTerm3Convertible.allUpfront": "7.028",
						"yrTerm3Convertible.noUpfront": "7.330",
						"yrTerm3Convertible.partialUpfront": "7.088",
						"yrTerm3Standard.allUpfront": "6.521",
						"yrTerm3Standard.noUpfront": "6.905",
						"yrTerm3Standard.partialUpfront": "6.678"
					}
				}
			},
			"sa-east-1": {
				"linux": {
					"ondemand": "9.152",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.830",
						"yrTerm1Standard.noUpfront": "6.250",
						"yrTerm1Standard.partialUpfront": "5.948",
						"yrTerm3Convertible.allUpfront": "4.616",
						"yrTerm3Convertible.noUpfront": "5.087",
						"yrTerm3Convertible.partialUpfront": "4.710",
						"yrTerm3Standard.allUpfront": "3.871",
						"yrTerm3Standard.noUpfront": "4.424",
						"yrTerm3Standard.partialUpfront": "4.118"
					}
				},
				"mswin": {
					"ondemand": "12.096",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.774",
						"yrTerm1Standard.noUpfront": "9.194",
						"yrTerm1Standard.partialUpfront": "8.892",
						"yrTerm3Convertible.allUpfront": "7.560",
						"yrTerm3Convertible.noUpfront": "8.031",
						"yrTerm3Convertible.partialUpfront": "7.654",
						"yrTerm3Standard.allUpfront": "6.815",
						"yrTerm3Standard.noUpfront": "7.368",
						"yrTerm3Standard.partialUpfront": "7.062"
					}
				},
				"mswinSQL": {
					"ondemand": "30.118",
					"reserved": {
						"yrTerm1Standard.allUpfront": "26.796",
						"yrTerm1Standard.noUpfront": "27.216",
						"yrTerm1Standard.partialUpfront": "26.914",
						"yrTerm3Convertible.allUpfront": "25.582",
						"yrTerm3Convertible.noUpfront": "26.053",
						"yrTerm3Convertible.partialUpfront": "25.676",
						"yrTerm3Standard.allUpfront": "24.837",
						"yrTerm3Standard.noUpfront": "25.390",
						"yrTerm3Standard.partialUpfront": "25.084"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "13.223",
					"reserved": {
						"yrTerm1Standard.allUpfront": "9.901",
						"yrTerm1Standard.noUpfront": "10.321",
						"yrTerm1Standard.partialUpfront": "10.020",
						"yrTerm3Convertible.allUpfront": "8.687",
						"yrTerm3Convertible.noUpfront": "9.158",
						"yrTerm3Convertible.partialUpfront": "8.782",
						"yrTerm3Standard.allUpfront": "7.942",
						"yrTerm3Standard.noUpfront": "8.495",
						"yrTerm3Standard.partialUpfront": "8.190"
					}
				}
			},
			"us-east-1": {
				"linux": {
					"ondemand": "4.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.180",
						"yrTerm1Standard.noUpfront": "3.427",
						"yrTerm1Standard.partialUpfront": "3.244",
						"yrTerm3Convertible.allUpfront": "2.525",
						"yrTerm3Convertible.noUpfront": "2.782",
						"yrTerm3Convertible.partialUpfront": "2.576",
						"yrTerm3Standard.allUpfront": "2.112",
						"yrTerm3Standard.noUpfront": "2.419",
						"yrTerm3Standard.partialUpfront": "2.246"
					}
				},
				"mswin": {
					"ondemand": "7.936",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.124",
						"yrTerm1Standard.noUpfront": "6.371",
						"yrTerm1Standard.partialUpfront": "6.188",
						"yrTerm3Convertible.allUpfront": "5.469",
						"yrTerm3Convertible.noUpfront": "5.726",
						"yrTerm3Convertible.partialUpfront": "5.520",
						"yrTerm3Standard.allUpfront": "5.056",
						"yrTerm3Standard.noUpfront": "5.363",
						"yrTerm3Standard.partialUpfront": "5.190"
					}
				},
				"mswinSQL": {
					"ondemand": "25.958",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.146",
						"yrTerm1Standard.noUpfront": "24.393",
						"yrTerm1Standard.partialUpfront": "24.210",
						"yrTerm3Convertible.allUpfront": "23.491",
						"yrTerm3Convertible.noUpfront": "23.748",
						"yrTerm3Convertible.partialUpfront": "23.542",
						"yrTerm3Standard.allUpfront": "23.078",
						"yrTerm3Standard.noUpfront": "23.385",
						"yrTerm3Standard.partialUpfront": "23.212"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.063",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.251",
						"yrTerm1Standard.noUpfront": "7.498",
						"yrTerm1Standard.partialUpfront": "7.316",
						"yrTerm3Convertible.allUpfront": "6.596",
						"yrTerm3Convertible.noUpfront": "6.853",
						"yrTerm3Convertible.partialUpfront": "6.648",
						"yrTerm3Standard.allUpfront": "6.183",
						"yrTerm3Standard.noUpfront": "6.490",
						"yrTerm3Standard.partialUpfront": "6.318"
					}
				}
			},
			"us-east-2": {
				"linux": {
					"ondemand": "4.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.180",
						"yrTerm1Standard.noUpfront": "3.427",
						"yrTerm1Standard.partialUpfront": "3.244",
						"yrTerm3Convertible.allUpfront": "2.525",
						"yrTerm3Convertible.noUpfront": "2.782",
						"yrTerm3Convertible.partialUpfront": "2.576",
						"yrTerm3Standard.allUpfront": "2.112",
						"yrTerm3Standard.noUpfront": "2.419",
						"yrTerm3Standard.partialUpfront": "2.246"
					}
				},
				"mswin": {
					"ondemand": "7.936",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.124",
						"yrTerm1Standard.noUpfront": "6.371",
						"yrTerm1Standard.partialUpfront": "6.188",
						"yrTerm3Convertible.allUpfront": "5.469",
						"yrTerm3Convertible.noUpfront": "5.726",
						"yrTerm3Convertible.partialUpfront": "5.520",
						"yrTerm3Standard.allUpfront": "5.056",
						"yrTerm3Standard.noUpfront": "5.363",
						"yrTerm3Standard.partialUpfront": "5.190"
					}
				},
				"mswinSQL": {
					"ondemand": "25.958",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.146",
						"yrTerm1Standard.noUpfront": "24.393",
						"yrTerm1Standard.partialUpfront": "24.210",
						"yrTerm3Convertible.allUpfront": "23.491",
						"yrTerm3Convertible.noUpfront": "23.748",
						"yrTerm3Convertible.partialUpfront": "23.542",
						"yrTerm3Standard.allUpfront": "23.078",
						"yrTerm3Standard.noUpfront": "23.385",
						"yrTerm3Standard.partialUpfront": "23.212"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.063",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.251",
						"yrTerm1Standard.noUpfront": "7.498",
						"yrTerm1Standard.partialUpfront": "7.316",
						"yrTerm3Convertible.allUpfront": "6.596",
						"yrTerm3Convertible.noUpfront": "6.853",
						"yrTerm3Convertible.partialUpfront": "6.648",
						"yrTerm3Standard.allUpfront": "6.183",
						"yrTerm3Standard.noUpfront": "6.490",
						"yrTerm3Standard.partialUpfront": "6.318"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "6.016",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.832",
						"yrTerm1Standard.noUpfront": "4.099",
						"yrTerm1Standard.partialUpfront": "3.910",
						"yrTerm3Convertible.allUpfront": "3.029",
						"yrTerm3Convertible.noUpfront": "3.338",
						"yrTerm3Convertible.partialUpfront": "3.092",
						"yrTerm3Standard.allUpfront": "2.545",
						"yrTerm3Standard.noUpfront": "2.903",
						"yrTerm3Standard.partialUpfront": "2.708"
					}
				},
				"mswin": {
					"ondemand": "8.96",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.776",
						"yrTerm1Standard.noUpfront": "7.043",
						"yrTerm1Standard.partialUpfront": "6.854",
						"yrTerm3Convertible.allUpfront": "5.973",
						"yrTerm3Convertible.noUpfront": "6.282",
						"yrTerm3Convertible.partialUpfront": "6.036",
						"yrTerm3Standard.allUpfront": "5.489",
						"yrTerm3Standard.noUpfront": "5.847",
						"yrTerm3Standard.partialUpfront": "5.652"
					}
				},
				"mswinSQL": {
					"ondemand": "26.982",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.798",
						"yrTerm1Standard.noUpfront": "25.065",
						"yrTerm1Standard.partialUpfront": "24.876",
						"yrTerm3Convertible.allUpfront": "23.995",
						"yrTerm3Convertible.noUpfront": "24.304",
						"yrTerm3Convertible.partialUpfront": "24.058",
						"yrTerm3Standard.allUpfront": "23.511",
						"yrTerm3Standard.noUpfront": "23.869",
						"yrTerm3Standard.partialUpfront": "23.674"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "10.087",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.903",
						"yrTerm1Standard.noUpfront": "8.170",
						"yrTerm1Standard.partialUpfront": "7.982",
						"yrTerm3Convertible.allUpfront": "7.100",
						"yrTerm3Convertible.noUpfront": "7.409",
						"yrTerm3Convertible.partialUpfront": "7.162",
						"yrTerm3Standard.allUpfront": "6.616",
						"yrTerm3Standard.noUpfront": "6.974",
						"yrTerm3Standard.partialUpfront": "6.778"
					}
				}
			},
			"us-west-1": {
				"linux": {
					"ondemand": "5.504",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.506",
						"yrTerm1Standard.noUpfront": "3.763",
						"yrTerm1Standard.partialUpfront": "3.578",
						"yrTerm3Convertible.allUpfront": "2.813",
						"yrTerm3Convertible.noUpfront": "3.100",
						"yrTerm3Convertible.partialUpfront": "2.870",
						"yrTerm3Standard.allUpfront": "2.328",
						"yrTerm3Standard.noUpfront": "2.696",
						"yrTerm3Standard.partialUpfront": "2.476"
					}
				},
				"mswin": {
					"ondemand": "8.448",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.450",
						"yrTerm1Standard.noUpfront": "6.707",
						"yrTerm1Standard.partialUpfront": "6.522",
						"yrTerm3Convertible.allUpfront": "5.757",
						"yrTerm3Convertible.noUpfront": "6.044",
						"yrTerm3Convertible.partialUpfront": "5.814",
						"yrTerm3Standard.allUpfront": "5.272",
						"yrTerm3Standard.noUpfront": "5.640",
						"yrTerm3Standard.partialUpfront": "5.420"
					}
				},
				"mswinSQL": {
					"ondemand": "26.47",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.472",
						"yrTerm1Standard.noUpfront": "24.729",
						"yrTerm1Standard.partialUpfront": "24.544",
						"yrTerm3Convertible.allUpfront": "23.779",
						"yrTerm3Convertible.noUpfront": "24.066",
						"yrTerm3Convertible.partialUpfront": "23.836",
						"yrTerm3Standard.allUpfront": "23.294",
						"yrTerm3Standard.noUpfront": "23.662",
						"yrTerm3Standard.partialUpfront": "23.442"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.575",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.577",
						"yrTerm1Standard.noUpfront": "7.834",
						"yrTerm1Standard.partialUpfront": "7.648",
						"yrTerm3Convertible.allUpfront": "6.884",
						"yrTerm3Convertible.noUpfront": "7.171",
						"yrTerm3Convertible.partialUpfront": "6.942",
						"yrTerm3Standard.allUpfront": "6.399",
						"yrTerm3Standard.noUpfront": "6.767",
						"yrTerm3Standard.partialUpfront": "6.548"
					}
				}
			},
			"us-west-2": {
				"linux": {
					"ondemand": "4.992",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.180",
						"yrTerm1Standard.noUpfront": "3.427",
						"yrTerm1Standard.partialUpfront": "3.244",
						"yrTerm3Convertible.allUpfront": "2.525",
						"yrTerm3Convertible.noUpfront": "2.782",
						"yrTerm3Convertible.partialUpfront": "2.576",
						"yrTerm3Standard.allUpfront": "2.112",
						"yrTerm3Standard.noUpfront": "2.419",
						"yrTerm3Standard.partialUpfront": "2.246"
					}
				},
				"mswin": {
					"ondemand": "7.936",
					"reserved": {
						"yrTerm1Standard.allUpfront": "6.124",
						"yrTerm1Standard.noUpfront": "6.371",
						"yrTerm1Standard.partialUpfront": "6.188",
						"yrTerm3Convertible.allUpfront": "5.469",
						"yrTerm3Convertible.noUpfront": "5.726",
						"yrTerm3Convertible.partialUpfront": "5.520",
						"yrTerm3Standard.allUpfront": "5.056",
						"yrTerm3Standard.noUpfront": "5.363",
						"yrTerm3Standard.partialUpfront": "5.190"
					}
				},
				"mswinSQL": {
					"ondemand": "25.958",
					"reserved": {
						"yrTerm1Standard.allUpfront": "24.146",
						"yrTerm1Standard.noUpfront": "24.393",
						"yrTerm1Standard.partialUpfront": "24.210",
						"yrTerm3Convertible.allUpfront": "23.491",
						"yrTerm3Convertible.noUpfront": "23.748",
						"yrTerm3Convertible.partialUpfront": "23.542",
						"yrTerm3Standard.allUpfront": "23.078",
						"yrTerm3Standard.noUpfront": "23.385",
						"yrTerm3Standard.partialUpfront": "23.212"
					}
				},
				"mswinSQLWeb": {
					"ondemand": "9.063",
					"reserved": {
						"yrTerm1Standard.allUpfront": "7.251",
						"yrTerm1Standard.noUpfront": "7.498",
						"yrTerm1Standard.partialUpfront": "7.316",
						"yrTerm3Convertible.allUpfront": "6.596",
						"yrTerm3Convertible.noUpfront": "6.853",
						"yrTerm3Convertible.partialUpfront": "6.648",
						"yrTerm3Standard.allUpfront": "6.183",
						"yrTerm3Standard.noUpfront": "6.490",
						"yrTerm3Standard.partialUpfront": "6.318"
					}
				}
			}
		},
		"storage": {
			"devices": 8,
			"includes_swap_partition": false,
			"nvme_ssd": true,
			"size": 1900,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 64,
		"vpc": {
			"ips_per_eni": 50,
			"max_enis": 15
		},
		"vpc_only": true
	},
	{
		"ECU": 14,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 6000,
		"ebs_max_bandwidth": 750,
		"ebs_optimized": true,
		"ebs_throughput": 93.75,
		"enhanced_networking": true,
		"family": "Storage optimized",
		"generation": "current",
		"instance_type": "d2.xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 30.5,
		"network_performance": "Moderate",
		"placement_group_support": true,
		"pretty_name": "D2 Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.844",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.443",
						"yrTerm1Standard.noUpfront": "0.529",
						"yrTerm1Standard.partialUpfront": "0.452",
						"yrTerm3Convertible.allUpfront": "0.399",
						"yrTerm3Convertible.noUpfront": "0.476",
						"yrTerm3Convertible.partialUpfront": "0.407",
						"yrTerm3Standard.allUpfront": "0.303",
						"yrTerm3Standard.partialUpfront": "0.322"
					}
				},
				"mswin": {
					"ondemand": "0.975",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.502",
						"yrTerm1Standard.noUpfront": "0.599",
						"yrTerm1Standard.partialUpfront": "0.512",
						"yrTerm3Convertible.allUpfront": "0.457",
						"yrTerm3Convertible.noUpfront": "0.546",
						"yrTerm3Convertible.partialUpfront": "0.467",
						"yrTerm3Standard.allUpfront": "0.359",
						"yrTerm3Standard.partialUpfront": "0.382"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.844",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.443",
						"yrTerm1Standard.noUpfront": "0.529",
						"yrTerm1Standard.partialUpfront": "0.452",
						"yrTerm3Convertible.allUpfront": "0.399",
						"yrTerm3Convertible.noUpfront": "0.476",
						"yrTerm3Convertible.partialUpfront": "0.407",
						"yrTerm3Standard.allUpfront": "0.303",
						"yrTerm3Standard.partialUpfront": "0.322"
					}
				},
				"mswin": {
					"ondemand": "1.028",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.627",
						"yrTerm1Standard.noUpfront": "0.713",
						"yrTerm1Standard.partialUpfront": "0.636",
						"yrTerm3Convertible.allUpfront": "0.583",
						"yrTerm3Convertible.noUpfront": "0.660",
						"yrTerm3Convertible.partialUpfront": "0.591",
						"yrTerm3Standard.allUpfront": "0.487",
						"yrTerm3Standard.partialUpfront": "0.506"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.827",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.408",
						"yrTerm1Standard.noUpfront": "0.488",
						"yrTerm1Standard.partialUpfront": "0.417",
						"yrTerm3Convertible.allUpfront": "0.367",
						"yrTerm3Convertible.noUpfront": "0.439",
						"yrTerm3Convertible.partialUpfront": "0.375",
						"yrTerm3Standard.allUpfront": "0.279",
						"yrTerm3Standard.partialUpfront": "0.297"
					}
				},
				"mswin": {
					"ondemand": "1.011",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.592",
						"yrTerm1Standard.noUpfront": "0.672",
						"yrTerm1Standard.partialUpfront": "0.601",
						"yrTerm3Convertible.allUpfront": "0.551",
						"yrTerm3Convertible.noUpfront": "0.623",
						"yrTerm3Convertible.partialUpfront": "0.559",
						"yrTerm3Standard.allUpfront": "0.463",
						"yrTerm3Standard.partialUpfront": "0.481"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.87",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.430",
						"yrTerm1Standard.noUpfront": "0.513",
						"yrTerm1Standard.partialUpfront": "0.438",
						"yrTerm3Convertible.allUpfront": "0.387",
						"yrTerm3Convertible.noUpfront": "0.462",
						"yrTerm3Convertible.partialUpfront": "0.395",
						"yrTerm3Standard.allUpfront": "0.294",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswin": {
					"ondemand": "1.001",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.489",
						"yrTerm1Standard.noUpfront": "0.584",
						"yrTerm1Standard.partialUpfront": "0.498",
						"yrTerm3Convertible.allUpfront": "0.446",
						"yrTerm3Convertible.noUpfront": "0.533",
						"yrTerm3Convertible.partialUpfront": "0.455",
						"yrTerm3Standard.allUpfront": "0.350",
						"yrTerm3Standard.partialUpfront": "0.372"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.87",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.430",
						"yrTerm1Standard.noUpfront": "0.513",
						"yrTerm1Standard.partialUpfront": "0.438",
						"yrTerm3Convertible.allUpfront": "0.387",
						"yrTerm3Convertible.noUpfront": "0.462",
						"yrTerm3Convertible.partialUpfront": "0.395",
						"yrTerm3Standard.allUpfront": "0.294",
						"yrTerm3Standard.partialUpfront": "0.312"
					}
				},
				"mswin": {
					"ondemand": "1.001",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.489",
						"yrTerm1Standard.noUpfront": "0.584",
						"yrTerm1Standard.partialUpfront": "0.498",
						"yrTerm3Convertible.allUpfront": "0.446",
						"yrTerm3Convertible.noUpfront": "0.533",
						"yrTerm3Convertible.partialUpfront": "0.455",
						"yrTerm3Standard.allUpfront": "0.350",
						"yrTerm3Standard.partialUpfront": "0.372"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.759",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.371",
						"yrTerm1Standard.noUpfront": "0.443",
						"yrTerm1Standard.partialUpfront": "0.378",
						"yrTerm3Convertible.allUpfront": "0.334",
						"yrTerm3Convertible.noUpfront": "0.398",
						"yrTerm3Convertible.partialUpfront": "0.340",
						"yrTerm3Standard.allUpfront": "0.217",
						"yrTerm3Standard.partialUpfront": "0.231"
					}
				},
				"mswin": {
					"ondemand": "0.943",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.555",
						"yrTerm1Standard.noUpfront": "0.627",
						"yrTerm1Standard.partialUpfront": "0.562",
						"yrTerm3Convertible.allUpfront": "0.518",
						"yrTerm3Convertible.noUpfront": "0.582",
						"yrTerm3Convertible.partialUpfront": "0.524",
						"yrTerm3Standard.allUpfront": "0.401",
						"yrTerm3Standard.partialUpfront": "0.415"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.794",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.404",
						"yrTerm1Standard.noUpfront": "0.482",
						"yrTerm1Standard.partialUpfront": "0.412",
						"yrTerm3Convertible.allUpfront": "0.364",
						"yrTerm3Convertible.noUpfront": "0.434",
						"yrTerm3Convertible.partialUpfront": "0.371",
						"yrTerm3Standard.allUpfront": "0.276",
						"yrTerm3Standard.partialUpfront": "0.294"
					}
				},
				"mswin": {
					"ondemand": "0.925",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.463",
						"yrTerm1Standard.noUpfront": "0.553",
						"yrTerm1Standard.partialUpfront": "0.472",
						"yrTerm3Convertible.allUpfront": "0.422",
						"yrTerm3Convertible.noUpfront": "0.505",
						"yrTerm3Convertible.partialUpfront": "0.431",
						"yrTerm3Standard.allUpfront": "0.332",
						"yrTerm3Standard.partialUpfront": "0.354"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.735",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.374",
						"yrTerm1Standard.noUpfront": "0.447",
						"yrTerm1Standard.partialUpfront": "0.382",
						"yrTerm3Convertible.allUpfront": "0.337",
						"yrTerm3Convertible.noUpfront": "0.402",
						"yrTerm3Convertible.partialUpfront": "0.344",
						"yrTerm3Standard.allUpfront": "0.255",
						"yrTerm3Standard.partialUpfront": "0.272"
					}
				},
				"mswin": {
					"ondemand": "0.866",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.433",
						"yrTerm1Standard.noUpfront": "0.517",
						"yrTerm1Standard.partialUpfront": "0.442",
						"yrTerm3Convertible.allUpfront": "0.395",
						"yrTerm3Convertible.noUpfront": "0.472",
						"yrTerm3Convertible.partialUpfront": "0.404",
						"yrTerm3Standard.allUpfront": "0.312",
						"yrTerm3Standard.partialUpfront": "0.332"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.772",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.393",
						"yrTerm1Standard.noUpfront": "0.469",
						"yrTerm1Standard.partialUpfront": "0.401",
						"yrTerm3Convertible.allUpfront": "0.354",
						"yrTerm3Convertible.noUpfront": "0.422",
						"yrTerm3Convertible.partialUpfront": "0.361",
						"yrTerm3Standard.allUpfront": "0.268",
						"yrTerm3Standard.partialUpfront": "0.285"
					}
				},
				"mswin": {
					"ondemand": "0.956",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.577",
						"yrTerm1Standard.noUpfront": "0.653",
						"yrTerm1Standard.partialUpfront": "0.585",
						"yrTerm3Convertible.allUpfront": "0.538",
						"yrTerm3Convertible.noUpfront": "0.606",
						"yrTerm3Convertible.partialUpfront": "0.545",
						"yrTerm3Standard.allUpfront": "0.452",
						"yrTerm3Standard.partialUpfront": "0.469"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.69",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.337",
						"yrTerm1Standard.noUpfront": "0.402",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.303",
						"yrTerm3Convertible.noUpfront": "0.362",
						"yrTerm3Convertible.partialUpfront": "0.310",
						"yrTerm3Standard.allUpfront": "0.198",
						"yrTerm3Standard.partialUpfront": "0.210"
					}
				},
				"mswin": {
					"ondemand": "0.821",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.396",
						"yrTerm1Standard.noUpfront": "0.472",
						"yrTerm1Standard.partialUpfront": "0.404",
						"yrTerm3Convertible.allUpfront": "0.362",
						"yrTerm3Convertible.noUpfront": "0.432",
						"yrTerm3Convertible.partialUpfront": "0.369",
						"yrTerm3Standard.allUpfront": "0.254",
						"yrTerm3Standard.partialUpfront": "0.270"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.69",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.337",
						"yrTerm1Standard.noUpfront": "0.402",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.303",
						"yrTerm3Convertible.noUpfront": "0.362",
						"yrTerm3Convertible.partialUpfront": "0.310",
						"yrTerm3Standard.allUpfront": "0.198",
						"yrTerm3Standard.partialUpfront": "0.210"
					}
				},
				"mswin": {
					"ondemand": "0.821",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.396",
						"yrTerm1Standard.noUpfront": "0.472",
						"yrTerm1Standard.partialUpfront": "0.404",
						"yrTerm3Convertible.allUpfront": "0.362",
						"yrTerm3Convertible.noUpfront": "0.432",
						"yrTerm3Convertible.partialUpfront": "0.369",
						"yrTerm3Standard.allUpfront": "0.254",
						"yrTerm3Standard.partialUpfront": "0.270"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "0.828",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.405",
						"yrTerm1Standard.noUpfront": "0.483",
						"yrTerm1Standard.partialUpfront": "0.414",
						"yrTerm3Convertible.allUpfront": "0.365",
						"yrTerm3Convertible.noUpfront": "0.435",
						"yrTerm3Convertible.partialUpfront": "0.373",
						"yrTerm3Standard.allUpfront": "0.237",
						"yrTerm3Standard.partialUpfront": "0.252"
					}
				},
				"mswin": {
					"ondemand": "0.976",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.555",
						"yrTerm1Standard.noUpfront": "0.633",
						"yrTerm1Standard.partialUpfront": "0.564",
						"yrTerm3Convertible.allUpfront": "0.515",
						"yrTerm3Convertible.noUpfront": "0.585",
						"yrTerm3Convertible.partialUpfront": "0.523",
						"yrTerm3Standard.allUpfront": "0.387",
						"yrTerm3Standard.partialUpfront": "0.402"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.781",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.412",
						"yrTerm1Standard.noUpfront": "0.491",
						"yrTerm1Standard.partialUpfront": "0.420",
						"yrTerm3Convertible.allUpfront": "0.371",
						"yrTerm3Convertible.noUpfront": "0.442",
						"yrTerm3Convertible.partialUpfront": "0.378",
						"yrTerm3Standard.allUpfront": "0.253",
						"yrTerm3Standard.partialUpfront": "0.269"
					}
				},
				"mswin": {
					"ondemand": "0.965",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.596",
						"yrTerm1Standard.noUpfront": "0.675",
						"yrTerm1Standard.partialUpfront": "0.604",
						"yrTerm3Convertible.allUpfront": "0.555",
						"yrTerm3Convertible.noUpfront": "0.626",
						"yrTerm3Convertible.partialUpfront": "0.562",
						"yrTerm3Standard.allUpfront": "0.437",
						"yrTerm3Standard.partialUpfront": "0.453"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "0.69",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.337",
						"yrTerm1Standard.noUpfront": "0.402",
						"yrTerm1Standard.partialUpfront": "0.344",
						"yrTerm3Convertible.allUpfront": "0.303",
						"yrTerm3Convertible.noUpfront": "0.362",
						"yrTerm3Convertible.partialUpfront": "0.310",
						"yrTerm3Standard.allUpfront": "0.198",
						"yrTerm3Standard.partialUpfront": "0.210"
					}
				},
				"mswin": {
					"ondemand": "0.821",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.396",
						"yrTerm1Standard.noUpfront": "0.472",
						"yrTerm1Standard.partialUpfront": "0.404",
						"yrTerm3Convertible.allUpfront": "0.362",
						"yrTerm3Convertible.noUpfront": "0.432",
						"yrTerm3Convertible.partialUpfront": "0.369",
						"yrTerm3Standard.allUpfront": "0.254",
						"yrTerm3Standard.partialUpfront": "0.270"
					}
				}
			}
		},
		"storage": {
			"devices": 3,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 2000,
			"ssd": false,
			"storage_needs_initialization": false,
			"trim_support": false
		},
		"vCPU": 4,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 28,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 8000,
		"ebs_max_bandwidth": 1000,
		"ebs_optimized": true,
		"ebs_throughput": 125,
		"enhanced_networking": true,
		"family": "Storage optimized",
		"generation": "current",
		"instance_type": "d2.2xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 61,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "D2 Double Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.688",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.886",
						"yrTerm1Standard.noUpfront": "1.058",
						"yrTerm1Standard.partialUpfront": "0.904",
						"yrTerm3Convertible.allUpfront": "0.797",
						"yrTerm3Convertible.noUpfront": "0.952",
						"yrTerm3Convertible.partialUpfront": "0.813",
						"yrTerm3Standard.allUpfront": "0.605",
						"yrTerm3Standard.partialUpfront": "0.644"
					}
				},
				"mswin": {
					"ondemand": "1.909",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.953",
						"yrTerm1Standard.noUpfront": "1.138",
						"yrTerm1Standard.partialUpfront": "0.972",
						"yrTerm3Convertible.allUpfront": "0.865",
						"yrTerm3Convertible.noUpfront": "1.032",
						"yrTerm3Convertible.partialUpfront": "0.882",
						"yrTerm3Standard.allUpfront": "0.670",
						"yrTerm3Standard.partialUpfront": "0.713"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.688",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.886",
						"yrTerm1Standard.noUpfront": "1.058",
						"yrTerm1Standard.partialUpfront": "0.904",
						"yrTerm3Convertible.allUpfront": "0.797",
						"yrTerm3Convertible.noUpfront": "0.952",
						"yrTerm3Convertible.partialUpfront": "0.813",
						"yrTerm3Standard.allUpfront": "0.605",
						"yrTerm3Standard.partialUpfront": "0.644"
					}
				},
				"mswin": {
					"ondemand": "2.056",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.254",
						"yrTerm1Standard.noUpfront": "1.426",
						"yrTerm1Standard.partialUpfront": "1.272",
						"yrTerm3Convertible.allUpfront": "1.165",
						"yrTerm3Convertible.noUpfront": "1.320",
						"yrTerm3Convertible.partialUpfront": "1.181",
						"yrTerm3Standard.allUpfront": "0.973",
						"yrTerm3Standard.partialUpfront": "1.012"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.653",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.816",
						"yrTerm1Standard.noUpfront": "0.975",
						"yrTerm1Standard.partialUpfront": "0.833",
						"yrTerm3Convertible.allUpfront": "0.734",
						"yrTerm3Convertible.noUpfront": "0.878",
						"yrTerm3Convertible.partialUpfront": "0.750",
						"yrTerm3Standard.allUpfront": "0.558",
						"yrTerm3Standard.partialUpfront": "0.593"
					}
				},
				"mswin": {
					"ondemand": "2.021",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.184",
						"yrTerm1Standard.noUpfront": "1.343",
						"yrTerm1Standard.partialUpfront": "1.201",
						"yrTerm3Convertible.allUpfront": "1.102",
						"yrTerm3Convertible.noUpfront": "1.246",
						"yrTerm3Convertible.partialUpfront": "1.118",
						"yrTerm3Standard.allUpfront": "0.926",
						"yrTerm3Standard.partialUpfront": "0.961"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.74",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.859",
						"yrTerm1Standard.noUpfront": "1.026",
						"yrTerm1Standard.partialUpfront": "0.877",
						"yrTerm3Convertible.allUpfront": "0.773",
						"yrTerm3Convertible.noUpfront": "0.923",
						"yrTerm3Convertible.partialUpfront": "0.789",
						"yrTerm3Standard.allUpfront": "0.587",
						"yrTerm3Standard.partialUpfront": "0.625"
					}
				},
				"mswin": {
					"ondemand": "1.961",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.927",
						"yrTerm1Standard.noUpfront": "1.107",
						"yrTerm1Standard.partialUpfront": "0.946",
						"yrTerm3Convertible.allUpfront": "0.841",
						"yrTerm3Convertible.noUpfront": "1.004",
						"yrTerm3Convertible.partialUpfront": "0.858",
						"yrTerm3Standard.allUpfront": "0.652",
						"yrTerm3Standard.partialUpfront": "0.694"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.74",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.859",
						"yrTerm1Standard.noUpfront": "1.026",
						"yrTerm1Standard.partialUpfront": "0.877",
						"yrTerm3Convertible.allUpfront": "0.773",
						"yrTerm3Convertible.noUpfront": "0.923",
						"yrTerm3Convertible.partialUpfront": "0.789",
						"yrTerm3Standard.allUpfront": "0.587",
						"yrTerm3Standard.partialUpfront": "0.625"
					}
				},
				"mswin": {
					"ondemand": "1.961",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.927",
						"yrTerm1Standard.noUpfront": "1.107",
						"yrTerm1Standard.partialUpfront": "0.946",
						"yrTerm3Convertible.allUpfront": "0.841",
						"yrTerm3Convertible.noUpfront": "1.004",
						"yrTerm3Convertible.partialUpfront": "0.858",
						"yrTerm3Standard.allUpfront": "0.652",
						"yrTerm3Standard.partialUpfront": "0.694"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.518",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.741",
						"yrTerm1Standard.noUpfront": "0.885",
						"yrTerm1Standard.partialUpfront": "0.757",
						"yrTerm3Convertible.allUpfront": "0.667",
						"yrTerm3Convertible.noUpfront": "0.797",
						"yrTerm3Convertible.partialUpfront": "0.681",
						"yrTerm3Standard.allUpfront": "0.435",
						"yrTerm3Standard.partialUpfront": "0.463"
					}
				},
				"mswin": {
					"ondemand": "1.886",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.109",
						"yrTerm1Standard.noUpfront": "1.253",
						"yrTerm1Standard.partialUpfront": "1.125",
						"yrTerm3Convertible.allUpfront": "1.035",
						"yrTerm3Convertible.noUpfront": "1.165",
						"yrTerm3Convertible.partialUpfront": "1.049",
						"yrTerm3Standard.allUpfront": "0.803",
						"yrTerm3Standard.partialUpfront": "0.831"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.588",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.808",
						"yrTerm1Standard.noUpfront": "0.964",
						"yrTerm1Standard.partialUpfront": "0.824",
						"yrTerm3Convertible.allUpfront": "0.727",
						"yrTerm3Convertible.noUpfront": "0.868",
						"yrTerm3Convertible.partialUpfront": "0.742",
						"yrTerm3Standard.allUpfront": "0.552",
						"yrTerm3Standard.partialUpfront": "0.587"
					}
				},
				"mswin": {
					"ondemand": "1.809",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.876",
						"yrTerm1Standard.noUpfront": "1.045",
						"yrTerm1Standard.partialUpfront": "0.894",
						"yrTerm3Convertible.allUpfront": "0.795",
						"yrTerm3Convertible.noUpfront": "0.949",
						"yrTerm3Convertible.partialUpfront": "0.811",
						"yrTerm3Standard.allUpfront": "0.617",
						"yrTerm3Standard.partialUpfront": "0.656"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.47",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.748",
						"yrTerm1Standard.noUpfront": "0.894",
						"yrTerm1Standard.partialUpfront": "0.764",
						"yrTerm3Convertible.allUpfront": "0.674",
						"yrTerm3Convertible.noUpfront": "0.805",
						"yrTerm3Convertible.partialUpfront": "0.687",
						"yrTerm3Standard.allUpfront": "0.511",
						"yrTerm3Standard.partialUpfront": "0.544"
					}
				},
				"mswin": {
					"ondemand": "1.691",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.816",
						"yrTerm1Standard.noUpfront": "0.974",
						"yrTerm1Standard.partialUpfront": "0.832",
						"yrTerm3Convertible.allUpfront": "0.741",
						"yrTerm3Convertible.noUpfront": "0.885",
						"yrTerm3Convertible.partialUpfront": "0.756",
						"yrTerm3Standard.allUpfront": "0.576",
						"yrTerm3Standard.partialUpfront": "0.612"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.544",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.786",
						"yrTerm1Standard.noUpfront": "0.938",
						"yrTerm1Standard.partialUpfront": "0.802",
						"yrTerm3Convertible.allUpfront": "0.707",
						"yrTerm3Convertible.noUpfront": "0.844",
						"yrTerm3Convertible.partialUpfront": "0.722",
						"yrTerm3Standard.allUpfront": "0.536",
						"yrTerm3Standard.partialUpfront": "0.571"
					}
				},
				"mswin": {
					"ondemand": "1.912",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.154",
						"yrTerm1Standard.noUpfront": "1.306",
						"yrTerm1Standard.partialUpfront": "1.170",
						"yrTerm3Convertible.allUpfront": "1.075",
						"yrTerm3Convertible.noUpfront": "1.212",
						"yrTerm3Convertible.partialUpfront": "1.090",
						"yrTerm3Standard.allUpfront": "0.904",
						"yrTerm3Standard.partialUpfront": "0.939"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.38",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.674",
						"yrTerm1Standard.noUpfront": "0.804",
						"yrTerm1Standard.partialUpfront": "0.688",
						"yrTerm3Convertible.allUpfront": "0.607",
						"yrTerm3Convertible.noUpfront": "0.724",
						"yrTerm3Convertible.partialUpfront": "0.619",
						"yrTerm3Standard.allUpfront": "0.395",
						"yrTerm3Standard.partialUpfront": "0.421"
					}
				},
				"mswin": {
					"ondemand": "1.601",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.742",
						"yrTerm1Standard.noUpfront": "0.885",
						"yrTerm1Standard.partialUpfront": "0.756",
						"yrTerm3Convertible.allUpfront": "0.674",
						"yrTerm3Convertible.noUpfront": "0.805",
						"yrTerm3Convertible.partialUpfront": "0.688",
						"yrTerm3Standard.allUpfront": "0.460",
						"yrTerm3Standard.partialUpfront": "0.490"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.38",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.674",
						"yrTerm1Standard.noUpfront": "0.804",
						"yrTerm1Standard.partialUpfront": "0.688",
						"yrTerm3Convertible.allUpfront": "0.607",
						"yrTerm3Convertible.noUpfront": "0.724",
						"yrTerm3Convertible.partialUpfront": "0.619",
						"yrTerm3Standard.allUpfront": "0.395",
						"yrTerm3Standard.partialUpfront": "0.421"
					}
				},
				"mswin": {
					"ondemand": "1.601",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.742",
						"yrTerm1Standard.noUpfront": "0.885",
						"yrTerm1Standard.partialUpfront": "0.756",
						"yrTerm3Convertible.allUpfront": "0.674",
						"yrTerm3Convertible.noUpfront": "0.805",
						"yrTerm3Convertible.partialUpfront": "0.688",
						"yrTerm3Standard.allUpfront": "0.460",
						"yrTerm3Standard.partialUpfront": "0.490"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "1.656",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.808",
						"yrTerm1Standard.noUpfront": "0.965",
						"yrTerm1Standard.partialUpfront": "0.826",
						"yrTerm3Convertible.allUpfront": "0.727",
						"yrTerm3Convertible.noUpfront": "0.869",
						"yrTerm3Convertible.partialUpfront": "0.743",
						"yrTerm3Standard.allUpfront": "0.475",
						"yrTerm3Standard.partialUpfront": "0.506"
					}
				},
				"mswin": {
					"ondemand": "1.952",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.108",
						"yrTerm1Standard.noUpfront": "1.265",
						"yrTerm1Standard.partialUpfront": "1.126",
						"yrTerm3Convertible.allUpfront": "1.027",
						"yrTerm3Convertible.noUpfront": "1.169",
						"yrTerm3Convertible.partialUpfront": "1.043",
						"yrTerm3Standard.allUpfront": "0.775",
						"yrTerm3Standard.partialUpfront": "0.806"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.563",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.823",
						"yrTerm1Standard.noUpfront": "0.983",
						"yrTerm1Standard.partialUpfront": "0.840",
						"yrTerm3Convertible.allUpfront": "0.741",
						"yrTerm3Convertible.noUpfront": "0.885",
						"yrTerm3Convertible.partialUpfront": "0.756",
						"yrTerm3Standard.allUpfront": "0.506",
						"yrTerm3Standard.partialUpfront": "0.538"
					}
				},
				"mswin": {
					"ondemand": "1.931",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.191",
						"yrTerm1Standard.noUpfront": "1.351",
						"yrTerm1Standard.partialUpfront": "1.208",
						"yrTerm3Convertible.allUpfront": "1.109",
						"yrTerm3Convertible.noUpfront": "1.253",
						"yrTerm3Convertible.partialUpfront": "1.124",
						"yrTerm3Standard.allUpfront": "0.874",
						"yrTerm3Standard.partialUpfront": "0.906"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "1.38",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.674",
						"yrTerm1Standard.noUpfront": "0.804",
						"yrTerm1Standard.partialUpfront": "0.688",
						"yrTerm3Convertible.allUpfront": "0.607",
						"yrTerm3Convertible.noUpfront": "0.724",
						"yrTerm3Convertible.partialUpfront": "0.619",
						"yrTerm3Standard.allUpfront": "0.395",
						"yrTerm3Standard.partialUpfront": "0.421"
					}
				},
				"mswin": {
					"ondemand": "1.601",
					"reserved": {
						"yrTerm1Standard.allUpfront": "0.742",
						"yrTerm1Standard.noUpfront": "0.885",
						"yrTerm1Standard.partialUpfront": "0.756",
						"yrTerm3Convertible.allUpfront": "0.674",
						"yrTerm3Convertible.noUpfront": "0.805",
						"yrTerm3Convertible.partialUpfront": "0.688",
						"yrTerm3Standard.allUpfront": "0.460",
						"yrTerm3Standard.partialUpfront": "0.490"
					}
				}
			}
		},
		"storage": {
			"devices": 6,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 2000,
			"ssd": false,
			"storage_needs_initialization": false,
			"trim_support": false
		},
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 56,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 16000,
		"ebs_max_bandwidth": 2000,
		"ebs_optimized": true,
		"ebs_throughput": 250,
		"enhanced_networking": true,
		"family": "Storage optimized",
		"generation": "current",
		"instance_type": "d2.4xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 122,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "D2 Quadruple Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.772",
						"yrTerm1Standard.noUpfront": "2.116",
						"yrTerm1Standard.partialUpfront": "1.808",
						"yrTerm3Convertible.allUpfront": "1.595",
						"yrTerm3Convertible.noUpfront": "1.904",
						"yrTerm3Convertible.partialUpfront": "1.627",
						"yrTerm3Standard.allUpfront": "1.211",
						"yrTerm3Standard.partialUpfront": "1.288"
					}
				},
				"mswin": {
					"ondemand": "3.678",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.839",
						"yrTerm1Standard.noUpfront": "2.196",
						"yrTerm1Standard.partialUpfront": "1.876",
						"yrTerm3Convertible.allUpfront": "1.662",
						"yrTerm3Convertible.noUpfront": "1.984",
						"yrTerm3Convertible.partialUpfront": "1.696",
						"yrTerm3Standard.allUpfront": "1.275",
						"yrTerm3Standard.partialUpfront": "1.356"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.376",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.772",
						"yrTerm1Standard.noUpfront": "2.115",
						"yrTerm1Standard.partialUpfront": "1.808",
						"yrTerm3Convertible.allUpfront": "1.594",
						"yrTerm3Convertible.noUpfront": "1.904",
						"yrTerm3Convertible.partialUpfront": "1.627",
						"yrTerm3Standard.allUpfront": "1.211",
						"yrTerm3Standard.partialUpfront": "1.288"
					}
				},
				"mswin": {
					"ondemand": "4.112",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.508",
						"yrTerm1Standard.noUpfront": "2.851",
						"yrTerm1Standard.partialUpfront": "2.544",
						"yrTerm3Convertible.allUpfront": "2.330",
						"yrTerm3Convertible.noUpfront": "2.640",
						"yrTerm3Convertible.partialUpfront": "2.363",
						"yrTerm3Standard.allUpfront": "1.947",
						"yrTerm3Standard.partialUpfront": "2.024"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.306",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.633",
						"yrTerm1Standard.noUpfront": "1.949",
						"yrTerm1Standard.partialUpfront": "1.666",
						"yrTerm3Convertible.allUpfront": "1.470",
						"yrTerm3Convertible.noUpfront": "1.754",
						"yrTerm3Convertible.partialUpfront": "1.499",
						"yrTerm3Standard.allUpfront": "1.115",
						"yrTerm3Standard.partialUpfront": "1.187"
					}
				},
				"mswin": {
					"ondemand": "4.042",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.369",
						"yrTerm1Standard.noUpfront": "2.685",
						"yrTerm1Standard.partialUpfront": "2.402",
						"yrTerm3Convertible.allUpfront": "2.206",
						"yrTerm3Convertible.noUpfront": "2.490",
						"yrTerm3Convertible.partialUpfront": "2.235",
						"yrTerm3Standard.allUpfront": "1.851",
						"yrTerm3Standard.partialUpfront": "1.923"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.48",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.719",
						"yrTerm1Standard.noUpfront": "2.052",
						"yrTerm1Standard.partialUpfront": "1.754",
						"yrTerm3Convertible.allUpfront": "1.547",
						"yrTerm3Convertible.noUpfront": "1.847",
						"yrTerm3Convertible.partialUpfront": "1.578",
						"yrTerm3Standard.allUpfront": "1.174",
						"yrTerm3Standard.partialUpfront": "1.249"
					}
				},
				"mswin": {
					"ondemand": "3.782",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.786",
						"yrTerm1Standard.noUpfront": "2.132",
						"yrTerm1Standard.partialUpfront": "1.822",
						"yrTerm3Convertible.allUpfront": "1.614",
						"yrTerm3Convertible.noUpfront": "1.927",
						"yrTerm3Convertible.partialUpfront": "1.647",
						"yrTerm3Standard.allUpfront": "1.239",
						"yrTerm3Standard.partialUpfront": "1.318"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.48",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.719",
						"yrTerm1Standard.noUpfront": "2.052",
						"yrTerm1Standard.partialUpfront": "1.754",
						"yrTerm3Convertible.allUpfront": "1.547",
						"yrTerm3Convertible.noUpfront": "1.847",
						"yrTerm3Convertible.partialUpfront": "1.578",
						"yrTerm3Standard.allUpfront": "1.174",
						"yrTerm3Standard.partialUpfront": "1.249"
					}
				},
				"mswin": {
					"ondemand": "3.782",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.786",
						"yrTerm1Standard.noUpfront": "2.132",
						"yrTerm1Standard.partialUpfront": "1.822",
						"yrTerm3Convertible.allUpfront": "1.614",
						"yrTerm3Convertible.noUpfront": "1.927",
						"yrTerm3Convertible.partialUpfront": "1.647",
						"yrTerm3Standard.allUpfront": "1.239",
						"yrTerm3Standard.partialUpfront": "1.318"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.036",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.483",
						"yrTerm1Standard.noUpfront": "1.771",
						"yrTerm1Standard.partialUpfront": "1.513",
						"yrTerm3Convertible.allUpfront": "1.335",
						"yrTerm3Convertible.noUpfront": "1.594",
						"yrTerm3Convertible.partialUpfront": "1.362",
						"yrTerm3Standard.allUpfront": "0.870",
						"yrTerm3Standard.partialUpfront": "0.925"
					}
				},
				"mswin": {
					"ondemand": "3.772",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.219",
						"yrTerm1Standard.noUpfront": "2.507",
						"yrTerm1Standard.partialUpfront": "2.249",
						"yrTerm3Convertible.allUpfront": "2.071",
						"yrTerm3Convertible.noUpfront": "2.330",
						"yrTerm3Convertible.partialUpfront": "2.098",
						"yrTerm3Standard.allUpfront": "1.606",
						"yrTerm3Standard.partialUpfront": "1.661"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.176",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.616",
						"yrTerm1Standard.noUpfront": "1.928",
						"yrTerm1Standard.partialUpfront": "1.649",
						"yrTerm3Convertible.allUpfront": "1.454",
						"yrTerm3Convertible.noUpfront": "1.735",
						"yrTerm3Convertible.partialUpfront": "1.484",
						"yrTerm3Standard.allUpfront": "1.104",
						"yrTerm3Standard.partialUpfront": "1.175"
					}
				},
				"mswin": {
					"ondemand": "3.478",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.683",
						"yrTerm1Standard.noUpfront": "2.010",
						"yrTerm1Standard.partialUpfront": "1.718",
						"yrTerm3Convertible.allUpfront": "1.522",
						"yrTerm3Convertible.noUpfront": "1.817",
						"yrTerm3Convertible.partialUpfront": "1.553",
						"yrTerm3Standard.allUpfront": "1.169",
						"yrTerm3Standard.partialUpfront": "1.244"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.94",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.497",
						"yrTerm1Standard.noUpfront": "1.788",
						"yrTerm1Standard.partialUpfront": "1.528",
						"yrTerm3Convertible.allUpfront": "1.347",
						"yrTerm3Convertible.noUpfront": "1.609",
						"yrTerm3Convertible.partialUpfront": "1.375",
						"yrTerm3Standard.allUpfront": "1.022",
						"yrTerm3Standard.partialUpfront": "1.087"
					}
				},
				"mswin": {
					"ondemand": "3.242",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.565",
						"yrTerm1Standard.noUpfront": "1.868",
						"yrTerm1Standard.partialUpfront": "1.596",
						"yrTerm3Convertible.allUpfront": "1.415",
						"yrTerm3Convertible.noUpfront": "1.689",
						"yrTerm3Convertible.partialUpfront": "1.444",
						"yrTerm3Standard.allUpfront": "1.087",
						"yrTerm3Standard.partialUpfront": "1.156"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.087",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.572",
						"yrTerm1Standard.noUpfront": "1.877",
						"yrTerm1Standard.partialUpfront": "1.604",
						"yrTerm3Convertible.allUpfront": "1.415",
						"yrTerm3Convertible.noUpfront": "1.689",
						"yrTerm3Convertible.partialUpfront": "1.444",
						"yrTerm3Standard.allUpfront": "1.073",
						"yrTerm3Standard.partialUpfront": "1.141"
					}
				},
				"mswin": {
					"ondemand": "3.823",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.308",
						"yrTerm1Standard.noUpfront": "2.613",
						"yrTerm1Standard.partialUpfront": "2.340",
						"yrTerm3Convertible.allUpfront": "2.151",
						"yrTerm3Convertible.noUpfront": "2.425",
						"yrTerm3Convertible.partialUpfront": "2.180",
						"yrTerm3Standard.allUpfront": "1.809",
						"yrTerm3Standard.partialUpfront": "1.877"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.76",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.348",
						"yrTerm1Standard.noUpfront": "1.608",
						"yrTerm1Standard.partialUpfront": "1.376",
						"yrTerm3Convertible.allUpfront": "1.213",
						"yrTerm3Convertible.noUpfront": "1.447",
						"yrTerm3Convertible.partialUpfront": "1.238",
						"yrTerm3Standard.allUpfront": "0.791",
						"yrTerm3Standard.partialUpfront": "0.841"
					}
				},
				"mswin": {
					"ondemand": "3.062",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.416",
						"yrTerm1Standard.noUpfront": "1.690",
						"yrTerm1Standard.partialUpfront": "1.444",
						"yrTerm3Convertible.allUpfront": "1.281",
						"yrTerm3Convertible.noUpfront": "1.529",
						"yrTerm3Convertible.partialUpfront": "1.307",
						"yrTerm3Standard.allUpfront": "0.856",
						"yrTerm3Standard.partialUpfront": "0.910"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.76",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.348",
						"yrTerm1Standard.noUpfront": "1.608",
						"yrTerm1Standard.partialUpfront": "1.376",
						"yrTerm3Convertible.allUpfront": "1.213",
						"yrTerm3Convertible.noUpfront": "1.447",
						"yrTerm3Convertible.partialUpfront": "1.238",
						"yrTerm3Standard.allUpfront": "0.791",
						"yrTerm3Standard.partialUpfront": "0.841"
					}
				},
				"mswin": {
					"ondemand": "3.062",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.416",
						"yrTerm1Standard.noUpfront": "1.690",
						"yrTerm1Standard.partialUpfront": "1.444",
						"yrTerm3Convertible.allUpfront": "1.281",
						"yrTerm3Convertible.noUpfront": "1.529",
						"yrTerm3Convertible.partialUpfront": "1.307",
						"yrTerm3Standard.allUpfront": "0.856",
						"yrTerm3Standard.partialUpfront": "0.910"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "3.312",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.618",
						"yrTerm1Standard.noUpfront": "1.932",
						"yrTerm1Standard.partialUpfront": "1.651",
						"yrTerm3Convertible.allUpfront": "1.456",
						"yrTerm3Convertible.noUpfront": "1.739",
						"yrTerm3Convertible.partialUpfront": "1.486",
						"yrTerm3Standard.allUpfront": "0.948",
						"yrTerm3Standard.partialUpfront": "1.009"
					}
				},
				"mswin": {
					"ondemand": "3.904",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.218",
						"yrTerm1Standard.noUpfront": "2.532",
						"yrTerm1Standard.partialUpfront": "2.251",
						"yrTerm3Convertible.allUpfront": "2.056",
						"yrTerm3Convertible.noUpfront": "2.339",
						"yrTerm3Convertible.partialUpfront": "2.086",
						"yrTerm3Standard.allUpfront": "1.548",
						"yrTerm3Standard.partialUpfront": "1.609"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "3.125",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.646",
						"yrTerm1Standard.noUpfront": "1.966",
						"yrTerm1Standard.partialUpfront": "1.680",
						"yrTerm3Convertible.allUpfront": "1.481",
						"yrTerm3Convertible.noUpfront": "1.769",
						"yrTerm3Convertible.partialUpfront": "1.512",
						"yrTerm3Standard.allUpfront": "1.010",
						"yrTerm3Standard.partialUpfront": "1.075"
					}
				},
				"mswin": {
					"ondemand": "3.861",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.382",
						"yrTerm1Standard.noUpfront": "2.702",
						"yrTerm1Standard.partialUpfront": "2.416",
						"yrTerm3Convertible.allUpfront": "2.217",
						"yrTerm3Convertible.noUpfront": "2.505",
						"yrTerm3Convertible.partialUpfront": "2.248",
						"yrTerm3Standard.allUpfront": "1.746",
						"yrTerm3Standard.partialUpfront": "1.811"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "2.76",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.348",
						"yrTerm1Standard.noUpfront": "1.608",
						"yrTerm1Standard.partialUpfront": "1.376",
						"yrTerm3Convertible.allUpfront": "1.213",
						"yrTerm3Convertible.noUpfront": "1.447",
						"yrTerm3Convertible.partialUpfront": "1.238",
						"yrTerm3Standard.allUpfront": "0.791",
						"yrTerm3Standard.partialUpfront": "0.841"
					}
				},
				"mswin": {
					"ondemand": "3.062",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.416",
						"yrTerm1Standard.noUpfront": "1.690",
						"yrTerm1Standard.partialUpfront": "1.444",
						"yrTerm3Convertible.allUpfront": "1.281",
						"yrTerm3Convertible.noUpfront": "1.529",
						"yrTerm3Convertible.partialUpfront": "1.307",
						"yrTerm3Standard.allUpfront": "0.856",
						"yrTerm3Standard.partialUpfront": "0.910"
					}
				}
			}
		},
		"storage": {
			"devices": 12,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 2000,
			"ssd": false,
			"storage_needs_initialization": false,
			"trim_support": false
		},
		"vCPU": 16,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 116,
		"FPGA": 0,
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 32000,
		"ebs_max_bandwidth": 4000,
		"ebs_optimized": true,
		"ebs_throughput": 500,
		"enhanced_networking": true,
		"family": "Storage optimized",
		"generation": "current",
		"instance_type": "d2.8xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [
			"HVM"
		],
		"memory": 244,
		"network_performance": "10 Gigabit",
		"placement_group_support": true,
		"pretty_name": "D2 Eight Extra Large",
		"pricing": {
			"ap-northeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "6.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.543",
						"yrTerm1Standard.noUpfront": "4.232",
						"yrTerm1Standard.partialUpfront": "3.615",
						"yrTerm3Convertible.allUpfront": "3.189",
						"yrTerm3Convertible.noUpfront": "3.809",
						"yrTerm3Convertible.partialUpfront": "3.254",
						"yrTerm3Standard.allUpfront": "2.421",
						"yrTerm3Standard.partialUpfront": "2.576"
					}
				},
				"mswin": {
					"ondemand": "7.43",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.611",
						"yrTerm1Standard.noUpfront": "4.311",
						"yrTerm1Standard.partialUpfront": "3.684",
						"yrTerm3Convertible.allUpfront": "3.256",
						"yrTerm3Convertible.noUpfront": "3.888",
						"yrTerm3Convertible.partialUpfront": "3.323",
						"yrTerm3Standard.allUpfront": "2.486",
						"yrTerm3Standard.partialUpfront": "2.644"
					}
				}
			},
			"ap-northeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "6.752",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.543",
						"yrTerm1Standard.noUpfront": "4.230",
						"yrTerm1Standard.partialUpfront": "3.615",
						"yrTerm3Convertible.allUpfront": "3.189",
						"yrTerm3Convertible.noUpfront": "3.807",
						"yrTerm3Convertible.partialUpfront": "3.254",
						"yrTerm3Standard.allUpfront": "2.421",
						"yrTerm3Standard.partialUpfront": "2.576"
					}
				},
				"mswin": {
					"ondemand": "8.408",
					"reserved": {
						"yrTerm1Standard.allUpfront": "5.199",
						"yrTerm1Standard.noUpfront": "5.886",
						"yrTerm1Standard.partialUpfront": "5.271",
						"yrTerm3Convertible.allUpfront": "4.845",
						"yrTerm3Convertible.noUpfront": "5.463",
						"yrTerm3Convertible.partialUpfront": "4.910",
						"yrTerm3Standard.allUpfront": "4.077",
						"yrTerm3Standard.partialUpfront": "4.232"
					}
				}
			},
			"ap-south-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "6.612",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.265",
						"yrTerm1Standard.noUpfront": "3.898",
						"yrTerm1Standard.partialUpfront": "3.332",
						"yrTerm3Convertible.allUpfront": "2.939",
						"yrTerm3Convertible.noUpfront": "3.508",
						"yrTerm3Convertible.partialUpfront": "2.999",
						"yrTerm3Standard.allUpfront": "2.231",
						"yrTerm3Standard.partialUpfront": "2.373"
					}
				},
				"mswin": {
					"ondemand": "8.268",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.921",
						"yrTerm1Standard.noUpfront": "5.554",
						"yrTerm1Standard.partialUpfront": "4.988",
						"yrTerm3Convertible.allUpfront": "4.595",
						"yrTerm3Convertible.noUpfront": "5.164",
						"yrTerm3Convertible.partialUpfront": "4.655",
						"yrTerm3Standard.allUpfront": "3.887",
						"yrTerm3Standard.partialUpfront": "4.029"
					}
				}
			},
			"ap-southeast-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "6.96",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.437",
						"yrTerm1Standard.noUpfront": "4.104",
						"yrTerm1Standard.partialUpfront": "3.507",
						"yrTerm3Convertible.allUpfront": "3.094",
						"yrTerm3Convertible.noUpfront": "3.694",
						"yrTerm3Convertible.partialUpfront": "3.157",
						"yrTerm3Standard.allUpfront": "2.348",
						"yrTerm3Standard.partialUpfront": "2.498"
					}
				},
				"mswin": {
					"ondemand": "7.638",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.505",
						"yrTerm1Standard.noUpfront": "4.184",
						"yrTerm1Standard.partialUpfront": "3.576",
						"yrTerm3Convertible.allUpfront": "3.161",
						"yrTerm3Convertible.noUpfront": "3.774",
						"yrTerm3Convertible.partialUpfront": "3.225",
						"yrTerm3Standard.allUpfront": "2.413",
						"yrTerm3Standard.partialUpfront": "2.566"
					}
				}
			},
			"ap-southeast-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "6.96",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.437",
						"yrTerm1Standard.noUpfront": "4.104",
						"yrTerm1Standard.partialUpfront": "3.507",
						"yrTerm3Convertible.allUpfront": "3.094",
						"yrTerm3Convertible.noUpfront": "3.694",
						"yrTerm3Convertible.partialUpfront": "3.157",
						"yrTerm3Standard.allUpfront": "2.348",
						"yrTerm3Standard.partialUpfront": "2.498"
					}
				},
				"mswin": {
					"ondemand": "7.638",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.505",
						"yrTerm1Standard.noUpfront": "4.184",
						"yrTerm1Standard.partialUpfront": "3.576",
						"yrTerm3Convertible.allUpfront": "3.161",
						"yrTerm3Convertible.noUpfront": "3.774",
						"yrTerm3Convertible.partialUpfront": "3.225",
						"yrTerm3Standard.allUpfront": "2.413",
						"yrTerm3Standard.partialUpfront": "2.566"
					}
				}
			},
			"ca-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "6.072",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.966",
						"yrTerm1Standard.noUpfront": "3.541",
						"yrTerm1Standard.partialUpfront": "3.026",
						"yrTerm3Convertible.allUpfront": "2.669",
						"yrTerm3Convertible.noUpfront": "3.187",
						"yrTerm3Convertible.partialUpfront": "2.724",
						"yrTerm3Standard.allUpfront": "1.739",
						"yrTerm3Standard.partialUpfront": "1.851"
					}
				},
				"mswin": {
					"ondemand": "7.728",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.622",
						"yrTerm1Standard.noUpfront": "5.197",
						"yrTerm1Standard.partialUpfront": "4.682",
						"yrTerm3Convertible.allUpfront": "4.325",
						"yrTerm3Convertible.noUpfront": "4.843",
						"yrTerm3Convertible.partialUpfront": "4.380",
						"yrTerm3Standard.allUpfront": "3.395",
						"yrTerm3Standard.partialUpfront": "3.506"
					}
				}
			},
			"eu-central-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "6.352",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.232",
						"yrTerm1Standard.noUpfront": "3.856",
						"yrTerm1Standard.partialUpfront": "3.297",
						"yrTerm3Convertible.allUpfront": "2.909",
						"yrTerm3Convertible.noUpfront": "3.470",
						"yrTerm3Convertible.partialUpfront": "2.968",
						"yrTerm3Standard.allUpfront": "2.208",
						"yrTerm3Standard.partialUpfront": "2.349"
					}
				},
				"mswin": {
					"ondemand": "7.03",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.299",
						"yrTerm1Standard.noUpfront": "3.939",
						"yrTerm1Standard.partialUpfront": "3.366",
						"yrTerm3Convertible.allUpfront": "2.976",
						"yrTerm3Convertible.noUpfront": "3.553",
						"yrTerm3Convertible.partialUpfront": "3.036",
						"yrTerm3Standard.allUpfront": "2.273",
						"yrTerm3Standard.partialUpfront": "2.418"
					}
				}
			},
			"eu-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "5.88",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.994",
						"yrTerm1Standard.noUpfront": "3.576",
						"yrTerm1Standard.partialUpfront": "3.055",
						"yrTerm3Convertible.allUpfront": "2.694",
						"yrTerm3Convertible.noUpfront": "3.218",
						"yrTerm3Convertible.partialUpfront": "2.749",
						"yrTerm3Standard.allUpfront": "2.044",
						"yrTerm3Standard.partialUpfront": "2.174"
					}
				},
				"mswin": {
					"ondemand": "6.558",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.484",
						"yrTerm1Standard.noUpfront": "4.159",
						"yrTerm1Standard.partialUpfront": "3.555",
						"yrTerm3Convertible.allUpfront": "3.184",
						"yrTerm3Convertible.noUpfront": "3.801",
						"yrTerm3Convertible.partialUpfront": "3.249",
						"yrTerm3Standard.allUpfront": "2.108",
						"yrTerm3Standard.partialUpfront": "2.242"
					}
				}
			},
			"eu-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "6.174",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.143",
						"yrTerm1Standard.noUpfront": "3.753",
						"yrTerm1Standard.partialUpfront": "3.208",
						"yrTerm3Convertible.allUpfront": "2.829",
						"yrTerm3Convertible.noUpfront": "3.378",
						"yrTerm3Convertible.partialUpfront": "2.887",
						"yrTerm3Standard.allUpfront": "2.146",
						"yrTerm3Standard.partialUpfront": "2.282"
					}
				},
				"mswin": {
					"ondemand": "7.83",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.799",
						"yrTerm1Standard.noUpfront": "5.409",
						"yrTerm1Standard.partialUpfront": "4.864",
						"yrTerm3Convertible.allUpfront": "4.485",
						"yrTerm3Convertible.noUpfront": "5.034",
						"yrTerm3Convertible.partialUpfront": "4.543",
						"yrTerm3Standard.allUpfront": "3.802",
						"yrTerm3Standard.partialUpfront": "3.939"
					}
				}
			},
			"us-east-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "5.52",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.696",
						"yrTerm1Standard.noUpfront": "3.216",
						"yrTerm1Standard.partialUpfront": "2.751",
						"yrTerm3Convertible.allUpfront": "2.426",
						"yrTerm3Convertible.noUpfront": "2.894",
						"yrTerm3Convertible.partialUpfront": "2.476",
						"yrTerm3Standard.allUpfront": "1.581",
						"yrTerm3Standard.partialUpfront": "1.682"
					}
				},
				"mswin": {
					"ondemand": "6.198",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.764",
						"yrTerm1Standard.noUpfront": "3.300",
						"yrTerm1Standard.partialUpfront": "2.820",
						"yrTerm3Convertible.allUpfront": "2.494",
						"yrTerm3Convertible.noUpfront": "2.978",
						"yrTerm3Convertible.partialUpfront": "2.545",
						"yrTerm3Standard.allUpfront": "1.646",
						"yrTerm3Standard.partialUpfront": "1.752"
					}
				}
			},
			"us-east-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "5.52",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.696",
						"yrTerm1Standard.noUpfront": "3.216",
						"yrTerm1Standard.partialUpfront": "2.751",
						"yrTerm3Convertible.allUpfront": "2.426",
						"yrTerm3Convertible.noUpfront": "2.894",
						"yrTerm3Convertible.partialUpfront": "2.476",
						"yrTerm3Standard.allUpfront": "1.581",
						"yrTerm3Standard.partialUpfront": "1.682"
					}
				},
				"mswin": {
					"ondemand": "6.198",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.764",
						"yrTerm1Standard.noUpfront": "3.300",
						"yrTerm1Standard.partialUpfront": "2.820",
						"yrTerm3Convertible.allUpfront": "2.494",
						"yrTerm3Convertible.noUpfront": "2.978",
						"yrTerm3Convertible.partialUpfront": "2.545",
						"yrTerm3Standard.allUpfront": "1.646",
						"yrTerm3Standard.partialUpfront": "1.752"
					}
				}
			},
			"us-gov-west-1": {
				"linux": {
					"ondemand": "6.624",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.236",
						"yrTerm1Standard.noUpfront": "3.863",
						"yrTerm1Standard.partialUpfront": "3.302",
						"yrTerm3Convertible.allUpfront": "2.912",
						"yrTerm3Convertible.noUpfront": "3.477",
						"yrTerm3Convertible.partialUpfront": "2.972",
						"yrTerm3Standard.allUpfront": "1.898",
						"yrTerm3Standard.partialUpfront": "2.020"
					}
				},
				"mswin": {
					"ondemand": "7.956",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.586",
						"yrTerm1Standard.noUpfront": "5.213",
						"yrTerm1Standard.partialUpfront": "4.652",
						"yrTerm3Convertible.allUpfront": "4.262",
						"yrTerm3Convertible.noUpfront": "4.827",
						"yrTerm3Convertible.partialUpfront": "4.322",
						"yrTerm3Standard.allUpfront": "3.248",
						"yrTerm3Standard.partialUpfront": "3.370"
					}
				}
			},
			"us-west-1": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "6.25",
					"reserved": {
						"yrTerm1Standard.allUpfront": "3.293",
						"yrTerm1Standard.noUpfront": "3.931",
						"yrTerm1Standard.partialUpfront": "3.360",
						"yrTerm3Convertible.allUpfront": "2.964",
						"yrTerm3Convertible.noUpfront": "3.538",
						"yrTerm3Convertible.partialUpfront": "3.024",
						"yrTerm3Standard.allUpfront": "2.021",
						"yrTerm3Standard.partialUpfront": "2.150"
					}
				},
				"mswin": {
					"ondemand": "7.906",
					"reserved": {
						"yrTerm1Standard.allUpfront": "4.949",
						"yrTerm1Standard.noUpfront": "5.587",
						"yrTerm1Standard.partialUpfront": "5.016",
						"yrTerm3Convertible.allUpfront": "4.620",
						"yrTerm3Convertible.noUpfront": "5.194",
						"yrTerm3Convertible.partialUpfront": "4.680",
						"yrTerm3Standard.allUpfront": "3.677",
						"yrTerm3Standard.partialUpfront": "3.806"
					}
				}
			},
			"us-west-2": {
				"ebs": "0.00",
				"linux": {
					"ondemand": "5.52",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.696",
						"yrTerm1Standard.noUpfront": "3.216",
						"yrTerm1Standard.partialUpfront": "2.751",
						"yrTerm3Convertible.allUpfront": "2.426",
						"yrTerm3Convertible.noUpfront": "2.894",
						"yrTerm3Convertible.partialUpfront": "2.476",
						"yrTerm3Standard.allUpfront": "1.581",
						"yrTerm3Standard.partialUpfront": "1.682"
					}
				},
				"mswin": {
					"ondemand": "6.198",
					"reserved": {
						"yrTerm1Standard.allUpfront": "2.764",
						"yrTerm1Standard.noUpfront": "3.300",
						"yrTerm1Standard.partialUpfront": "2.820",
						"yrTerm3Convertible.allUpfront": "2.494",
						"yrTerm3Convertible.noUpfront": "2.978",
						"yrTerm3Convertible.partialUpfront": "2.545",
						"yrTerm3Standard.allUpfront": "1.646",
						"yrTerm3Standard.partialUpfront": "1.752"
					}
				}
			}
		},
		"storage": {
			"devices": 24,
			"includes_swap_partition": false,
			"nvme_ssd": false,
			"size": 2000,
			"ssd": false,
			"storage_needs_initialization": false,
			"trim_support": false
		},
		"vCPU": 36,
		"vpc": {
			"ips_per_eni": 30,
			"max_enis": 8
		},
		"vpc_only": false
	},
	{
		"ECU": 26,
		"FPGA": "1",
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 12000,
		"ebs_max_bandwidth": 1700,
		"ebs_optimized": true,
		"ebs_throughput": 200,
		"enhanced_networking": true,
		"family": "Accelerated computing",
		"generation": "current",
		"instance_type": "f1.2xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [],
		"memory": 122,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "F1 Double Extra Large",
		"pricing": {
			"us-east-1": {
				"linux": {
					"ondemand": "1.65",
					"reserved": {
						"yrTerm1Standard.allUpfront": "1.041",
						"yrTerm1Standard.noUpfront": "1.116",
						"yrTerm1Standard.partialUpfront": "1.062",
						"yrTerm3Convertible.allUpfront": "0.859",
						"yrTerm3Convertible.noUpfront": "0.947",
						"yrTerm3Convertible.partialUpfront": "0.877",
						"yrTerm3Standard.allUpfront": "0.717",
						"yrTerm3Standard.noUpfront": "0.824",
						"yrTerm3Standard.partialUpfront": "0.762"
					}
				}
			}
		},
		"storage": {
			"devices": 1,
			"includes_swap_partition": false,
			"nvme_ssd": true,
			"size": 470,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 8,
		"vpc": {
			"ips_per_eni": 15,
			"max_enis": 4
		},
		"vpc_only": false
	},
	{
		"ECU": 188,
		"FPGA": "8",
		"GPU": 0,
		"arch": [
			"x86_64"
		],
		"base_performance": null,
		"burst_minutes": null,
		"ebs_iops": 75000,
		"ebs_max_bandwidth": 14000,
		"ebs_optimized": true,
		"ebs_throughput": 1750,
		"enhanced_networking": true,
		"family": "Accelerated computing",
		"generation": "current",
		"instance_type": "f1.16xlarge",
		"ipv6_support": true,
		"linux_virtualization_types": [],
		"memory": 976,
		"network_performance": "High",
		"placement_group_support": true,
		"pretty_name": "F1 16xlarge",
		"pricing": {
			"us-east-1": {
				"linux": {
					"ondemand": "13.2",
					"reserved": {
						"yrTerm1Standard.allUpfront": "8.330",
						"yrTerm1Standard.noUpfront": "8.925",
						"yrTerm1Standard.partialUpfront": "8.500",
						"yrTerm3Convertible.allUpfront": "6.875",
						"yrTerm3Convertible.noUpfront": "7.576",
						"yrTerm3Convertible.partialUpfront": "7.015",
						"yrTerm3Standard.allUpfront": "5.734",
						"yrTerm3Standard.noUpfront": "6.588",
						"yrTerm3Standard.partialUpfront": "6.100"
					}
				}
			}
		},
		"storage": {
			"devices": 4,
			"includes_swap_partition": false,
			"nvme_ssd": true,
			"size": 940,
			"ssd": true,
			"storage_needs_initialization": false,
			"trim_support": true
		},
		"vCPU": 64,
		"vpc": {
			"ips_per_eni": 50,
			"max_enis": 8
		},
		"vpc_only": false
	}
];

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global, setImmediate) { /* @preserve
               * The MIT License (MIT)
               * 
               * Copyright (c) 2013-2017 Petka Antonov
               * 
               * Permission is hereby granted, free of charge, to any person obtaining a copy
               * of this software and associated documentation files (the "Software"), to deal
               * in the Software without restriction, including without limitation the rights
               * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
               * copies of the Software, and to permit persons to whom the Software is
               * furnished to do so, subject to the following conditions:
               * 
               * The above copyright notice and this permission notice shall be included in
               * all copies or substantial portions of the Software.
               * 
               * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
               * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
               * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
               * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
               * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
               * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
               * THE SOFTWARE.
               * 
               */
/**
                   * bluebird build version 3.5.0
                   * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
                  */
!function (e) {if (true) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {var f;"undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), f.Promise = e();}}(function () {var define, module, exports;return function e(t, n, r) {function s(o, u) {if (!n[o]) {if (!t[o]) {var a = typeof _dereq_ == "function" && _dereq_;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;}var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {var n = t[o][1][e];return s(n ? n : e);}, l, l.exports, e, t, n, r);}return n[o].exports;}var i = typeof _dereq_ == "function" && _dereq_;for (var o = 0; o < r.length; o++) s(r[o]);return s;}({ 1: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise) {
                var SomePromiseArray = Promise._SomePromiseArray;
                function any(promises) {
                    var ret = new SomePromiseArray(promises);
                    var promise = ret.promise();
                    ret.setHowMany(1);
                    ret.setUnwrap();
                    ret.init();
                    return promise;
                }

                Promise.any = function (promises) {
                    return any(promises);
                };

                Promise.prototype.any = function () {
                    return any(this);
                };

            };

        }, {}], 2: [function (_dereq_, module, exports) {
            "use strict";
            var firstLineError;
            try {throw new Error();} catch (e) {firstLineError = e;}
            var schedule = _dereq_("./schedule");
            var Queue = _dereq_("./queue");
            var util = _dereq_("./util");

            function Async() {
                this._customScheduler = false;
                this._isTickUsed = false;
                this._lateQueue = new Queue(16);
                this._normalQueue = new Queue(16);
                this._haveDrainedQueues = false;
                this._trampolineEnabled = true;
                var self = this;
                this.drainQueues = function () {
                    self._drainQueues();
                };
                this._schedule = schedule;
            }

            Async.prototype.setScheduler = function (fn) {
                var prev = this._schedule;
                this._schedule = fn;
                this._customScheduler = true;
                return prev;
            };

            Async.prototype.hasCustomScheduler = function () {
                return this._customScheduler;
            };

            Async.prototype.enableTrampoline = function () {
                this._trampolineEnabled = true;
            };

            Async.prototype.disableTrampolineIfNecessary = function () {
                if (util.hasDevTools) {
                    this._trampolineEnabled = false;
                }
            };

            Async.prototype.haveItemsQueued = function () {
                return this._isTickUsed || this._haveDrainedQueues;
            };


            Async.prototype.fatalError = function (e, isNode) {
                if (isNode) {
                    process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
                    "\n");
                    process.exit(2);
                } else {
                    this.throwLater(e);
                }
            };

            Async.prototype.throwLater = function (fn, arg) {
                if (arguments.length === 1) {
                    arg = fn;
                    fn = function () {throw arg;};
                }
                if (typeof setTimeout !== "undefined") {
                    setTimeout(function () {
                        fn(arg);
                    }, 0);
                } else try {
                    this._schedule(function () {
                        fn(arg);
                    });
                } catch (e) {
                    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                }
            };

            function AsyncInvokeLater(fn, receiver, arg) {
                this._lateQueue.push(fn, receiver, arg);
                this._queueTick();
            }

            function AsyncInvoke(fn, receiver, arg) {
                this._normalQueue.push(fn, receiver, arg);
                this._queueTick();
            }

            function AsyncSettlePromises(promise) {
                this._normalQueue._pushOne(promise);
                this._queueTick();
            }

            if (!util.hasDevTools) {
                Async.prototype.invokeLater = AsyncInvokeLater;
                Async.prototype.invoke = AsyncInvoke;
                Async.prototype.settlePromises = AsyncSettlePromises;
            } else {
                Async.prototype.invokeLater = function (fn, receiver, arg) {
                    if (this._trampolineEnabled) {
                        AsyncInvokeLater.call(this, fn, receiver, arg);
                    } else {
                        this._schedule(function () {
                            setTimeout(function () {
                                fn.call(receiver, arg);
                            }, 100);
                        });
                    }
                };

                Async.prototype.invoke = function (fn, receiver, arg) {
                    if (this._trampolineEnabled) {
                        AsyncInvoke.call(this, fn, receiver, arg);
                    } else {
                        this._schedule(function () {
                            fn.call(receiver, arg);
                        });
                    }
                };

                Async.prototype.settlePromises = function (promise) {
                    if (this._trampolineEnabled) {
                        AsyncSettlePromises.call(this, promise);
                    } else {
                        this._schedule(function () {
                            promise._settlePromises();
                        });
                    }
                };
            }

            Async.prototype._drainQueue = function (queue) {
                while (queue.length() > 0) {
                    var fn = queue.shift();
                    if (typeof fn !== "function") {
                        fn._settlePromises();
                        continue;
                    }
                    var receiver = queue.shift();
                    var arg = queue.shift();
                    fn.call(receiver, arg);
                }
            };

            Async.prototype._drainQueues = function () {
                this._drainQueue(this._normalQueue);
                this._reset();
                this._haveDrainedQueues = true;
                this._drainQueue(this._lateQueue);
            };

            Async.prototype._queueTick = function () {
                if (!this._isTickUsed) {
                    this._isTickUsed = true;
                    this._schedule(this.drainQueues);
                }
            };

            Async.prototype._reset = function () {
                this._isTickUsed = false;
            };

            module.exports = Async;
            module.exports.firstLineError = firstLineError;

        }, { "./queue": 26, "./schedule": 29, "./util": 36 }], 3: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, debug) {
                var calledBind = false;
                var rejectThis = function (_, e) {
                    this._reject(e);
                };

                var targetRejected = function (e, context) {
                    context.promiseRejectionQueued = true;
                    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
                };

                var bindingResolved = function (thisArg, context) {
                    if ((this._bitField & 50397184) === 0) {
                        this._resolveCallback(context.target);
                    }
                };

                var bindingRejected = function (e, context) {
                    if (!context.promiseRejectionQueued) this._reject(e);
                };

                Promise.prototype.bind = function (thisArg) {
                    if (!calledBind) {
                        calledBind = true;
                        Promise.prototype._propagateFrom = debug.propagateFromFunction();
                        Promise.prototype._boundValue = debug.boundValueFunction();
                    }
                    var maybePromise = tryConvertToPromise(thisArg);
                    var ret = new Promise(INTERNAL);
                    ret._propagateFrom(this, 1);
                    var target = this._target();
                    ret._setBoundTo(maybePromise);
                    if (maybePromise instanceof Promise) {
                        var context = {
                            promiseRejectionQueued: false,
                            promise: ret,
                            target: target,
                            bindingPromise: maybePromise };

                        target._then(INTERNAL, targetRejected, undefined, ret, context);
                        maybePromise._then(
                        bindingResolved, bindingRejected, undefined, ret, context);
                        ret._setOnCancel(maybePromise);
                    } else {
                        ret._resolveCallback(target);
                    }
                    return ret;
                };

                Promise.prototype._setBoundTo = function (obj) {
                    if (obj !== undefined) {
                        this._bitField = this._bitField | 2097152;
                        this._boundTo = obj;
                    } else {
                        this._bitField = this._bitField & ~2097152;
                    }
                };

                Promise.prototype._isBound = function () {
                    return (this._bitField & 2097152) === 2097152;
                };

                Promise.bind = function (thisArg, value) {
                    return Promise.resolve(value).bind(thisArg);
                };
            };

        }, {}], 4: [function (_dereq_, module, exports) {
            "use strict";
            var old;
            if (typeof Promise !== "undefined") old = Promise;
            function noConflict() {
                try {if (Promise === bluebird) Promise = old;}
                catch (e) {}
                return bluebird;
            }
            var bluebird = _dereq_("./promise")();
            bluebird.noConflict = noConflict;
            module.exports = bluebird;

        }, { "./promise": 22 }], 5: [function (_dereq_, module, exports) {
            "use strict";
            var cr = Object.create;
            if (cr) {
                var callerCache = cr(null);
                var getterCache = cr(null);
                callerCache[" size"] = getterCache[" size"] = 0;
            }

            module.exports = function (Promise) {
                var util = _dereq_("./util");
                var canEvaluate = util.canEvaluate;
                var isIdentifier = util.isIdentifier;

                var getMethodCaller;
                var getGetter;
                if (false) {
                    var makeMethodCaller = function (methodName) {
                        return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
                    };

                    var makeGetter = function (propertyName) {
                        return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
                    };

                    var getCompiled = function (name, compiler, cache) {
                        var ret = cache[name];
                        if (typeof ret !== "function") {
                            if (!isIdentifier(name)) {
                                return null;
                            }
                            ret = compiler(name);
                            cache[name] = ret;
                            cache[" size"]++;
                            if (cache[" size"] > 512) {
                                var keys = Object.keys(cache);
                                for (var i = 0; i < 256; ++i) delete cache[keys[i]];
                                cache[" size"] = keys.length - 256;
                            }
                        }
                        return ret;
                    };

                    getMethodCaller = function (name) {
                        return getCompiled(name, makeMethodCaller, callerCache);
                    };

                    getGetter = function (name) {
                        return getCompiled(name, makeGetter, getterCache);
                    };
                }

                function ensureMethod(obj, methodName) {
                    var fn;
                    if (obj != null) fn = obj[methodName];
                    if (typeof fn !== "function") {
                        var message = "Object " + util.classString(obj) + " has no method '" +
                        util.toString(methodName) + "'";
                        throw new Promise.TypeError(message);
                    }
                    return fn;
                }

                function caller(obj) {
                    var methodName = this.pop();
                    var fn = ensureMethod(obj, methodName);
                    return fn.apply(obj, this);
                }
                Promise.prototype.call = function (methodName) {
                    var args = [].slice.call(arguments, 1);;
                    if (false) {
                        if (canEvaluate) {
                            var maybeCaller = getMethodCaller(methodName);
                            if (maybeCaller !== null) {
                                return this._then(
                                maybeCaller, undefined, undefined, args, undefined);
                            }
                        }
                    }
                    args.push(methodName);
                    return this._then(caller, undefined, undefined, args, undefined);
                };

                function namedGetter(obj) {
                    return obj[this];
                }
                function indexedGetter(obj) {
                    var index = +this;
                    if (index < 0) index = Math.max(0, index + obj.length);
                    return obj[index];
                }
                Promise.prototype.get = function (propertyName) {
                    var isIndex = typeof propertyName === "number";
                    var getter;
                    if (!isIndex) {
                        if (canEvaluate) {
                            var maybeGetter = getGetter(propertyName);
                            getter = maybeGetter !== null ? maybeGetter : namedGetter;
                        } else {
                            getter = namedGetter;
                        }
                    } else {
                        getter = indexedGetter;
                    }
                    return this._then(getter, undefined, undefined, propertyName, undefined);
                };
            };

        }, { "./util": 36 }], 6: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, PromiseArray, apiRejection, debug) {
                var util = _dereq_("./util");
                var tryCatch = util.tryCatch;
                var errorObj = util.errorObj;
                var async = Promise._async;

                Promise.prototype["break"] = Promise.prototype.cancel = function () {
                    if (!debug.cancellation()) return this._warn("cancellation is disabled");

                    var promise = this;
                    var child = promise;
                    while (promise._isCancellable()) {
                        if (!promise._cancelBy(child)) {
                            if (child._isFollowing()) {
                                child._followee().cancel();
                            } else {
                                child._cancelBranched();
                            }
                            break;
                        }

                        var parent = promise._cancellationParent;
                        if (parent == null || !parent._isCancellable()) {
                            if (promise._isFollowing()) {
                                promise._followee().cancel();
                            } else {
                                promise._cancelBranched();
                            }
                            break;
                        } else {
                            if (promise._isFollowing()) promise._followee().cancel();
                            promise._setWillBeCancelled();
                            child = promise;
                            promise = parent;
                        }
                    }
                };

                Promise.prototype._branchHasCancelled = function () {
                    this._branchesRemainingToCancel--;
                };

                Promise.prototype._enoughBranchesHaveCancelled = function () {
                    return this._branchesRemainingToCancel === undefined ||
                    this._branchesRemainingToCancel <= 0;
                };

                Promise.prototype._cancelBy = function (canceller) {
                    if (canceller === this) {
                        this._branchesRemainingToCancel = 0;
                        this._invokeOnCancel();
                        return true;
                    } else {
                        this._branchHasCancelled();
                        if (this._enoughBranchesHaveCancelled()) {
                            this._invokeOnCancel();
                            return true;
                        }
                    }
                    return false;
                };

                Promise.prototype._cancelBranched = function () {
                    if (this._enoughBranchesHaveCancelled()) {
                        this._cancel();
                    }
                };

                Promise.prototype._cancel = function () {
                    if (!this._isCancellable()) return;
                    this._setCancelled();
                    async.invoke(this._cancelPromises, this, undefined);
                };

                Promise.prototype._cancelPromises = function () {
                    if (this._length() > 0) this._settlePromises();
                };

                Promise.prototype._unsetOnCancel = function () {
                    this._onCancelField = undefined;
                };

                Promise.prototype._isCancellable = function () {
                    return this.isPending() && !this._isCancelled();
                };

                Promise.prototype.isCancellable = function () {
                    return this.isPending() && !this.isCancelled();
                };

                Promise.prototype._doInvokeOnCancel = function (onCancelCallback, internalOnly) {
                    if (util.isArray(onCancelCallback)) {
                        for (var i = 0; i < onCancelCallback.length; ++i) {
                            this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
                        }
                    } else if (onCancelCallback !== undefined) {
                        if (typeof onCancelCallback === "function") {
                            if (!internalOnly) {
                                var e = tryCatch(onCancelCallback).call(this._boundValue());
                                if (e === errorObj) {
                                    this._attachExtraTrace(e.e);
                                    async.throwLater(e.e);
                                }
                            }
                        } else {
                            onCancelCallback._resultCancelled(this);
                        }
                    }
                };

                Promise.prototype._invokeOnCancel = function () {
                    var onCancelCallback = this._onCancel();
                    this._unsetOnCancel();
                    async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
                };

                Promise.prototype._invokeInternalOnCancel = function () {
                    if (this._isCancellable()) {
                        this._doInvokeOnCancel(this._onCancel(), true);
                        this._unsetOnCancel();
                    }
                };

                Promise.prototype._resultCancelled = function () {
                    this.cancel();
                };

            };

        }, { "./util": 36 }], 7: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (NEXT_FILTER) {
                var util = _dereq_("./util");
                var getKeys = _dereq_("./es5").keys;
                var tryCatch = util.tryCatch;
                var errorObj = util.errorObj;

                function catchFilter(instances, cb, promise) {
                    return function (e) {
                        var boundTo = promise._boundValue();
                        predicateLoop: for (var i = 0; i < instances.length; ++i) {
                            var item = instances[i];

                            if (item === Error ||
                            item != null && item.prototype instanceof Error) {
                                if (e instanceof item) {
                                    return tryCatch(cb).call(boundTo, e);
                                }
                            } else if (typeof item === "function") {
                                var matchesPredicate = tryCatch(item).call(boundTo, e);
                                if (matchesPredicate === errorObj) {
                                    return matchesPredicate;
                                } else if (matchesPredicate) {
                                    return tryCatch(cb).call(boundTo, e);
                                }
                            } else if (util.isObject(e)) {
                                var keys = getKeys(item);
                                for (var j = 0; j < keys.length; ++j) {
                                    var key = keys[j];
                                    if (item[key] != e[key]) {
                                        continue predicateLoop;
                                    }
                                }
                                return tryCatch(cb).call(boundTo, e);
                            }
                        }
                        return NEXT_FILTER;
                    };
                }

                return catchFilter;
            };

        }, { "./es5": 13, "./util": 36 }], 8: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise) {
                var longStackTraces = false;
                var contextStack = [];

                Promise.prototype._promiseCreated = function () {};
                Promise.prototype._pushContext = function () {};
                Promise.prototype._popContext = function () {return null;};
                Promise._peekContext = Promise.prototype._peekContext = function () {};

                function Context() {
                    this._trace = new Context.CapturedTrace(peekContext());
                }
                Context.prototype._pushContext = function () {
                    if (this._trace !== undefined) {
                        this._trace._promiseCreated = null;
                        contextStack.push(this._trace);
                    }
                };

                Context.prototype._popContext = function () {
                    if (this._trace !== undefined) {
                        var trace = contextStack.pop();
                        var ret = trace._promiseCreated;
                        trace._promiseCreated = null;
                        return ret;
                    }
                    return null;
                };

                function createContext() {
                    if (longStackTraces) return new Context();
                }

                function peekContext() {
                    var lastIndex = contextStack.length - 1;
                    if (lastIndex >= 0) {
                        return contextStack[lastIndex];
                    }
                    return undefined;
                }
                Context.CapturedTrace = null;
                Context.create = createContext;
                Context.deactivateLongStackTraces = function () {};
                Context.activateLongStackTraces = function () {
                    var Promise_pushContext = Promise.prototype._pushContext;
                    var Promise_popContext = Promise.prototype._popContext;
                    var Promise_PeekContext = Promise._peekContext;
                    var Promise_peekContext = Promise.prototype._peekContext;
                    var Promise_promiseCreated = Promise.prototype._promiseCreated;
                    Context.deactivateLongStackTraces = function () {
                        Promise.prototype._pushContext = Promise_pushContext;
                        Promise.prototype._popContext = Promise_popContext;
                        Promise._peekContext = Promise_PeekContext;
                        Promise.prototype._peekContext = Promise_peekContext;
                        Promise.prototype._promiseCreated = Promise_promiseCreated;
                        longStackTraces = false;
                    };
                    longStackTraces = true;
                    Promise.prototype._pushContext = Context.prototype._pushContext;
                    Promise.prototype._popContext = Context.prototype._popContext;
                    Promise._peekContext = Promise.prototype._peekContext = peekContext;
                    Promise.prototype._promiseCreated = function () {
                        var ctx = this._peekContext();
                        if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
                    };
                };
                return Context;
            };

        }, {}], 9: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, Context) {
                var getDomain = Promise._getDomain;
                var async = Promise._async;
                var Warning = _dereq_("./errors").Warning;
                var util = _dereq_("./util");
                var canAttachTrace = util.canAttachTrace;
                var unhandledRejectionHandled;
                var possiblyUnhandledRejection;
                var bluebirdFramePattern =
                /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
                var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
                var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
                var stackFramePattern = null;
                var formatStack = null;
                var indentStackFrames = false;
                var printWarning;
                var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 && (
                true ||
                util.env("BLUEBIRD_DEBUG") ||
                util.env("NODE_ENV") === "development"));

                var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 && (
                debugging || util.env("BLUEBIRD_WARNINGS")));

                var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 && (
                debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));

                var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 && (
                warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));

                Promise.prototype.suppressUnhandledRejections = function () {
                    var target = this._target();
                    target._bitField = target._bitField & ~1048576 |
                    524288;
                };

                Promise.prototype._ensurePossibleRejectionHandled = function () {
                    if ((this._bitField & 524288) !== 0) return;
                    this._setRejectionIsUnhandled();
                    async.invokeLater(this._notifyUnhandledRejection, this, undefined);
                };

                Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
                    fireRejectionEvent("rejectionHandled",
                    unhandledRejectionHandled, undefined, this);
                };

                Promise.prototype._setReturnedNonUndefined = function () {
                    this._bitField = this._bitField | 268435456;
                };

                Promise.prototype._returnedNonUndefined = function () {
                    return (this._bitField & 268435456) !== 0;
                };

                Promise.prototype._notifyUnhandledRejection = function () {
                    if (this._isRejectionUnhandled()) {
                        var reason = this._settledValue();
                        this._setUnhandledRejectionIsNotified();
                        fireRejectionEvent("unhandledRejection",
                        possiblyUnhandledRejection, reason, this);
                    }
                };

                Promise.prototype._setUnhandledRejectionIsNotified = function () {
                    this._bitField = this._bitField | 262144;
                };

                Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
                    this._bitField = this._bitField & ~262144;
                };

                Promise.prototype._isUnhandledRejectionNotified = function () {
                    return (this._bitField & 262144) > 0;
                };

                Promise.prototype._setRejectionIsUnhandled = function () {
                    this._bitField = this._bitField | 1048576;
                };

                Promise.prototype._unsetRejectionIsUnhandled = function () {
                    this._bitField = this._bitField & ~1048576;
                    if (this._isUnhandledRejectionNotified()) {
                        this._unsetUnhandledRejectionIsNotified();
                        this._notifyUnhandledRejectionIsHandled();
                    }
                };

                Promise.prototype._isRejectionUnhandled = function () {
                    return (this._bitField & 1048576) > 0;
                };

                Promise.prototype._warn = function (message, shouldUseOwnTrace, promise) {
                    return warn(message, shouldUseOwnTrace, promise || this);
                };

                Promise.onPossiblyUnhandledRejection = function (fn) {
                    var domain = getDomain();
                    possiblyUnhandledRejection =
                    typeof fn === "function" ? domain === null ?
                    fn : util.domainBind(domain, fn) :
                    undefined;
                };

                Promise.onUnhandledRejectionHandled = function (fn) {
                    var domain = getDomain();
                    unhandledRejectionHandled =
                    typeof fn === "function" ? domain === null ?
                    fn : util.domainBind(domain, fn) :
                    undefined;
                };

                var disableLongStackTraces = function () {};
                Promise.longStackTraces = function () {
                    if (async.haveItemsQueued() && !config.longStackTraces) {
                        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                    }
                    if (!config.longStackTraces && longStackTracesIsSupported()) {
                        var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
                        var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
                        config.longStackTraces = true;
                        disableLongStackTraces = function () {
                            if (async.haveItemsQueued() && !config.longStackTraces) {
                                throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                            }
                            Promise.prototype._captureStackTrace = Promise_captureStackTrace;
                            Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
                            Context.deactivateLongStackTraces();
                            async.enableTrampoline();
                            config.longStackTraces = false;
                        };
                        Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
                        Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
                        Context.activateLongStackTraces();
                        async.disableTrampolineIfNecessary();
                    }
                };

                Promise.hasLongStackTraces = function () {
                    return config.longStackTraces && longStackTracesIsSupported();
                };

                var fireDomEvent = function () {
                    try {
                        if (typeof CustomEvent === "function") {
                            var event = new CustomEvent("CustomEvent");
                            util.global.dispatchEvent(event);
                            return function (name, event) {
                                var domEvent = new CustomEvent(name.toLowerCase(), {
                                    detail: event,
                                    cancelable: true });

                                return !util.global.dispatchEvent(domEvent);
                            };
                        } else if (typeof Event === "function") {
                            var event = new Event("CustomEvent");
                            util.global.dispatchEvent(event);
                            return function (name, event) {
                                var domEvent = new Event(name.toLowerCase(), {
                                    cancelable: true });

                                domEvent.detail = event;
                                return !util.global.dispatchEvent(domEvent);
                            };
                        } else {
                            var event = document.createEvent("CustomEvent");
                            event.initCustomEvent("testingtheevent", false, true, {});
                            util.global.dispatchEvent(event);
                            return function (name, event) {
                                var domEvent = document.createEvent("CustomEvent");
                                domEvent.initCustomEvent(name.toLowerCase(), false, true,
                                event);
                                return !util.global.dispatchEvent(domEvent);
                            };
                        }
                    } catch (e) {}
                    return function () {
                        return false;
                    };
                }();

                var fireGlobalEvent = function () {
                    if (util.isNode) {
                        return function () {
                            return process.emit.apply(process, arguments);
                        };
                    } else {
                        if (!util.global) {
                            return function () {
                                return false;
                            };
                        }
                        return function (name) {
                            var methodName = "on" + name.toLowerCase();
                            var method = util.global[methodName];
                            if (!method) return false;
                            method.apply(util.global, [].slice.call(arguments, 1));
                            return true;
                        };
                    }
                }();

                function generatePromiseLifecycleEventObject(name, promise) {
                    return { promise: promise };
                }

                var eventToObjectGenerator = {
                    promiseCreated: generatePromiseLifecycleEventObject,
                    promiseFulfilled: generatePromiseLifecycleEventObject,
                    promiseRejected: generatePromiseLifecycleEventObject,
                    promiseResolved: generatePromiseLifecycleEventObject,
                    promiseCancelled: generatePromiseLifecycleEventObject,
                    promiseChained: function (name, promise, child) {
                        return { promise: promise, child: child };
                    },
                    warning: function (name, warning) {
                        return { warning: warning };
                    },
                    unhandledRejection: function (name, reason, promise) {
                        return { reason: reason, promise: promise };
                    },
                    rejectionHandled: generatePromiseLifecycleEventObject };


                var activeFireEvent = function (name) {
                    var globalEventFired = false;
                    try {
                        globalEventFired = fireGlobalEvent.apply(null, arguments);
                    } catch (e) {
                        async.throwLater(e);
                        globalEventFired = true;
                    }

                    var domEventFired = false;
                    try {
                        domEventFired = fireDomEvent(name,
                        eventToObjectGenerator[name].apply(null, arguments));
                    } catch (e) {
                        async.throwLater(e);
                        domEventFired = true;
                    }

                    return domEventFired || globalEventFired;
                };

                Promise.config = function (opts) {
                    opts = Object(opts);
                    if ("longStackTraces" in opts) {
                        if (opts.longStackTraces) {
                            Promise.longStackTraces();
                        } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
                            disableLongStackTraces();
                        }
                    }
                    if ("warnings" in opts) {
                        var warningsOption = opts.warnings;
                        config.warnings = !!warningsOption;
                        wForgottenReturn = config.warnings;

                        if (util.isObject(warningsOption)) {
                            if ("wForgottenReturn" in warningsOption) {
                                wForgottenReturn = !!warningsOption.wForgottenReturn;
                            }
                        }
                    }
                    if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
                        if (async.haveItemsQueued()) {
                            throw new Error(
                            "cannot enable cancellation after promises are in use");
                        }
                        Promise.prototype._clearCancellationData =
                        cancellationClearCancellationData;
                        Promise.prototype._propagateFrom = cancellationPropagateFrom;
                        Promise.prototype._onCancel = cancellationOnCancel;
                        Promise.prototype._setOnCancel = cancellationSetOnCancel;
                        Promise.prototype._attachCancellationCallback =
                        cancellationAttachCancellationCallback;
                        Promise.prototype._execute = cancellationExecute;
                        propagateFromFunction = cancellationPropagateFrom;
                        config.cancellation = true;
                    }
                    if ("monitoring" in opts) {
                        if (opts.monitoring && !config.monitoring) {
                            config.monitoring = true;
                            Promise.prototype._fireEvent = activeFireEvent;
                        } else if (!opts.monitoring && config.monitoring) {
                            config.monitoring = false;
                            Promise.prototype._fireEvent = defaultFireEvent;
                        }
                    }
                    return Promise;
                };

                function defaultFireEvent() {return false;}

                Promise.prototype._fireEvent = defaultFireEvent;
                Promise.prototype._execute = function (executor, resolve, reject) {
                    try {
                        executor(resolve, reject);
                    } catch (e) {
                        return e;
                    }
                };
                Promise.prototype._onCancel = function () {};
                Promise.prototype._setOnCancel = function (handler) {;};
                Promise.prototype._attachCancellationCallback = function (onCancel) {
                    ;
                };
                Promise.prototype._captureStackTrace = function () {};
                Promise.prototype._attachExtraTrace = function () {};
                Promise.prototype._clearCancellationData = function () {};
                Promise.prototype._propagateFrom = function (parent, flags) {
                    ;
                    ;
                };

                function cancellationExecute(executor, resolve, reject) {
                    var promise = this;
                    try {
                        executor(resolve, reject, function (onCancel) {
                            if (typeof onCancel !== "function") {
                                throw new TypeError("onCancel must be a function, got: " +
                                util.toString(onCancel));
                            }
                            promise._attachCancellationCallback(onCancel);
                        });
                    } catch (e) {
                        return e;
                    }
                }

                function cancellationAttachCancellationCallback(onCancel) {
                    if (!this._isCancellable()) return this;

                    var previousOnCancel = this._onCancel();
                    if (previousOnCancel !== undefined) {
                        if (util.isArray(previousOnCancel)) {
                            previousOnCancel.push(onCancel);
                        } else {
                            this._setOnCancel([previousOnCancel, onCancel]);
                        }
                    } else {
                        this._setOnCancel(onCancel);
                    }
                }

                function cancellationOnCancel() {
                    return this._onCancelField;
                }

                function cancellationSetOnCancel(onCancel) {
                    this._onCancelField = onCancel;
                }

                function cancellationClearCancellationData() {
                    this._cancellationParent = undefined;
                    this._onCancelField = undefined;
                }

                function cancellationPropagateFrom(parent, flags) {
                    if ((flags & 1) !== 0) {
                        this._cancellationParent = parent;
                        var branchesRemainingToCancel = parent._branchesRemainingToCancel;
                        if (branchesRemainingToCancel === undefined) {
                            branchesRemainingToCancel = 0;
                        }
                        parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
                    }
                    if ((flags & 2) !== 0 && parent._isBound()) {
                        this._setBoundTo(parent._boundTo);
                    }
                }

                function bindingPropagateFrom(parent, flags) {
                    if ((flags & 2) !== 0 && parent._isBound()) {
                        this._setBoundTo(parent._boundTo);
                    }
                }
                var propagateFromFunction = bindingPropagateFrom;

                function boundValueFunction() {
                    var ret = this._boundTo;
                    if (ret !== undefined) {
                        if (ret instanceof Promise) {
                            if (ret.isFulfilled()) {
                                return ret.value();
                            } else {
                                return undefined;
                            }
                        }
                    }
                    return ret;
                }

                function longStackTracesCaptureStackTrace() {
                    this._trace = new CapturedTrace(this._peekContext());
                }

                function longStackTracesAttachExtraTrace(error, ignoreSelf) {
                    if (canAttachTrace(error)) {
                        var trace = this._trace;
                        if (trace !== undefined) {
                            if (ignoreSelf) trace = trace._parent;
                        }
                        if (trace !== undefined) {
                            trace.attachExtraTrace(error);
                        } else if (!error.__stackCleaned__) {
                            var parsed = parseStackAndMessage(error);
                            util.notEnumerableProp(error, "stack",
                            parsed.message + "\n" + parsed.stack.join("\n"));
                            util.notEnumerableProp(error, "__stackCleaned__", true);
                        }
                    }
                }

                function checkForgottenReturns(returnValue, promiseCreated, name, promise,
                parent) {
                    if (returnValue === undefined && promiseCreated !== null &&
                    wForgottenReturn) {
                        if (parent !== undefined && parent._returnedNonUndefined()) return;
                        if ((promise._bitField & 65535) === 0) return;

                        if (name) name = name + " ";
                        var handlerLine = "";
                        var creatorLine = "";
                        if (promiseCreated._trace) {
                            var traceLines = promiseCreated._trace.stack.split("\n");
                            var stack = cleanStack(traceLines);
                            for (var i = stack.length - 1; i >= 0; --i) {
                                var line = stack[i];
                                if (!nodeFramePattern.test(line)) {
                                    var lineMatches = line.match(parseLinePattern);
                                    if (lineMatches) {
                                        handlerLine = "at " + lineMatches[1] +
                                        ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
                                    }
                                    break;
                                }
                            }

                            if (stack.length > 0) {
                                var firstUserLine = stack[0];
                                for (var i = 0; i < traceLines.length; ++i) {

                                    if (traceLines[i] === firstUserLine) {
                                        if (i > 0) {
                                            creatorLine = "\n" + traceLines[i - 1];
                                        }
                                        break;
                                    }
                                }

                            }
                        }
                        var msg = "a promise was created in a " + name +
                        "handler " + handlerLine + "but was not returned from it, " +
                        "see http://goo.gl/rRqMUw" +
                        creatorLine;
                        promise._warn(msg, true, promiseCreated);
                    }
                }

                function deprecated(name, replacement) {
                    var message = name +
                    " is deprecated and will be removed in a future version.";
                    if (replacement) message += " Use " + replacement + " instead.";
                    return warn(message);
                }

                function warn(message, shouldUseOwnTrace, promise) {
                    if (!config.warnings) return;
                    var warning = new Warning(message);
                    var ctx;
                    if (shouldUseOwnTrace) {
                        promise._attachExtraTrace(warning);
                    } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
                        ctx.attachExtraTrace(warning);
                    } else {
                        var parsed = parseStackAndMessage(warning);
                        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
                    }

                    if (!activeFireEvent("warning", warning)) {
                        formatAndLogError(warning, "", true);
                    }
                }

                function reconstructStack(message, stacks) {
                    for (var i = 0; i < stacks.length - 1; ++i) {
                        stacks[i].push("From previous event:");
                        stacks[i] = stacks[i].join("\n");
                    }
                    if (i < stacks.length) {
                        stacks[i] = stacks[i].join("\n");
                    }
                    return message + "\n" + stacks.join("\n");
                }

                function removeDuplicateOrEmptyJumps(stacks) {
                    for (var i = 0; i < stacks.length; ++i) {
                        if (stacks[i].length === 0 ||
                        i + 1 < stacks.length && stacks[i][0] === stacks[i + 1][0]) {
                            stacks.splice(i, 1);
                            i--;
                        }
                    }
                }

                function removeCommonRoots(stacks) {
                    var current = stacks[0];
                    for (var i = 1; i < stacks.length; ++i) {
                        var prev = stacks[i];
                        var currentLastIndex = current.length - 1;
                        var currentLastLine = current[currentLastIndex];
                        var commonRootMeetPoint = -1;

                        for (var j = prev.length - 1; j >= 0; --j) {
                            if (prev[j] === currentLastLine) {
                                commonRootMeetPoint = j;
                                break;
                            }
                        }

                        for (var j = commonRootMeetPoint; j >= 0; --j) {
                            var line = prev[j];
                            if (current[currentLastIndex] === line) {
                                current.pop();
                                currentLastIndex--;
                            } else {
                                break;
                            }
                        }
                        current = prev;
                    }
                }

                function cleanStack(stack) {
                    var ret = [];
                    for (var i = 0; i < stack.length; ++i) {
                        var line = stack[i];
                        var isTraceLine = "    (No stack trace)" === line ||
                        stackFramePattern.test(line);
                        var isInternalFrame = isTraceLine && shouldIgnore(line);
                        if (isTraceLine && !isInternalFrame) {
                            if (indentStackFrames && line.charAt(0) !== " ") {
                                line = "    " + line;
                            }
                            ret.push(line);
                        }
                    }
                    return ret;
                }

                function stackFramesAsArray(error) {
                    var stack = error.stack.replace(/\s+$/g, "").split("\n");
                    for (var i = 0; i < stack.length; ++i) {
                        var line = stack[i];
                        if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
                            break;
                        }
                    }
                    if (i > 0 && error.name != "SyntaxError") {
                        stack = stack.slice(i);
                    }
                    return stack;
                }

                function parseStackAndMessage(error) {
                    var stack = error.stack;
                    var message = error.toString();
                    stack = typeof stack === "string" && stack.length > 0 ?
                    stackFramesAsArray(error) : ["    (No stack trace)"];
                    return {
                        message: message,
                        stack: error.name == "SyntaxError" ? stack : cleanStack(stack) };

                }

                function formatAndLogError(error, title, isSoft) {
                    if (typeof console !== "undefined") {
                        var message;
                        if (util.isObject(error)) {
                            var stack = error.stack;
                            message = title + formatStack(stack, error);
                        } else {
                            message = title + String(error);
                        }
                        if (typeof printWarning === "function") {
                            printWarning(message, isSoft);
                        } else if (typeof console.log === "function" ||
                        typeof console.log === "object") {
                            console.log(message);
                        }
                    }
                }

                function fireRejectionEvent(name, localHandler, reason, promise) {
                    var localEventFired = false;
                    try {
                        if (typeof localHandler === "function") {
                            localEventFired = true;
                            if (name === "rejectionHandled") {
                                localHandler(promise);
                            } else {
                                localHandler(reason, promise);
                            }
                        }
                    } catch (e) {
                        async.throwLater(e);
                    }

                    if (name === "unhandledRejection") {
                        if (!activeFireEvent(name, reason, promise) && !localEventFired) {
                            formatAndLogError(reason, "Unhandled rejection ");
                        }
                    } else {
                        activeFireEvent(name, promise);
                    }
                }

                function formatNonError(obj) {
                    var str;
                    if (typeof obj === "function") {
                        str = "[function " + (
                        obj.name || "anonymous") +
                        "]";
                    } else {
                        str = obj && typeof obj.toString === "function" ?
                        obj.toString() : util.toString(obj);
                        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
                        if (ruselessToString.test(str)) {
                            try {
                                var newStr = JSON.stringify(obj);
                                str = newStr;
                            }
                            catch (e) {

                            }
                        }
                        if (str.length === 0) {
                            str = "(empty array)";
                        }
                    }
                    return "(<" + snip(str) + ">, no stack trace)";
                }

                function snip(str) {
                    var maxChars = 41;
                    if (str.length < maxChars) {
                        return str;
                    }
                    return str.substr(0, maxChars - 3) + "...";
                }

                function longStackTracesIsSupported() {
                    return typeof captureStackTrace === "function";
                }

                var shouldIgnore = function () {return false;};
                var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
                function parseLineInfo(line) {
                    var matches = line.match(parseLineInfoRegex);
                    if (matches) {
                        return {
                            fileName: matches[1],
                            line: parseInt(matches[2], 10) };

                    }
                }

                function setBounds(firstLineError, lastLineError) {
                    if (!longStackTracesIsSupported()) return;
                    var firstStackLines = firstLineError.stack.split("\n");
                    var lastStackLines = lastLineError.stack.split("\n");
                    var firstIndex = -1;
                    var lastIndex = -1;
                    var firstFileName;
                    var lastFileName;
                    for (var i = 0; i < firstStackLines.length; ++i) {
                        var result = parseLineInfo(firstStackLines[i]);
                        if (result) {
                            firstFileName = result.fileName;
                            firstIndex = result.line;
                            break;
                        }
                    }
                    for (var i = 0; i < lastStackLines.length; ++i) {
                        var result = parseLineInfo(lastStackLines[i]);
                        if (result) {
                            lastFileName = result.fileName;
                            lastIndex = result.line;
                            break;
                        }
                    }
                    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
                    firstFileName !== lastFileName || firstIndex >= lastIndex) {
                        return;
                    }

                    shouldIgnore = function (line) {
                        if (bluebirdFramePattern.test(line)) return true;
                        var info = parseLineInfo(line);
                        if (info) {
                            if (info.fileName === firstFileName &&
                            firstIndex <= info.line && info.line <= lastIndex) {
                                return true;
                            }
                        }
                        return false;
                    };
                }

                function CapturedTrace(parent) {
                    this._parent = parent;
                    this._promisesCreated = 0;
                    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
                    captureStackTrace(this, CapturedTrace);
                    if (length > 32) this.uncycle();
                }
                util.inherits(CapturedTrace, Error);
                Context.CapturedTrace = CapturedTrace;

                CapturedTrace.prototype.uncycle = function () {
                    var length = this._length;
                    if (length < 2) return;
                    var nodes = [];
                    var stackToIndex = {};

                    for (var i = 0, node = this; node !== undefined; ++i) {
                        nodes.push(node);
                        node = node._parent;
                    }
                    length = this._length = i;
                    for (var i = length - 1; i >= 0; --i) {
                        var stack = nodes[i].stack;
                        if (stackToIndex[stack] === undefined) {
                            stackToIndex[stack] = i;
                        }
                    }
                    for (var i = 0; i < length; ++i) {
                        var currentStack = nodes[i].stack;
                        var index = stackToIndex[currentStack];
                        if (index !== undefined && index !== i) {
                            if (index > 0) {
                                nodes[index - 1]._parent = undefined;
                                nodes[index - 1]._length = 1;
                            }
                            nodes[i]._parent = undefined;
                            nodes[i]._length = 1;
                            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

                            if (index < length - 1) {
                                cycleEdgeNode._parent = nodes[index + 1];
                                cycleEdgeNode._parent.uncycle();
                                cycleEdgeNode._length =
                                cycleEdgeNode._parent._length + 1;
                            } else {
                                cycleEdgeNode._parent = undefined;
                                cycleEdgeNode._length = 1;
                            }
                            var currentChildLength = cycleEdgeNode._length + 1;
                            for (var j = i - 2; j >= 0; --j) {
                                nodes[j]._length = currentChildLength;
                                currentChildLength++;
                            }
                            return;
                        }
                    }
                };

                CapturedTrace.prototype.attachExtraTrace = function (error) {
                    if (error.__stackCleaned__) return;
                    this.uncycle();
                    var parsed = parseStackAndMessage(error);
                    var message = parsed.message;
                    var stacks = [parsed.stack];

                    var trace = this;
                    while (trace !== undefined) {
                        stacks.push(cleanStack(trace.stack.split("\n")));
                        trace = trace._parent;
                    }
                    removeCommonRoots(stacks);
                    removeDuplicateOrEmptyJumps(stacks);
                    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
                    util.notEnumerableProp(error, "__stackCleaned__", true);
                };

                var captureStackTrace = function stackDetection() {
                    var v8stackFramePattern = /^\s*at\s*/;
                    var v8stackFormatter = function (stack, error) {
                        if (typeof stack === "string") return stack;

                        if (error.name !== undefined &&
                        error.message !== undefined) {
                            return error.toString();
                        }
                        return formatNonError(error);
                    };

                    if (typeof Error.stackTraceLimit === "number" &&
                    typeof Error.captureStackTrace === "function") {
                        Error.stackTraceLimit += 6;
                        stackFramePattern = v8stackFramePattern;
                        formatStack = v8stackFormatter;
                        var captureStackTrace = Error.captureStackTrace;

                        shouldIgnore = function (line) {
                            return bluebirdFramePattern.test(line);
                        };
                        return function (receiver, ignoreUntil) {
                            Error.stackTraceLimit += 6;
                            captureStackTrace(receiver, ignoreUntil);
                            Error.stackTraceLimit -= 6;
                        };
                    }
                    var err = new Error();

                    if (typeof err.stack === "string" &&
                    err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
                        stackFramePattern = /@/;
                        formatStack = v8stackFormatter;
                        indentStackFrames = true;
                        return function captureStackTrace(o) {
                            o.stack = new Error().stack;
                        };
                    }

                    var hasStackAfterThrow;
                    try {throw new Error();}
                    catch (e) {
                        hasStackAfterThrow = "stack" in e;
                    }
                    if (!("stack" in err) && hasStackAfterThrow &&
                    typeof Error.stackTraceLimit === "number") {
                        stackFramePattern = v8stackFramePattern;
                        formatStack = v8stackFormatter;
                        return function captureStackTrace(o) {
                            Error.stackTraceLimit += 6;
                            try {throw new Error();}
                            catch (e) {o.stack = e.stack;}
                            Error.stackTraceLimit -= 6;
                        };
                    }

                    formatStack = function (stack, error) {
                        if (typeof stack === "string") return stack;

                        if ((typeof error === "object" ||
                        typeof error === "function") &&
                        error.name !== undefined &&
                        error.message !== undefined) {
                            return error.toString();
                        }
                        return formatNonError(error);
                    };

                    return null;

                }([]);

                if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
                    printWarning = function (message) {
                        console.warn(message);
                    };
                    if (util.isNode && process.stderr.isTTY) {
                        printWarning = function (message, isSoft) {
                            var color = isSoft ? "\u001b[33m" : "\u001b[31m";
                            console.warn(color + message + "\u001b[0m\n");
                        };
                    } else if (!util.isNode && typeof new Error().stack === "string") {
                        printWarning = function (message, isSoft) {
                            console.warn("%c" + message,
                            isSoft ? "color: darkorange" : "color: red");
                        };
                    }
                }

                var config = {
                    warnings: warnings,
                    longStackTraces: false,
                    cancellation: false,
                    monitoring: false };


                if (longStackTraces) Promise.longStackTraces();

                return {
                    longStackTraces: function () {
                        return config.longStackTraces;
                    },
                    warnings: function () {
                        return config.warnings;
                    },
                    cancellation: function () {
                        return config.cancellation;
                    },
                    monitoring: function () {
                        return config.monitoring;
                    },
                    propagateFromFunction: function () {
                        return propagateFromFunction;
                    },
                    boundValueFunction: function () {
                        return boundValueFunction;
                    },
                    checkForgottenReturns: checkForgottenReturns,
                    setBounds: setBounds,
                    warn: warn,
                    deprecated: deprecated,
                    CapturedTrace: CapturedTrace,
                    fireDomEvent: fireDomEvent,
                    fireGlobalEvent: fireGlobalEvent };

            };

        }, { "./errors": 12, "./util": 36 }], 10: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise) {
                function returner() {
                    return this.value;
                }
                function thrower() {
                    throw this.reason;
                }

                Promise.prototype["return"] =
                Promise.prototype.thenReturn = function (value) {
                    if (value instanceof Promise) value.suppressUnhandledRejections();
                    return this._then(
                    returner, undefined, undefined, { value: value }, undefined);
                };

                Promise.prototype["throw"] =
                Promise.prototype.thenThrow = function (reason) {
                    return this._then(
                    thrower, undefined, undefined, { reason: reason }, undefined);
                };

                Promise.prototype.catchThrow = function (reason) {
                    if (arguments.length <= 1) {
                        return this._then(
                        undefined, thrower, undefined, { reason: reason }, undefined);
                    } else {
                        var _reason = arguments[1];
                        var handler = function () {throw _reason;};
                        return this.caught(reason, handler);
                    }
                };

                Promise.prototype.catchReturn = function (value) {
                    if (arguments.length <= 1) {
                        if (value instanceof Promise) value.suppressUnhandledRejections();
                        return this._then(
                        undefined, returner, undefined, { value: value }, undefined);
                    } else {
                        var _value = arguments[1];
                        if (_value instanceof Promise) _value.suppressUnhandledRejections();
                        var handler = function () {return _value;};
                        return this.caught(value, handler);
                    }
                };
            };

        }, {}], 11: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, INTERNAL) {
                var PromiseReduce = Promise.reduce;
                var PromiseAll = Promise.all;

                function promiseAllThis() {
                    return PromiseAll(this);
                }

                function PromiseMapSeries(promises, fn) {
                    return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
                }

                Promise.prototype.each = function (fn) {
                    return PromiseReduce(this, fn, INTERNAL, 0).
                    _then(promiseAllThis, undefined, undefined, this, undefined);
                };

                Promise.prototype.mapSeries = function (fn) {
                    return PromiseReduce(this, fn, INTERNAL, INTERNAL);
                };

                Promise.each = function (promises, fn) {
                    return PromiseReduce(promises, fn, INTERNAL, 0).
                    _then(promiseAllThis, undefined, undefined, promises, undefined);
                };

                Promise.mapSeries = PromiseMapSeries;
            };


        }, {}], 12: [function (_dereq_, module, exports) {
            "use strict";
            var es5 = _dereq_("./es5");
            var Objectfreeze = es5.freeze;
            var util = _dereq_("./util");
            var inherits = util.inherits;
            var notEnumerableProp = util.notEnumerableProp;

            function subError(nameProperty, defaultMessage) {
                function SubError(message) {
                    if (!(this instanceof SubError)) return new SubError(message);
                    notEnumerableProp(this, "message",
                    typeof message === "string" ? message : defaultMessage);
                    notEnumerableProp(this, "name", nameProperty);
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(this, this.constructor);
                    } else {
                        Error.call(this);
                    }
                }
                inherits(SubError, Error);
                return SubError;
            }

            var _TypeError, _RangeError;
            var Warning = subError("Warning", "warning");
            var CancellationError = subError("CancellationError", "cancellation error");
            var TimeoutError = subError("TimeoutError", "timeout error");
            var AggregateError = subError("AggregateError", "aggregate error");
            try {
                _TypeError = TypeError;
                _RangeError = RangeError;
            } catch (e) {
                _TypeError = subError("TypeError", "type error");
                _RangeError = subError("RangeError", "range error");
            }

            var methods = ("join pop push shift unshift slice filter forEach some " +
            "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

            for (var i = 0; i < methods.length; ++i) {
                if (typeof Array.prototype[methods[i]] === "function") {
                    AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
                }
            }

            es5.defineProperty(AggregateError.prototype, "length", {
                value: 0,
                configurable: false,
                writable: true,
                enumerable: true });

            AggregateError.prototype["isOperational"] = true;
            var level = 0;
            AggregateError.prototype.toString = function () {
                var indent = Array(level * 4 + 1).join(" ");
                var ret = "\n" + indent + "AggregateError of:" + "\n";
                level++;
                indent = Array(level * 4 + 1).join(" ");
                for (var i = 0; i < this.length; ++i) {
                    var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
                    var lines = str.split("\n");
                    for (var j = 0; j < lines.length; ++j) {
                        lines[j] = indent + lines[j];
                    }
                    str = lines.join("\n");
                    ret += str + "\n";
                }
                level--;
                return ret;
            };

            function OperationalError(message) {
                if (!(this instanceof OperationalError))
                return new OperationalError(message);
                notEnumerableProp(this, "name", "OperationalError");
                notEnumerableProp(this, "message", message);
                this.cause = message;
                this["isOperational"] = true;

                if (message instanceof Error) {
                    notEnumerableProp(this, "message", message.message);
                    notEnumerableProp(this, "stack", message.stack);
                } else if (Error.captureStackTrace) {
                    Error.captureStackTrace(this, this.constructor);
                }

            }
            inherits(OperationalError, Error);

            var errorTypes = Error["__BluebirdErrorTypes__"];
            if (!errorTypes) {
                errorTypes = Objectfreeze({
                    CancellationError: CancellationError,
                    TimeoutError: TimeoutError,
                    OperationalError: OperationalError,
                    RejectionError: OperationalError,
                    AggregateError: AggregateError });

                es5.defineProperty(Error, "__BluebirdErrorTypes__", {
                    value: errorTypes,
                    writable: false,
                    enumerable: false,
                    configurable: false });

            }

            module.exports = {
                Error: Error,
                TypeError: _TypeError,
                RangeError: _RangeError,
                CancellationError: errorTypes.CancellationError,
                OperationalError: errorTypes.OperationalError,
                TimeoutError: errorTypes.TimeoutError,
                AggregateError: errorTypes.AggregateError,
                Warning: Warning };


        }, { "./es5": 13, "./util": 36 }], 13: [function (_dereq_, module, exports) {
            var isES5 = function () {
                "use strict";
                return this === undefined;
            }();

            if (isES5) {
                module.exports = {
                    freeze: Object.freeze,
                    defineProperty: Object.defineProperty,
                    getDescriptor: Object.getOwnPropertyDescriptor,
                    keys: Object.keys,
                    names: Object.getOwnPropertyNames,
                    getPrototypeOf: Object.getPrototypeOf,
                    isArray: Array.isArray,
                    isES5: isES5,
                    propertyIsWritable: function (obj, prop) {
                        var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
                        return !!(!descriptor || descriptor.writable || descriptor.set);
                    } };

            } else {
                var has = {}.hasOwnProperty;
                var str = {}.toString;
                var proto = {}.constructor.prototype;

                var ObjectKeys = function (o) {
                    var ret = [];
                    for (var key in o) {
                        if (has.call(o, key)) {
                            ret.push(key);
                        }
                    }
                    return ret;
                };

                var ObjectGetDescriptor = function (o, key) {
                    return { value: o[key] };
                };

                var ObjectDefineProperty = function (o, key, desc) {
                    o[key] = desc.value;
                    return o;
                };

                var ObjectFreeze = function (obj) {
                    return obj;
                };

                var ObjectGetPrototypeOf = function (obj) {
                    try {
                        return Object(obj).constructor.prototype;
                    }
                    catch (e) {
                        return proto;
                    }
                };

                var ArrayIsArray = function (obj) {
                    try {
                        return str.call(obj) === "[object Array]";
                    }
                    catch (e) {
                        return false;
                    }
                };

                module.exports = {
                    isArray: ArrayIsArray,
                    keys: ObjectKeys,
                    names: ObjectKeys,
                    defineProperty: ObjectDefineProperty,
                    getDescriptor: ObjectGetDescriptor,
                    freeze: ObjectFreeze,
                    getPrototypeOf: ObjectGetPrototypeOf,
                    isES5: isES5,
                    propertyIsWritable: function () {
                        return true;
                    } };

            }

        }, {}], 14: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, INTERNAL) {
                var PromiseMap = Promise.map;

                Promise.prototype.filter = function (fn, options) {
                    return PromiseMap(this, fn, options, INTERNAL);
                };

                Promise.filter = function (promises, fn, options) {
                    return PromiseMap(promises, fn, options, INTERNAL);
                };
            };

        }, {}], 15: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, tryConvertToPromise, NEXT_FILTER) {
                var util = _dereq_("./util");
                var CancellationError = Promise.CancellationError;
                var errorObj = util.errorObj;
                var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);

                function PassThroughHandlerContext(promise, type, handler) {
                    this.promise = promise;
                    this.type = type;
                    this.handler = handler;
                    this.called = false;
                    this.cancelPromise = null;
                }

                PassThroughHandlerContext.prototype.isFinallyHandler = function () {
                    return this.type === 0;
                };

                function FinallyHandlerCancelReaction(finallyHandler) {
                    this.finallyHandler = finallyHandler;
                }

                FinallyHandlerCancelReaction.prototype._resultCancelled = function () {
                    checkCancel(this.finallyHandler);
                };

                function checkCancel(ctx, reason) {
                    if (ctx.cancelPromise != null) {
                        if (arguments.length > 1) {
                            ctx.cancelPromise._reject(reason);
                        } else {
                            ctx.cancelPromise._cancel();
                        }
                        ctx.cancelPromise = null;
                        return true;
                    }
                    return false;
                }

                function succeed() {
                    return finallyHandler.call(this, this.promise._target()._settledValue());
                }
                function fail(reason) {
                    if (checkCancel(this, reason)) return;
                    errorObj.e = reason;
                    return errorObj;
                }
                function finallyHandler(reasonOrValue) {
                    var promise = this.promise;
                    var handler = this.handler;

                    if (!this.called) {
                        this.called = true;
                        var ret = this.isFinallyHandler() ?
                        handler.call(promise._boundValue()) :
                        handler.call(promise._boundValue(), reasonOrValue);
                        if (ret === NEXT_FILTER) {
                            return ret;
                        } else if (ret !== undefined) {
                            promise._setReturnedNonUndefined();
                            var maybePromise = tryConvertToPromise(ret, promise);
                            if (maybePromise instanceof Promise) {
                                if (this.cancelPromise != null) {
                                    if (maybePromise._isCancelled()) {
                                        var reason =
                                        new CancellationError("late cancellation observer");
                                        promise._attachExtraTrace(reason);
                                        errorObj.e = reason;
                                        return errorObj;
                                    } else if (maybePromise.isPending()) {
                                        maybePromise._attachCancellationCallback(
                                        new FinallyHandlerCancelReaction(this));
                                    }
                                }
                                return maybePromise._then(
                                succeed, fail, undefined, this, undefined);
                            }
                        }
                    }

                    if (promise.isRejected()) {
                        checkCancel(this);
                        errorObj.e = reasonOrValue;
                        return errorObj;
                    } else {
                        checkCancel(this);
                        return reasonOrValue;
                    }
                }

                Promise.prototype._passThrough = function (handler, type, success, fail) {
                    if (typeof handler !== "function") return this.then();
                    return this._then(success,
                    fail,
                    undefined,
                    new PassThroughHandlerContext(this, type, handler),
                    undefined);
                };

                Promise.prototype.lastly =
                Promise.prototype["finally"] = function (handler) {
                    return this._passThrough(handler,
                    0,
                    finallyHandler,
                    finallyHandler);
                };


                Promise.prototype.tap = function (handler) {
                    return this._passThrough(handler, 1, finallyHandler);
                };

                Promise.prototype.tapCatch = function (handlerOrPredicate) {
                    var len = arguments.length;
                    if (len === 1) {
                        return this._passThrough(handlerOrPredicate,
                        1,
                        undefined,
                        finallyHandler);
                    } else {
                        var catchInstances = new Array(len - 1),
                        j = 0,i;
                        for (i = 0; i < len - 1; ++i) {
                            var item = arguments[i];
                            if (util.isObject(item)) {
                                catchInstances[j++] = item;
                            } else {
                                return Promise.reject(new TypeError(
                                "tapCatch statement predicate: " +
                                "expecting an object but got " + util.classString(item)));

                            }
                        }
                        catchInstances.length = j;
                        var handler = arguments[i];
                        return this._passThrough(catchFilter(catchInstances, handler, this),
                        1,
                        undefined,
                        finallyHandler);
                    }

                };

                return PassThroughHandlerContext;
            };

        }, { "./catch_filter": 7, "./util": 36 }], 16: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise,
            apiRejection,
            INTERNAL,
            tryConvertToPromise,
            Proxyable,
            debug) {
                var errors = _dereq_("./errors");
                var TypeError = errors.TypeError;
                var util = _dereq_("./util");
                var errorObj = util.errorObj;
                var tryCatch = util.tryCatch;
                var yieldHandlers = [];

                function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
                    for (var i = 0; i < yieldHandlers.length; ++i) {
                        traceParent._pushContext();
                        var result = tryCatch(yieldHandlers[i])(value);
                        traceParent._popContext();
                        if (result === errorObj) {
                            traceParent._pushContext();
                            var ret = Promise.reject(errorObj.e);
                            traceParent._popContext();
                            return ret;
                        }
                        var maybePromise = tryConvertToPromise(result, traceParent);
                        if (maybePromise instanceof Promise) return maybePromise;
                    }
                    return null;
                }

                function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
                    if (debug.cancellation()) {
                        var internal = new Promise(INTERNAL);
                        var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
                        this._promise = internal.lastly(function () {
                            return _finallyPromise;
                        });
                        internal._captureStackTrace();
                        internal._setOnCancel(this);
                    } else {
                        var promise = this._promise = new Promise(INTERNAL);
                        promise._captureStackTrace();
                    }
                    this._stack = stack;
                    this._generatorFunction = generatorFunction;
                    this._receiver = receiver;
                    this._generator = undefined;
                    this._yieldHandlers = typeof yieldHandler === "function" ?
                    [yieldHandler].concat(yieldHandlers) :
                    yieldHandlers;
                    this._yieldedPromise = null;
                    this._cancellationPhase = false;
                }
                util.inherits(PromiseSpawn, Proxyable);

                PromiseSpawn.prototype._isResolved = function () {
                    return this._promise === null;
                };

                PromiseSpawn.prototype._cleanup = function () {
                    this._promise = this._generator = null;
                    if (debug.cancellation() && this._finallyPromise !== null) {
                        this._finallyPromise._fulfill();
                        this._finallyPromise = null;
                    }
                };

                PromiseSpawn.prototype._promiseCancelled = function () {
                    if (this._isResolved()) return;
                    var implementsReturn = typeof this._generator["return"] !== "undefined";

                    var result;
                    if (!implementsReturn) {
                        var reason = new Promise.CancellationError(
                        "generator .return() sentinel");
                        Promise.coroutine.returnSentinel = reason;
                        this._promise._attachExtraTrace(reason);
                        this._promise._pushContext();
                        result = tryCatch(this._generator["throw"]).call(this._generator,
                        reason);
                        this._promise._popContext();
                    } else {
                        this._promise._pushContext();
                        result = tryCatch(this._generator["return"]).call(this._generator,
                        undefined);
                        this._promise._popContext();
                    }
                    this._cancellationPhase = true;
                    this._yieldedPromise = null;
                    this._continue(result);
                };

                PromiseSpawn.prototype._promiseFulfilled = function (value) {
                    this._yieldedPromise = null;
                    this._promise._pushContext();
                    var result = tryCatch(this._generator.next).call(this._generator, value);
                    this._promise._popContext();
                    this._continue(result);
                };

                PromiseSpawn.prototype._promiseRejected = function (reason) {
                    this._yieldedPromise = null;
                    this._promise._attachExtraTrace(reason);
                    this._promise._pushContext();
                    var result = tryCatch(this._generator["throw"]).
                    call(this._generator, reason);
                    this._promise._popContext();
                    this._continue(result);
                };

                PromiseSpawn.prototype._resultCancelled = function () {
                    if (this._yieldedPromise instanceof Promise) {
                        var promise = this._yieldedPromise;
                        this._yieldedPromise = null;
                        promise.cancel();
                    }
                };

                PromiseSpawn.prototype.promise = function () {
                    return this._promise;
                };

                PromiseSpawn.prototype._run = function () {
                    this._generator = this._generatorFunction.call(this._receiver);
                    this._receiver =
                    this._generatorFunction = undefined;
                    this._promiseFulfilled(undefined);
                };

                PromiseSpawn.prototype._continue = function (result) {
                    var promise = this._promise;
                    if (result === errorObj) {
                        this._cleanup();
                        if (this._cancellationPhase) {
                            return promise.cancel();
                        } else {
                            return promise._rejectCallback(result.e, false);
                        }
                    }

                    var value = result.value;
                    if (result.done === true) {
                        this._cleanup();
                        if (this._cancellationPhase) {
                            return promise.cancel();
                        } else {
                            return promise._resolveCallback(value);
                        }
                    } else {
                        var maybePromise = tryConvertToPromise(value, this._promise);
                        if (!(maybePromise instanceof Promise)) {
                            maybePromise =
                            promiseFromYieldHandler(maybePromise,
                            this._yieldHandlers,
                            this._promise);
                            if (maybePromise === null) {
                                this._promiseRejected(
                                new TypeError(
                                "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", String(value)) +
                                "From coroutine:\u000a" +
                                this._stack.split("\n").slice(1, -7).join("\n")));


                                return;
                            }
                        }
                        maybePromise = maybePromise._target();
                        var bitField = maybePromise._bitField;
                        ;
                        if ((bitField & 50397184) === 0) {
                            this._yieldedPromise = maybePromise;
                            maybePromise._proxy(this, null);
                        } else if ((bitField & 33554432) !== 0) {
                            Promise._async.invoke(
                            this._promiseFulfilled, this, maybePromise._value());

                        } else if ((bitField & 16777216) !== 0) {
                            Promise._async.invoke(
                            this._promiseRejected, this, maybePromise._reason());

                        } else {
                            this._promiseCancelled();
                        }
                    }
                };

                Promise.coroutine = function (generatorFunction, options) {
                    if (typeof generatorFunction !== "function") {
                        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                    }
                    var yieldHandler = Object(options).yieldHandler;
                    var PromiseSpawn$ = PromiseSpawn;
                    var stack = new Error().stack;
                    return function () {
                        var generator = generatorFunction.apply(this, arguments);
                        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                        stack);
                        var ret = spawn.promise();
                        spawn._generator = generator;
                        spawn._promiseFulfilled(undefined);
                        return ret;
                    };
                };

                Promise.coroutine.addYieldHandler = function (fn) {
                    if (typeof fn !== "function") {
                        throw new TypeError("expecting a function but got " + util.classString(fn));
                    }
                    yieldHandlers.push(fn);
                };

                Promise.spawn = function (generatorFunction) {
                    debug.deprecated("Promise.spawn()", "Promise.coroutine()");
                    if (typeof generatorFunction !== "function") {
                        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                    }
                    var spawn = new PromiseSpawn(generatorFunction, this);
                    var ret = spawn.promise();
                    spawn._run(Promise.spawn);
                    return ret;
                };
            };

        }, { "./errors": 12, "./util": 36 }], 17: [function (_dereq_, module, exports) {
            "use strict";
            module.exports =
            function (Promise, PromiseArray, tryConvertToPromise, INTERNAL, async,
            getDomain) {
                var util = _dereq_("./util");
                var canEvaluate = util.canEvaluate;
                var tryCatch = util.tryCatch;
                var errorObj = util.errorObj;
                var reject;

                if (false) {
                    if (canEvaluate) {
                        var thenCallback = function (i) {
                            return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
                        };

                        var promiseSetter = function (i) {
                            return new Function("promise", "holder", "                           \n\
            'use strict';                                                    \n\
            holder.pIndex = promise;                                         \n\
            ".replace(/Index/g, i));
                        };

                        var generateHolderClass = function (total) {
                            var props = new Array(total);
                            for (var i = 0; i < props.length; ++i) {
                                props[i] = "this.p" + (i + 1);
                            }
                            var assignment = props.join(" = ") + " = null;";
                            var cancellationCode = "var promise;\n" + props.map(function (prop) {
                                return "                                                         \n\
                promise = " + prop + ";                                      \n\
                if (promise instanceof Promise) {                            \n\
                    promise.cancel();                                        \n\
                }                                                            \n\
            ";
                            }).join("\n");
                            var passedArguments = props.join(", ");
                            var name = "Holder$" + total;


                            var code = "return function(tryCatch, errorObj, Promise, async) {    \n\
            'use strict';                                                    \n\
            function [TheName](fn) {                                         \n\
                [TheProperties]                                              \n\
                this.fn = fn;                                                \n\
                this.asyncNeeded = true;                                     \n\
                this.now = 0;                                                \n\
            }                                                                \n\
                                                                             \n\
            [TheName].prototype._callFunction = function(promise) {          \n\
                promise._pushContext();                                      \n\
                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
                promise._popContext();                                       \n\
                if (ret === errorObj) {                                      \n\
                    promise._rejectCallback(ret.e, false);                   \n\
                } else {                                                     \n\
                    promise._resolveCallback(ret);                           \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype.checkFulfillment = function(promise) {       \n\
                var now = ++this.now;                                        \n\
                if (now === [TheTotal]) {                                    \n\
                    if (this.asyncNeeded) {                                  \n\
                        async.invoke(this._callFunction, this, promise);     \n\
                    } else {                                                 \n\
                        this._callFunction(promise);                         \n\
                    }                                                        \n\
                                                                             \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype._resultCancelled = function() {              \n\
                [CancellationCode]                                           \n\
            };                                                               \n\
                                                                             \n\
            return [TheName];                                                \n\
        }(tryCatch, errorObj, Promise, async);                               \n\
        ";

                            code = code.replace(/\[TheName\]/g, name).
                            replace(/\[TheTotal\]/g, total).
                            replace(/\[ThePassedArguments\]/g, passedArguments).
                            replace(/\[TheProperties\]/g, assignment).
                            replace(/\[CancellationCode\]/g, cancellationCode);

                            return new Function("tryCatch", "errorObj", "Promise", "async", code)(
                            tryCatch, errorObj, Promise, async);
                        };

                        var holderClasses = [];
                        var thenCallbacks = [];
                        var promiseSetters = [];

                        for (var i = 0; i < 8; ++i) {
                            holderClasses.push(generateHolderClass(i + 1));
                            thenCallbacks.push(thenCallback(i + 1));
                            promiseSetters.push(promiseSetter(i + 1));
                        }

                        reject = function (reason) {
                            this._reject(reason);
                        };
                    }}

                Promise.join = function () {
                    var last = arguments.length - 1;
                    var fn;
                    if (last > 0 && typeof arguments[last] === "function") {
                        fn = arguments[last];
                        if (false) {
                            if (last <= 8 && canEvaluate) {
                                var ret = new Promise(INTERNAL);
                                ret._captureStackTrace();
                                var HolderClass = holderClasses[last - 1];
                                var holder = new HolderClass(fn);
                                var callbacks = thenCallbacks;

                                for (var i = 0; i < last; ++i) {
                                    var maybePromise = tryConvertToPromise(arguments[i], ret);
                                    if (maybePromise instanceof Promise) {
                                        maybePromise = maybePromise._target();
                                        var bitField = maybePromise._bitField;
                                        ;
                                        if ((bitField & 50397184) === 0) {
                                            maybePromise._then(callbacks[i], reject,
                                            undefined, ret, holder);
                                            promiseSetters[i](maybePromise, holder);
                                            holder.asyncNeeded = false;
                                        } else if ((bitField & 33554432) !== 0) {
                                            callbacks[i].call(ret,
                                            maybePromise._value(), holder);
                                        } else if ((bitField & 16777216) !== 0) {
                                            ret._reject(maybePromise._reason());
                                        } else {
                                            ret._cancel();
                                        }
                                    } else {
                                        callbacks[i].call(ret, maybePromise, holder);
                                    }
                                }

                                if (!ret._isFateSealed()) {
                                    if (holder.asyncNeeded) {
                                        var domain = getDomain();
                                        if (domain !== null) {
                                            holder.fn = util.domainBind(domain, holder.fn);
                                        }
                                    }
                                    ret._setAsyncGuaranteed();
                                    ret._setOnCancel(holder);
                                }
                                return ret;
                            }
                        }
                    }
                    var args = [].slice.call(arguments);;
                    if (fn) args.pop();
                    var ret = new PromiseArray(args).promise();
                    return fn !== undefined ? ret.spread(fn) : ret;
                };

            };

        }, { "./util": 36 }], 18: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise,
            PromiseArray,
            apiRejection,
            tryConvertToPromise,
            INTERNAL,
            debug) {
                var getDomain = Promise._getDomain;
                var util = _dereq_("./util");
                var tryCatch = util.tryCatch;
                var errorObj = util.errorObj;
                var async = Promise._async;

                function MappingPromiseArray(promises, fn, limit, _filter) {
                    this.constructor$(promises);
                    this._promise._captureStackTrace();
                    var domain = getDomain();
                    this._callback = domain === null ? fn : util.domainBind(domain, fn);
                    this._preservedValues = _filter === INTERNAL ?
                    new Array(this.length()) :
                    null;
                    this._limit = limit;
                    this._inFlight = 0;
                    this._queue = [];
                    async.invoke(this._asyncInit, this, undefined);
                }
                util.inherits(MappingPromiseArray, PromiseArray);

                MappingPromiseArray.prototype._asyncInit = function () {
                    this._init$(undefined, -2);
                };

                MappingPromiseArray.prototype._init = function () {};

                MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
                    var values = this._values;
                    var length = this.length();
                    var preservedValues = this._preservedValues;
                    var limit = this._limit;

                    if (index < 0) {
                        index = index * -1 - 1;
                        values[index] = value;
                        if (limit >= 1) {
                            this._inFlight--;
                            this._drainQueue();
                            if (this._isResolved()) return true;
                        }
                    } else {
                        if (limit >= 1 && this._inFlight >= limit) {
                            values[index] = value;
                            this._queue.push(index);
                            return false;
                        }
                        if (preservedValues !== null) preservedValues[index] = value;

                        var promise = this._promise;
                        var callback = this._callback;
                        var receiver = promise._boundValue();
                        promise._pushContext();
                        var ret = tryCatch(callback).call(receiver, value, index, length);
                        var promiseCreated = promise._popContext();
                        debug.checkForgottenReturns(
                        ret,
                        promiseCreated,
                        preservedValues !== null ? "Promise.filter" : "Promise.map",
                        promise);

                        if (ret === errorObj) {
                            this._reject(ret.e);
                            return true;
                        }

                        var maybePromise = tryConvertToPromise(ret, this._promise);
                        if (maybePromise instanceof Promise) {
                            maybePromise = maybePromise._target();
                            var bitField = maybePromise._bitField;
                            ;
                            if ((bitField & 50397184) === 0) {
                                if (limit >= 1) this._inFlight++;
                                values[index] = maybePromise;
                                maybePromise._proxy(this, (index + 1) * -1);
                                return false;
                            } else if ((bitField & 33554432) !== 0) {
                                ret = maybePromise._value();
                            } else if ((bitField & 16777216) !== 0) {
                                this._reject(maybePromise._reason());
                                return true;
                            } else {
                                this._cancel();
                                return true;
                            }
                        }
                        values[index] = ret;
                    }
                    var totalResolved = ++this._totalResolved;
                    if (totalResolved >= length) {
                        if (preservedValues !== null) {
                            this._filter(values, preservedValues);
                        } else {
                            this._resolve(values);
                        }
                        return true;
                    }
                    return false;
                };

                MappingPromiseArray.prototype._drainQueue = function () {
                    var queue = this._queue;
                    var limit = this._limit;
                    var values = this._values;
                    while (queue.length > 0 && this._inFlight < limit) {
                        if (this._isResolved()) return;
                        var index = queue.pop();
                        this._promiseFulfilled(values[index], index);
                    }
                };

                MappingPromiseArray.prototype._filter = function (booleans, values) {
                    var len = values.length;
                    var ret = new Array(len);
                    var j = 0;
                    for (var i = 0; i < len; ++i) {
                        if (booleans[i]) ret[j++] = values[i];
                    }
                    ret.length = j;
                    this._resolve(ret);
                };

                MappingPromiseArray.prototype.preservedValues = function () {
                    return this._preservedValues;
                };

                function map(promises, fn, options, _filter) {
                    if (typeof fn !== "function") {
                        return apiRejection("expecting a function but got " + util.classString(fn));
                    }

                    var limit = 0;
                    if (options !== undefined) {
                        if (typeof options === "object" && options !== null) {
                            if (typeof options.concurrency !== "number") {
                                return Promise.reject(
                                new TypeError("'concurrency' must be a number but it is " +
                                util.classString(options.concurrency)));
                            }
                            limit = options.concurrency;
                        } else {
                            return Promise.reject(new TypeError(
                            "options argument must be an object but it is " +
                            util.classString(options)));
                        }
                    }
                    limit = typeof limit === "number" &&
                    isFinite(limit) && limit >= 1 ? limit : 0;
                    return new MappingPromiseArray(promises, fn, limit, _filter).promise();
                }

                Promise.prototype.map = function (fn, options) {
                    return map(this, fn, options, null);
                };

                Promise.map = function (promises, fn, options, _filter) {
                    return map(promises, fn, options, _filter);
                };


            };

        }, { "./util": 36 }], 19: [function (_dereq_, module, exports) {
            "use strict";
            module.exports =
            function (Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
                var util = _dereq_("./util");
                var tryCatch = util.tryCatch;

                Promise.method = function (fn) {
                    if (typeof fn !== "function") {
                        throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
                    }
                    return function () {
                        var ret = new Promise(INTERNAL);
                        ret._captureStackTrace();
                        ret._pushContext();
                        var value = tryCatch(fn).apply(this, arguments);
                        var promiseCreated = ret._popContext();
                        debug.checkForgottenReturns(
                        value, promiseCreated, "Promise.method", ret);
                        ret._resolveFromSyncValue(value);
                        return ret;
                    };
                };

                Promise.attempt = Promise["try"] = function (fn) {
                    if (typeof fn !== "function") {
                        return apiRejection("expecting a function but got " + util.classString(fn));
                    }
                    var ret = new Promise(INTERNAL);
                    ret._captureStackTrace();
                    ret._pushContext();
                    var value;
                    if (arguments.length > 1) {
                        debug.deprecated("calling Promise.try with more than 1 argument");
                        var arg = arguments[1];
                        var ctx = arguments[2];
                        value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg) :
                        tryCatch(fn).call(ctx, arg);
                    } else {
                        value = tryCatch(fn)();
                    }
                    var promiseCreated = ret._popContext();
                    debug.checkForgottenReturns(
                    value, promiseCreated, "Promise.try", ret);
                    ret._resolveFromSyncValue(value);
                    return ret;
                };

                Promise.prototype._resolveFromSyncValue = function (value) {
                    if (value === util.errorObj) {
                        this._rejectCallback(value.e, false);
                    } else {
                        this._resolveCallback(value, true);
                    }
                };
            };

        }, { "./util": 36 }], 20: [function (_dereq_, module, exports) {
            "use strict";
            var util = _dereq_("./util");
            var maybeWrapAsError = util.maybeWrapAsError;
            var errors = _dereq_("./errors");
            var OperationalError = errors.OperationalError;
            var es5 = _dereq_("./es5");

            function isUntypedError(obj) {
                return obj instanceof Error &&
                es5.getPrototypeOf(obj) === Error.prototype;
            }

            var rErrorKey = /^(?:name|message|stack|cause)$/;
            function wrapAsOperationalError(obj) {
                var ret;
                if (isUntypedError(obj)) {
                    ret = new OperationalError(obj);
                    ret.name = obj.name;
                    ret.message = obj.message;
                    ret.stack = obj.stack;
                    var keys = es5.keys(obj);
                    for (var i = 0; i < keys.length; ++i) {
                        var key = keys[i];
                        if (!rErrorKey.test(key)) {
                            ret[key] = obj[key];
                        }
                    }
                    return ret;
                }
                util.markAsOriginatingFromRejection(obj);
                return obj;
            }

            function nodebackForPromise(promise, multiArgs) {
                return function (err, value) {
                    if (promise === null) return;
                    if (err) {
                        var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
                        promise._attachExtraTrace(wrapped);
                        promise._reject(wrapped);
                    } else if (!multiArgs) {
                        promise._fulfill(value);
                    } else {
                        var args = [].slice.call(arguments, 1);;
                        promise._fulfill(args);
                    }
                    promise = null;
                };
            }

            module.exports = nodebackForPromise;

        }, { "./errors": 12, "./es5": 13, "./util": 36 }], 21: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise) {
                var util = _dereq_("./util");
                var async = Promise._async;
                var tryCatch = util.tryCatch;
                var errorObj = util.errorObj;

                function spreadAdapter(val, nodeback) {
                    var promise = this;
                    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
                    var ret =
                    tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
                    if (ret === errorObj) {
                        async.throwLater(ret.e);
                    }
                }

                function successAdapter(val, nodeback) {
                    var promise = this;
                    var receiver = promise._boundValue();
                    var ret = val === undefined ?
                    tryCatch(nodeback).call(receiver, null) :
                    tryCatch(nodeback).call(receiver, null, val);
                    if (ret === errorObj) {
                        async.throwLater(ret.e);
                    }
                }
                function errorAdapter(reason, nodeback) {
                    var promise = this;
                    if (!reason) {
                        var newReason = new Error(reason + "");
                        newReason.cause = reason;
                        reason = newReason;
                    }
                    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
                    if (ret === errorObj) {
                        async.throwLater(ret.e);
                    }
                }

                Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                options) {
                    if (typeof nodeback == "function") {
                        var adapter = successAdapter;
                        if (options !== undefined && Object(options).spread) {
                            adapter = spreadAdapter;
                        }
                        this._then(
                        adapter,
                        errorAdapter,
                        undefined,
                        this,
                        nodeback);

                    }
                    return this;
                };
            };

        }, { "./util": 36 }], 22: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function () {
                var makeSelfResolutionError = function () {
                    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                };
                var reflectHandler = function () {
                    return new Promise.PromiseInspection(this._target());
                };
                var apiRejection = function (msg) {
                    return Promise.reject(new TypeError(msg));
                };
                function Proxyable() {}
                var UNDEFINED_BINDING = {};
                var util = _dereq_("./util");

                var getDomain;
                if (util.isNode) {
                    getDomain = function () {
                        var ret = process.domain;
                        if (ret === undefined) ret = null;
                        return ret;
                    };
                } else {
                    getDomain = function () {
                        return null;
                    };
                }
                util.notEnumerableProp(Promise, "_getDomain", getDomain);

                var es5 = _dereq_("./es5");
                var Async = _dereq_("./async");
                var async = new Async();
                es5.defineProperty(Promise, "_async", { value: async });
                var errors = _dereq_("./errors");
                var TypeError = Promise.TypeError = errors.TypeError;
                Promise.RangeError = errors.RangeError;
                var CancellationError = Promise.CancellationError = errors.CancellationError;
                Promise.TimeoutError = errors.TimeoutError;
                Promise.OperationalError = errors.OperationalError;
                Promise.RejectionError = errors.OperationalError;
                Promise.AggregateError = errors.AggregateError;
                var INTERNAL = function () {};
                var APPLY = {};
                var NEXT_FILTER = {};
                var tryConvertToPromise = _dereq_("./thenables")(Promise, INTERNAL);
                var PromiseArray =
                _dereq_("./promise_array")(Promise, INTERNAL,
                tryConvertToPromise, apiRejection, Proxyable);
                var Context = _dereq_("./context")(Promise);
                /*jshint unused:false*/
                var createContext = Context.create;
                var debug = _dereq_("./debuggability")(Promise, Context);
                var CapturedTrace = debug.CapturedTrace;
                var PassThroughHandlerContext =
                _dereq_("./finally")(Promise, tryConvertToPromise, NEXT_FILTER);
                var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
                var nodebackForPromise = _dereq_("./nodeback");
                var errorObj = util.errorObj;
                var tryCatch = util.tryCatch;
                function check(self, executor) {
                    if (self == null || self.constructor !== Promise) {
                        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                    }
                    if (typeof executor !== "function") {
                        throw new TypeError("expecting a function but got " + util.classString(executor));
                    }

                }

                function Promise(executor) {
                    if (executor !== INTERNAL) {
                        check(this, executor);
                    }
                    this._bitField = 0;
                    this._fulfillmentHandler0 = undefined;
                    this._rejectionHandler0 = undefined;
                    this._promise0 = undefined;
                    this._receiver0 = undefined;
                    this._resolveFromExecutor(executor);
                    this._promiseCreated();
                    this._fireEvent("promiseCreated", this);
                }

                Promise.prototype.toString = function () {
                    return "[object Promise]";
                };

                Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
                    var len = arguments.length;
                    if (len > 1) {
                        var catchInstances = new Array(len - 1),
                        j = 0,i;
                        for (i = 0; i < len - 1; ++i) {
                            var item = arguments[i];
                            if (util.isObject(item)) {
                                catchInstances[j++] = item;
                            } else {
                                return apiRejection("Catch statement predicate: " +
                                "expecting an object but got " + util.classString(item));
                            }
                        }
                        catchInstances.length = j;
                        fn = arguments[i];
                        return this.then(undefined, catchFilter(catchInstances, fn, this));
                    }
                    return this.then(undefined, fn);
                };

                Promise.prototype.reflect = function () {
                    return this._then(reflectHandler,
                    reflectHandler, undefined, this, undefined);
                };

                Promise.prototype.then = function (didFulfill, didReject) {
                    if (debug.warnings() && arguments.length > 0 &&
                    typeof didFulfill !== "function" &&
                    typeof didReject !== "function") {
                        var msg = ".then() only accepts functions but was passed: " +
                        util.classString(didFulfill);
                        if (arguments.length > 1) {
                            msg += ", " + util.classString(didReject);
                        }
                        this._warn(msg);
                    }
                    return this._then(didFulfill, didReject, undefined, undefined, undefined);
                };

                Promise.prototype.done = function (didFulfill, didReject) {
                    var promise =
                    this._then(didFulfill, didReject, undefined, undefined, undefined);
                    promise._setIsFinal();
                };

                Promise.prototype.spread = function (fn) {
                    if (typeof fn !== "function") {
                        return apiRejection("expecting a function but got " + util.classString(fn));
                    }
                    return this.all()._then(fn, undefined, undefined, APPLY, undefined);
                };

                Promise.prototype.toJSON = function () {
                    var ret = {
                        isFulfilled: false,
                        isRejected: false,
                        fulfillmentValue: undefined,
                        rejectionReason: undefined };

                    if (this.isFulfilled()) {
                        ret.fulfillmentValue = this.value();
                        ret.isFulfilled = true;
                    } else if (this.isRejected()) {
                        ret.rejectionReason = this.reason();
                        ret.isRejected = true;
                    }
                    return ret;
                };

                Promise.prototype.all = function () {
                    if (arguments.length > 0) {
                        this._warn(".all() was passed arguments but it does not take any");
                    }
                    return new PromiseArray(this).promise();
                };

                Promise.prototype.error = function (fn) {
                    return this.caught(util.originatesFromRejection, fn);
                };

                Promise.getNewLibraryCopy = module.exports;

                Promise.is = function (val) {
                    return val instanceof Promise;
                };

                Promise.fromNode = Promise.fromCallback = function (fn) {
                    var ret = new Promise(INTERNAL);
                    ret._captureStackTrace();
                    var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs :
                    false;
                    var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
                    if (result === errorObj) {
                        ret._rejectCallback(result.e, true);
                    }
                    if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
                    return ret;
                };

                Promise.all = function (promises) {
                    return new PromiseArray(promises).promise();
                };

                Promise.cast = function (obj) {
                    var ret = tryConvertToPromise(obj);
                    if (!(ret instanceof Promise)) {
                        ret = new Promise(INTERNAL);
                        ret._captureStackTrace();
                        ret._setFulfilled();
                        ret._rejectionHandler0 = obj;
                    }
                    return ret;
                };

                Promise.resolve = Promise.fulfilled = Promise.cast;

                Promise.reject = Promise.rejected = function (reason) {
                    var ret = new Promise(INTERNAL);
                    ret._captureStackTrace();
                    ret._rejectCallback(reason, true);
                    return ret;
                };

                Promise.setScheduler = function (fn) {
                    if (typeof fn !== "function") {
                        throw new TypeError("expecting a function but got " + util.classString(fn));
                    }
                    return async.setScheduler(fn);
                };

                Promise.prototype._then = function (
                didFulfill,
                didReject,
                _, receiver,
                internalData)
                {
                    var haveInternalData = internalData !== undefined;
                    var promise = haveInternalData ? internalData : new Promise(INTERNAL);
                    var target = this._target();
                    var bitField = target._bitField;

                    if (!haveInternalData) {
                        promise._propagateFrom(this, 3);
                        promise._captureStackTrace();
                        if (receiver === undefined &&
                        (this._bitField & 2097152) !== 0) {
                            if (!((bitField & 50397184) === 0)) {
                                receiver = this._boundValue();
                            } else {
                                receiver = target === this ? undefined : this._boundTo;
                            }
                        }
                        this._fireEvent("promiseChained", this, promise);
                    }

                    var domain = getDomain();
                    if (!((bitField & 50397184) === 0)) {
                        var handler,value,settler = target._settlePromiseCtx;
                        if ((bitField & 33554432) !== 0) {
                            value = target._rejectionHandler0;
                            handler = didFulfill;
                        } else if ((bitField & 16777216) !== 0) {
                            value = target._fulfillmentHandler0;
                            handler = didReject;
                            target._unsetRejectionIsUnhandled();
                        } else {
                            settler = target._settlePromiseLateCancellationObserver;
                            value = new CancellationError("late cancellation observer");
                            target._attachExtraTrace(value);
                            handler = didReject;
                        }

                        async.invoke(settler, target, {
                            handler: domain === null ? handler :
                            typeof handler === "function" &&
                            util.domainBind(domain, handler),
                            promise: promise,
                            receiver: receiver,
                            value: value });

                    } else {
                        target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
                    }

                    return promise;
                };

                Promise.prototype._length = function () {
                    return this._bitField & 65535;
                };

                Promise.prototype._isFateSealed = function () {
                    return (this._bitField & 117506048) !== 0;
                };

                Promise.prototype._isFollowing = function () {
                    return (this._bitField & 67108864) === 67108864;
                };

                Promise.prototype._setLength = function (len) {
                    this._bitField = this._bitField & -65536 |
                    len & 65535;
                };

                Promise.prototype._setFulfilled = function () {
                    this._bitField = this._bitField | 33554432;
                    this._fireEvent("promiseFulfilled", this);
                };

                Promise.prototype._setRejected = function () {
                    this._bitField = this._bitField | 16777216;
                    this._fireEvent("promiseRejected", this);
                };

                Promise.prototype._setFollowing = function () {
                    this._bitField = this._bitField | 67108864;
                    this._fireEvent("promiseResolved", this);
                };

                Promise.prototype._setIsFinal = function () {
                    this._bitField = this._bitField | 4194304;
                };

                Promise.prototype._isFinal = function () {
                    return (this._bitField & 4194304) > 0;
                };

                Promise.prototype._unsetCancelled = function () {
                    this._bitField = this._bitField & ~65536;
                };

                Promise.prototype._setCancelled = function () {
                    this._bitField = this._bitField | 65536;
                    this._fireEvent("promiseCancelled", this);
                };

                Promise.prototype._setWillBeCancelled = function () {
                    this._bitField = this._bitField | 8388608;
                };

                Promise.prototype._setAsyncGuaranteed = function () {
                    if (async.hasCustomScheduler()) return;
                    this._bitField = this._bitField | 134217728;
                };

                Promise.prototype._receiverAt = function (index) {
                    var ret = index === 0 ? this._receiver0 : this[
                    index * 4 - 4 + 3];
                    if (ret === UNDEFINED_BINDING) {
                        return undefined;
                    } else if (ret === undefined && this._isBound()) {
                        return this._boundValue();
                    }
                    return ret;
                };

                Promise.prototype._promiseAt = function (index) {
                    return this[
                    index * 4 - 4 + 2];
                };

                Promise.prototype._fulfillmentHandlerAt = function (index) {
                    return this[
                    index * 4 - 4 + 0];
                };

                Promise.prototype._rejectionHandlerAt = function (index) {
                    return this[
                    index * 4 - 4 + 1];
                };

                Promise.prototype._boundValue = function () {};

                Promise.prototype._migrateCallback0 = function (follower) {
                    var bitField = follower._bitField;
                    var fulfill = follower._fulfillmentHandler0;
                    var reject = follower._rejectionHandler0;
                    var promise = follower._promise0;
                    var receiver = follower._receiverAt(0);
                    if (receiver === undefined) receiver = UNDEFINED_BINDING;
                    this._addCallbacks(fulfill, reject, promise, receiver, null);
                };

                Promise.prototype._migrateCallbackAt = function (follower, index) {
                    var fulfill = follower._fulfillmentHandlerAt(index);
                    var reject = follower._rejectionHandlerAt(index);
                    var promise = follower._promiseAt(index);
                    var receiver = follower._receiverAt(index);
                    if (receiver === undefined) receiver = UNDEFINED_BINDING;
                    this._addCallbacks(fulfill, reject, promise, receiver, null);
                };

                Promise.prototype._addCallbacks = function (
                fulfill,
                reject,
                promise,
                receiver,
                domain)
                {
                    var index = this._length();

                    if (index >= 65535 - 4) {
                        index = 0;
                        this._setLength(0);
                    }

                    if (index === 0) {
                        this._promise0 = promise;
                        this._receiver0 = receiver;
                        if (typeof fulfill === "function") {
                            this._fulfillmentHandler0 =
                            domain === null ? fulfill : util.domainBind(domain, fulfill);
                        }
                        if (typeof reject === "function") {
                            this._rejectionHandler0 =
                            domain === null ? reject : util.domainBind(domain, reject);
                        }
                    } else {
                        var base = index * 4 - 4;
                        this[base + 2] = promise;
                        this[base + 3] = receiver;
                        if (typeof fulfill === "function") {
                            this[base + 0] =
                            domain === null ? fulfill : util.domainBind(domain, fulfill);
                        }
                        if (typeof reject === "function") {
                            this[base + 1] =
                            domain === null ? reject : util.domainBind(domain, reject);
                        }
                    }
                    this._setLength(index + 1);
                    return index;
                };

                Promise.prototype._proxy = function (proxyable, arg) {
                    this._addCallbacks(undefined, undefined, arg, proxyable, null);
                };

                Promise.prototype._resolveCallback = function (value, shouldBind) {
                    if ((this._bitField & 117506048) !== 0) return;
                    if (value === this)
                    return this._rejectCallback(makeSelfResolutionError(), false);
                    var maybePromise = tryConvertToPromise(value, this);
                    if (!(maybePromise instanceof Promise)) return this._fulfill(value);

                    if (shouldBind) this._propagateFrom(maybePromise, 2);

                    var promise = maybePromise._target();

                    if (promise === this) {
                        this._reject(makeSelfResolutionError());
                        return;
                    }

                    var bitField = promise._bitField;
                    if ((bitField & 50397184) === 0) {
                        var len = this._length();
                        if (len > 0) promise._migrateCallback0(this);
                        for (var i = 1; i < len; ++i) {
                            promise._migrateCallbackAt(this, i);
                        }
                        this._setFollowing();
                        this._setLength(0);
                        this._setFollowee(promise);
                    } else if ((bitField & 33554432) !== 0) {
                        this._fulfill(promise._value());
                    } else if ((bitField & 16777216) !== 0) {
                        this._reject(promise._reason());
                    } else {
                        var reason = new CancellationError("late cancellation observer");
                        promise._attachExtraTrace(reason);
                        this._reject(reason);
                    }
                };

                Promise.prototype._rejectCallback =
                function (reason, synchronous, ignoreNonErrorWarnings) {
                    var trace = util.ensureErrorObject(reason);
                    var hasStack = trace === reason;
                    if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
                        var message = "a promise was rejected with a non-error: " +
                        util.classString(reason);
                        this._warn(message, true);
                    }
                    this._attachExtraTrace(trace, synchronous ? hasStack : false);
                    this._reject(reason);
                };

                Promise.prototype._resolveFromExecutor = function (executor) {
                    if (executor === INTERNAL) return;
                    var promise = this;
                    this._captureStackTrace();
                    this._pushContext();
                    var synchronous = true;
                    var r = this._execute(executor, function (value) {
                        promise._resolveCallback(value);
                    }, function (reason) {
                        promise._rejectCallback(reason, synchronous);
                    });
                    synchronous = false;
                    this._popContext();

                    if (r !== undefined) {
                        promise._rejectCallback(r, true);
                    }
                };

                Promise.prototype._settlePromiseFromHandler = function (
                handler, receiver, value, promise)
                {
                    var bitField = promise._bitField;
                    if ((bitField & 65536) !== 0) return;
                    promise._pushContext();
                    var x;
                    if (receiver === APPLY) {
                        if (!value || typeof value.length !== "number") {
                            x = errorObj;
                            x.e = new TypeError("cannot .spread() a non-array: " +
                            util.classString(value));
                        } else {
                            x = tryCatch(handler).apply(this._boundValue(), value);
                        }
                    } else {
                        x = tryCatch(handler).call(receiver, value);
                    }
                    var promiseCreated = promise._popContext();
                    bitField = promise._bitField;
                    if ((bitField & 65536) !== 0) return;

                    if (x === NEXT_FILTER) {
                        promise._reject(value);
                    } else if (x === errorObj) {
                        promise._rejectCallback(x.e, false);
                    } else {
                        debug.checkForgottenReturns(x, promiseCreated, "", promise, this);
                        promise._resolveCallback(x);
                    }
                };

                Promise.prototype._target = function () {
                    var ret = this;
                    while (ret._isFollowing()) ret = ret._followee();
                    return ret;
                };

                Promise.prototype._followee = function () {
                    return this._rejectionHandler0;
                };

                Promise.prototype._setFollowee = function (promise) {
                    this._rejectionHandler0 = promise;
                };

                Promise.prototype._settlePromise = function (promise, handler, receiver, value) {
                    var isPromise = promise instanceof Promise;
                    var bitField = this._bitField;
                    var asyncGuaranteed = (bitField & 134217728) !== 0;
                    if ((bitField & 65536) !== 0) {
                        if (isPromise) promise._invokeInternalOnCancel();

                        if (receiver instanceof PassThroughHandlerContext &&
                        receiver.isFinallyHandler()) {
                            receiver.cancelPromise = promise;
                            if (tryCatch(handler).call(receiver, value) === errorObj) {
                                promise._reject(errorObj.e);
                            }
                        } else if (handler === reflectHandler) {
                            promise._fulfill(reflectHandler.call(receiver));
                        } else if (receiver instanceof Proxyable) {
                            receiver._promiseCancelled(promise);
                        } else if (isPromise || promise instanceof PromiseArray) {
                            promise._cancel();
                        } else {
                            receiver.cancel();
                        }
                    } else if (typeof handler === "function") {
                        if (!isPromise) {
                            handler.call(receiver, value, promise);
                        } else {
                            if (asyncGuaranteed) promise._setAsyncGuaranteed();
                            this._settlePromiseFromHandler(handler, receiver, value, promise);
                        }
                    } else if (receiver instanceof Proxyable) {
                        if (!receiver._isResolved()) {
                            if ((bitField & 33554432) !== 0) {
                                receiver._promiseFulfilled(value, promise);
                            } else {
                                receiver._promiseRejected(value, promise);
                            }
                        }
                    } else if (isPromise) {
                        if (asyncGuaranteed) promise._setAsyncGuaranteed();
                        if ((bitField & 33554432) !== 0) {
                            promise._fulfill(value);
                        } else {
                            promise._reject(value);
                        }
                    }
                };

                Promise.prototype._settlePromiseLateCancellationObserver = function (ctx) {
                    var handler = ctx.handler;
                    var promise = ctx.promise;
                    var receiver = ctx.receiver;
                    var value = ctx.value;
                    if (typeof handler === "function") {
                        if (!(promise instanceof Promise)) {
                            handler.call(receiver, value, promise);
                        } else {
                            this._settlePromiseFromHandler(handler, receiver, value, promise);
                        }
                    } else if (promise instanceof Promise) {
                        promise._reject(value);
                    }
                };

                Promise.prototype._settlePromiseCtx = function (ctx) {
                    this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
                };

                Promise.prototype._settlePromise0 = function (handler, value, bitField) {
                    var promise = this._promise0;
                    var receiver = this._receiverAt(0);
                    this._promise0 = undefined;
                    this._receiver0 = undefined;
                    this._settlePromise(promise, handler, receiver, value);
                };

                Promise.prototype._clearCallbackDataAtIndex = function (index) {
                    var base = index * 4 - 4;
                    this[base + 2] =
                    this[base + 3] =
                    this[base + 0] =
                    this[base + 1] = undefined;
                };

                Promise.prototype._fulfill = function (value) {
                    var bitField = this._bitField;
                    if ((bitField & 117506048) >>> 16) return;
                    if (value === this) {
                        var err = makeSelfResolutionError();
                        this._attachExtraTrace(err);
                        return this._reject(err);
                    }
                    this._setFulfilled();
                    this._rejectionHandler0 = value;

                    if ((bitField & 65535) > 0) {
                        if ((bitField & 134217728) !== 0) {
                            this._settlePromises();
                        } else {
                            async.settlePromises(this);
                        }
                    }
                };

                Promise.prototype._reject = function (reason) {
                    var bitField = this._bitField;
                    if ((bitField & 117506048) >>> 16) return;
                    this._setRejected();
                    this._fulfillmentHandler0 = reason;

                    if (this._isFinal()) {
                        return async.fatalError(reason, util.isNode);
                    }

                    if ((bitField & 65535) > 0) {
                        async.settlePromises(this);
                    } else {
                        this._ensurePossibleRejectionHandled();
                    }
                };

                Promise.prototype._fulfillPromises = function (len, value) {
                    for (var i = 1; i < len; i++) {
                        var handler = this._fulfillmentHandlerAt(i);
                        var promise = this._promiseAt(i);
                        var receiver = this._receiverAt(i);
                        this._clearCallbackDataAtIndex(i);
                        this._settlePromise(promise, handler, receiver, value);
                    }
                };

                Promise.prototype._rejectPromises = function (len, reason) {
                    for (var i = 1; i < len; i++) {
                        var handler = this._rejectionHandlerAt(i);
                        var promise = this._promiseAt(i);
                        var receiver = this._receiverAt(i);
                        this._clearCallbackDataAtIndex(i);
                        this._settlePromise(promise, handler, receiver, reason);
                    }
                };

                Promise.prototype._settlePromises = function () {
                    var bitField = this._bitField;
                    var len = bitField & 65535;

                    if (len > 0) {
                        if ((bitField & 16842752) !== 0) {
                            var reason = this._fulfillmentHandler0;
                            this._settlePromise0(this._rejectionHandler0, reason, bitField);
                            this._rejectPromises(len, reason);
                        } else {
                            var value = this._rejectionHandler0;
                            this._settlePromise0(this._fulfillmentHandler0, value, bitField);
                            this._fulfillPromises(len, value);
                        }
                        this._setLength(0);
                    }
                    this._clearCancellationData();
                };

                Promise.prototype._settledValue = function () {
                    var bitField = this._bitField;
                    if ((bitField & 33554432) !== 0) {
                        return this._rejectionHandler0;
                    } else if ((bitField & 16777216) !== 0) {
                        return this._fulfillmentHandler0;
                    }
                };

                function deferResolve(v) {this.promise._resolveCallback(v);}
                function deferReject(v) {this.promise._rejectCallback(v, false);}

                Promise.defer = Promise.pending = function () {
                    debug.deprecated("Promise.defer", "new Promise");
                    var promise = new Promise(INTERNAL);
                    return {
                        promise: promise,
                        resolve: deferResolve,
                        reject: deferReject };

                };

                util.notEnumerableProp(Promise,
                "_makeSelfResolutionError",
                makeSelfResolutionError);

                _dereq_("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection,
                debug);
                _dereq_("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
                _dereq_("./cancel")(Promise, PromiseArray, apiRejection, debug);
                _dereq_("./direct_resolve")(Promise);
                _dereq_("./synchronous_inspection")(Promise);
                _dereq_("./join")(
                Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);
                Promise.Promise = Promise;
                Promise.version = "3.5.0";
                _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
                _dereq_('./call_get.js')(Promise);
                _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
                _dereq_('./timers.js')(Promise, INTERNAL, debug);
                _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
                _dereq_('./nodeify.js')(Promise);
                _dereq_('./promisify.js')(Promise, INTERNAL);
                _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
                _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
                _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
                _dereq_('./settle.js')(Promise, PromiseArray, debug);
                _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
                _dereq_('./filter.js')(Promise, INTERNAL);
                _dereq_('./each.js')(Promise, INTERNAL);
                _dereq_('./any.js')(Promise);

                util.toFastProperties(Promise);
                util.toFastProperties(Promise.prototype);
                function fillTypes(value) {
                    var p = new Promise(INTERNAL);
                    p._fulfillmentHandler0 = value;
                    p._rejectionHandler0 = value;
                    p._promise0 = value;
                    p._receiver0 = value;
                }
                // Complete slack tracking, opt out of field-type tracking and           
                // stabilize map                                                         
                fillTypes({ a: 1 });
                fillTypes({ b: 2 });
                fillTypes({ c: 3 });
                fillTypes(1);
                fillTypes(function () {});
                fillTypes(undefined);
                fillTypes(false);
                fillTypes(new Promise(INTERNAL));
                debug.setBounds(Async.firstLineError, util.lastLineError);
                return Promise;

            };

        }, { "./any.js": 1, "./async": 2, "./bind": 3, "./call_get.js": 5, "./cancel": 6, "./catch_filter": 7, "./context": 8, "./debuggability": 9, "./direct_resolve": 10, "./each.js": 11, "./errors": 12, "./es5": 13, "./filter.js": 14, "./finally": 15, "./generators.js": 16, "./join": 17, "./map.js": 18, "./method": 19, "./nodeback": 20, "./nodeify.js": 21, "./promise_array": 23, "./promisify.js": 24, "./props.js": 25, "./race.js": 27, "./reduce.js": 28, "./settle.js": 30, "./some.js": 31, "./synchronous_inspection": 32, "./thenables": 33, "./timers.js": 34, "./using.js": 35, "./util": 36 }], 23: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, INTERNAL, tryConvertToPromise,
            apiRejection, Proxyable) {
                var util = _dereq_("./util");
                var isArray = util.isArray;

                function toResolutionValue(val) {
                    switch (val) {
                        case -2:return [];
                        case -3:return {};
                        case -6:return new Map();}

                }

                function PromiseArray(values) {
                    var promise = this._promise = new Promise(INTERNAL);
                    if (values instanceof Promise) {
                        promise._propagateFrom(values, 3);
                    }
                    promise._setOnCancel(this);
                    this._values = values;
                    this._length = 0;
                    this._totalResolved = 0;
                    this._init(undefined, -2);
                }
                util.inherits(PromiseArray, Proxyable);

                PromiseArray.prototype.length = function () {
                    return this._length;
                };

                PromiseArray.prototype.promise = function () {
                    return this._promise;
                };

                PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
                    var values = tryConvertToPromise(this._values, this._promise);
                    if (values instanceof Promise) {
                        values = values._target();
                        var bitField = values._bitField;
                        ;
                        this._values = values;

                        if ((bitField & 50397184) === 0) {
                            this._promise._setAsyncGuaranteed();
                            return values._then(
                            init,
                            this._reject,
                            undefined,
                            this,
                            resolveValueIfEmpty);

                        } else if ((bitField & 33554432) !== 0) {
                            values = values._value();
                        } else if ((bitField & 16777216) !== 0) {
                            return this._reject(values._reason());
                        } else {
                            return this._cancel();
                        }
                    }
                    values = util.asArray(values);
                    if (values === null) {
                        var err = apiRejection(
                        "expecting an array or an iterable object but got " + util.classString(values)).reason();
                        this._promise._rejectCallback(err, false);
                        return;
                    }

                    if (values.length === 0) {
                        if (resolveValueIfEmpty === -5) {
                            this._resolveEmptyArray();
                        } else
                        {
                            this._resolve(toResolutionValue(resolveValueIfEmpty));
                        }
                        return;
                    }
                    this._iterate(values);
                };

                PromiseArray.prototype._iterate = function (values) {
                    var len = this.getActualLength(values.length);
                    this._length = len;
                    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
                    var result = this._promise;
                    var isResolved = false;
                    var bitField = null;
                    for (var i = 0; i < len; ++i) {
                        var maybePromise = tryConvertToPromise(values[i], result);

                        if (maybePromise instanceof Promise) {
                            maybePromise = maybePromise._target();
                            bitField = maybePromise._bitField;
                        } else {
                            bitField = null;
                        }

                        if (isResolved) {
                            if (bitField !== null) {
                                maybePromise.suppressUnhandledRejections();
                            }
                        } else if (bitField !== null) {
                            if ((bitField & 50397184) === 0) {
                                maybePromise._proxy(this, i);
                                this._values[i] = maybePromise;
                            } else if ((bitField & 33554432) !== 0) {
                                isResolved = this._promiseFulfilled(maybePromise._value(), i);
                            } else if ((bitField & 16777216) !== 0) {
                                isResolved = this._promiseRejected(maybePromise._reason(), i);
                            } else {
                                isResolved = this._promiseCancelled(i);
                            }
                        } else {
                            isResolved = this._promiseFulfilled(maybePromise, i);
                        }
                    }
                    if (!isResolved) result._setAsyncGuaranteed();
                };

                PromiseArray.prototype._isResolved = function () {
                    return this._values === null;
                };

                PromiseArray.prototype._resolve = function (value) {
                    this._values = null;
                    this._promise._fulfill(value);
                };

                PromiseArray.prototype._cancel = function () {
                    if (this._isResolved() || !this._promise._isCancellable()) return;
                    this._values = null;
                    this._promise._cancel();
                };

                PromiseArray.prototype._reject = function (reason) {
                    this._values = null;
                    this._promise._rejectCallback(reason, false);
                };

                PromiseArray.prototype._promiseFulfilled = function (value, index) {
                    this._values[index] = value;
                    var totalResolved = ++this._totalResolved;
                    if (totalResolved >= this._length) {
                        this._resolve(this._values);
                        return true;
                    }
                    return false;
                };

                PromiseArray.prototype._promiseCancelled = function () {
                    this._cancel();
                    return true;
                };

                PromiseArray.prototype._promiseRejected = function (reason) {
                    this._totalResolved++;
                    this._reject(reason);
                    return true;
                };

                PromiseArray.prototype._resultCancelled = function () {
                    if (this._isResolved()) return;
                    var values = this._values;
                    this._cancel();
                    if (values instanceof Promise) {
                        values.cancel();
                    } else {
                        for (var i = 0; i < values.length; ++i) {
                            if (values[i] instanceof Promise) {
                                values[i].cancel();
                            }
                        }
                    }
                };

                PromiseArray.prototype.shouldCopyValues = function () {
                    return true;
                };

                PromiseArray.prototype.getActualLength = function (len) {
                    return len;
                };

                return PromiseArray;
            };

        }, { "./util": 36 }], 24: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, INTERNAL) {
                var THIS = {};
                var util = _dereq_("./util");
                var nodebackForPromise = _dereq_("./nodeback");
                var withAppended = util.withAppended;
                var maybeWrapAsError = util.maybeWrapAsError;
                var canEvaluate = util.canEvaluate;
                var TypeError = _dereq_("./errors").TypeError;
                var defaultSuffix = "Async";
                var defaultPromisified = { __isPromisified__: true };
                var noCopyProps = [
                "arity", "length",
                "name",
                "arguments",
                "caller",
                "callee",
                "prototype",
                "__isPromisified__"];

                var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

                var defaultFilter = function (name) {
                    return util.isIdentifier(name) &&
                    name.charAt(0) !== "_" &&
                    name !== "constructor";
                };

                function propsFilter(key) {
                    return !noCopyPropsPattern.test(key);
                }

                function isPromisified(fn) {
                    try {
                        return fn.__isPromisified__ === true;
                    }
                    catch (e) {
                        return false;
                    }
                }

                function hasPromisified(obj, key, suffix) {
                    var val = util.getDataPropertyOrDefault(obj, key + suffix,
                    defaultPromisified);
                    return val ? isPromisified(val) : false;
                }
                function checkValid(ret, suffix, suffixRegexp) {
                    for (var i = 0; i < ret.length; i += 2) {
                        var key = ret[i];
                        if (suffixRegexp.test(key)) {
                            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
                            for (var j = 0; j < ret.length; j += 2) {
                                if (ret[j] === keyWithoutAsyncSuffix) {
                                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a".
                                    replace("%s", suffix));
                                }
                            }
                        }
                    }
                }

                function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
                    var keys = util.inheritedDataKeys(obj);
                    var ret = [];
                    for (var i = 0; i < keys.length; ++i) {
                        var key = keys[i];
                        var value = obj[key];
                        var passesDefaultFilter = filter === defaultFilter ?
                        true : defaultFilter(key, value, obj);
                        if (typeof value === "function" &&
                        !isPromisified(value) &&
                        !hasPromisified(obj, key, suffix) &&
                        filter(key, value, obj, passesDefaultFilter)) {
                            ret.push(key, value);
                        }
                    }
                    checkValid(ret, suffix, suffixRegexp);
                    return ret;
                }

                var escapeIdentRegex = function (str) {
                    return str.replace(/([$])/, "\\$");
                };

                var makeNodePromisifiedEval;
                if (false) {
                    var switchCaseArgumentOrder = function (likelyArgumentCount) {
                        var ret = [likelyArgumentCount];
                        var min = Math.max(0, likelyArgumentCount - 1 - 3);
                        for (var i = likelyArgumentCount - 1; i >= min; --i) {
                            ret.push(i);
                        }
                        for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
                            ret.push(i);
                        }
                        return ret;
                    };

                    var argumentSequence = function (argumentCount) {
                        return util.filledRange(argumentCount, "_arg", "");
                    };

                    var parameterDeclaration = function (parameterCount) {
                        return util.filledRange(
                        Math.max(parameterCount, 3), "_arg", "");
                    };

                    var parameterCount = function (fn) {
                        if (typeof fn.length === "number") {
                            return Math.max(Math.min(fn.length, 1023 + 1), 0);
                        }
                        return 0;
                    };

                    makeNodePromisifiedEval =
                    function (callback, receiver, originalName, fn, _, multiArgs) {
                        var newParameterCount = Math.max(0, parameterCount(fn) - 1);
                        var argumentOrder = switchCaseArgumentOrder(newParameterCount);
                        var shouldProxyThis = typeof callback === "string" || receiver === THIS;

                        function generateCallForArgumentCount(count) {
                            var args = argumentSequence(count).join(", ");
                            var comma = count > 0 ? ", " : "";
                            var ret;
                            if (shouldProxyThis) {
                                ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
                            } else {
                                ret = receiver === undefined ?
                                "ret = callback({{args}}, nodeback); break;\n" :
                                "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
                            }
                            return ret.replace("{{args}}", args).replace(", ", comma);
                        }

                        function generateArgumentSwitchCase() {
                            var ret = "";
                            for (var i = 0; i < argumentOrder.length; ++i) {
                                ret += "case " + argumentOrder[i] + ":" +
                                generateCallForArgumentCount(argumentOrder[i]);
                            }

                            ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", shouldProxyThis ?
                            "ret = callback.apply(this, args);\n" :
                            "ret = callback.apply(receiver, args);\n");
                            return ret;
                        }

                        var getFunctionCode = typeof callback === "string" ?
                        "this != null ? this['" + callback + "'] : fn" :
                        "fn";
                        var body = "'use strict';                                                \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase()).
                        replace("[GetFunctionCode]", getFunctionCode);
                        body = body.replace("Parameters", parameterDeclaration(newParameterCount));
                        return new Function("Promise",
                        "fn",
                        "receiver",
                        "withAppended",
                        "maybeWrapAsError",
                        "nodebackForPromise",
                        "tryCatch",
                        "errorObj",
                        "notEnumerableProp",
                        "INTERNAL",
                        body)(
                        Promise,
                        fn,
                        receiver,
                        withAppended,
                        maybeWrapAsError,
                        nodebackForPromise,
                        util.tryCatch,
                        util.errorObj,
                        util.notEnumerableProp,
                        INTERNAL);
                    };
                }

                function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
                    var defaultThis = function () {return this;}();
                    var method = callback;
                    if (typeof method === "string") {
                        callback = fn;
                    }
                    function promisified() {
                        var _receiver = receiver;
                        if (receiver === THIS) _receiver = this;
                        var promise = new Promise(INTERNAL);
                        promise._captureStackTrace();
                        var cb = typeof method === "string" && this !== defaultThis ?
                        this[method] : callback;
                        var fn = nodebackForPromise(promise, multiArgs);
                        try {
                            cb.apply(_receiver, withAppended(arguments, fn));
                        } catch (e) {
                            promise._rejectCallback(maybeWrapAsError(e), true, true);
                        }
                        if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
                        return promise;
                    }
                    util.notEnumerableProp(promisified, "__isPromisified__", true);
                    return promisified;
                }

                var makeNodePromisified = canEvaluate ?
                makeNodePromisifiedEval :
                makeNodePromisifiedClosure;

                function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
                    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
                    var methods =
                    promisifiableMethods(obj, suffix, suffixRegexp, filter);

                    for (var i = 0, len = methods.length; i < len; i += 2) {
                        var key = methods[i];
                        var fn = methods[i + 1];
                        var promisifiedKey = key + suffix;
                        if (promisifier === makeNodePromisified) {
                            obj[promisifiedKey] =
                            makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
                        } else {
                            var promisified = promisifier(fn, function () {
                                return makeNodePromisified(key, THIS, key,
                                fn, suffix, multiArgs);
                            });
                            util.notEnumerableProp(promisified, "__isPromisified__", true);
                            obj[promisifiedKey] = promisified;
                        }
                    }
                    util.toFastProperties(obj);
                    return obj;
                }

                function promisify(callback, receiver, multiArgs) {
                    return makeNodePromisified(callback, receiver, undefined,
                    callback, null, multiArgs);
                }

                Promise.promisify = function (fn, options) {
                    if (typeof fn !== "function") {
                        throw new TypeError("expecting a function but got " + util.classString(fn));
                    }
                    if (isPromisified(fn)) {
                        return fn;
                    }
                    options = Object(options);
                    var receiver = options.context === undefined ? THIS : options.context;
                    var multiArgs = !!options.multiArgs;
                    var ret = promisify(fn, receiver, multiArgs);
                    util.copyDescriptors(fn, ret, propsFilter);
                    return ret;
                };

                Promise.promisifyAll = function (target, options) {
                    if (typeof target !== "function" && typeof target !== "object") {
                        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                    }
                    options = Object(options);
                    var multiArgs = !!options.multiArgs;
                    var suffix = options.suffix;
                    if (typeof suffix !== "string") suffix = defaultSuffix;
                    var filter = options.filter;
                    if (typeof filter !== "function") filter = defaultFilter;
                    var promisifier = options.promisifier;
                    if (typeof promisifier !== "function") promisifier = makeNodePromisified;

                    if (!util.isIdentifier(suffix)) {
                        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                    }

                    var keys = util.inheritedDataKeys(target);
                    for (var i = 0; i < keys.length; ++i) {
                        var value = target[keys[i]];
                        if (keys[i] !== "constructor" &&
                        util.isClass(value)) {
                            promisifyAll(value.prototype, suffix, filter, promisifier,
                            multiArgs);
                            promisifyAll(value, suffix, filter, promisifier, multiArgs);
                        }
                    }

                    return promisifyAll(target, suffix, filter, promisifier, multiArgs);
                };
            };


        }, { "./errors": 12, "./nodeback": 20, "./util": 36 }], 25: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (
            Promise, PromiseArray, tryConvertToPromise, apiRejection) {
                var util = _dereq_("./util");
                var isObject = util.isObject;
                var es5 = _dereq_("./es5");
                var Es6Map;
                if (typeof Map === "function") Es6Map = Map;

                var mapToEntries = function () {
                    var index = 0;
                    var size = 0;

                    function extractEntry(value, key) {
                        this[index] = value;
                        this[index + size] = key;
                        index++;
                    }

                    return function mapToEntries(map) {
                        size = map.size;
                        index = 0;
                        var ret = new Array(map.size * 2);
                        map.forEach(extractEntry, ret);
                        return ret;
                    };
                }();

                var entriesToMap = function (entries) {
                    var ret = new Es6Map();
                    var length = entries.length / 2 | 0;
                    for (var i = 0; i < length; ++i) {
                        var key = entries[length + i];
                        var value = entries[i];
                        ret.set(key, value);
                    }
                    return ret;
                };

                function PropertiesPromiseArray(obj) {
                    var isMap = false;
                    var entries;
                    if (Es6Map !== undefined && obj instanceof Es6Map) {
                        entries = mapToEntries(obj);
                        isMap = true;
                    } else {
                        var keys = es5.keys(obj);
                        var len = keys.length;
                        entries = new Array(len * 2);
                        for (var i = 0; i < len; ++i) {
                            var key = keys[i];
                            entries[i] = obj[key];
                            entries[i + len] = key;
                        }
                    }
                    this.constructor$(entries);
                    this._isMap = isMap;
                    this._init$(undefined, isMap ? -6 : -3);
                }
                util.inherits(PropertiesPromiseArray, PromiseArray);

                PropertiesPromiseArray.prototype._init = function () {};

                PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
                    this._values[index] = value;
                    var totalResolved = ++this._totalResolved;
                    if (totalResolved >= this._length) {
                        var val;
                        if (this._isMap) {
                            val = entriesToMap(this._values);
                        } else {
                            val = {};
                            var keyOffset = this.length();
                            for (var i = 0, len = this.length(); i < len; ++i) {
                                val[this._values[i + keyOffset]] = this._values[i];
                            }
                        }
                        this._resolve(val);
                        return true;
                    }
                    return false;
                };

                PropertiesPromiseArray.prototype.shouldCopyValues = function () {
                    return false;
                };

                PropertiesPromiseArray.prototype.getActualLength = function (len) {
                    return len >> 1;
                };

                function props(promises) {
                    var ret;
                    var castValue = tryConvertToPromise(promises);

                    if (!isObject(castValue)) {
                        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                    } else if (castValue instanceof Promise) {
                        ret = castValue._then(
                        Promise.props, undefined, undefined, undefined, undefined);
                    } else {
                        ret = new PropertiesPromiseArray(castValue).promise();
                    }

                    if (castValue instanceof Promise) {
                        ret._propagateFrom(castValue, 2);
                    }
                    return ret;
                }

                Promise.prototype.props = function () {
                    return props(this);
                };

                Promise.props = function (promises) {
                    return props(promises);
                };
            };

        }, { "./es5": 13, "./util": 36 }], 26: [function (_dereq_, module, exports) {
            "use strict";
            function arrayMove(src, srcIndex, dst, dstIndex, len) {
                for (var j = 0; j < len; ++j) {
                    dst[j + dstIndex] = src[j + srcIndex];
                    src[j + srcIndex] = void 0;
                }
            }

            function Queue(capacity) {
                this._capacity = capacity;
                this._length = 0;
                this._front = 0;
            }

            Queue.prototype._willBeOverCapacity = function (size) {
                return this._capacity < size;
            };

            Queue.prototype._pushOne = function (arg) {
                var length = this.length();
                this._checkCapacity(length + 1);
                var i = this._front + length & this._capacity - 1;
                this[i] = arg;
                this._length = length + 1;
            };

            Queue.prototype.push = function (fn, receiver, arg) {
                var length = this.length() + 3;
                if (this._willBeOverCapacity(length)) {
                    this._pushOne(fn);
                    this._pushOne(receiver);
                    this._pushOne(arg);
                    return;
                }
                var j = this._front + length - 3;
                this._checkCapacity(length);
                var wrapMask = this._capacity - 1;
                this[j + 0 & wrapMask] = fn;
                this[j + 1 & wrapMask] = receiver;
                this[j + 2 & wrapMask] = arg;
                this._length = length;
            };

            Queue.prototype.shift = function () {
                var front = this._front,
                ret = this[front];

                this[front] = undefined;
                this._front = front + 1 & this._capacity - 1;
                this._length--;
                return ret;
            };

            Queue.prototype.length = function () {
                return this._length;
            };

            Queue.prototype._checkCapacity = function (size) {
                if (this._capacity < size) {
                    this._resizeTo(this._capacity << 1);
                }
            };

            Queue.prototype._resizeTo = function (capacity) {
                var oldCapacity = this._capacity;
                this._capacity = capacity;
                var front = this._front;
                var length = this._length;
                var moveItemsCount = front + length & oldCapacity - 1;
                arrayMove(this, 0, this, oldCapacity, moveItemsCount);
            };

            module.exports = Queue;

        }, {}], 27: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (
            Promise, INTERNAL, tryConvertToPromise, apiRejection) {
                var util = _dereq_("./util");

                var raceLater = function (promise) {
                    return promise.then(function (array) {
                        return race(array, promise);
                    });
                };

                function race(promises, parent) {
                    var maybePromise = tryConvertToPromise(promises);

                    if (maybePromise instanceof Promise) {
                        return raceLater(maybePromise);
                    } else {
                        promises = util.asArray(promises);
                        if (promises === null)
                        return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
                    }

                    var ret = new Promise(INTERNAL);
                    if (parent !== undefined) {
                        ret._propagateFrom(parent, 3);
                    }
                    var fulfill = ret._fulfill;
                    var reject = ret._reject;
                    for (var i = 0, len = promises.length; i < len; ++i) {
                        var val = promises[i];

                        if (val === undefined && !(i in promises)) {
                            continue;
                        }

                        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
                    }
                    return ret;
                }

                Promise.race = function (promises) {
                    return race(promises, undefined);
                };

                Promise.prototype.race = function () {
                    return race(this, undefined);
                };

            };

        }, { "./util": 36 }], 28: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise,
            PromiseArray,
            apiRejection,
            tryConvertToPromise,
            INTERNAL,
            debug) {
                var getDomain = Promise._getDomain;
                var util = _dereq_("./util");
                var tryCatch = util.tryCatch;

                function ReductionPromiseArray(promises, fn, initialValue, _each) {
                    this.constructor$(promises);
                    var domain = getDomain();
                    this._fn = domain === null ? fn : util.domainBind(domain, fn);
                    if (initialValue !== undefined) {
                        initialValue = Promise.resolve(initialValue);
                        initialValue._attachCancellationCallback(this);
                    }
                    this._initialValue = initialValue;
                    this._currentCancellable = null;
                    if (_each === INTERNAL) {
                        this._eachValues = Array(this._length);
                    } else if (_each === 0) {
                        this._eachValues = null;
                    } else {
                        this._eachValues = undefined;
                    }
                    this._promise._captureStackTrace();
                    this._init$(undefined, -5);
                }
                util.inherits(ReductionPromiseArray, PromiseArray);

                ReductionPromiseArray.prototype._gotAccum = function (accum) {
                    if (this._eachValues !== undefined &&
                    this._eachValues !== null &&
                    accum !== INTERNAL) {
                        this._eachValues.push(accum);
                    }
                };

                ReductionPromiseArray.prototype._eachComplete = function (value) {
                    if (this._eachValues !== null) {
                        this._eachValues.push(value);
                    }
                    return this._eachValues;
                };

                ReductionPromiseArray.prototype._init = function () {};

                ReductionPromiseArray.prototype._resolveEmptyArray = function () {
                    this._resolve(this._eachValues !== undefined ? this._eachValues :
                    this._initialValue);
                };

                ReductionPromiseArray.prototype.shouldCopyValues = function () {
                    return false;
                };

                ReductionPromiseArray.prototype._resolve = function (value) {
                    this._promise._resolveCallback(value);
                    this._values = null;
                };

                ReductionPromiseArray.prototype._resultCancelled = function (sender) {
                    if (sender === this._initialValue) return this._cancel();
                    if (this._isResolved()) return;
                    this._resultCancelled$();
                    if (this._currentCancellable instanceof Promise) {
                        this._currentCancellable.cancel();
                    }
                    if (this._initialValue instanceof Promise) {
                        this._initialValue.cancel();
                    }
                };

                ReductionPromiseArray.prototype._iterate = function (values) {
                    this._values = values;
                    var value;
                    var i;
                    var length = values.length;
                    if (this._initialValue !== undefined) {
                        value = this._initialValue;
                        i = 0;
                    } else {
                        value = Promise.resolve(values[0]);
                        i = 1;
                    }

                    this._currentCancellable = value;

                    if (!value.isRejected()) {
                        for (; i < length; ++i) {
                            var ctx = {
                                accum: null,
                                value: values[i],
                                index: i,
                                length: length,
                                array: this };

                            value = value._then(gotAccum, undefined, undefined, ctx, undefined);
                        }
                    }

                    if (this._eachValues !== undefined) {
                        value = value.
                        _then(this._eachComplete, undefined, undefined, this, undefined);
                    }
                    value._then(completed, completed, undefined, value, this);
                };

                Promise.prototype.reduce = function (fn, initialValue) {
                    return reduce(this, fn, initialValue, null);
                };

                Promise.reduce = function (promises, fn, initialValue, _each) {
                    return reduce(promises, fn, initialValue, _each);
                };

                function completed(valueOrReason, array) {
                    if (this.isFulfilled()) {
                        array._resolve(valueOrReason);
                    } else {
                        array._reject(valueOrReason);
                    }
                }

                function reduce(promises, fn, initialValue, _each) {
                    if (typeof fn !== "function") {
                        return apiRejection("expecting a function but got " + util.classString(fn));
                    }
                    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
                    return array.promise();
                }

                function gotAccum(accum) {
                    this.accum = accum;
                    this.array._gotAccum(accum);
                    var value = tryConvertToPromise(this.value, this.array._promise);
                    if (value instanceof Promise) {
                        this.array._currentCancellable = value;
                        return value._then(gotValue, undefined, undefined, this, undefined);
                    } else {
                        return gotValue.call(this, value);
                    }
                }

                function gotValue(value) {
                    var array = this.array;
                    var promise = array._promise;
                    var fn = tryCatch(array._fn);
                    promise._pushContext();
                    var ret;
                    if (array._eachValues !== undefined) {
                        ret = fn.call(promise._boundValue(), value, this.index, this.length);
                    } else {
                        ret = fn.call(promise._boundValue(),
                        this.accum, value, this.index, this.length);
                    }
                    if (ret instanceof Promise) {
                        array._currentCancellable = ret;
                    }
                    var promiseCreated = promise._popContext();
                    debug.checkForgottenReturns(
                    ret,
                    promiseCreated,
                    array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
                    promise);

                    return ret;
                }
            };

        }, { "./util": 36 }], 29: [function (_dereq_, module, exports) {
            "use strict";
            var util = _dereq_("./util");
            var schedule;
            var noAsyncScheduler = function () {
                throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
            };
            var NativePromise = util.getNativePromise();
            if (util.isNode && typeof MutationObserver === "undefined") {
                var GlobalSetImmediate = global.setImmediate;
                var ProcessNextTick = process.nextTick;
                schedule = util.isRecentNode ?
                function (fn) {GlobalSetImmediate.call(global, fn);} :
                function (fn) {ProcessNextTick.call(process, fn);};
            } else if (typeof NativePromise === "function" &&
            typeof NativePromise.resolve === "function") {
                var nativePromise = NativePromise.resolve();
                schedule = function (fn) {
                    nativePromise.then(fn);
                };
            } else if (typeof MutationObserver !== "undefined" &&
            !(typeof window !== "undefined" &&
            window.navigator && (
            window.navigator.standalone || window.cordova))) {
                schedule = function () {
                    var div = document.createElement("div");
                    var opts = { attributes: true };
                    var toggleScheduled = false;
                    var div2 = document.createElement("div");
                    var o2 = new MutationObserver(function () {
                        div.classList.toggle("foo");
                        toggleScheduled = false;
                    });
                    o2.observe(div2, opts);

                    var scheduleToggle = function () {
                        if (toggleScheduled) return;
                        toggleScheduled = true;
                        div2.classList.toggle("foo");
                    };

                    return function schedule(fn) {
                        var o = new MutationObserver(function () {
                            o.disconnect();
                            fn();
                        });
                        o.observe(div, opts);
                        scheduleToggle();
                    };
                }();
            } else if (typeof setImmediate !== "undefined") {
                schedule = function (fn) {
                    setImmediate(fn);
                };
            } else if (typeof setTimeout !== "undefined") {
                schedule = function (fn) {
                    setTimeout(fn, 0);
                };
            } else {
                schedule = noAsyncScheduler;
            }
            module.exports = schedule;

        }, { "./util": 36 }], 30: [function (_dereq_, module, exports) {
            "use strict";
            module.exports =
            function (Promise, PromiseArray, debug) {
                var PromiseInspection = Promise.PromiseInspection;
                var util = _dereq_("./util");

                function SettledPromiseArray(values) {
                    this.constructor$(values);
                }
                util.inherits(SettledPromiseArray, PromiseArray);

                SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
                    this._values[index] = inspection;
                    var totalResolved = ++this._totalResolved;
                    if (totalResolved >= this._length) {
                        this._resolve(this._values);
                        return true;
                    }
                    return false;
                };

                SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
                    var ret = new PromiseInspection();
                    ret._bitField = 33554432;
                    ret._settledValueField = value;
                    return this._promiseResolved(index, ret);
                };
                SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
                    var ret = new PromiseInspection();
                    ret._bitField = 16777216;
                    ret._settledValueField = reason;
                    return this._promiseResolved(index, ret);
                };

                Promise.settle = function (promises) {
                    debug.deprecated(".settle()", ".reflect()");
                    return new SettledPromiseArray(promises).promise();
                };

                Promise.prototype.settle = function () {
                    return Promise.settle(this);
                };
            };

        }, { "./util": 36 }], 31: [function (_dereq_, module, exports) {
            "use strict";
            module.exports =
            function (Promise, PromiseArray, apiRejection) {
                var util = _dereq_("./util");
                var RangeError = _dereq_("./errors").RangeError;
                var AggregateError = _dereq_("./errors").AggregateError;
                var isArray = util.isArray;
                var CANCELLATION = {};


                function SomePromiseArray(values) {
                    this.constructor$(values);
                    this._howMany = 0;
                    this._unwrap = false;
                    this._initialized = false;
                }
                util.inherits(SomePromiseArray, PromiseArray);

                SomePromiseArray.prototype._init = function () {
                    if (!this._initialized) {
                        return;
                    }
                    if (this._howMany === 0) {
                        this._resolve([]);
                        return;
                    }
                    this._init$(undefined, -5);
                    var isArrayResolved = isArray(this._values);
                    if (!this._isResolved() &&
                    isArrayResolved &&
                    this._howMany > this._canPossiblyFulfill()) {
                        this._reject(this._getRangeError(this.length()));
                    }
                };

                SomePromiseArray.prototype.init = function () {
                    this._initialized = true;
                    this._init();
                };

                SomePromiseArray.prototype.setUnwrap = function () {
                    this._unwrap = true;
                };

                SomePromiseArray.prototype.howMany = function () {
                    return this._howMany;
                };

                SomePromiseArray.prototype.setHowMany = function (count) {
                    this._howMany = count;
                };

                SomePromiseArray.prototype._promiseFulfilled = function (value) {
                    this._addFulfilled(value);
                    if (this._fulfilled() === this.howMany()) {
                        this._values.length = this.howMany();
                        if (this.howMany() === 1 && this._unwrap) {
                            this._resolve(this._values[0]);
                        } else {
                            this._resolve(this._values);
                        }
                        return true;
                    }
                    return false;

                };
                SomePromiseArray.prototype._promiseRejected = function (reason) {
                    this._addRejected(reason);
                    return this._checkOutcome();
                };

                SomePromiseArray.prototype._promiseCancelled = function () {
                    if (this._values instanceof Promise || this._values == null) {
                        return this._cancel();
                    }
                    this._addRejected(CANCELLATION);
                    return this._checkOutcome();
                };

                SomePromiseArray.prototype._checkOutcome = function () {
                    if (this.howMany() > this._canPossiblyFulfill()) {
                        var e = new AggregateError();
                        for (var i = this.length(); i < this._values.length; ++i) {
                            if (this._values[i] !== CANCELLATION) {
                                e.push(this._values[i]);
                            }
                        }
                        if (e.length > 0) {
                            this._reject(e);
                        } else {
                            this._cancel();
                        }
                        return true;
                    }
                    return false;
                };

                SomePromiseArray.prototype._fulfilled = function () {
                    return this._totalResolved;
                };

                SomePromiseArray.prototype._rejected = function () {
                    return this._values.length - this.length();
                };

                SomePromiseArray.prototype._addRejected = function (reason) {
                    this._values.push(reason);
                };

                SomePromiseArray.prototype._addFulfilled = function (value) {
                    this._values[this._totalResolved++] = value;
                };

                SomePromiseArray.prototype._canPossiblyFulfill = function () {
                    return this.length() - this._rejected();
                };

                SomePromiseArray.prototype._getRangeError = function (count) {
                    var message = "Input array must contain at least " +
                    this._howMany + " items but contains only " + count + " items";
                    return new RangeError(message);
                };

                SomePromiseArray.prototype._resolveEmptyArray = function () {
                    this._reject(this._getRangeError(0));
                };

                function some(promises, howMany) {
                    if ((howMany | 0) !== howMany || howMany < 0) {
                        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                    }
                    var ret = new SomePromiseArray(promises);
                    var promise = ret.promise();
                    ret.setHowMany(howMany);
                    ret.init();
                    return promise;
                }

                Promise.some = function (promises, howMany) {
                    return some(promises, howMany);
                };

                Promise.prototype.some = function (howMany) {
                    return some(this, howMany);
                };

                Promise._SomePromiseArray = SomePromiseArray;
            };

        }, { "./errors": 12, "./util": 36 }], 32: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise) {
                function PromiseInspection(promise) {
                    if (promise !== undefined) {
                        promise = promise._target();
                        this._bitField = promise._bitField;
                        this._settledValueField = promise._isFateSealed() ?
                        promise._settledValue() : undefined;
                    } else
                    {
                        this._bitField = 0;
                        this._settledValueField = undefined;
                    }
                }

                PromiseInspection.prototype._settledValue = function () {
                    return this._settledValueField;
                };

                var value = PromiseInspection.prototype.value = function () {
                    if (!this.isFulfilled()) {
                        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                    }
                    return this._settledValue();
                };

                var reason = PromiseInspection.prototype.error =
                PromiseInspection.prototype.reason = function () {
                    if (!this.isRejected()) {
                        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                    }
                    return this._settledValue();
                };

                var isFulfilled = PromiseInspection.prototype.isFulfilled = function () {
                    return (this._bitField & 33554432) !== 0;
                };

                var isRejected = PromiseInspection.prototype.isRejected = function () {
                    return (this._bitField & 16777216) !== 0;
                };

                var isPending = PromiseInspection.prototype.isPending = function () {
                    return (this._bitField & 50397184) === 0;
                };

                var isResolved = PromiseInspection.prototype.isResolved = function () {
                    return (this._bitField & 50331648) !== 0;
                };

                PromiseInspection.prototype.isCancelled = function () {
                    return (this._bitField & 8454144) !== 0;
                };

                Promise.prototype.__isCancelled = function () {
                    return (this._bitField & 65536) === 65536;
                };

                Promise.prototype._isCancelled = function () {
                    return this._target().__isCancelled();
                };

                Promise.prototype.isCancelled = function () {
                    return (this._target()._bitField & 8454144) !== 0;
                };

                Promise.prototype.isPending = function () {
                    return isPending.call(this._target());
                };

                Promise.prototype.isRejected = function () {
                    return isRejected.call(this._target());
                };

                Promise.prototype.isFulfilled = function () {
                    return isFulfilled.call(this._target());
                };

                Promise.prototype.isResolved = function () {
                    return isResolved.call(this._target());
                };

                Promise.prototype.value = function () {
                    return value.call(this._target());
                };

                Promise.prototype.reason = function () {
                    var target = this._target();
                    target._unsetRejectionIsUnhandled();
                    return reason.call(target);
                };

                Promise.prototype._value = function () {
                    return this._settledValue();
                };

                Promise.prototype._reason = function () {
                    this._unsetRejectionIsUnhandled();
                    return this._settledValue();
                };

                Promise.PromiseInspection = PromiseInspection;
            };

        }, {}], 33: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, INTERNAL) {
                var util = _dereq_("./util");
                var errorObj = util.errorObj;
                var isObject = util.isObject;

                function tryConvertToPromise(obj, context) {
                    if (isObject(obj)) {
                        if (obj instanceof Promise) return obj;
                        var then = getThen(obj);
                        if (then === errorObj) {
                            if (context) context._pushContext();
                            var ret = Promise.reject(then.e);
                            if (context) context._popContext();
                            return ret;
                        } else if (typeof then === "function") {
                            if (isAnyBluebirdPromise(obj)) {
                                var ret = new Promise(INTERNAL);
                                obj._then(
                                ret._fulfill,
                                ret._reject,
                                undefined,
                                ret,
                                null);

                                return ret;
                            }
                            return doThenable(obj, then, context);
                        }
                    }
                    return obj;
                }

                function doGetThen(obj) {
                    return obj.then;
                }

                function getThen(obj) {
                    try {
                        return doGetThen(obj);
                    } catch (e) {
                        errorObj.e = e;
                        return errorObj;
                    }
                }

                var hasProp = {}.hasOwnProperty;
                function isAnyBluebirdPromise(obj) {
                    try {
                        return hasProp.call(obj, "_promise0");
                    } catch (e) {
                        return false;
                    }
                }

                function doThenable(x, then, context) {
                    var promise = new Promise(INTERNAL);
                    var ret = promise;
                    if (context) context._pushContext();
                    promise._captureStackTrace();
                    if (context) context._popContext();
                    var synchronous = true;
                    var result = util.tryCatch(then).call(x, resolve, reject);
                    synchronous = false;

                    if (promise && result === errorObj) {
                        promise._rejectCallback(result.e, true, true);
                        promise = null;
                    }

                    function resolve(value) {
                        if (!promise) return;
                        promise._resolveCallback(value);
                        promise = null;
                    }

                    function reject(reason) {
                        if (!promise) return;
                        promise._rejectCallback(reason, synchronous, true);
                        promise = null;
                    }
                    return ret;
                }

                return tryConvertToPromise;
            };

        }, { "./util": 36 }], 34: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, INTERNAL, debug) {
                var util = _dereq_("./util");
                var TimeoutError = Promise.TimeoutError;

                function HandleWrapper(handle) {
                    this.handle = handle;
                }

                HandleWrapper.prototype._resultCancelled = function () {
                    clearTimeout(this.handle);
                };

                var afterValue = function (value) {return delay(+this).thenReturn(value);};
                var delay = Promise.delay = function (ms, value) {
                    var ret;
                    var handle;
                    if (value !== undefined) {
                        ret = Promise.resolve(value).
                        _then(afterValue, null, null, ms, undefined);
                        if (debug.cancellation() && value instanceof Promise) {
                            ret._setOnCancel(value);
                        }
                    } else {
                        ret = new Promise(INTERNAL);
                        handle = setTimeout(function () {ret._fulfill();}, +ms);
                        if (debug.cancellation()) {
                            ret._setOnCancel(new HandleWrapper(handle));
                        }
                        ret._captureStackTrace();
                    }
                    ret._setAsyncGuaranteed();
                    return ret;
                };

                Promise.prototype.delay = function (ms) {
                    return delay(ms, this);
                };

                var afterTimeout = function (promise, message, parent) {
                    var err;
                    if (typeof message !== "string") {
                        if (message instanceof Error) {
                            err = message;
                        } else {
                            err = new TimeoutError("operation timed out");
                        }
                    } else {
                        err = new TimeoutError(message);
                    }
                    util.markAsOriginatingFromRejection(err);
                    promise._attachExtraTrace(err);
                    promise._reject(err);

                    if (parent != null) {
                        parent.cancel();
                    }
                };

                function successClear(value) {
                    clearTimeout(this.handle);
                    return value;
                }

                function failureClear(reason) {
                    clearTimeout(this.handle);
                    throw reason;
                }

                Promise.prototype.timeout = function (ms, message) {
                    ms = +ms;
                    var ret, parent;

                    var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
                        if (ret.isPending()) {
                            afterTimeout(ret, message, parent);
                        }
                    }, ms));

                    if (debug.cancellation()) {
                        parent = this.then();
                        ret = parent._then(successClear, failureClear,
                        undefined, handleWrapper, undefined);
                        ret._setOnCancel(handleWrapper);
                    } else {
                        ret = this._then(successClear, failureClear,
                        undefined, handleWrapper, undefined);
                    }

                    return ret;
                };

            };

        }, { "./util": 36 }], 35: [function (_dereq_, module, exports) {
            "use strict";
            module.exports = function (Promise, apiRejection, tryConvertToPromise,
            createContext, INTERNAL, debug) {
                var util = _dereq_("./util");
                var TypeError = _dereq_("./errors").TypeError;
                var inherits = _dereq_("./util").inherits;
                var errorObj = util.errorObj;
                var tryCatch = util.tryCatch;
                var NULL = {};

                function thrower(e) {
                    setTimeout(function () {throw e;}, 0);
                }

                function castPreservingDisposable(thenable) {
                    var maybePromise = tryConvertToPromise(thenable);
                    if (maybePromise !== thenable &&
                    typeof thenable._isDisposable === "function" &&
                    typeof thenable._getDisposer === "function" &&
                    thenable._isDisposable()) {
                        maybePromise._setDisposable(thenable._getDisposer());
                    }
                    return maybePromise;
                }
                function dispose(resources, inspection) {
                    var i = 0;
                    var len = resources.length;
                    var ret = new Promise(INTERNAL);
                    function iterator() {
                        if (i >= len) return ret._fulfill();
                        var maybePromise = castPreservingDisposable(resources[i++]);
                        if (maybePromise instanceof Promise &&
                        maybePromise._isDisposable()) {
                            try {
                                maybePromise = tryConvertToPromise(
                                maybePromise._getDisposer().tryDispose(inspection),
                                resources.promise);
                            } catch (e) {
                                return thrower(e);
                            }
                            if (maybePromise instanceof Promise) {
                                return maybePromise._then(iterator, thrower,
                                null, null, null);
                            }
                        }
                        iterator();
                    }
                    iterator();
                    return ret;
                }

                function Disposer(data, promise, context) {
                    this._data = data;
                    this._promise = promise;
                    this._context = context;
                }

                Disposer.prototype.data = function () {
                    return this._data;
                };

                Disposer.prototype.promise = function () {
                    return this._promise;
                };

                Disposer.prototype.resource = function () {
                    if (this.promise().isFulfilled()) {
                        return this.promise().value();
                    }
                    return NULL;
                };

                Disposer.prototype.tryDispose = function (inspection) {
                    var resource = this.resource();
                    var context = this._context;
                    if (context !== undefined) context._pushContext();
                    var ret = resource !== NULL ?
                    this.doDispose(resource, inspection) : null;
                    if (context !== undefined) context._popContext();
                    this._promise._unsetDisposable();
                    this._data = null;
                    return ret;
                };

                Disposer.isDisposer = function (d) {
                    return d != null &&
                    typeof d.resource === "function" &&
                    typeof d.tryDispose === "function";
                };

                function FunctionDisposer(fn, promise, context) {
                    this.constructor$(fn, promise, context);
                }
                inherits(FunctionDisposer, Disposer);

                FunctionDisposer.prototype.doDispose = function (resource, inspection) {
                    var fn = this.data();
                    return fn.call(resource, resource, inspection);
                };

                function maybeUnwrapDisposer(value) {
                    if (Disposer.isDisposer(value)) {
                        this.resources[this.index]._setDisposable(value);
                        return value.promise();
                    }
                    return value;
                }

                function ResourceList(length) {
                    this.length = length;
                    this.promise = null;
                    this[length - 1] = null;
                }

                ResourceList.prototype._resultCancelled = function () {
                    var len = this.length;
                    for (var i = 0; i < len; ++i) {
                        var item = this[i];
                        if (item instanceof Promise) {
                            item.cancel();
                        }
                    }
                };

                Promise.using = function () {
                    var len = arguments.length;
                    if (len < 2) return apiRejection(
                    "you must pass at least 2 arguments to Promise.using");
                    var fn = arguments[len - 1];
                    if (typeof fn !== "function") {
                        return apiRejection("expecting a function but got " + util.classString(fn));
                    }
                    var input;
                    var spreadArgs = true;
                    if (len === 2 && Array.isArray(arguments[0])) {
                        input = arguments[0];
                        len = input.length;
                        spreadArgs = false;
                    } else {
                        input = arguments;
                        len--;
                    }
                    var resources = new ResourceList(len);
                    for (var i = 0; i < len; ++i) {
                        var resource = input[i];
                        if (Disposer.isDisposer(resource)) {
                            var disposer = resource;
                            resource = resource.promise();
                            resource._setDisposable(disposer);
                        } else {
                            var maybePromise = tryConvertToPromise(resource);
                            if (maybePromise instanceof Promise) {
                                resource =
                                maybePromise._then(maybeUnwrapDisposer, null, null, {
                                    resources: resources,
                                    index: i },
                                undefined);
                            }
                        }
                        resources[i] = resource;
                    }

                    var reflectedResources = new Array(resources.length);
                    for (var i = 0; i < reflectedResources.length; ++i) {
                        reflectedResources[i] = Promise.resolve(resources[i]).reflect();
                    }

                    var resultPromise = Promise.all(reflectedResources).
                    then(function (inspections) {
                        for (var i = 0; i < inspections.length; ++i) {
                            var inspection = inspections[i];
                            if (inspection.isRejected()) {
                                errorObj.e = inspection.error();
                                return errorObj;
                            } else if (!inspection.isFulfilled()) {
                                resultPromise.cancel();
                                return;
                            }
                            inspections[i] = inspection.value();
                        }
                        promise._pushContext();

                        fn = tryCatch(fn);
                        var ret = spreadArgs ?
                        fn.apply(undefined, inspections) : fn(inspections);
                        var promiseCreated = promise._popContext();
                        debug.checkForgottenReturns(
                        ret, promiseCreated, "Promise.using", promise);
                        return ret;
                    });

                    var promise = resultPromise.lastly(function () {
                        var inspection = new Promise.PromiseInspection(resultPromise);
                        return dispose(resources, inspection);
                    });
                    resources.promise = promise;
                    promise._setOnCancel(resources);
                    return promise;
                };

                Promise.prototype._setDisposable = function (disposer) {
                    this._bitField = this._bitField | 131072;
                    this._disposer = disposer;
                };

                Promise.prototype._isDisposable = function () {
                    return (this._bitField & 131072) > 0;
                };

                Promise.prototype._getDisposer = function () {
                    return this._disposer;
                };

                Promise.prototype._unsetDisposable = function () {
                    this._bitField = this._bitField & ~131072;
                    this._disposer = undefined;
                };

                Promise.prototype.disposer = function (fn) {
                    if (typeof fn === "function") {
                        return new FunctionDisposer(fn, this, createContext());
                    }
                    throw new TypeError();
                };

            };

        }, { "./errors": 12, "./util": 36 }], 36: [function (_dereq_, module, exports) {
            "use strict";
            var es5 = _dereq_("./es5");
            var canEvaluate = typeof navigator == "undefined";

            var errorObj = { e: {} };
            var tryCatchTarget;
            var globalObject = typeof self !== "undefined" ? self :
            typeof window !== "undefined" ? window :
            typeof global !== "undefined" ? global :
            this !== undefined ? this : null;

            function tryCatcher() {
                try {
                    var target = tryCatchTarget;
                    tryCatchTarget = null;
                    return target.apply(this, arguments);
                } catch (e) {
                    errorObj.e = e;
                    return errorObj;
                }
            }
            function tryCatch(fn) {
                tryCatchTarget = fn;
                return tryCatcher;
            }

            var inherits = function (Child, Parent) {
                var hasProp = {}.hasOwnProperty;

                function T() {
                    this.constructor = Child;
                    this.constructor$ = Parent;
                    for (var propertyName in Parent.prototype) {
                        if (hasProp.call(Parent.prototype, propertyName) &&
                        propertyName.charAt(propertyName.length - 1) !== "$")
                        {
                            this[propertyName + "$"] = Parent.prototype[propertyName];
                        }
                    }
                }
                T.prototype = Parent.prototype;
                Child.prototype = new T();
                return Child.prototype;
            };


            function isPrimitive(val) {
                return val == null || val === true || val === false ||
                typeof val === "string" || typeof val === "number";

            }

            function isObject(value) {
                return typeof value === "function" ||
                typeof value === "object" && value !== null;
            }

            function maybeWrapAsError(maybeError) {
                if (!isPrimitive(maybeError)) return maybeError;

                return new Error(safeToString(maybeError));
            }

            function withAppended(target, appendee) {
                var len = target.length;
                var ret = new Array(len + 1);
                var i;
                for (i = 0; i < len; ++i) {
                    ret[i] = target[i];
                }
                ret[i] = appendee;
                return ret;
            }

            function getDataPropertyOrDefault(obj, key, defaultValue) {
                if (es5.isES5) {
                    var desc = Object.getOwnPropertyDescriptor(obj, key);

                    if (desc != null) {
                        return desc.get == null && desc.set == null ?
                        desc.value :
                        defaultValue;
                    }
                } else {
                    return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
                }
            }

            function notEnumerableProp(obj, name, value) {
                if (isPrimitive(obj)) return obj;
                var descriptor = {
                    value: value,
                    configurable: true,
                    enumerable: false,
                    writable: true };

                es5.defineProperty(obj, name, descriptor);
                return obj;
            }

            function thrower(r) {
                throw r;
            }

            var inheritedDataKeys = function () {
                var excludedPrototypes = [
                Array.prototype,
                Object.prototype,
                Function.prototype];


                var isExcludedProto = function (val) {
                    for (var i = 0; i < excludedPrototypes.length; ++i) {
                        if (excludedPrototypes[i] === val) {
                            return true;
                        }
                    }
                    return false;
                };

                if (es5.isES5) {
                    var getKeys = Object.getOwnPropertyNames;
                    return function (obj) {
                        var ret = [];
                        var visitedKeys = Object.create(null);
                        while (obj != null && !isExcludedProto(obj)) {
                            var keys;
                            try {
                                keys = getKeys(obj);
                            } catch (e) {
                                return ret;
                            }
                            for (var i = 0; i < keys.length; ++i) {
                                var key = keys[i];
                                if (visitedKeys[key]) continue;
                                visitedKeys[key] = true;
                                var desc = Object.getOwnPropertyDescriptor(obj, key);
                                if (desc != null && desc.get == null && desc.set == null) {
                                    ret.push(key);
                                }
                            }
                            obj = es5.getPrototypeOf(obj);
                        }
                        return ret;
                    };
                } else {
                    var hasProp = {}.hasOwnProperty;
                    return function (obj) {
                        if (isExcludedProto(obj)) return [];
                        var ret = [];

                        /*jshint forin:false */
                        enumeration: for (var key in obj) {
                            if (hasProp.call(obj, key)) {
                                ret.push(key);
                            } else {
                                for (var i = 0; i < excludedPrototypes.length; ++i) {
                                    if (hasProp.call(excludedPrototypes[i], key)) {
                                        continue enumeration;
                                    }
                                }
                                ret.push(key);
                            }
                        }
                        return ret;
                    };
                }

            }();

            var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
            function isClass(fn) {
                try {
                    if (typeof fn === "function") {
                        var keys = es5.names(fn.prototype);

                        var hasMethods = es5.isES5 && keys.length > 1;
                        var hasMethodsOtherThanConstructor = keys.length > 0 &&
                        !(keys.length === 1 && keys[0] === "constructor");
                        var hasThisAssignmentAndStaticMethods =
                        thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

                        if (hasMethods || hasMethodsOtherThanConstructor ||
                        hasThisAssignmentAndStaticMethods) {
                            return true;
                        }
                    }
                    return false;
                } catch (e) {
                    return false;
                }
            }

            function toFastProperties(obj) {
                /*jshint -W027,-W055,-W031*/
                function FakeConstructor() {}
                FakeConstructor.prototype = obj;
                var l = 8;
                while (l--) new FakeConstructor();
                return obj;
                eval(obj);
            }

            var rident = /^[a-z$_][a-z$_0-9]*$/i;
            function isIdentifier(str) {
                return rident.test(str);
            }

            function filledRange(count, prefix, suffix) {
                var ret = new Array(count);
                for (var i = 0; i < count; ++i) {
                    ret[i] = prefix + i + suffix;
                }
                return ret;
            }

            function safeToString(obj) {
                try {
                    return obj + "";
                } catch (e) {
                    return "[no string representation]";
                }
            }

            function isError(obj) {
                return obj !== null &&
                typeof obj === "object" &&
                typeof obj.message === "string" &&
                typeof obj.name === "string";
            }

            function markAsOriginatingFromRejection(e) {
                try {
                    notEnumerableProp(e, "isOperational", true);
                }
                catch (ignore) {}
            }

            function originatesFromRejection(e) {
                if (e == null) return false;
                return e instanceof Error["__BluebirdErrorTypes__"].OperationalError ||
                e["isOperational"] === true;
            }

            function canAttachTrace(obj) {
                return isError(obj) && es5.propertyIsWritable(obj, "stack");
            }

            var ensureErrorObject = function () {
                if (!("stack" in new Error())) {
                    return function (value) {
                        if (canAttachTrace(value)) return value;
                        try {throw new Error(safeToString(value));}
                        catch (err) {return err;}
                    };
                } else {
                    return function (value) {
                        if (canAttachTrace(value)) return value;
                        return new Error(safeToString(value));
                    };
                }
            }();

            function classString(obj) {
                return {}.toString.call(obj);
            }

            function copyDescriptors(from, to, filter) {
                var keys = es5.names(from);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (filter(key)) {
                        try {
                            es5.defineProperty(to, key, es5.getDescriptor(from, key));
                        } catch (ignore) {}
                    }
                }
            }

            var asArray = function (v) {
                if (es5.isArray(v)) {
                    return v;
                }
                return null;
            };

            if (typeof Symbol !== "undefined" && Symbol.iterator) {
                var ArrayFrom = typeof Array.from === "function" ? function (v) {
                    return Array.from(v);
                } : function (v) {
                    var ret = [];
                    var it = v[Symbol.iterator]();
                    var itResult;
                    while (!(itResult = it.next()).done) {
                        ret.push(itResult.value);
                    }
                    return ret;
                };

                asArray = function (v) {
                    if (es5.isArray(v)) {
                        return v;
                    } else if (v != null && typeof v[Symbol.iterator] === "function") {
                        return ArrayFrom(v);
                    }
                    return null;
                };
            }

            var isNode = typeof process !== "undefined" &&
            classString(process).toLowerCase() === "[object process]";

            var hasEnvVariables = typeof process !== "undefined" &&
            typeof process.env !== "undefined";

            function env(key) {
                return hasEnvVariables ? process.env[key] : undefined;
            }

            function getNativePromise() {
                if (typeof Promise === "function") {
                    try {
                        var promise = new Promise(function () {});
                        if ({}.toString.call(promise) === "[object Promise]") {
                            return Promise;
                        }
                    } catch (e) {}
                }
            }

            function domainBind(self, cb) {
                return self.bind(cb);
            }

            var ret = {
                isClass: isClass,
                isIdentifier: isIdentifier,
                inheritedDataKeys: inheritedDataKeys,
                getDataPropertyOrDefault: getDataPropertyOrDefault,
                thrower: thrower,
                isArray: es5.isArray,
                asArray: asArray,
                notEnumerableProp: notEnumerableProp,
                isPrimitive: isPrimitive,
                isObject: isObject,
                isError: isError,
                canEvaluate: canEvaluate,
                errorObj: errorObj,
                tryCatch: tryCatch,
                inherits: inherits,
                withAppended: withAppended,
                maybeWrapAsError: maybeWrapAsError,
                toFastProperties: toFastProperties,
                filledRange: filledRange,
                toString: safeToString,
                canAttachTrace: canAttachTrace,
                ensureErrorObject: ensureErrorObject,
                originatesFromRejection: originatesFromRejection,
                markAsOriginatingFromRejection: markAsOriginatingFromRejection,
                classString: classString,
                copyDescriptors: copyDescriptors,
                hasDevTools: typeof chrome !== "undefined" && chrome &&
                typeof chrome.loadTimes === "function",
                isNode: isNode,
                hasEnvVariables: hasEnvVariables,
                env: env,
                global: globalObject,
                getNativePromise: getNativePromise,
                domainBind: domainBind };

            ret.isRecentNode = ret.isNode && function () {
                var version = process.versions.node.split(".").map(Number);
                return version[0] === 0 && version[1] > 10 || version[0] > 0;
            }();

            if (ret.isNode) ret.toFastProperties(process);

            try {throw new Error();} catch (e) {ret.lastLineError = e;}
            module.exports = ret;

        }, { "./es5": 13 }] }, {}, [4])(4);
});;if (typeof window !== 'undefined' && window !== null) {window.P = window.Promise;} else if (typeof self !== 'undefined' && self !== null) {self.P = self.Promise;}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7), __webpack_require__(3), __webpack_require__(23).setImmediate))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function () {};
Timeout.prototype.close = function () {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
      item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(24);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
        // Callback can either be a function or a string
        if (typeof callback !== "function") {
            callback = new Function("" + callback);
        }
        // Copy function arguments
        var args = new Array(arguments.length - 1);
        for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i + 1];
        }
        // Store and register the task
        var task = { callback: callback, args: args };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;}

    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function (handle) {
            process.nextTick(function () {runIfPresent(handle);});
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function () {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function (event) {
            if (event.source === global &&
            typeof event.data === "string" &&
            event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function (handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function (handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function (handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function (handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? undefined : global : self);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(7)))

/***/ })
/******/ ]);
});