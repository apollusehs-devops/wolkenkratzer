'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.










Ref = Ref;exports.












FnGetAtt = FnGetAtt;exports.













FnJoin = FnJoin;exports.
















FnEquals = FnEquals;exports.






































FnSub = FnSub;exports.








FnBase64 = FnBase64;exports.








FnFindInMap = FnFindInMap;exports.















FnGetAZs = FnGetAZs;exports.











FnSelect = FnSelect;exports.



buildIntrinsic = buildIntrinsic;var _resource = require('./elements/resource');var _parameter = require('./elements/parameter');var _template = require('./template');function Ref(target) {if (typeof target === 'string') {return { kind: 'Ref', Ref: target };} else {return { kind: 'Ref', Ref: target.Name };}}function FnGetAtt(target, attr) {if (typeof target === 'string') {return { kind: 'FnGetAtt', FnGetAtt: [target, attr] };} else {return { kind: 'FnGetAtt', FnGetAtt: [target.Name, attr] };}}function FnJoin(delimiter, values) {return { kind: 'FnJoin', Delimiter: delimiter, Values: values };}function FnEquals(one, two) {return { kind: 'FnEquals', FnEquals: [one, two] };} // export IIntrinsic = IRef | IFnGetAtt | IFnAnd | IFnEquals | IFnIf | IFnNot | IFnOr;
function FnSub(input) {return { kind: 'FnSub', FnSub: input };}function FnBase64(input) {return { kind: 'FnBase64', FnBase64: input };}function FnFindInMap(mapName, topLevelKey, secondLevelKey) {return { kind: 'FnFindInMap', 'Fn::FindInMap': [this.mapName, this.topLevelKey, this.secondLevelKey] };}function FnGetAZs(region) {if (!region) {region = { Ref: 'AWS::Region' };}return { kind: 'FnGetAZs', FnGetAZs: region };}function FnSelect(index, list) {return { kind: 'FnSelect', FnSelect: [index, list] };}function buildIntrinsic(input) {if (input['Fn::Equals']) {
    return FnEquals(
    buildIntrinsic(input['Fn::Equals'][0]),
    buildIntrinsic(input['Fn::Equals'][1]));

  } else if (input.Ref) {
    return Ref(input.Ref);
  } else {
    return input;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnRyaW5zaWMuanMiXSwibmFtZXMiOlsiUmVmIiwiRm5HZXRBdHQiLCJGbkpvaW4iLCJGbkVxdWFscyIsIkZuU3ViIiwiRm5CYXNlNjQiLCJGbkZpbmRJbk1hcCIsIkZuR2V0QVpzIiwiRm5TZWxlY3QiLCJidWlsZEludHJpbnNpYyIsInRhcmdldCIsImtpbmQiLCJOYW1lIiwiYXR0ciIsImRlbGltaXRlciIsInZhbHVlcyIsIkRlbGltaXRlciIsIlZhbHVlcyIsIm9uZSIsInR3byIsImlucHV0IiwibWFwTmFtZSIsInRvcExldmVsS2V5Iiwic2Vjb25kTGV2ZWxLZXkiLCJyZWdpb24iLCJpbmRleCIsImxpc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBV2dCQSxHLEdBQUFBLEc7Ozs7Ozs7Ozs7Ozs7QUFhQUMsUSxHQUFBQSxROzs7Ozs7Ozs7Ozs7OztBQWNBQyxNLEdBQUFBLE07Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBQyxRLEdBQUFBLFE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVDQUMsSyxHQUFBQSxLOzs7Ozs7Ozs7QUFTQUMsUSxHQUFBQSxROzs7Ozs7Ozs7QUFTQUMsVyxHQUFBQSxXOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBQyxRLEdBQUFBLFE7Ozs7Ozs7Ozs7OztBQVlBQyxRLEdBQUFBLFE7Ozs7QUFJQUMsYyxHQUFBQSxjLENBOUloQiwrQ0FDQSxpREFDQSxzQ0FPTyxTQUFTVCxHQUFULENBQWFVLE1BQWIsRUFBNEQsQ0FDakUsSUFBSSxPQUFPQSxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDLENBQzlCLE9BQU8sRUFBRUMsTUFBTSxLQUFSLEVBQWVYLEtBQUtVLE1BQXBCLEVBQVAsQ0FDRCxDQUZELE1BRU8sQ0FDTCxPQUFPLEVBQUVDLE1BQU0sS0FBUixFQUFlWCxLQUFLVSxPQUFPRSxJQUEzQixFQUFQLENBQ0QsQ0FDRixDQU9NLFNBQVNYLFFBQVQsQ0FBa0JTLE1BQWxCLEVBQThDRyxJQUE5QyxFQUF1RSxDQUM1RSxJQUFJLE9BQU9ILE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0MsQ0FDOUIsT0FBTyxFQUFFQyxNQUFNLFVBQVIsRUFBb0JWLFVBQVUsQ0FBQ1MsTUFBRCxFQUFTRyxJQUFULENBQTlCLEVBQVAsQ0FDRCxDQUZELE1BRU8sQ0FDTCxPQUFPLEVBQUVGLE1BQU0sVUFBUixFQUFvQlYsVUFBVSxDQUFDUyxPQUFPRSxJQUFSLEVBQWNDLElBQWQsQ0FBOUIsRUFBUCxDQUNELENBQ0YsQ0FRTSxTQUFTWCxNQUFULENBQ0xZLFNBREssRUFFTEMsTUFGSyxFQUdJLENBQ1QsT0FBTyxFQUFFSixNQUFNLFFBQVIsRUFBa0JLLFdBQVdGLFNBQTdCLEVBQXdDRyxRQUFRRixNQUFoRCxFQUFQLENBQ0QsQ0FZTSxTQUFTWixRQUFULENBQWtCZSxHQUFsQixFQUFvQ0MsR0FBcEMsRUFBaUUsQ0FDdEUsT0FBTyxFQUFFUixNQUFNLFVBQVIsRUFBb0JSLFVBQVUsQ0FBQ2UsR0FBRCxFQUFNQyxHQUFOLENBQTlCLEVBQVAsQ0FDRCxDLENBaUJEO0FBb0JPLFNBQVNmLEtBQVQsQ0FBZWdCLEtBQWYsRUFBOEIsQ0FDbkMsT0FBTyxFQUFFVCxNQUFNLE9BQVIsRUFBaUJQLE9BQU9nQixLQUF4QixFQUFQLENBQ0QsQ0FPTSxTQUFTZixRQUFULENBQWtCZSxLQUFsQixFQUFpQyxDQUN0QyxPQUFPLEVBQUVULE1BQU0sVUFBUixFQUFvQk4sVUFBVWUsS0FBOUIsRUFBUCxDQUNELENBT00sU0FBU2QsV0FBVCxDQUNMZSxPQURLLEVBRUxDLFdBRkssRUFHTEMsY0FISyxFQUlMLENBQ0EsT0FBTyxFQUNMWixNQUFNLGFBREQsRUFFTCxpQkFBaUIsQ0FBQyxLQUFLVSxPQUFOLEVBQWUsS0FBS0MsV0FBcEIsRUFBaUMsS0FBS0MsY0FBdEMsQ0FGWixFQUFQLENBSUQsQ0FPTSxTQUFTaEIsUUFBVCxDQUFrQmlCLE1BQWxCLEVBQTJDLENBQ2hELElBQUksQ0FBQ0EsTUFBTCxFQUFhLENBQ1hBLFNBQVMsRUFBRXhCLEtBQUssYUFBUCxFQUFULENBQ0QsQ0FDRCxPQUFPLEVBQUVXLE1BQU0sVUFBUixFQUFvQkosVUFBVWlCLE1BQTlCLEVBQVAsQ0FDRCxDQU9NLFNBQVNoQixRQUFULENBQWtCaUIsS0FBbEIsRUFBaUNDLElBQWpDLEVBQStDLENBQ3BELE9BQU8sRUFBRWYsTUFBTSxVQUFSLEVBQW9CSCxVQUFVLENBQUNpQixLQUFELEVBQVFDLElBQVIsQ0FBOUIsRUFBUCxDQUNELENBRU0sU0FBU2pCLGNBQVQsQ0FBd0JXLEtBQXhCLEVBQXNDLENBQzNDLElBQUlBLE1BQU0sWUFBTixDQUFKLEVBQXlCO0FBQ3ZCLFdBQU9qQjtBQUNMTSxtQkFBZVcsTUFBTSxZQUFOLEVBQW9CLENBQXBCLENBQWYsQ0FESztBQUVMWCxtQkFBZVcsTUFBTSxZQUFOLEVBQW9CLENBQXBCLENBQWYsQ0FGSyxDQUFQOztBQUlELEdBTEQsTUFLTyxJQUFJQSxNQUFNcEIsR0FBVixFQUFlO0FBQ3BCLFdBQU9BLElBQUlvQixNQUFNcEIsR0FBVixDQUFQO0FBQ0QsR0FGTSxNQUVBO0FBQ0wsV0FBT29CLEtBQVA7QUFDRDtBQUNGIiwiZmlsZSI6ImludHJpbnNpYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7IElSZXNvdXJjZSB9IGZyb20gJy4vZWxlbWVudHMvcmVzb3VyY2UnO1xuaW1wb3J0IHsgSVBhcmFtZXRlciB9IGZyb20gJy4vZWxlbWVudHMvcGFyYW1ldGVyJztcbmltcG9ydCB7IElUZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZWYge1xuICAra2luZDogJ1JlZicsXG4gICtSZWY6IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVmKHRhcmdldDogSVJlc291cmNlIHwgSVBhcmFtZXRlciB8IHN0cmluZyk6IElSZWYge1xuICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4geyBraW5kOiAnUmVmJywgUmVmOiB0YXJnZXQgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyBraW5kOiAnUmVmJywgUmVmOiB0YXJnZXQuTmFtZSB9O1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZuR2V0QXR0IHtcbiAgK2tpbmQ6ICdGbkdldEF0dCcsXG4gICtGbkdldEF0dDogQXJyYXk8c3RyaW5nPlxufVxuXG5leHBvcnQgZnVuY3Rpb24gRm5HZXRBdHQodGFyZ2V0OiBJUmVzb3VyY2UgfCBzdHJpbmcsIGF0dHI6IHN0cmluZyk6IElGbkdldEF0dCB7XG4gIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB7IGtpbmQ6ICdGbkdldEF0dCcsIEZuR2V0QXR0OiBbdGFyZ2V0LCBhdHRyXSB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7IGtpbmQ6ICdGbkdldEF0dCcsIEZuR2V0QXR0OiBbdGFyZ2V0Lk5hbWUsIGF0dHJdIH07XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRm5Kb2luIHtcbiAgK2tpbmQ6ICdGbkpvaW4nLFxuICArRGVsaW1pdGVyOiBzdHJpbmcsXG4gICtWYWx1ZXM6IEFycmF5PHN0cmluZyB8IElGbkdldEF0dD4gfCBJRm5HZXRBdHRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZuSm9pbihcbiAgZGVsaW1pdGVyOiBzdHJpbmcsXG4gIHZhbHVlczogQXJyYXk8c3RyaW5nIHwgSUZuR2V0QXR0PiB8IElGbkdldEF0dFxuKTogSUZuSm9pbiB7XG4gIHJldHVybiB7IGtpbmQ6ICdGbkpvaW4nLCBEZWxpbWl0ZXI6IGRlbGltaXRlciwgVmFsdWVzOiB2YWx1ZXMgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRm5BbmQge1xuICAra2luZDogJ0ZuQW5kJyxcbiAgK0ZuQW5kOiBBcnJheTxDb25kaXRpb25hbD5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRm5FcXVhbHMge1xuICAra2luZDogJ0ZuRXF1YWxzJyxcbiAgK0ZuRXF1YWxzOiBBcnJheTxDb25kaXRpb25hbD5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZuRXF1YWxzKG9uZTogQ29uZGl0aW9uYWwsIHR3bzogQ29uZGl0aW9uYWwpOiBJRm5FcXVhbHMge1xuICByZXR1cm4geyBraW5kOiAnRm5FcXVhbHMnLCBGbkVxdWFsczogW29uZSwgdHdvXSB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGbklmIHtcbiAgK2tpbmQ6ICdGbklmJyxcbiAgK0ZuSWY6IEFycmF5PENvbmRpdGlvbmFsPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGbk5vdCB7XG4gICtraW5kOiAnRm5Ob3QnLFxuICArRm5Ob3Q6IEFycmF5PENvbmRpdGlvbmFsPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGbk9yIHtcbiAgK2tpbmQ6ICdGbk9yJyxcbiAgK0ZuT3I6IEFycmF5PENvbmRpdGlvbmFsPlxufVxuXG4vLyBleHBvcnQgSUludHJpbnNpYyA9IElSZWYgfCBJRm5HZXRBdHQgfCBJRm5BbmQgfCBJRm5FcXVhbHMgfCBJRm5JZiB8IElGbk5vdCB8IElGbk9yO1xuZXhwb3J0IHR5cGUgSUludHJpbnNpYyA9XG4gIHwgSVJlZlxuICB8IElGbkdldEF0dFxuICB8IElGbkpvaW5cbiAgfCBJRm5BbmRcbiAgfCBJRm5FcXVhbHNcbiAgfCBJRm5JZlxuICB8IElGbk5vdFxuICB8IElGbk9yXG4gIHwgQ29uZGl0aW9uRnVuY3Rpb247XG5cbmV4cG9ydCB0eXBlIENvbmRpdGlvbmFsID0gc3RyaW5nIHwgSVJlZiB8IElGbkdldEF0dDtcbmV4cG9ydCB0eXBlIENvbmRpdGlvbkZ1bmN0aW9uID0gSUZuQW5kIHwgSUZuRXF1YWxzIHwgSUZuSWYgfCBJRm5Ob3QgfCBJRm5PcjtcblxuZXhwb3J0IGludGVyZmFjZSBJRm5TdWIge1xuICAra2luZDogJ0ZuU3ViJyxcbiAgK0ZuU3ViOiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZuU3ViKGlucHV0OiBzdHJpbmcpIHtcbiAgcmV0dXJuIHsga2luZDogJ0ZuU3ViJywgRm5TdWI6IGlucHV0IH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZuQmFzZTY0IHtcbiAgK2tpbmQ6ICdGbkJhc2U2NCcsXG4gICtGbkJhc2U2NDogc3RyaW5nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGbkJhc2U2NChpbnB1dDogc3RyaW5nKSB7XG4gIHJldHVybiB7IGtpbmQ6ICdGbkJhc2U2NCcsIEZuQmFzZTY0OiBpbnB1dCB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGbkZpbmRJbk1hcCB7XG4gICtraW5kOiAnRm5GaW5kSW5NYXAnLFxuICArRm5GaW5kSW5NYXA6IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRm5GaW5kSW5NYXAoXG4gIG1hcE5hbWU6IHN0cmluZyxcbiAgdG9wTGV2ZWxLZXk6IHN0cmluZyxcbiAgc2Vjb25kTGV2ZWxLZXk6IHN0cmluZ1xuKSB7XG4gIHJldHVybiB7XG4gICAga2luZDogJ0ZuRmluZEluTWFwJyxcbiAgICAnRm46OkZpbmRJbk1hcCc6IFt0aGlzLm1hcE5hbWUsIHRoaXMudG9wTGV2ZWxLZXksIHRoaXMuc2Vjb25kTGV2ZWxLZXldXG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZuR2V0QVpzIHtcbiAgK2tpbmQ6ICdGbkdldEFacycsXG4gICtGbkdldEFaczogc3RyaW5nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGbkdldEFacyhyZWdpb246IHN0cmluZyB8IE9iamVjdCkge1xuICBpZiAoIXJlZ2lvbikge1xuICAgIHJlZ2lvbiA9IHsgUmVmOiAnQVdTOjpSZWdpb24nIH07XG4gIH1cbiAgcmV0dXJuIHsga2luZDogJ0ZuR2V0QVpzJywgRm5HZXRBWnM6IHJlZ2lvbiB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGblNlbGVjdCB7XG4gICtraW5kOiAnRm5TZWxlY3QnLFxuICArRm5GaW5kSW5NYXA6IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRm5TZWxlY3QoaW5kZXg6IHN0cmluZywgbGlzdDogc3RyaW5nKSB7XG4gIHJldHVybiB7IGtpbmQ6ICdGblNlbGVjdCcsIEZuU2VsZWN0OiBbaW5kZXgsIGxpc3RdIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEludHJpbnNpYyhpbnB1dDogbWl4ZWQpIHtcbiAgaWYgKGlucHV0WydGbjo6RXF1YWxzJ10pIHtcbiAgICByZXR1cm4gRm5FcXVhbHMoXG4gICAgICBidWlsZEludHJpbnNpYyhpbnB1dFsnRm46OkVxdWFscyddWzBdKSxcbiAgICAgIGJ1aWxkSW50cmluc2ljKGlucHV0WydGbjo6RXF1YWxzJ11bMV0pXG4gICAgKTtcbiAgfSBlbHNlIGlmIChpbnB1dC5SZWYpIHtcbiAgICByZXR1cm4gUmVmKGlucHV0LlJlZik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG59XG4iXX0=