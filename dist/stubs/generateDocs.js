'use strict';
const Promise = require('bluebird');
const fs = Promise.promisifyAll(require('fs-extra'));
const toc = require('markdown-toc');

let doc = '';
let resourceDir = 'json/resources/';
fs.readdirAsync(resourceDir).
then(files => {
  doc += '# Resources\n';
  let filePromises = [];
  files.forEach(f => {
    filePromises.push(fs.readJsonAsync(resourceDir + f));
  });
  return filePromises;
}).
mapSeries(f => {
  let groupName = f[Object.keys(f)[0]].Name.split('::')[1];
  doc += '## ' + groupName + '\n';
  for (let item in f) {
    doc += buildBlock(f[item]);
  }
}).
then(() => {
  return fs.readJsonAsync('json/properties/properties.json');
}).
then(properties => {
  doc += '# Resource Attribute Properties\n';
  for (let item in properties) {
    doc += buildBlock(properties[item]);
  }
}).
then(() => {
  let finalTOC = toc(doc).content;
  doc = finalTOC + '\n\n' + doc;
  return fs.writeFileAsync('doc.md', doc);
}).
then(result => {
  console.log('Complete.');
}).
catch(e => {
  console.error('failed.');
  console.error(e);
});

function buildBlock(content) {
  let block = '### ' + content.Name + '\n';
  block += '#### Properties\n';
  for (let prop in content.Properties) {
    let type = content.Properties[prop].Type;
    if (type !== 'String' && type !== 'Boolean' && type !== 'Number' && type !== 'Map' && type !== 'Object' && type !== 'Date') {
      type = '[' + type + '](#' + type.toLowerCase() + ')';
      //console.log(type)
    }
    block += '##### ' + prop + '\n';
    block += content.Properties[prop].Description + '\n\n';
    block += '| Array    | Type     | Required |\n';
    block += '|----------|----------|----------|\n';
    block += '|' + content.Properties[prop].Array + '|' + type + '|' + content.Properties[prop].Required + '|\n\n';
  }
  block += '\n';
  return block;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHVicy9nZW5lcmF0ZURvY3MuanMiXSwibmFtZXMiOlsiUHJvbWlzZSIsInJlcXVpcmUiLCJmcyIsInByb21pc2lmeUFsbCIsInRvYyIsImRvYyIsInJlc291cmNlRGlyIiwicmVhZGRpckFzeW5jIiwidGhlbiIsImZpbGVzIiwiZmlsZVByb21pc2VzIiwiZm9yRWFjaCIsImYiLCJwdXNoIiwicmVhZEpzb25Bc3luYyIsIm1hcFNlcmllcyIsImdyb3VwTmFtZSIsIk9iamVjdCIsImtleXMiLCJOYW1lIiwic3BsaXQiLCJpdGVtIiwiYnVpbGRCbG9jayIsInByb3BlcnRpZXMiLCJmaW5hbFRPQyIsImNvbnRlbnQiLCJ3cml0ZUZpbGVBc3luYyIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImUiLCJlcnJvciIsImJsb2NrIiwicHJvcCIsIlByb3BlcnRpZXMiLCJ0eXBlIiwiVHlwZSIsInRvTG93ZXJDYXNlIiwiRGVzY3JpcHRpb24iLCJBcnJheSIsIlJlcXVpcmVkIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLFVBQVVDLFFBQVEsVUFBUixDQUFoQjtBQUNBLE1BQU1DLEtBQUtGLFFBQVFHLFlBQVIsQ0FBcUJGLFFBQVEsVUFBUixDQUFyQixDQUFYO0FBQ0EsTUFBTUcsTUFBTUgsUUFBUSxjQUFSLENBQVo7O0FBRUEsSUFBSUksTUFBTSxFQUFWO0FBQ0EsSUFBSUMsY0FBYyxpQkFBbEI7QUFDQUosR0FBR0ssWUFBSCxDQUFnQkQsV0FBaEI7QUFDQ0UsSUFERCxDQUNPQyxLQUFELElBQVc7QUFDZkosU0FBTyxlQUFQO0FBQ0EsTUFBSUssZUFBZSxFQUFuQjtBQUNBRCxRQUFNRSxPQUFOLENBQWVDLENBQUQsSUFBTztBQUNuQkYsaUJBQWFHLElBQWIsQ0FBa0JYLEdBQUdZLGFBQUgsQ0FBaUJSLGNBQWNNLENBQS9CLENBQWxCO0FBQ0QsR0FGRDtBQUdBLFNBQU9GLFlBQVA7QUFDRCxDQVJEO0FBU0NLLFNBVEQsQ0FTWUgsQ0FBRCxJQUFPO0FBQ2hCLE1BQUlJLFlBQVlKLEVBQUVLLE9BQU9DLElBQVAsQ0FBWU4sQ0FBWixFQUFlLENBQWYsQ0FBRixFQUFxQk8sSUFBckIsQ0FBMEJDLEtBQTFCLENBQWdDLElBQWhDLEVBQXNDLENBQXRDLENBQWhCO0FBQ0FmLFNBQU8sUUFBUVcsU0FBUixHQUFvQixJQUEzQjtBQUNBLE9BQUssSUFBSUssSUFBVCxJQUFpQlQsQ0FBakIsRUFBb0I7QUFDbEJQLFdBQU9pQixXQUFXVixFQUFFUyxJQUFGLENBQVgsQ0FBUDtBQUNEO0FBQ0YsQ0FmRDtBQWdCQ2IsSUFoQkQsQ0FnQk0sTUFBTTtBQUNWLFNBQU9OLEdBQUdZLGFBQUgsQ0FBaUIsaUNBQWpCLENBQVA7QUFDRCxDQWxCRDtBQW1CQ04sSUFuQkQsQ0FtQk9lLFVBQUQsSUFBZ0I7QUFDcEJsQixTQUFPLG1DQUFQO0FBQ0EsT0FBSyxJQUFJZ0IsSUFBVCxJQUFpQkUsVUFBakIsRUFBNkI7QUFDM0JsQixXQUFPaUIsV0FBV0MsV0FBV0YsSUFBWCxDQUFYLENBQVA7QUFDRDtBQUNGLENBeEJEO0FBeUJDYixJQXpCRCxDQXlCTSxNQUFNO0FBQ1YsTUFBSWdCLFdBQVdwQixJQUFJQyxHQUFKLEVBQVNvQixPQUF4QjtBQUNBcEIsUUFBTW1CLFdBQVcsTUFBWCxHQUFvQm5CLEdBQTFCO0FBQ0EsU0FBT0gsR0FBR3dCLGNBQUgsQ0FBa0IsUUFBbEIsRUFBNEJyQixHQUE1QixDQUFQO0FBQ0QsQ0E3QkQ7QUE4QkNHLElBOUJELENBOEJPbUIsTUFBRCxJQUFZO0FBQ2hCQyxVQUFRQyxHQUFSLENBQVksV0FBWjtBQUNELENBaENEO0FBaUNDQyxLQWpDRCxDQWlDUUMsQ0FBRCxJQUFPO0FBQ1pILFVBQVFJLEtBQVIsQ0FBYyxTQUFkO0FBQ0FKLFVBQVFJLEtBQVIsQ0FBY0QsQ0FBZDtBQUNELENBcENEOztBQXNDQSxTQUFTVCxVQUFULENBQW9CRyxPQUFwQixFQUE2QjtBQUMzQixNQUFJUSxRQUFRLFNBQVNSLFFBQVFOLElBQWpCLEdBQXdCLElBQXBDO0FBQ0FjLFdBQVMsbUJBQVQ7QUFDRSxPQUFJLElBQUlDLElBQVIsSUFBZ0JULFFBQVFVLFVBQXhCLEVBQW9DO0FBQ2xDLFFBQUlDLE9BQU9YLFFBQVFVLFVBQVIsQ0FBbUJELElBQW5CLEVBQXlCRyxJQUFwQztBQUNBLFFBQUdELFNBQVMsUUFBVCxJQUFxQkEsU0FBUyxTQUE5QixJQUEyQ0EsU0FBUyxRQUFwRCxJQUFnRUEsU0FBUyxLQUF6RSxJQUFrRkEsU0FBUyxRQUEzRixJQUF1R0EsU0FBUyxNQUFuSCxFQUEySDtBQUN6SEEsYUFBTyxNQUFNQSxJQUFOLEdBQWEsS0FBYixHQUFxQkEsS0FBS0UsV0FBTCxFQUFyQixHQUEwQyxHQUFqRDtBQUNBO0FBQ0Q7QUFDREwsYUFBUyxXQUFXQyxJQUFYLEdBQWtCLElBQTNCO0FBQ0FELGFBQVNSLFFBQVFVLFVBQVIsQ0FBbUJELElBQW5CLEVBQXlCSyxXQUF6QixHQUF1QyxNQUFoRDtBQUNBTixhQUFTLHNDQUFUO0FBQ0FBLGFBQVMsc0NBQVQ7QUFDQUEsYUFBUyxNQUFNUixRQUFRVSxVQUFSLENBQW1CRCxJQUFuQixFQUF5Qk0sS0FBL0IsR0FBdUMsR0FBdkMsR0FBNkNKLElBQTdDLEdBQW9ELEdBQXBELEdBQTBEWCxRQUFRVSxVQUFSLENBQW1CRCxJQUFuQixFQUF5Qk8sUUFBbkYsR0FBOEYsT0FBdkc7QUFDRDtBQUNIUixXQUFTLElBQVQ7QUFDQSxTQUFPQSxLQUFQO0FBQ0QiLCJmaWxlIjoiZ2VuZXJhdGVEb2NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5jb25zdCBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKVxuY29uc3QgZnMgPSBQcm9taXNlLnByb21pc2lmeUFsbChyZXF1aXJlKCdmcy1leHRyYScpKVxuY29uc3QgdG9jID0gcmVxdWlyZSgnbWFya2Rvd24tdG9jJyk7XG5cbmxldCBkb2MgPSAnJ1xubGV0IHJlc291cmNlRGlyID0gJ2pzb24vcmVzb3VyY2VzLydcbmZzLnJlYWRkaXJBc3luYyhyZXNvdXJjZURpcilcbi50aGVuKChmaWxlcykgPT4ge1xuICBkb2MgKz0gJyMgUmVzb3VyY2VzXFxuJ1xuICBsZXQgZmlsZVByb21pc2VzID0gW11cbiAgZmlsZXMuZm9yRWFjaCgoZikgPT4ge1xuICAgIGZpbGVQcm9taXNlcy5wdXNoKGZzLnJlYWRKc29uQXN5bmMocmVzb3VyY2VEaXIgKyBmKSlcbiAgfSlcbiAgcmV0dXJuIGZpbGVQcm9taXNlc1xufSlcbi5tYXBTZXJpZXMoKGYpID0+IHtcbiAgbGV0IGdyb3VwTmFtZSA9IGZbT2JqZWN0LmtleXMoZilbMF1dLk5hbWUuc3BsaXQoJzo6JylbMV1cbiAgZG9jICs9ICcjIyAnICsgZ3JvdXBOYW1lICsgJ1xcbidcbiAgZm9yIChsZXQgaXRlbSBpbiBmKSB7XG4gICAgZG9jICs9IGJ1aWxkQmxvY2soZltpdGVtXSlcbiAgfVxufSlcbi50aGVuKCgpID0+IHtcbiAgcmV0dXJuIGZzLnJlYWRKc29uQXN5bmMoJ2pzb24vcHJvcGVydGllcy9wcm9wZXJ0aWVzLmpzb24nKVxufSlcbi50aGVuKChwcm9wZXJ0aWVzKSA9PiB7XG4gIGRvYyArPSAnIyBSZXNvdXJjZSBBdHRyaWJ1dGUgUHJvcGVydGllc1xcbidcbiAgZm9yIChsZXQgaXRlbSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgZG9jICs9IGJ1aWxkQmxvY2socHJvcGVydGllc1tpdGVtXSlcbiAgfVxufSlcbi50aGVuKCgpID0+IHtcbiAgbGV0IGZpbmFsVE9DID0gdG9jKGRvYykuY29udGVudDtcbiAgZG9jID0gZmluYWxUT0MgKyAnXFxuXFxuJyArIGRvYztcbiAgcmV0dXJuIGZzLndyaXRlRmlsZUFzeW5jKCdkb2MubWQnLCBkb2MpXG59KVxuLnRoZW4oKHJlc3VsdCkgPT4ge1xuICBjb25zb2xlLmxvZygnQ29tcGxldGUuJylcbn0pXG4uY2F0Y2goKGUpID0+IHtcbiAgY29uc29sZS5lcnJvcignZmFpbGVkLicpXG4gIGNvbnNvbGUuZXJyb3IoZSlcbn0pXG5cbmZ1bmN0aW9uIGJ1aWxkQmxvY2soY29udGVudCkge1xuICBsZXQgYmxvY2sgPSAnIyMjICcgKyBjb250ZW50Lk5hbWUgKyAnXFxuJ1xuICBibG9jayArPSAnIyMjIyBQcm9wZXJ0aWVzXFxuJ1xuICAgIGZvcihsZXQgcHJvcCBpbiBjb250ZW50LlByb3BlcnRpZXMpIHtcbiAgICAgIGxldCB0eXBlID0gY29udGVudC5Qcm9wZXJ0aWVzW3Byb3BdLlR5cGVcbiAgICAgIGlmKHR5cGUgIT09ICdTdHJpbmcnICYmIHR5cGUgIT09ICdCb29sZWFuJyAmJiB0eXBlICE9PSAnTnVtYmVyJyAmJiB0eXBlICE9PSAnTWFwJyAmJiB0eXBlICE9PSAnT2JqZWN0JyAmJiB0eXBlICE9PSAnRGF0ZScpIHtcbiAgICAgICAgdHlwZSA9ICdbJyArIHR5cGUgKyAnXSgjJyArIHR5cGUudG9Mb3dlckNhc2UoKSArICcpJ1xuICAgICAgICAvL2NvbnNvbGUubG9nKHR5cGUpXG4gICAgICB9XG4gICAgICBibG9jayArPSAnIyMjIyMgJyArIHByb3AgKyAnXFxuJ1xuICAgICAgYmxvY2sgKz0gY29udGVudC5Qcm9wZXJ0aWVzW3Byb3BdLkRlc2NyaXB0aW9uICsgJ1xcblxcbidcbiAgICAgIGJsb2NrICs9ICd8IEFycmF5ICAgIHwgVHlwZSAgICAgfCBSZXF1aXJlZCB8XFxuJ1xuICAgICAgYmxvY2sgKz0gJ3wtLS0tLS0tLS0tfC0tLS0tLS0tLS18LS0tLS0tLS0tLXxcXG4nXG4gICAgICBibG9jayArPSAnfCcgKyBjb250ZW50LlByb3BlcnRpZXNbcHJvcF0uQXJyYXkgKyAnfCcgKyB0eXBlICsgJ3wnICsgY29udGVudC5Qcm9wZXJ0aWVzW3Byb3BdLlJlcXVpcmVkICsgJ3xcXG5cXG4nXG4gICAgfVxuICBibG9jayArPSAnXFxuJ1xuICByZXR1cm4gYmxvY2tcbn0iXX0=